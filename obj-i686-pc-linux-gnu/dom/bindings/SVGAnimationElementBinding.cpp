/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "ElementBinding.h"
#include "EventTargetBinding.h"
#include "NodeBinding.h"
#include "PrimitiveConversions.h"
#include "SVGAnimationElementBinding.h"
#include "SVGElementBinding.h"
#include "SVGTestsBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/FloatingPoint.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/SVGAnimationElement.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIDOMSVGStringList.h"
#include "nsSVGElement.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace SVGAnimationElementBinding {

static bool
get_targetElement(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, JS::Value* vp)
{
  nsSVGElement* result;
  result = self->GetTargetElement();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo targetElement_getterinfo = {
  (JSJitPropertyOp)get_targetElement,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
getStartTime(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  float result;
  result = self->GetStartTime(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGAnimationElement", "getStartTime");
  }
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo getStartTime_methodinfo = {
  (JSJitPropertyOp)getStartTime,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
getCurrentTime(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, unsigned argc, JS::Value* vp)
{
  float result;
  result = self->GetCurrentTime();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo getCurrentTime_methodinfo = {
  (JSJitPropertyOp)getCurrentTime,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
getSimpleDuration(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  float result;
  result = self->GetSimpleDuration(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGAnimationElement", "getSimpleDuration");
  }
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo getSimpleDuration_methodinfo = {
  (JSJitPropertyOp)getSimpleDuration,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
beginElement(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  self->BeginElement(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGAnimationElement", "beginElement");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo beginElement_methodinfo = {
  (JSJitPropertyOp)beginElement,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
beginElementAt(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGAnimationElement.beginElementAt");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  float arg0;
  if (!ValueToPrimitive<float, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  ErrorResult rv;
  self->BeginElementAt(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGAnimationElement", "beginElementAt");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo beginElementAt_methodinfo = {
  (JSJitPropertyOp)beginElementAt,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
endElement(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  self->EndElement(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGAnimationElement", "endElement");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo endElement_methodinfo = {
  (JSJitPropertyOp)endElement,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
endElementAt(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGAnimationElement.endElementAt");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  float arg0;
  if (!ValueToPrimitive<float, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  ErrorResult rv;
  self->EndElementAt(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGAnimationElement", "endElementAt");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo endElementAt_methodinfo = {
  (JSJitPropertyOp)endElementAt,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_requiredFeatures(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, JS::Value* vp)
{
  nsRefPtr<nsIDOMSVGStringList> result;
  result = self->RequiredFeatures();
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo requiredFeatures_getterinfo = {
  (JSJitPropertyOp)get_requiredFeatures,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_requiredExtensions(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, JS::Value* vp)
{
  nsRefPtr<nsIDOMSVGStringList> result;
  result = self->RequiredExtensions();
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo requiredExtensions_getterinfo = {
  (JSJitPropertyOp)get_requiredExtensions,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_systemLanguage(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, JS::Value* vp)
{
  nsRefPtr<nsIDOMSVGStringList> result;
  result = self->SystemLanguage();
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo systemLanguage_getterinfo = {
  (JSJitPropertyOp)get_systemLanguage,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
hasExtension(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGAnimationElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGAnimationElement.hasExtension");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  bool result;
  result = self->HasExtension(arg0);
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo hasExtension_methodinfo = {
  (JSJitPropertyOp)hasExtension,
  prototypes::id::SVGAnimationElement,
  PrototypeTraits<prototypes::id::SVGAnimationElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::SVGAnimationElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::SVGAnimationElement, mozilla::dom::SVGAnimationElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "SVGAnimationElement");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::SVGAnimationElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::SVGAnimationElement, mozilla::dom::SVGAnimationElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "SVGAnimationElement");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("getStartTime", genericMethod, &getStartTime_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getCurrentTime", genericMethod, &getCurrentTime_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getSimpleDuration", genericMethod, &getSimpleDuration_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("beginElement", genericMethod, &beginElement_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("beginElementAt", genericMethod, &beginElementAt_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("endElement", genericMethod, &endElement_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("endElementAt", genericMethod, &endElementAt_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("hasExtension", genericMethod, &hasExtension_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[9] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "targetElement", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &targetElement_getterinfo }, JSOP_NULLWRAPPER},
  { "requiredFeatures", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &requiredFeatures_getterinfo }, JSOP_NULLWRAPPER},
  { "requiredExtensions", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &requiredExtensions_getterinfo }, JSOP_NULLWRAPPER},
  { "systemLanguage", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &systemLanguage_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[5] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::SVGAnimationElement,
  constructors::id::SVGAnimationElement,
  &SVGElementBinding::sNativePropertyHooks
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "SVGAnimationElementPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = SVGElementBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::SVGAnimationElement],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::SVGAnimationElement],
                              nullptr,
                              &sNativeProperties,
                              nullptr,
                              "SVGAnimationElement");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

} // namespace SVGAnimationElementBinding



} // namespace dom
} // namespace mozilla
