/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "ElementBinding.h"
#include "EventTargetBinding.h"
#include "HTMLAnchorElementBinding.h"
#include "HTMLElementBinding.h"
#include "NodeBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/HTMLAnchorElement.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIDOMHTMLAnchorElement.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace HTMLAnchorElementBinding {

static bool
__stringifier(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, unsigned argc, JS::Value* vp)
{
  nsString result;
  self->Stringify(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo __stringifier_methodinfo = {
  (JSJitPropertyOp)__stringifier,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_href(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetHref(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_href(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetHref(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "href");
  }

  return true;
}


const JSJitInfo href_getterinfo = {
  (JSJitPropertyOp)get_href,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo href_setterinfo = {
  (JSJitPropertyOp)set_href,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_target(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetTarget(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_target(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetTarget(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "target");
  }

  return true;
}


const JSJitInfo target_getterinfo = {
  (JSJitPropertyOp)get_target,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo target_setterinfo = {
  (JSJitPropertyOp)set_target,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_download(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetDownload(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_download(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetDownload(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "download");
  }

  return true;
}


const JSJitInfo download_getterinfo = {
  (JSJitPropertyOp)get_download,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo download_setterinfo = {
  (JSJitPropertyOp)set_download,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_ping(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetPing(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_ping(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetPing(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "ping");
  }

  return true;
}


const JSJitInfo ping_getterinfo = {
  (JSJitPropertyOp)get_ping,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo ping_setterinfo = {
  (JSJitPropertyOp)set_ping,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_rel(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetRel(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_rel(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetRel(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "rel");
  }

  return true;
}


const JSJitInfo rel_getterinfo = {
  (JSJitPropertyOp)get_rel,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo rel_setterinfo = {
  (JSJitPropertyOp)set_rel,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_hreflang(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetHreflang(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_hreflang(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetHreflang(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "hreflang");
  }

  return true;
}


const JSJitInfo hreflang_getterinfo = {
  (JSJitPropertyOp)get_hreflang,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo hreflang_setterinfo = {
  (JSJitPropertyOp)set_hreflang,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_type(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetType(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_type(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetType(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "type");
  }

  return true;
}


const JSJitInfo type_getterinfo = {
  (JSJitPropertyOp)get_type,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo type_setterinfo = {
  (JSJitPropertyOp)set_type,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_text(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetText(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_text(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetText(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "text");
  }

  return true;
}


const JSJitInfo text_getterinfo = {
  (JSJitPropertyOp)get_text,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo text_setterinfo = {
  (JSJitPropertyOp)set_text,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_protocol(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetProtocol(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_protocol(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetProtocol(arg0);

  return true;
}


const JSJitInfo protocol_getterinfo = {
  (JSJitPropertyOp)get_protocol,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo protocol_setterinfo = {
  (JSJitPropertyOp)set_protocol,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_host(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetHost(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_host(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetHost(arg0);

  return true;
}


const JSJitInfo host_getterinfo = {
  (JSJitPropertyOp)get_host,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo host_setterinfo = {
  (JSJitPropertyOp)set_host,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_hostname(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetHostname(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_hostname(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetHostname(arg0);

  return true;
}


const JSJitInfo hostname_getterinfo = {
  (JSJitPropertyOp)get_hostname,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo hostname_setterinfo = {
  (JSJitPropertyOp)set_hostname,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_port(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetPort(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_port(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetPort(arg0);

  return true;
}


const JSJitInfo port_getterinfo = {
  (JSJitPropertyOp)get_port,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo port_setterinfo = {
  (JSJitPropertyOp)set_port,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_pathname(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetPathname(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_pathname(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetPathname(arg0);

  return true;
}


const JSJitInfo pathname_getterinfo = {
  (JSJitPropertyOp)get_pathname,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo pathname_setterinfo = {
  (JSJitPropertyOp)set_pathname,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_search(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetSearch(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_search(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetSearch(arg0);

  return true;
}


const JSJitInfo search_getterinfo = {
  (JSJitPropertyOp)get_search,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo search_setterinfo = {
  (JSJitPropertyOp)set_search,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_hash(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetHash(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_hash(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetHash(arg0);

  return true;
}


const JSJitInfo hash_getterinfo = {
  (JSJitPropertyOp)get_hash,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo hash_setterinfo = {
  (JSJitPropertyOp)set_hash,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_coords(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetCoords(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_coords(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetCoords(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "coords");
  }

  return true;
}


const JSJitInfo coords_getterinfo = {
  (JSJitPropertyOp)get_coords,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo coords_setterinfo = {
  (JSJitPropertyOp)set_coords,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_charset(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetCharset(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_charset(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetCharset(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "charset");
  }

  return true;
}


const JSJitInfo charset_getterinfo = {
  (JSJitPropertyOp)get_charset,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo charset_setterinfo = {
  (JSJitPropertyOp)set_charset,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_name(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetName(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_name(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetName(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "name");
  }

  return true;
}


const JSJitInfo name_getterinfo = {
  (JSJitPropertyOp)get_name,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo name_setterinfo = {
  (JSJitPropertyOp)set_name,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_rev(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetRev(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_rev(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetRev(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "rev");
  }

  return true;
}


const JSJitInfo rev_getterinfo = {
  (JSJitPropertyOp)get_rev,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo rev_setterinfo = {
  (JSJitPropertyOp)set_rev,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_shape(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* vp)
{
  nsString result;
  self->GetShape(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_shape(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLAnchorElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetShape(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLAnchorElement", "shape");
  }

  return true;
}


const JSJitInfo shape_getterinfo = {
  (JSJitPropertyOp)get_shape,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo shape_setterinfo = {
  (JSJitPropertyOp)set_shape,
  prototypes::id::HTMLAnchorElement,
  PrototypeTraits<prototypes::id::HTMLAnchorElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::HTMLAnchorElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::HTMLAnchorElement, mozilla::dom::HTMLAnchorElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLAnchorElement");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::HTMLAnchorElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::HTMLAnchorElement, mozilla::dom::HTMLAnchorElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLAnchorElement");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::HTMLAnchorElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::HTMLAnchorElement, mozilla::dom::HTMLAnchorElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLAnchorElement");
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "HTMLAnchorElement attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::HTMLAnchorElement>::value), "Must be an nsISupports class");
  mozilla::dom::HTMLAnchorElement* self = UnwrapDOMObject<mozilla::dom::HTMLAnchorElement>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::HTMLAnchorElement>::value), "Must be an nsISupports class");
  mozilla::dom::HTMLAnchorElement* self = UnwrapDOMObject<mozilla::dom::HTMLAnchorElement>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("toString", genericMethod, &__stringifier_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[2] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "href", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &href_getterinfo }, { (JSStrictPropertyOp)genericSetter, &href_setterinfo }},
  { "target", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &target_getterinfo }, { (JSStrictPropertyOp)genericSetter, &target_setterinfo }},
  { "download", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &download_getterinfo }, { (JSStrictPropertyOp)genericSetter, &download_setterinfo }},
  { "ping", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &ping_getterinfo }, { (JSStrictPropertyOp)genericSetter, &ping_setterinfo }},
  { "rel", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &rel_getterinfo }, { (JSStrictPropertyOp)genericSetter, &rel_setterinfo }},
  { "hreflang", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &hreflang_getterinfo }, { (JSStrictPropertyOp)genericSetter, &hreflang_setterinfo }},
  { "type", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &type_getterinfo }, { (JSStrictPropertyOp)genericSetter, &type_setterinfo }},
  { "text", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &text_getterinfo }, { (JSStrictPropertyOp)genericSetter, &text_setterinfo }},
  { "protocol", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &protocol_getterinfo }, { (JSStrictPropertyOp)genericSetter, &protocol_setterinfo }},
  { "host", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &host_getterinfo }, { (JSStrictPropertyOp)genericSetter, &host_setterinfo }},
  { "hostname", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &hostname_getterinfo }, { (JSStrictPropertyOp)genericSetter, &hostname_setterinfo }},
  { "port", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &port_getterinfo }, { (JSStrictPropertyOp)genericSetter, &port_setterinfo }},
  { "pathname", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &pathname_getterinfo }, { (JSStrictPropertyOp)genericSetter, &pathname_setterinfo }},
  { "search", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &search_getterinfo }, { (JSStrictPropertyOp)genericSetter, &search_setterinfo }},
  { "hash", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &hash_getterinfo }, { (JSStrictPropertyOp)genericSetter, &hash_setterinfo }},
  { "coords", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &coords_getterinfo }, { (JSStrictPropertyOp)genericSetter, &coords_setterinfo }},
  { "charset", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &charset_getterinfo }, { (JSStrictPropertyOp)genericSetter, &charset_setterinfo }},
  { "name", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &name_getterinfo }, { (JSStrictPropertyOp)genericSetter, &name_setterinfo }},
  { "rev", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &rev_getterinfo }, { (JSStrictPropertyOp)genericSetter, &rev_setterinfo }},
  { "shape", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &shape_getterinfo }, { (JSStrictPropertyOp)genericSetter, &shape_setterinfo }},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[21] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::HTMLAnchorElement,
  constructors::id::HTMLAnchorElement,
  &HTMLElementBinding::sNativePropertyHooks
};

static JSBool
_hasInstance(JSContext* cx, JSHandleObject obj, JSMutableHandleValue vp, JSBool* bp)
{
  if (!vp.isObject()) {
    *bp = false;
    return true;
  }

  jsval protov;
  if (!JS_GetProperty(cx, obj, "prototype", &protov))
    return false;
  if (!protov.isObject()) {
    JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_BAD_PROTOTYPE,
                         "HTMLAnchorElement");
    return false;
  }
  JSObject *objProto = &protov.toObject();

  JSObject* instance = &vp.toObject();
  JSObject* proto;
  if (!JS_GetPrototype(cx, instance, &proto))
    return false;
  while (proto) {
    if (proto == objProto) {
      *bp = true;
      return true;
    }
    if (!JS_GetPrototype(cx, proto, &proto))
      return false;
  }

  // FIXME Limit this to chrome by checking xpc::AccessCheck::isChrome(obj).
  nsISupports* native =
    nsContentUtils::XPConnect()->GetNativeOfWrapper(cx, instance);
  nsCOMPtr<nsIDOMHTMLAnchorElement> qiResult = do_QueryInterface(native);
  *bp = !!qiResult;
  return true;

}


static DOMIfaceAndProtoJSClass InterfaceObjectClass = {
  {
    "Function",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    ThrowingConstructor, /* call */
    _hasInstance, /* hasInstance */
    ThrowingConstructor, /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterface,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "HTMLAnchorElementPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = HTMLElementBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::HTMLAnchorElement],
                              &InterfaceObjectClass.mBase, nullptr, 0, &protoAndIfaceArray[constructors::id::HTMLAnchorElement],
                              &Class.mClass,
                              &sNativeProperties,
                              nullptr,
                              "HTMLAnchorElement");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "HTMLAnchorElement",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::EventTarget, prototypes::id::Node, prototypes::id::Element, prototypes::id::HTMLElement, prototypes::id::HTMLAnchorElement, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<mozilla::dom::HTMLAnchorElement>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, mozilla::dom::HTMLAnchorElement* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<mozilla::dom::HTMLAnchorElement*>(aObject) ==
             reinterpret_cast<mozilla::dom::HTMLAnchorElement*>(aObject));
  MOZ_ASSERT(static_cast<nsGenericHTMLElement*>(aObject) ==
             reinterpret_cast<nsGenericHTMLElement*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::Element*>(aObject) ==
             reinterpret_cast<mozilla::dom::Element*>(aObject));
  MOZ_ASSERT(static_cast<nsINode*>(aObject) ==
             reinterpret_cast<nsINode*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::EventTarget*>(aObject) ==
             reinterpret_cast<mozilla::dom::EventTarget*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace HTMLAnchorElementBinding



} // namespace dom
} // namespace mozilla
