/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "FileBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

bool
FilePropertyBagWorkers::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  // Per spec, we init the parent's members first
  if (!BlobPropertyBagWorkers::Init(cx, scopeObj, val)) {
    return false;
  }
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "name", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "name", &temp)) {
      return false;
    }
  }
  {
    FakeDependentString str;
    if (found) {
      if (!ConvertJSValueToString(cx, temp, &temp, eStringify, eStringify, str)) {
        return false;
      }
    } else {
      static const PRUnichar data[] = { 0 };
      str.SetData(data, ArrayLength(data) - 1);
    }
    mName = str;
  }

  return true;
}

bool
FilePropertyBagWorkers::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  // Per spec, we define the parent's members first
  if (!BlobPropertyBagWorkers::ToObject(cx, parentObject, vp)) {
    return false;
  }
  JSObject* obj = &vp->toObject();

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    nsString& currentValue = mName;
    if (!xpc::NonVoidStringToJsval(cx, currentValue, &temp)) {
      return false;
    }
    if (!JS_DefineProperty(cx, obj, "name", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}

bool FilePropertyBag::initedIds = false;
jsid FilePropertyBag::name_id = JSID_VOID;

bool
FilePropertyBag::InitIds(JSContext* cx)
{
  MOZ_ASSERT(!initedIds);
  if (!InternJSString(cx, name_id, "name")) {
    return false;
  }
  initedIds = true;
  return true;
}

bool
FilePropertyBag::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  if (cx && !initedIds && !InitIds(cx)) {
    return false;
  }
  // Per spec, we init the parent's members first
  if (!BlobPropertyBag::Init(cx, scopeObj, val)) {
    return false;
  }
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), name_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), name_id, &temp)) {
      return false;
    }
  }
  {
    FakeDependentString str;
    if (found) {
      if (!ConvertJSValueToString(cx, temp, &temp, eStringify, eStringify, str)) {
        return false;
      }
    } else {
      static const PRUnichar data[] = { 0 };
      str.SetData(data, ArrayLength(data) - 1);
    }
    mName = str;
  }

  return true;
}

bool
FilePropertyBag::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  if (!initedIds && !InitIds(cx)) {
    return false;
  }
  // Per spec, we define the parent's members first
  if (!BlobPropertyBag::ToObject(cx, parentObject, vp)) {
    return false;
  }
  JSObject* obj = &vp->toObject();

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    nsString& currentValue = mName;
    if (!xpc::NonVoidStringToJsval(cx, currentValue, &temp)) {
      return false;
    }
    if (!JS_DefinePropertyById(cx, obj, name_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}

} // namespace dom
} // namespace mozilla
