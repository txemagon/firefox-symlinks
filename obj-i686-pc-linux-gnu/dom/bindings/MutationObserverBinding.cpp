/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "MutationObserverBinding.h"
#include "NodeBinding.h"
#include "NodeListBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMMutationObserver.h"
#include "nsDOMQS.h"
#include "nsINode.h"
#include "nsINodeList.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

bool
MutationObserverInitWorkers::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "attributeFilter", &found)) {
    return false;
  }
  if (found) {
    mAttributeFilter.Construct();
    if (!JS_GetProperty(cx, &val.toObject(), "attributeFilter", &temp)) {
      return false;
    }
    if (temp.isObject()) {
      JSObject* seq = &temp.toObject();

      if (!IsArrayLike(cx, seq)) {
        ThrowErrorMessage(cx, MSG_NOT_SEQUENCE);
        return false;
      }
      uint32_t length;
      // JS_GetArrayLength actually works on all objects
      if (!JS_GetArrayLength(cx, seq, &length)) {
        return false;
      }
      Sequence< nsString > &arr = const_cast< Sequence< nsString >& >((mAttributeFilter.Value()));
      if (!arr.SetCapacity(length)) {
        JS_ReportOutOfMemory(cx);
        return false;
      }
      for (uint32_t i = 0; i < length; ++i) {
        jsval temp;
        if (!JS_GetElement(cx, seq, i, &temp)) {
          return false;
        }
        nsString& slot = *arr.AppendElement();
        {
          FakeDependentString str;
          if (!ConvertJSValueToString(cx, temp, &temp, eStringify, eStringify, str)) {
            return false;
          }
          slot = str;
        }

      }
    } else {
      ThrowErrorMessage(cx, MSG_NOT_OBJECT);
      return false;
    }
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "attributeOldValue", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "attributeOldValue", &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mAttributeOldValue)) {
      return false;
    }
  } else {
    mAttributeOldValue = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "attributes", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "attributes", &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mAttributes)) {
      return false;
    }
  } else {
    mAttributes = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "characterData", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "characterData", &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mCharacterData)) {
      return false;
    }
  } else {
    mCharacterData = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "characterDataOldValue", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "characterDataOldValue", &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mCharacterDataOldValue)) {
      return false;
    }
  } else {
    mCharacterDataOldValue = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "childList", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "childList", &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mChildList)) {
      return false;
    }
  } else {
    mChildList = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "subtree", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "subtree", &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mSubtree)) {
      return false;
    }
  } else {
    mSubtree = false;
  }
  return true;
}

bool
MutationObserverInitWorkers::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);

  if (mAttributeFilter.WasPassed()) {
    JS::Value temp;
    Sequence< nsString >& currentValue = mAttributeFilter.Value();

    uint32_t length = currentValue.Length();
    JSObject *returnArray = JS_NewArrayObject(cx, length, NULL);
    if (!returnArray) {
      return false;
    }
    // Scope for 'tmp'
    {
      jsval tmp;
      for (uint32_t i = 0; i < length; ++i) {
        // Control block to let us common up the JS_DefineElement calls when there
        // are different ways to succeed at wrapping the object.
        do {
          if (!xpc::NonVoidStringToJsval(cx, currentValue[i], &tmp)) {
            return false;
          }
          break;
        } while (0);
        if (!JS_DefineElement(cx, returnArray, i, tmp,
                              nullptr, nullptr, JSPROP_ENUMERATE)) {
          return false;
        }
      }
    }
    temp = JS::ObjectValue(*returnArray);
    if (!JS_DefineProperty(cx, obj, "attributeFilter", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mAttributeOldValue;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefineProperty(cx, obj, "attributeOldValue", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mAttributes;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefineProperty(cx, obj, "attributes", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mCharacterData;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefineProperty(cx, obj, "characterData", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mCharacterDataOldValue;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefineProperty(cx, obj, "characterDataOldValue", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mChildList;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefineProperty(cx, obj, "childList", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mSubtree;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefineProperty(cx, obj, "subtree", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}

bool MutationObserverInit::initedIds = false;
jsid MutationObserverInit::attributeFilter_id = JSID_VOID;
jsid MutationObserverInit::attributeOldValue_id = JSID_VOID;
jsid MutationObserverInit::attributes_id = JSID_VOID;
jsid MutationObserverInit::characterData_id = JSID_VOID;
jsid MutationObserverInit::characterDataOldValue_id = JSID_VOID;
jsid MutationObserverInit::childList_id = JSID_VOID;
jsid MutationObserverInit::subtree_id = JSID_VOID;

bool
MutationObserverInit::InitIds(JSContext* cx)
{
  MOZ_ASSERT(!initedIds);
  if (!InternJSString(cx, attributeFilter_id, "attributeFilter") ||
      !InternJSString(cx, attributeOldValue_id, "attributeOldValue") ||
      !InternJSString(cx, attributes_id, "attributes") ||
      !InternJSString(cx, characterData_id, "characterData") ||
      !InternJSString(cx, characterDataOldValue_id, "characterDataOldValue") ||
      !InternJSString(cx, childList_id, "childList") ||
      !InternJSString(cx, subtree_id, "subtree")) {
    return false;
  }
  initedIds = true;
  return true;
}

bool
MutationObserverInit::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  if (cx && !initedIds && !InitIds(cx)) {
    return false;
  }
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), attributeFilter_id, &found)) {
    return false;
  }
  if (found) {
    mAttributeFilter.Construct();
    if (!JS_GetPropertyById(cx, &val.toObject(), attributeFilter_id, &temp)) {
      return false;
    }
    if (temp.isObject()) {
      JSObject* seq = &temp.toObject();

      if (!IsArrayLike(cx, seq)) {
        ThrowErrorMessage(cx, MSG_NOT_SEQUENCE);
        return false;
      }
      uint32_t length;
      // JS_GetArrayLength actually works on all objects
      if (!JS_GetArrayLength(cx, seq, &length)) {
        return false;
      }
      Sequence< nsString > &arr = const_cast< Sequence< nsString >& >((mAttributeFilter.Value()));
      if (!arr.SetCapacity(length)) {
        JS_ReportOutOfMemory(cx);
        return false;
      }
      for (uint32_t i = 0; i < length; ++i) {
        jsval temp;
        if (!JS_GetElement(cx, seq, i, &temp)) {
          return false;
        }
        nsString& slot = *arr.AppendElement();
        {
          FakeDependentString str;
          if (!ConvertJSValueToString(cx, temp, &temp, eStringify, eStringify, str)) {
            return false;
          }
          slot = str;
        }

      }
    } else {
      ThrowErrorMessage(cx, MSG_NOT_OBJECT);
      return false;
    }
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), attributeOldValue_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), attributeOldValue_id, &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mAttributeOldValue)) {
      return false;
    }
  } else {
    mAttributeOldValue = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), attributes_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), attributes_id, &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mAttributes)) {
      return false;
    }
  } else {
    mAttributes = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), characterData_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), characterData_id, &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mCharacterData)) {
      return false;
    }
  } else {
    mCharacterData = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), characterDataOldValue_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), characterDataOldValue_id, &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mCharacterDataOldValue)) {
      return false;
    }
  } else {
    mCharacterDataOldValue = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), childList_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), childList_id, &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mChildList)) {
      return false;
    }
  } else {
    mChildList = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), subtree_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), subtree_id, &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mSubtree)) {
      return false;
    }
  } else {
    mSubtree = false;
  }
  return true;
}

bool
MutationObserverInit::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  if (!initedIds && !InitIds(cx)) {
    return false;
  }
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);

  if (mAttributeFilter.WasPassed()) {
    JS::Value temp;
    Sequence< nsString >& currentValue = mAttributeFilter.Value();

    uint32_t length = currentValue.Length();
    JSObject *returnArray = JS_NewArrayObject(cx, length, NULL);
    if (!returnArray) {
      return false;
    }
    // Scope for 'tmp'
    {
      jsval tmp;
      for (uint32_t i = 0; i < length; ++i) {
        // Control block to let us common up the JS_DefineElement calls when there
        // are different ways to succeed at wrapping the object.
        do {
          if (!xpc::NonVoidStringToJsval(cx, currentValue[i], &tmp)) {
            return false;
          }
          break;
        } while (0);
        if (!JS_DefineElement(cx, returnArray, i, tmp,
                              nullptr, nullptr, JSPROP_ENUMERATE)) {
          return false;
        }
      }
    }
    temp = JS::ObjectValue(*returnArray);
    if (!JS_DefinePropertyById(cx, obj, attributeFilter_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mAttributeOldValue;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefinePropertyById(cx, obj, attributeOldValue_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mAttributes;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefinePropertyById(cx, obj, attributes_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mCharacterData;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefinePropertyById(cx, obj, characterData_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mCharacterDataOldValue;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefinePropertyById(cx, obj, characterDataOldValue_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mChildList;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefinePropertyById(cx, obj, childList_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mSubtree;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefinePropertyById(cx, obj, subtree_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}





void
MutationCallback::Call(JSContext* cx, JSObject* aThisObj, const Sequence< OwningNonNull<nsDOMMutationRecord> >& mutations, nsDOMMutationObserver& observer, ErrorResult& aRv)
{
  JS::Value rval = JSVAL_VOID;
  JS::AutoValueVector argv(cx);
  if (!argv.resize(2)) {
    aRv.Throw(NS_ERROR_OUT_OF_MEMORY);
    return;
  }
  unsigned argc = 2;

  do {
    if (!WrapNewBindingObject(cx, mCallable, observer, &argv[1])) {
      MOZ_ASSERT(JS_IsExceptionPending(cx));
      aRv.Throw(NS_ERROR_UNEXPECTED);
      return;
    }
    break;
  } while (0);

  do {

    uint32_t length = mutations.Length();
    JSObject *returnArray = JS_NewArrayObject(cx, length, NULL);
    if (!returnArray) {
      aRv.Throw(NS_ERROR_UNEXPECTED);
      return;
    }
    // Scope for 'tmp'
    {
      jsval tmp;
      for (uint32_t i = 0; i < length; ++i) {
        // Control block to let us common up the JS_DefineElement calls when there
        // are different ways to succeed at wrapping the object.
        do {
          if (!WrapNewBindingObject(cx, returnArray, mutations[i], &tmp)) {
            MOZ_ASSERT(JS_IsExceptionPending(cx));
            aRv.Throw(NS_ERROR_UNEXPECTED);
            return;
          }
          break;
        } while (0);
        if (!JS_DefineElement(cx, returnArray, i, tmp,
                              nullptr, nullptr, JSPROP_ENUMERATE)) {
          aRv.Throw(NS_ERROR_UNEXPECTED);
          return;
        }
      }
    }
    argv[0] = JS::ObjectValue(*returnArray);
    break;
  } while (0);

  if (!JS_CallFunctionValue(cx, aThisObj, JS::ObjectValue(*mCallable),
                            argc, argv.begin(), &rval)) {
    aRv.Throw(NS_ERROR_UNEXPECTED);
    return;
  }


}



namespace MutationObserverBinding {

static bool
observe(JSContext* cx, JSHandleObject obj, nsDOMMutationObserver* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "MutationObserver.observe");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  NonNull<nsINode> arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        nsINode *objPtr;
        xpc_qsSelfRef objRef;
        JS::Value val = JS::ObjectValue(*&argv[0].toObject());
        nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
        if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
            return false;
        }
        // We should be castable!
        MOZ_ASSERT(!objRef.ptr);
        // We should have an object, too!
        MOZ_ASSERT(objPtr);
        arg0 = objPtr;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  const MutationObserverInit arg1;
  if (!const_cast<MutationObserverInit&>(arg1).Init(cx, obj, (1 < argc) ? argv[1] : JSVAL_NULL)) {
    return false;
  }
  ErrorResult rv;
  self->Observe(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "MutationObserver", "observe");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo observe_methodinfo = {
  (JSJitPropertyOp)observe,
  prototypes::id::MutationObserver,
  PrototypeTraits<prototypes::id::MutationObserver>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
disconnect(JSContext* cx, JSHandleObject obj, nsDOMMutationObserver* self, unsigned argc, JS::Value* vp)
{
  self->Disconnect();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo disconnect_methodinfo = {
  (JSJitPropertyOp)disconnect,
  prototypes::id::MutationObserver,
  PrototypeTraits<prototypes::id::MutationObserver>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
takeRecords(JSContext* cx, JSHandleObject obj, nsDOMMutationObserver* self, unsigned argc, JS::Value* vp)
{
  nsTArray< nsRefPtr<nsDOMMutationRecord> > result;
  self->TakeRecords(result);

  uint32_t length = result.Length();
  JSObject *returnArray = JS_NewArrayObject(cx, length, NULL);
  if (!returnArray) {
    return false;
  }
  // Scope for 'tmp'
  {
    jsval tmp;
    for (uint32_t i = 0; i < length; ++i) {
      // Control block to let us common up the JS_DefineElement calls when there
      // are different ways to succeed at wrapping the object.
      do {
        if (!WrapNewBindingObject(cx, returnArray, result[i], &tmp)) {
          MOZ_ASSERT(JS_IsExceptionPending(cx));
          return false;
        }
        break;
      } while (0);
      if (!JS_DefineElement(cx, returnArray, i, tmp,
                            nullptr, nullptr, JSPROP_ENUMERATE)) {
        return false;
      }
    }
  }
  *vp = JS::ObjectValue(*returnArray);
  return true;
}


const JSJitInfo takeRecords_methodinfo = {
  (JSJitPropertyOp)takeRecords,
  prototypes::id::MutationObserver,
  PrototypeTraits<prototypes::id::MutationObserver>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsDOMMutationObserver* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::MutationObserver, nsDOMMutationObserver>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "MutationObserver");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsDOMMutationObserver>::value), "Must be an nsISupports class");
  nsDOMMutationObserver* self = UnwrapDOMObject<nsDOMMutationObserver>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsDOMMutationObserver>::value), "Must be an nsISupports class");
  nsDOMMutationObserver* self = UnwrapDOMObject<nsDOMMutationObserver>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("observe", genericMethod, &observe_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("disconnect", genericMethod, &disconnect_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("takeRecords", genericMethod, &takeRecords_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[4] = { JSID_VOID };

static JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNINFO("QueryInterface", QueryInterface, nullptr, 1, 0),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sChromeMethods[] = {
  { true, &sChromeMethods_specs[0] },
  { false, NULL }
};

static jsid sChromeMethods_ids[2] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};

static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeMethods, sChromeMethods_ids, sChromeMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, &sChromeOnlyNativeProperties },
  prototypes::id::MutationObserver,
  constructors::id::MutationObserver,
  NULL
};

static JSBool
_constructor(JSContext* cx, unsigned argc, JS::Value* vp)
{

  JSObject* obj = JS_GetGlobalForObject(cx, JSVAL_TO_OBJECT(JS_CALLEE(cx, vp)));

  nsISupports* global;
  xpc_qsSelfRef globalRef;
  {
    nsresult rv;
    JS::Value val = OBJECT_TO_JSVAL(obj);
    rv = xpc_qsUnwrapArg<nsISupports>(cx, val, &global, &globalRef.ptr, &val);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_GLOBAL_NOT_NATIVE);
    }
  }

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "MutationObserver.constructor");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  OwningNonNull<MutationCallback> arg0;
  if (argv[0].isObject()) {
    if (JS_ObjectIsCallable(cx, &argv[0].toObject())) {
      bool inited;
      arg0 = new MutationCallback(cx, obj, &argv[0].toObject(), &inited);
      if (!inited) {
        return false;
      }
    } else {
      ThrowErrorMessage(cx, MSG_NOT_CALLABLE);
      return false;
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  nsRefPtr<nsDOMMutationObserver> result;
  result = nsDOMMutationObserver::Constructor(global, arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "MutationObserver", "constructor");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

JSNativeHolder _constructor_holder = {
  _constructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "MutationObserverPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sChromeMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sChromeMethods, sChromeMethods_ids) ||
       !InitIds(aCx, sMethods, sMethods_ids))) {
    sChromeMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::MutationObserver],
                              nullptr, &_constructor_holder, 1, &protoAndIfaceArray[constructors::id::MutationObserver],
                              &Class.mClass,
                              &sNativeProperties,
                              xpc::AccessCheck::isChrome(aGlobal) ? &sChromeOnlyNativeProperties : nullptr,
                              "MutationObserver");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "MutationObserver",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::MutationObserver, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<nsDOMMutationObserver>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, nsDOMMutationObserver* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<nsDOMMutationObserver*>(aObject) ==
             reinterpret_cast<nsDOMMutationObserver*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace MutationObserverBinding



namespace MutationRecordBinding {

static bool
get_type(JSContext* cx, JSHandleObject obj, nsDOMMutationRecord* self, JS::Value* vp)
{
  nsString result;
  self->GetType(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo type_getterinfo = {
  (JSJitPropertyOp)get_type,
  prototypes::id::MutationRecord,
  PrototypeTraits<prototypes::id::MutationRecord>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_target(JSContext* cx, JSHandleObject obj, nsDOMMutationRecord* self, JS::Value* vp)
{
  nsINode* result;
  result = self->GetTarget();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo target_getterinfo = {
  (JSJitPropertyOp)get_target,
  prototypes::id::MutationRecord,
  PrototypeTraits<prototypes::id::MutationRecord>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_addedNodes(JSContext* cx, JSHandleObject obj, nsDOMMutationRecord* self, JS::Value* vp)
{
  nsINodeList* result;
  result = self->AddedNodes();
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo addedNodes_getterinfo = {
  (JSJitPropertyOp)get_addedNodes,
  prototypes::id::MutationRecord,
  PrototypeTraits<prototypes::id::MutationRecord>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_removedNodes(JSContext* cx, JSHandleObject obj, nsDOMMutationRecord* self, JS::Value* vp)
{
  nsINodeList* result;
  result = self->RemovedNodes();
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo removedNodes_getterinfo = {
  (JSJitPropertyOp)get_removedNodes,
  prototypes::id::MutationRecord,
  PrototypeTraits<prototypes::id::MutationRecord>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_previousSibling(JSContext* cx, JSHandleObject obj, nsDOMMutationRecord* self, JS::Value* vp)
{
  nsINode* result;
  result = self->GetPreviousSibling();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo previousSibling_getterinfo = {
  (JSJitPropertyOp)get_previousSibling,
  prototypes::id::MutationRecord,
  PrototypeTraits<prototypes::id::MutationRecord>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_nextSibling(JSContext* cx, JSHandleObject obj, nsDOMMutationRecord* self, JS::Value* vp)
{
  nsINode* result;
  result = self->GetNextSibling();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo nextSibling_getterinfo = {
  (JSJitPropertyOp)get_nextSibling,
  prototypes::id::MutationRecord,
  PrototypeTraits<prototypes::id::MutationRecord>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_attributeName(JSContext* cx, JSHandleObject obj, nsDOMMutationRecord* self, JS::Value* vp)
{
  nsString result;
  self->GetAttributeName(result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo attributeName_getterinfo = {
  (JSJitPropertyOp)get_attributeName,
  prototypes::id::MutationRecord,
  PrototypeTraits<prototypes::id::MutationRecord>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_attributeNamespace(JSContext* cx, JSHandleObject obj, nsDOMMutationRecord* self, JS::Value* vp)
{
  nsString result;
  self->GetAttributeNamespace(result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo attributeNamespace_getterinfo = {
  (JSJitPropertyOp)get_attributeNamespace,
  prototypes::id::MutationRecord,
  PrototypeTraits<prototypes::id::MutationRecord>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_oldValue(JSContext* cx, JSHandleObject obj, nsDOMMutationRecord* self, JS::Value* vp)
{
  nsString result;
  self->GetOldValue(result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo oldValue_getterinfo = {
  (JSJitPropertyOp)get_oldValue,
  prototypes::id::MutationRecord,
  PrototypeTraits<prototypes::id::MutationRecord>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsDOMMutationRecord* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::MutationRecord, nsDOMMutationRecord>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "MutationRecord");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsDOMMutationRecord>::value), "Must be an nsISupports class");
  nsDOMMutationRecord* self = UnwrapDOMObject<nsDOMMutationRecord>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsDOMMutationRecord>::value), "Must be an nsISupports class");
  nsDOMMutationRecord* self = UnwrapDOMObject<nsDOMMutationRecord>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNINFO("QueryInterface", QueryInterface, nullptr, 1, 0),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sChromeMethods[] = {
  { true, &sChromeMethods_specs[0] },
  { false, NULL }
};

static jsid sChromeMethods_ids[2] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "type", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &type_getterinfo }, JSOP_NULLWRAPPER},
  { "target", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &target_getterinfo }, JSOP_NULLWRAPPER},
  { "addedNodes", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &addedNodes_getterinfo }, JSOP_NULLWRAPPER},
  { "removedNodes", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &removedNodes_getterinfo }, JSOP_NULLWRAPPER},
  { "previousSibling", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &previousSibling_getterinfo }, JSOP_NULLWRAPPER},
  { "nextSibling", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &nextSibling_getterinfo }, JSOP_NULLWRAPPER},
  { "attributeName", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &attributeName_getterinfo }, JSOP_NULLWRAPPER},
  { "attributeNamespace", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &attributeNamespace_getterinfo }, JSOP_NULLWRAPPER},
  { "oldValue", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &oldValue_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[10] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};

static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeMethods, sChromeMethods_ids, sChromeMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, &sChromeOnlyNativeProperties },
  prototypes::id::MutationRecord,
  constructors::id::MutationRecord,
  NULL
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "MutationRecordPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sChromeMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sChromeMethods, sChromeMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids))) {
    sChromeMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::MutationRecord],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::MutationRecord],
                              &Class.mClass,
                              &sNativeProperties,
                              xpc::AccessCheck::isChrome(aGlobal) ? &sChromeOnlyNativeProperties : nullptr,
                              "MutationRecord");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "MutationRecord",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::MutationRecord, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<nsDOMMutationRecord>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, nsDOMMutationRecord* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<nsDOMMutationRecord*>(aObject) ==
             reinterpret_cast<nsDOMMutationRecord*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace MutationRecordBinding



} // namespace dom
} // namespace mozilla
