/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "DOMParserBinding.h"
#include "DocumentBinding.h"
#include "ElementBinding.h"
#include "EventTargetBinding.h"
#include "NodeBinding.h"
#include "NodeListBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/Element.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIDOMNamedNodeMap.h"
#include "nsIDOMNode.h"
#include "nsIDOMUserDataHandler.h"
#include "nsIDocument.h"
#include "nsINode.h"
#include "nsINodeList.h"
#include "nsIPrincipal.h"
#include "nsIURI.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace NodeBinding {

static bool
get_nodeType(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  uint16_t result;
  result = self->NodeType();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo nodeType_getterinfo = {
  (JSJitPropertyOp)get_nodeType,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_nodeName(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsString result;
  self->GetNodeName(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo nodeName_getterinfo = {
  (JSJitPropertyOp)get_nodeName,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_baseURI(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsString result;
  self->GetBaseURI(result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo baseURI_getterinfo = {
  (JSJitPropertyOp)get_baseURI,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_ownerDocument(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsIDocument* result;
  result = self->GetOwnerDocument();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo ownerDocument_getterinfo = {
  (JSJitPropertyOp)get_ownerDocument,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_parentNode(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsINode* result;
  result = self->GetParentNode();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo parentNode_getterinfo = {
  (JSJitPropertyOp)get_parentNode,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_parentElement(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  mozilla::dom::Element* result;
  result = self->GetParentElement();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo parentElement_getterinfo = {
  (JSJitPropertyOp)get_parentElement,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
hasChildNodes(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{
  bool result;
  result = self->HasChildNodes();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo hasChildNodes_methodinfo = {
  (JSJitPropertyOp)hasChildNodes,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_childNodes(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsINodeList* result;
  result = self->ChildNodes();
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo childNodes_getterinfo = {
  (JSJitPropertyOp)get_childNodes,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_firstChild(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsINode* result;
  result = self->GetFirstChild();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo firstChild_getterinfo = {
  (JSJitPropertyOp)get_firstChild,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_lastChild(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsINode* result;
  result = self->GetLastChild();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo lastChild_getterinfo = {
  (JSJitPropertyOp)get_lastChild,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_previousSibling(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsINode* result;
  result = self->GetPreviousSibling();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo previousSibling_getterinfo = {
  (JSJitPropertyOp)get_previousSibling,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_nextSibling(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsINode* result;
  result = self->GetNextSibling();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo nextSibling_getterinfo = {
  (JSJitPropertyOp)get_nextSibling,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_nodeValue(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsString result;
  self->GetNodeValue(result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_nodeValue(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetNodeValue(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Node", "nodeValue");
  }

  return true;
}


const JSJitInfo nodeValue_getterinfo = {
  (JSJitPropertyOp)get_nodeValue,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo nodeValue_setterinfo = {
  (JSJitPropertyOp)set_nodeValue,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_textContent(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsString result;
  self->GetTextContent(result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_textContent(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetTextContent(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Node", "textContent");
  }

  return true;
}


const JSJitInfo textContent_getterinfo = {
  (JSJitPropertyOp)get_textContent,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo textContent_setterinfo = {
  (JSJitPropertyOp)set_textContent,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
insertBefore(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.insertBefore");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  NonNull<nsINode> arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        nsINode *objPtr;
        xpc_qsSelfRef objRef;
        JS::Value val = JS::ObjectValue(*&argv[0].toObject());
        nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
        if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
            return false;
        }
        // We should be castable!
        MOZ_ASSERT(!objRef.ptr);
        // We should have an object, too!
        MOZ_ASSERT(objPtr);
        arg0 = objPtr;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  nsINode* arg1;
  if (argv[1].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, &argv[1].toObject(), arg1);
      if (NS_FAILED(rv)) {
        nsINode *objPtr;
        xpc_qsSelfRef objRef;
        JS::Value val = JS::ObjectValue(*&argv[1].toObject());
        nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
        if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
            return false;
        }
        // We should be castable!
        MOZ_ASSERT(!objRef.ptr);
        // We should have an object, too!
        MOZ_ASSERT(objPtr);
        arg1 = objPtr;
      }
    }
  } else if (argv[1].isNullOrUndefined()) {
    arg1 = NULL;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  nsINode* result;
  result = self->InsertBefore(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Node", "insertBefore");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo insertBefore_methodinfo = {
  (JSJitPropertyOp)insertBefore,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
appendChild(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.appendChild");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  NonNull<nsINode> arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        nsINode *objPtr;
        xpc_qsSelfRef objRef;
        JS::Value val = JS::ObjectValue(*&argv[0].toObject());
        nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
        if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
            return false;
        }
        // We should be castable!
        MOZ_ASSERT(!objRef.ptr);
        // We should have an object, too!
        MOZ_ASSERT(objPtr);
        arg0 = objPtr;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  nsINode* result;
  result = self->AppendChild(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Node", "appendChild");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo appendChild_methodinfo = {
  (JSJitPropertyOp)appendChild,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
replaceChild(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.replaceChild");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  NonNull<nsINode> arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        nsINode *objPtr;
        xpc_qsSelfRef objRef;
        JS::Value val = JS::ObjectValue(*&argv[0].toObject());
        nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
        if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
            return false;
        }
        // We should be castable!
        MOZ_ASSERT(!objRef.ptr);
        // We should have an object, too!
        MOZ_ASSERT(objPtr);
        arg0 = objPtr;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  NonNull<nsINode> arg1;
  if (argv[1].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, &argv[1].toObject(), arg1);
      if (NS_FAILED(rv)) {
        nsINode *objPtr;
        xpc_qsSelfRef objRef;
        JS::Value val = JS::ObjectValue(*&argv[1].toObject());
        nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
        if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
            return false;
        }
        // We should be castable!
        MOZ_ASSERT(!objRef.ptr);
        // We should have an object, too!
        MOZ_ASSERT(objPtr);
        arg1 = objPtr;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  nsINode* result;
  result = self->ReplaceChild(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Node", "replaceChild");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo replaceChild_methodinfo = {
  (JSJitPropertyOp)replaceChild,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
removeChild(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.removeChild");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  NonNull<nsINode> arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        nsINode *objPtr;
        xpc_qsSelfRef objRef;
        JS::Value val = JS::ObjectValue(*&argv[0].toObject());
        nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
        if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
            return false;
        }
        // We should be castable!
        MOZ_ASSERT(!objRef.ptr);
        // We should have an object, too!
        MOZ_ASSERT(objPtr);
        arg0 = objPtr;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  nsINode* result;
  result = self->RemoveChild(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Node", "removeChild");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo removeChild_methodinfo = {
  (JSJitPropertyOp)removeChild,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
normalize(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{
  self->Normalize();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo normalize_methodinfo = {
  (JSJitPropertyOp)normalize,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
cloneNode(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  JS::Value* argv = JS_ARGV(cx, vp);

  bool arg0;
  if (0 < argc) {
    if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
      return false;
    }
  } else {
    arg0 = true;
  }
  ErrorResult rv;
  nsRefPtr<nsINode> result;
  result = self->CloneNode(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Node", "cloneNode");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo cloneNode_methodinfo = {
  (JSJitPropertyOp)cloneNode,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
isEqualNode(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.isEqualNode");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsINode* arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        nsINode *objPtr;
        xpc_qsSelfRef objRef;
        JS::Value val = JS::ObjectValue(*&argv[0].toObject());
        nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
        if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
            return false;
        }
        // We should be castable!
        MOZ_ASSERT(!objRef.ptr);
        // We should have an object, too!
        MOZ_ASSERT(objPtr);
        arg0 = objPtr;
      }
    }
  } else if (argv[0].isNullOrUndefined()) {
    arg0 = NULL;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  bool result;
  result = self->IsEqualNode(arg0);
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo isEqualNode_methodinfo = {
  (JSJitPropertyOp)isEqualNode,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
compareDocumentPosition(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.compareDocumentPosition");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  NonNull<nsINode> arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        nsINode *objPtr;
        xpc_qsSelfRef objRef;
        JS::Value val = JS::ObjectValue(*&argv[0].toObject());
        nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
        if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
            return false;
        }
        // We should be castable!
        MOZ_ASSERT(!objRef.ptr);
        // We should have an object, too!
        MOZ_ASSERT(objPtr);
        arg0 = objPtr;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  uint16_t result;
  result = self->CompareDocumentPosition(arg0);
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo compareDocumentPosition_methodinfo = {
  (JSJitPropertyOp)compareDocumentPosition,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
contains(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.contains");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsINode* arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        nsINode *objPtr;
        xpc_qsSelfRef objRef;
        JS::Value val = JS::ObjectValue(*&argv[0].toObject());
        nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
        if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
            return false;
        }
        // We should be castable!
        MOZ_ASSERT(!objRef.ptr);
        // We should have an object, too!
        MOZ_ASSERT(objPtr);
        arg0 = objPtr;
      }
    }
  } else if (argv[0].isNullOrUndefined()) {
    arg0 = NULL;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  bool result;
  result = self->Contains(arg0);
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo contains_methodinfo = {
  (JSJitPropertyOp)contains,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
lookupPrefix(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.lookupPrefix");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  nsString result;
  self->LookupPrefix(arg0, result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo lookupPrefix_methodinfo = {
  (JSJitPropertyOp)lookupPrefix,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
lookupNamespaceURI(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.lookupNamespaceURI");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  nsString result;
  self->LookupNamespaceURI(arg0, result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo lookupNamespaceURI_methodinfo = {
  (JSJitPropertyOp)lookupNamespaceURI,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
isDefaultNamespace(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.isDefaultNamespace");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  bool result;
  result = self->IsDefaultNamespace(arg0);
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo isDefaultNamespace_methodinfo = {
  (JSJitPropertyOp)isDefaultNamespace,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_attributes(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsIDOMNamedNodeMap* result;
  result = self->GetAttributes();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo attributes_getterinfo = {
  (JSJitPropertyOp)get_attributes,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_namespaceURI(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  ErrorResult rv;
  nsString result;
  self->GetNamespaceURI(result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Node", "namespaceURI");
  }
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo namespaceURI_getterinfo = {
  (JSJitPropertyOp)get_namespaceURI,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_prefix(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsString result;
  self->GetPrefix(result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo prefix_getterinfo = {
  (JSJitPropertyOp)get_prefix,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_localName(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsString result;
  self->GetLocalName(result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo localName_getterinfo = {
  (JSJitPropertyOp)get_localName,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
isSupported(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.isSupported");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  bool result;
  result = self->IsSupported(arg0, arg1);
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo isSupported_methodinfo = {
  (JSJitPropertyOp)isSupported,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
hasAttributes(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{
  bool result;
  result = self->HasAttributes();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo hasAttributes_methodinfo = {
  (JSJitPropertyOp)hasAttributes,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
setUserData(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 3) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.setUserData");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  JS::Value arg1;
  arg1 = argv[1];
  nsRefPtr<nsIDOMUserDataHandler> arg2_holder;
  nsIDOMUserDataHandler* arg2;
  if (argv[2].isObject()) {
    jsval tmpVal = argv[2];
    nsIDOMUserDataHandler* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMUserDataHandler>(cx, argv[2], &tmp, static_cast<nsIDOMUserDataHandler**>(getter_AddRefs(arg2_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "UserDataHandler");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[2] && !arg2_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg2_holder = tmp;
    }
    arg2 = tmp;
  } else if (argv[2].isNullOrUndefined()) {
    arg2 = NULL;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  JS::Value result;
  result = self->SetUserData(cx, arg0, arg1, arg2, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Node", "setUserData");
  }
  *vp = result;
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo setUserData_methodinfo = {
  (JSJitPropertyOp)setUserData,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
getUserData(JSContext* cx, JSHandleObject obj, nsINode* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node.getUserData");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  JS::Value result;
  result = self->GetUserData(cx, arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Node", "getUserData");
  }
  *vp = result;
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getUserData_methodinfo = {
  (JSJitPropertyOp)getUserData,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_nodePrincipal(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsRefPtr<nsIPrincipal> result;
  result = self->NodePrincipal();
  if (!WrapObject(cx, obj, result, &NS_GET_IID(nsIPrincipal), vp)) {
    return false;
  }
  return true;
}


const JSJitInfo nodePrincipal_getterinfo = {
  (JSJitPropertyOp)get_nodePrincipal,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_baseURIObject(JSContext* cx, JSHandleObject obj, nsINode* self, JS::Value* vp)
{
  nsRefPtr<nsIURI> result;
  result = self->GetBaseURIObject();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapObject(cx, obj, result, &NS_GET_IID(nsIURI), vp)) {
    return false;
  }
  return true;
}


const JSJitInfo baseURIObject_getterinfo = {
  (JSJitPropertyOp)get_baseURIObject,
  prototypes::id::Node,
  PrototypeTraits<prototypes::id::Node>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsINode* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, obj, self);
    if (NS_FAILED(rv)) {
      nsINode *objPtr;
      xpc_qsSelfRef objRef;
      JS::Value val = JS::ObjectValue(*obj);
      nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
      if (NS_FAILED(rv)) {
          return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
      }
      // We should be castable!
      MOZ_ASSERT(!objRef.ptr);
      // We should have an object, too!
      MOZ_ASSERT(objPtr);
      self = objPtr;
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsINode* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, obj, self);
    if (NS_FAILED(rv)) {
      nsINode *objPtr;
      xpc_qsSelfRef objRef;
      JS::Value val = JS::ObjectValue(*obj);
      nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
      if (NS_FAILED(rv)) {
          return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
      }
      // We should be castable!
      MOZ_ASSERT(!objRef.ptr);
      // We should have an object, too!
      MOZ_ASSERT(objPtr);
      self = objPtr;
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsINode* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::Node, nsINode>(cx, obj, self);
    if (NS_FAILED(rv)) {
      nsINode *objPtr;
      xpc_qsSelfRef objRef;
      JS::Value val = JS::ObjectValue(*obj);
      nsresult rv = xpc_qsUnwrapArg<nsINode>(cx, val, &objPtr, &objRef.ptr, &val);
      if (NS_FAILED(rv)) {
          return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Node");
      }
      // We should be castable!
      MOZ_ASSERT(!objRef.ptr);
      // We should have an object, too!
      MOZ_ASSERT(objPtr);
      self = objPtr;
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Node attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("hasChildNodes", genericMethod, &hasChildNodes_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("insertBefore", genericMethod, &insertBefore_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("appendChild", genericMethod, &appendChild_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("replaceChild", genericMethod, &replaceChild_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("removeChild", genericMethod, &removeChild_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("normalize", genericMethod, &normalize_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("cloneNode", genericMethod, &cloneNode_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("isEqualNode", genericMethod, &isEqualNode_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("compareDocumentPosition", genericMethod, &compareDocumentPosition_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("contains", genericMethod, &contains_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("lookupPrefix", genericMethod, &lookupPrefix_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("lookupNamespaceURI", genericMethod, &lookupNamespaceURI_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("isDefaultNamespace", genericMethod, &isDefaultNamespace_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("isSupported", genericMethod, &isSupported_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("hasAttributes", genericMethod, &hasAttributes_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("setUserData", genericMethod, &setUserData_methodinfo, 3, JSPROP_ENUMERATE),
  JS_FNINFO("getUserData", genericMethod, &getUserData_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[18] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "nodeType", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &nodeType_getterinfo }, JSOP_NULLWRAPPER},
  { "nodeName", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &nodeName_getterinfo }, JSOP_NULLWRAPPER},
  { "baseURI", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &baseURI_getterinfo }, JSOP_NULLWRAPPER},
  { "ownerDocument", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &ownerDocument_getterinfo }, JSOP_NULLWRAPPER},
  { "parentNode", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &parentNode_getterinfo }, JSOP_NULLWRAPPER},
  { "parentElement", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &parentElement_getterinfo }, JSOP_NULLWRAPPER},
  { "childNodes", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &childNodes_getterinfo }, JSOP_NULLWRAPPER},
  { "firstChild", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &firstChild_getterinfo }, JSOP_NULLWRAPPER},
  { "lastChild", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &lastChild_getterinfo }, JSOP_NULLWRAPPER},
  { "previousSibling", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &previousSibling_getterinfo }, JSOP_NULLWRAPPER},
  { "nextSibling", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &nextSibling_getterinfo }, JSOP_NULLWRAPPER},
  { "nodeValue", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &nodeValue_getterinfo }, { (JSStrictPropertyOp)genericSetter, &nodeValue_setterinfo }},
  { "textContent", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &textContent_getterinfo }, { (JSStrictPropertyOp)genericSetter, &textContent_setterinfo }},
  { "attributes", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &attributes_getterinfo }, JSOP_NULLWRAPPER},
  { "namespaceURI", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &namespaceURI_getterinfo }, JSOP_NULLWRAPPER},
  { "prefix", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &prefix_getterinfo }, JSOP_NULLWRAPPER},
  { "localName", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &localName_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[18] = { JSID_VOID };

static JSPropertySpec sChromeAttributes_specs[] = {
  { "nodePrincipal", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &nodePrincipal_getterinfo }, JSOP_NULLWRAPPER},
  { "baseURIObject", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &baseURIObject_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sChromeAttributes[] = {
  { true, &sChromeAttributes_specs[0] },
  { false, NULL }
};

static jsid sChromeAttributes_ids[3] = { JSID_VOID };

static ConstantSpec sConstants_specs[] = {
  { "ELEMENT_NODE", INT_TO_JSVAL(1) },
  { "ATTRIBUTE_NODE", INT_TO_JSVAL(2) },
  { "TEXT_NODE", INT_TO_JSVAL(3) },
  { "CDATA_SECTION_NODE", INT_TO_JSVAL(4) },
  { "ENTITY_REFERENCE_NODE", INT_TO_JSVAL(5) },
  { "ENTITY_NODE", INT_TO_JSVAL(6) },
  { "PROCESSING_INSTRUCTION_NODE", INT_TO_JSVAL(7) },
  { "COMMENT_NODE", INT_TO_JSVAL(8) },
  { "DOCUMENT_NODE", INT_TO_JSVAL(9) },
  { "DOCUMENT_TYPE_NODE", INT_TO_JSVAL(10) },
  { "DOCUMENT_FRAGMENT_NODE", INT_TO_JSVAL(11) },
  { "NOTATION_NODE", INT_TO_JSVAL(12) },
  { "DOCUMENT_POSITION_DISCONNECTED", INT_TO_JSVAL(1) },
  { "DOCUMENT_POSITION_PRECEDING", INT_TO_JSVAL(2) },
  { "DOCUMENT_POSITION_FOLLOWING", INT_TO_JSVAL(4) },
  { "DOCUMENT_POSITION_CONTAINS", INT_TO_JSVAL(8) },
  { "DOCUMENT_POSITION_CONTAINED_BY", INT_TO_JSVAL(16) },
  { "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", INT_TO_JSVAL(32) },
  { 0, JSVAL_VOID }
};

static Prefable<ConstantSpec> sConstants[] = {
  { true, &sConstants_specs[0] },
  { false, NULL }
};

static jsid sConstants_ids[19] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  sConstants, sConstants_ids, sConstants_specs
};

static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeAttributes, sChromeAttributes_ids, sChromeAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, &sChromeOnlyNativeProperties },
  prototypes::id::Node,
  constructors::id::Node,
  &EventTargetBinding::sNativePropertyHooks
};

static JSBool
_hasInstance(JSContext* cx, JSHandleObject obj, JSMutableHandleValue vp, JSBool* bp)
{
  if (!vp.isObject()) {
    *bp = false;
    return true;
  }

  jsval protov;
  if (!JS_GetProperty(cx, obj, "prototype", &protov))
    return false;
  if (!protov.isObject()) {
    JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_BAD_PROTOTYPE,
                         "Node");
    return false;
  }
  JSObject *objProto = &protov.toObject();

  JSObject* instance = &vp.toObject();
  JSObject* proto;
  if (!JS_GetPrototype(cx, instance, &proto))
    return false;
  while (proto) {
    if (proto == objProto) {
      *bp = true;
      return true;
    }
    if (!JS_GetPrototype(cx, proto, &proto))
      return false;
  }

  // FIXME Limit this to chrome by checking xpc::AccessCheck::isChrome(obj).
  nsISupports* native =
    nsContentUtils::XPConnect()->GetNativeOfWrapper(cx, instance);
  nsCOMPtr<nsIDOMNode> qiResult = do_QueryInterface(native);
  *bp = !!qiResult;
  return true;

}


static DOMIfaceAndProtoJSClass InterfaceObjectClass = {
  {
    "Function",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    ThrowingConstructor, /* call */
    _hasInstance, /* hasInstance */
    ThrowingConstructor, /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterface,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "NodePrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = EventTargetBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sChromeAttributes, sChromeAttributes_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids) ||
       !InitIds(aCx, sConstants, sConstants_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::Node],
                              &InterfaceObjectClass.mBase, nullptr, 0, &protoAndIfaceArray[constructors::id::Node],
                              nullptr,
                              &sNativeProperties,
                              xpc::AccessCheck::isChrome(aGlobal) ? &sChromeOnlyNativeProperties : nullptr,
                              "Node");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

} // namespace NodeBinding



} // namespace dom
} // namespace mozilla
