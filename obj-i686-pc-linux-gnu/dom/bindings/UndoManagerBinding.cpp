/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "DOMTransactionBinding.h"
#include "PrimitiveConversions.h"
#include "UndoManagerBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/UndoManager.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIUndoManagerTransaction.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace UndoManagerBinding {

static bool
transact(JSContext* cx, JSHandleObject obj, mozilla::dom::UndoManager* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "UndoManager.transact");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  OwningNonNull<nsIUndoManagerTransaction> arg0;
  if (argv[0].isObject()) {
    if (!IsConvertibleToCallbackInterface(cx, &argv[0].toObject())) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "DOMTransaction");
        return false;
    }

    nsresult rv;
    XPCCallContext ccx(JS_CALLER, cx);
    if (!ccx.IsValid()) {
      rv = NS_ERROR_XPC_BAD_CONVERT_JS;
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "DOMTransaction");
      return false;
    }

    const nsIID& iid = NS_GET_IID(nsIUndoManagerTransaction);
    nsRefPtr<nsXPCWrappedJS> wrappedJS;
    rv = nsXPCWrappedJS::GetNewOrUsed(ccx, &argv[0].toObject(), iid,
                                      NULL, getter_AddRefs(wrappedJS));
    if (NS_FAILED(rv) || !wrappedJS) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "DOMTransaction");
      return false;
    }

    // Use a temp nsCOMPtr for the null-check, because arg0 might be
    // OwningNonNull, not an nsCOMPtr.
    nsCOMPtr<nsIUndoManagerTransaction> tmp = do_QueryObject(wrappedJS.get());
    if (!tmp) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "DOMTransaction");
      return false;
    }
    arg0 = tmp.forget();
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  bool arg1;
  if (!ValueToPrimitive<bool, eDefault>(cx, argv[1], &arg1)) {
    return false;
  }
  ErrorResult rv;
  self->Transact(cx, arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "UndoManager", "transact");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo transact_methodinfo = {
  (JSJitPropertyOp)transact,
  prototypes::id::UndoManager,
  PrototypeTraits<prototypes::id::UndoManager>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
undo(JSContext* cx, JSHandleObject obj, mozilla::dom::UndoManager* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  self->Undo(cx, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "UndoManager", "undo");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo undo_methodinfo = {
  (JSJitPropertyOp)undo,
  prototypes::id::UndoManager,
  PrototypeTraits<prototypes::id::UndoManager>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
redo(JSContext* cx, JSHandleObject obj, mozilla::dom::UndoManager* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  self->Redo(cx, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "UndoManager", "redo");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo redo_methodinfo = {
  (JSJitPropertyOp)redo,
  prototypes::id::UndoManager,
  PrototypeTraits<prototypes::id::UndoManager>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
item(JSContext* cx, JSHandleObject obj, mozilla::dom::UndoManager* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "UndoManager.item");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  uint32_t arg0;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  Nullable< nsTArray< nsRefPtr<nsIUndoManagerTransaction> > > result;
  self->Item(arg0, result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "UndoManager", "item");
  }

  if (result.IsNull()) {
    *vp = JSVAL_NULL;
    return true;
  }

  uint32_t length = result.Value().Length();
  JSObject *returnArray = JS_NewArrayObject(cx, length, NULL);
  if (!returnArray) {
    return false;
  }
  // Scope for 'tmp'
  {
    jsval tmp;
    for (uint32_t i = 0; i < length; ++i) {
      // Control block to let us common up the JS_DefineElement calls when there
      // are different ways to succeed at wrapping the object.
      do {
        if (!WrapCallbackInterface(cx, returnArray, result.Value()[i], &tmp)) {
          return false;
        }
        break;
      } while (0);
      if (!JS_DefineElement(cx, returnArray, i, tmp,
                            nullptr, nullptr, JSPROP_ENUMERATE)) {
        return false;
      }
    }
  }
  *vp = JS::ObjectValue(*returnArray);
  return true;
}


const JSJitInfo item_methodinfo = {
  (JSJitPropertyOp)item,
  prototypes::id::UndoManager,
  PrototypeTraits<prototypes::id::UndoManager>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_length(JSContext* cx, JSHandleObject obj, mozilla::dom::UndoManager* self, JS::Value* vp)
{
  ErrorResult rv;
  uint32_t result;
  result = self->GetLength(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "UndoManager", "length");
  }
  *vp = UINT_TO_JSVAL(result);
  return true;
}


const JSJitInfo length_getterinfo = {
  (JSJitPropertyOp)get_length,
  prototypes::id::UndoManager,
  PrototypeTraits<prototypes::id::UndoManager>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_position(JSContext* cx, JSHandleObject obj, mozilla::dom::UndoManager* self, JS::Value* vp)
{
  ErrorResult rv;
  uint32_t result;
  result = self->GetPosition(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "UndoManager", "position");
  }
  *vp = UINT_TO_JSVAL(result);
  return true;
}


const JSJitInfo position_getterinfo = {
  (JSJitPropertyOp)get_position,
  prototypes::id::UndoManager,
  PrototypeTraits<prototypes::id::UndoManager>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
clearUndo(JSContext* cx, JSHandleObject obj, mozilla::dom::UndoManager* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  self->ClearUndo(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "UndoManager", "clearUndo");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo clearUndo_methodinfo = {
  (JSJitPropertyOp)clearUndo,
  prototypes::id::UndoManager,
  PrototypeTraits<prototypes::id::UndoManager>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
clearRedo(JSContext* cx, JSHandleObject obj, mozilla::dom::UndoManager* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  self->ClearRedo(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "UndoManager", "clearRedo");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo clearRedo_methodinfo = {
  (JSJitPropertyOp)clearRedo,
  prototypes::id::UndoManager,
  PrototypeTraits<prototypes::id::UndoManager>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::UndoManager* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::UndoManager, mozilla::dom::UndoManager>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "UndoManager");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::UndoManager* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::UndoManager, mozilla::dom::UndoManager>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "UndoManager");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::UndoManager>::value), "Must be an nsISupports class");
  mozilla::dom::UndoManager* self = UnwrapDOMObject<mozilla::dom::UndoManager>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::UndoManager>::value), "Must be an nsISupports class");
  mozilla::dom::UndoManager* self = UnwrapDOMObject<mozilla::dom::UndoManager>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("transact", genericMethod, &transact_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("undo", genericMethod, &undo_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("redo", genericMethod, &redo_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("item", genericMethod, &item_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("clearUndo", genericMethod, &clearUndo_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("clearRedo", genericMethod, &clearRedo_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[7] = { JSID_VOID };

static JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNINFO("QueryInterface", QueryInterface, nullptr, 1, 0),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sChromeMethods[] = {
  { true, &sChromeMethods_specs[0] },
  { false, NULL }
};

static jsid sChromeMethods_ids[2] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "length", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &length_getterinfo }, JSOP_NULLWRAPPER},
  { "position", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &position_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[3] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};

static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeMethods, sChromeMethods_ids, sChromeMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, &sChromeOnlyNativeProperties },
  prototypes::id::UndoManager,
  constructors::id::UndoManager,
  NULL
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "UndoManagerPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sChromeMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sChromeMethods, sChromeMethods_ids) ||
       !InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids))) {
    sChromeMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::UndoManager],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::UndoManager],
                              &Class.mClass,
                              &sNativeProperties,
                              xpc::AccessCheck::isChrome(aGlobal) ? &sChromeOnlyNativeProperties : nullptr,
                              "UndoManager");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

bool
PrefEnabled()
{
  return mozilla::dom::UndoManager::PrefEnabled();
}


DOMJSClass Class = {
  { "UndoManager",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::UndoManager, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<mozilla::dom::UndoManager>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, mozilla::dom::UndoManager* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<mozilla::dom::UndoManager*>(aObject) ==
             reinterpret_cast<mozilla::dom::UndoManager*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace UndoManagerBinding



} // namespace dom
} // namespace mozilla
