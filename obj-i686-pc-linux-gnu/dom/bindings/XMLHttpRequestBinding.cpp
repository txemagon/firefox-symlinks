/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "DOMParserBinding.h"
#include "DocumentBinding.h"
#include "EventHandlerBinding.h"
#include "EventTargetBinding.h"
#include "FileReaderSyncBinding.h"
#include "FormDataBinding.h"
#include "HTMLImageElementBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XMLHttpRequestBinding.h"
#include "XMLHttpRequestEventTargetBinding.h"
#include "XMLHttpRequestUploadBinding.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "jsapi.h"
#include "jsfriendapi.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/TypedArray.h"
#include "mozilla/dom/workers/bindings/XMLHttpRequest.h"
#include "mozilla/dom/workers/bindings/XMLHttpRequestUpload.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsFormData.h"
#include "nsIChannel.h"
#include "nsIDOMFile.h"
#include "nsIDocument.h"
#include "nsIInputStream.h"
#include "nsXMLHttpRequest.h"
#include "xpcjsid.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace XMLHttpRequestResponseTypeValues {

  const EnumEntry strings[10] = {
    {"", 0},
    {"arraybuffer", 11},
    {"blob", 4},
    {"document", 8},
    {"json", 4},
    {"text", 4},
    {"moz-chunked-text", 16},
    {"moz-chunked-arraybuffer", 23},
    {"moz-blob", 8},
    { NULL, 0 }
  };
} // namespace XMLHttpRequestResponseTypeValues


bool
MozXMLHttpRequestParametersWorkers::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "mozAnon", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "mozAnon", &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mMozAnon)) {
      return false;
    }
  } else {
    mMozAnon = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "mozSystem", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "mozSystem", &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mMozSystem)) {
      return false;
    }
  } else {
    mMozSystem = false;
  }
  return true;
}

bool
MozXMLHttpRequestParametersWorkers::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mMozAnon;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefineProperty(cx, obj, "mozAnon", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mMozSystem;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefineProperty(cx, obj, "mozSystem", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}

bool MozXMLHttpRequestParameters::initedIds = false;
jsid MozXMLHttpRequestParameters::mozAnon_id = JSID_VOID;
jsid MozXMLHttpRequestParameters::mozSystem_id = JSID_VOID;

bool
MozXMLHttpRequestParameters::InitIds(JSContext* cx)
{
  MOZ_ASSERT(!initedIds);
  if (!InternJSString(cx, mozAnon_id, "mozAnon") ||
      !InternJSString(cx, mozSystem_id, "mozSystem")) {
    return false;
  }
  initedIds = true;
  return true;
}

bool
MozXMLHttpRequestParameters::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  if (cx && !initedIds && !InitIds(cx)) {
    return false;
  }
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), mozAnon_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), mozAnon_id, &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mMozAnon)) {
      return false;
    }
  } else {
    mMozAnon = false;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), mozSystem_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), mozSystem_id, &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mMozSystem)) {
      return false;
    }
  } else {
    mMozSystem = false;
  }
  return true;
}

bool
MozXMLHttpRequestParameters::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  if (!initedIds && !InitIds(cx)) {
    return false;
  }
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mMozAnon;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefinePropertyById(cx, obj, mozAnon_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mMozSystem;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefinePropertyById(cx, obj, mozSystem_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}

namespace XMLHttpRequestBinding {

static bool
get_onreadystatechange(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnreadystatechange();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onreadystatechange(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnreadystatechange(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "onreadystatechange");
  }

  return true;
}


const JSJitInfo onreadystatechange_getterinfo = {
  (JSJitPropertyOp)get_onreadystatechange,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onreadystatechange_setterinfo = {
  (JSJitPropertyOp)set_onreadystatechange,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_readyState(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  uint16_t result;
  result = self->ReadyState();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo readyState_getterinfo = {
  (JSJitPropertyOp)get_readyState,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
open(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.open");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  bool arg2;
  if (2 < argc) {
    if (!ValueToPrimitive<bool, eDefault>(cx, argv[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = true;
  }
  FakeDependentString arg3_holder;
  const Optional<nsAString> arg3;
  if (3 < argc) {
    if (!ConvertJSValueToString(cx, argv[3], &argv[3], eNull, eNull, arg3_holder)) {
      return false;
    }
    const_cast<Optional<nsAString>&>(arg3) = &arg3_holder;
  }
  FakeDependentString arg4_holder;
  const Optional<nsAString> arg4;
  if (4 < argc) {
    if (!ConvertJSValueToString(cx, argv[4], &argv[4], eNull, eNull, arg4_holder)) {
      return false;
    }
    const_cast<Optional<nsAString>&>(arg4) = &arg4_holder;
  }
  ErrorResult rv;
  self->Open(arg0, arg1, arg2, arg3, arg4, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "open");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo open_methodinfo = {
  (JSJitPropertyOp)open,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
setRequestHeader(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.setRequestHeader");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  ErrorResult rv;
  self->SetRequestHeader(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "setRequestHeader");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo setRequestHeader_methodinfo = {
  (JSJitPropertyOp)setRequestHeader,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_timeout(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  uint32_t result;
  result = self->Timeout();
  *vp = UINT_TO_JSVAL(result);
  return true;
}

static bool
set_timeout(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* argv)
{
  uint32_t arg0;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  self->SetTimeout(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "timeout");
  }

  return true;
}


const JSJitInfo timeout_getterinfo = {
  (JSJitPropertyOp)get_timeout,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo timeout_setterinfo = {
  (JSJitPropertyOp)set_timeout,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_withCredentials(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  bool result;
  result = self->WithCredentials();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}

static bool
set_withCredentials(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* argv)
{
  bool arg0;
  if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  self->SetWithCredentials(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "withCredentials");
  }

  return true;
}


const JSJitInfo withCredentials_getterinfo = {
  (JSJitPropertyOp)get_withCredentials,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo withCredentials_setterinfo = {
  (JSJitPropertyOp)set_withCredentials,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_upload(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  nsXMLHttpRequestUpload* result;
  result = self->Upload();
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo upload_getterinfo = {
  (JSJitPropertyOp)get_upload,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
send(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  unsigned argcount = NS_MIN(argc, 1u);
  switch (argcount) {
    case 0: {
      ErrorResult rv;
      self->Send(rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "send");
      }
      *vp = JSVAL_VOID;
      return true;
      break;
    }
    case 1: {
      JS::Value* argv_start = JS_ARGV(cx, vp);
      if (argv_start[0].isObject()) {
        do {
          Maybe<ArrayBuffer> arg0_holder;
          NonNull<ArrayBuffer> arg0;
          arg0_holder.construct(&argv_start[0].toObject());
          if (!arg0_holder.ref().inited()) {
            break;
          }
          arg0 = arg0_holder.addr();
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          Maybe<ArrayBufferView> arg0_holder;
          NonNull<ArrayBufferView> arg0;
          arg0_holder.construct(&argv_start[0].toObject());
          if (!arg0_holder.ref().inited()) {
            break;
          }
          arg0 = arg0_holder.addr();
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          nsRefPtr<nsIDOMBlob> arg0_holder;
          nsIDOMBlob* arg0;
          jsval tmpVal = argv_start[0];
          nsIDOMBlob* tmp;
          if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMBlob>(cx, argv_start[0], &tmp, static_cast<nsIDOMBlob**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
            break;
          }
          MOZ_ASSERT(tmp);
          arg0 = tmp;
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          NonNull<nsIDocument> arg0;
          {
            nsresult rv = UnwrapObject<prototypes::id::Document, nsIDocument>(cx, &argv_start[0].toObject(), arg0);
            if (NS_FAILED(rv)) {
              nsIDocument *objPtr;
              xpc_qsSelfRef objRef;
              JS::Value val = JS::ObjectValue(*&argv_start[0].toObject());
              nsresult rv = xpc_qsUnwrapArg<nsIDocument>(cx, val, &objPtr, &objRef.ptr, &val);
              if (NS_FAILED(rv)) {
                  break;
              }
              // We should be castable!
              MOZ_ASSERT(!objRef.ptr);
              // We should have an object, too!
              MOZ_ASSERT(objPtr);
              arg0 = objPtr;
            }
          }
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          NonNull<nsFormData> arg0;
          {
            nsresult rv = UnwrapObject<prototypes::id::FormData, nsFormData>(cx, &argv_start[0].toObject(), arg0);
            if (NS_FAILED(rv)) {
              break;
            }
          }
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          nsRefPtr<nsIInputStream> arg0_holder;
          nsIInputStream* arg0;
          jsval tmpVal = argv_start[0];
          nsIInputStream* tmp;
          if (NS_FAILED(xpc_qsUnwrapArg<nsIInputStream>(cx, argv_start[0], &tmp, static_cast<nsIInputStream**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
            break;
          }
          MOZ_ASSERT(tmp);
          arg0 = tmp;
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
      }

      JS::Value* argv = JS_ARGV(cx, vp);

      FakeDependentString arg0_holder;
      const NonNull<nsAString> arg0;
      if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
      ErrorResult rv;
      self->Send(arg0, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "send");
      }
      *vp = JSVAL_VOID;
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.send");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}


const JSJitInfo send_methodinfo = {
  (JSJitPropertyOp)send,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
abort(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, unsigned argc, JS::Value* vp)
{
  self->Abort();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo abort_methodinfo = {
  (JSJitPropertyOp)abort,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_status(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  uint16_t result;
  result = self->Status();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo status_getterinfo = {
  (JSJitPropertyOp)get_status,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_statusText(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  nsString result;
  self->GetStatusText(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo statusText_getterinfo = {
  (JSJitPropertyOp)get_statusText,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
getResponseHeader(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.getResponseHeader");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  nsString result;
  self->GetResponseHeader(arg0, result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "getResponseHeader");
  }
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getResponseHeader_methodinfo = {
  (JSJitPropertyOp)getResponseHeader,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
getAllResponseHeaders(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, unsigned argc, JS::Value* vp)
{
  nsString result;
  self->GetAllResponseHeaders(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getAllResponseHeaders_methodinfo = {
  (JSJitPropertyOp)getAllResponseHeaders,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
overrideMimeType(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.overrideMimeType");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->OverrideMimeType(arg0);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo overrideMimeType_methodinfo = {
  (JSJitPropertyOp)overrideMimeType,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_responseType(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  XMLHttpRequestResponseType result;
  result = self->ResponseType();
  MOZ_ASSERT(uint32_t(result) < ArrayLength(XMLHttpRequestResponseTypeValues::strings));
  JSString* result_str = JS_NewStringCopyN(cx, XMLHttpRequestResponseTypeValues::strings[uint32_t(result)].value, XMLHttpRequestResponseTypeValues::strings[uint32_t(result)].length);
  if (!result_str) {
  return false;
  }
  *vp = JS::StringValue(result_str);
  return true;
}

static bool
set_responseType(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* argv)
{
  XMLHttpRequestResponseType arg0;
  {
    bool ok;
    int index = FindEnumStringIndex<false>(cx, argv[0], XMLHttpRequestResponseTypeValues::strings, "XMLHttpRequestResponseType", &ok);
    if (!ok) {
      return false;
    }
    if (index < 0) {
      return true;
    }
    arg0 = static_cast<XMLHttpRequestResponseType>(index);
  }
  ErrorResult rv;
  self->SetResponseType(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "responseType");
  }

  return true;
}


const JSJitInfo responseType_getterinfo = {
  (JSJitPropertyOp)get_responseType,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo responseType_setterinfo = {
  (JSJitPropertyOp)set_responseType,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_response(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  ErrorResult rv;
  JS::Value result;
  result = self->GetResponse(cx, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "response");
  }
  *vp = result;
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo response_getterinfo = {
  (JSJitPropertyOp)get_response,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_responseText(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  ErrorResult rv;
  nsString result;
  self->GetResponseText(result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "responseText");
  }
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo responseText_getterinfo = {
  (JSJitPropertyOp)get_responseText,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_responseXML(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  ErrorResult rv;
  nsIDocument* result;
  result = self->GetResponseXML(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "responseXML");
  }
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo responseXML_getterinfo = {
  (JSJitPropertyOp)get_responseXML,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_multipart(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  bool result;
  result = self->Multipart();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}

static bool
set_multipart(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* argv)
{
  bool arg0;
  if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  self->SetMultipart(arg0);

  return true;
}


const JSJitInfo multipart_getterinfo = {
  (JSJitPropertyOp)get_multipart,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo multipart_setterinfo = {
  (JSJitPropertyOp)set_multipart,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozBackgroundRequest(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  bool result;
  result = self->MozBackgroundRequest();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}

static bool
set_mozBackgroundRequest(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* argv)
{
  bool arg0;
  if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  self->SetMozBackgroundRequest(arg0);

  return true;
}


const JSJitInfo mozBackgroundRequest_getterinfo = {
  (JSJitPropertyOp)get_mozBackgroundRequest,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo mozBackgroundRequest_setterinfo = {
  (JSJitPropertyOp)set_mozBackgroundRequest,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_channel(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  nsRefPtr<nsIChannel> result;
  result = self->GetChannel();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapObject(cx, obj, result, &NS_GET_IID(nsIChannel), vp)) {
    return false;
  }
  return true;
}


const JSJitInfo channel_getterinfo = {
  (JSJitPropertyOp)get_channel,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
sendAsBinary(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.sendAsBinary");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SendAsBinary(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "sendAsBinary");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo sendAsBinary_methodinfo = {
  (JSJitPropertyOp)sendAsBinary,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
getInterface(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.getInterface");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<nsIJSID> arg0_holder;
  nsIJSID* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    nsIJSID* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<nsIJSID>(cx, argv[0], &tmp, static_cast<nsIJSID**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "IID");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  JS::Value result;
  result = self->GetInterface(cx, arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "getInterface");
  }
  *vp = result;
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getInterface_methodinfo = {
  (JSJitPropertyOp)getInterface,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozAnon(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  bool result;
  result = self->MozAnon();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo mozAnon_getterinfo = {
  (JSJitPropertyOp)get_mozAnon,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozSystem(JSContext* cx, JSHandleObject obj, nsXMLHttpRequest* self, JS::Value* vp)
{
  bool result;
  result = self->MozSystem();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo mozSystem_getterinfo = {
  (JSJitPropertyOp)get_mozSystem,
  prototypes::id::XMLHttpRequest,
  PrototypeTraits<prototypes::id::XMLHttpRequest>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsXMLHttpRequest* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::XMLHttpRequest, nsXMLHttpRequest>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "XMLHttpRequest");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsXMLHttpRequest* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::XMLHttpRequest, nsXMLHttpRequest>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "XMLHttpRequest");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsXMLHttpRequest* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::XMLHttpRequest, nsXMLHttpRequest>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "XMLHttpRequest");
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsXMLHttpRequest>::value), "Must be an nsISupports class");
  nsXMLHttpRequest* self = UnwrapDOMObject<nsXMLHttpRequest>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsXMLHttpRequest>::value), "Must be an nsISupports class");
  nsXMLHttpRequest* self = UnwrapDOMObject<nsXMLHttpRequest>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("open", genericMethod, &open_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("setRequestHeader", genericMethod, &setRequestHeader_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("send", genericMethod, &send_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("abort", genericMethod, &abort_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getResponseHeader", genericMethod, &getResponseHeader_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getAllResponseHeaders", genericMethod, &getAllResponseHeaders_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("overrideMimeType", genericMethod, &overrideMimeType_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("sendAsBinary", genericMethod, &sendAsBinary_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[9] = { JSID_VOID };

static JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNINFO("getInterface", genericMethod, &getInterface_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sChromeMethods[] = {
  { true, &sChromeMethods_specs[0] },
  { false, NULL }
};

static jsid sChromeMethods_ids[2] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "onreadystatechange", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &onreadystatechange_getterinfo }, { (JSStrictPropertyOp)genericSetter, &onreadystatechange_setterinfo }},
  { "readyState", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &readyState_getterinfo }, JSOP_NULLWRAPPER},
  { "timeout", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &timeout_getterinfo }, { (JSStrictPropertyOp)genericSetter, &timeout_setterinfo }},
  { "withCredentials", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &withCredentials_getterinfo }, { (JSStrictPropertyOp)genericSetter, &withCredentials_setterinfo }},
  { "upload", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &upload_getterinfo }, JSOP_NULLWRAPPER},
  { "status", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &status_getterinfo }, JSOP_NULLWRAPPER},
  { "statusText", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &statusText_getterinfo }, JSOP_NULLWRAPPER},
  { "responseType", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &responseType_getterinfo }, { (JSStrictPropertyOp)genericSetter, &responseType_setterinfo }},
  { "response", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &response_getterinfo }, JSOP_NULLWRAPPER},
  { "responseText", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &responseText_getterinfo }, JSOP_NULLWRAPPER},
  { "responseXML", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &responseXML_getterinfo }, JSOP_NULLWRAPPER},
  { "multipart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &multipart_getterinfo }, { (JSStrictPropertyOp)genericSetter, &multipart_setterinfo }},
  { "mozBackgroundRequest", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozBackgroundRequest_getterinfo }, { (JSStrictPropertyOp)genericSetter, &mozBackgroundRequest_setterinfo }},
  { "mozAnon", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozAnon_getterinfo }, JSOP_NULLWRAPPER},
  { "mozSystem", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozSystem_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[16] = { JSID_VOID };

static JSPropertySpec sChromeAttributes_specs[] = {
  { "channel", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &channel_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sChromeAttributes[] = {
  { true, &sChromeAttributes_specs[0] },
  { false, NULL }
};

static jsid sChromeAttributes_ids[2] = { JSID_VOID };

static ConstantSpec sConstants_specs[] = {
  { "UNSENT", INT_TO_JSVAL(0) },
  { "OPENED", INT_TO_JSVAL(1) },
  { "HEADERS_RECEIVED", INT_TO_JSVAL(2) },
  { "LOADING", INT_TO_JSVAL(3) },
  { "DONE", INT_TO_JSVAL(4) },
  { 0, JSVAL_VOID }
};

static Prefable<ConstantSpec> sConstants[] = {
  { true, &sConstants_specs[0] },
  { false, NULL }
};

static jsid sConstants_ids[6] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  sConstants, sConstants_ids, sConstants_specs
};

static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeMethods, sChromeMethods_ids, sChromeMethods_specs,
  sChromeAttributes, sChromeAttributes_ids, sChromeAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, &sChromeOnlyNativeProperties },
  prototypes::id::XMLHttpRequest,
  constructors::id::XMLHttpRequest,
  &XMLHttpRequestEventTargetBinding::sNativePropertyHooks
};

static JSBool
_constructor(JSContext* cx, unsigned argc, JS::Value* vp)
{

  JSObject* obj = JS_GetGlobalForObject(cx, JSVAL_TO_OBJECT(JS_CALLEE(cx, vp)));

  nsISupports* global;
  xpc_qsSelfRef globalRef;
  {
    nsresult rv;
    JS::Value val = OBJECT_TO_JSVAL(obj);
    rv = xpc_qsUnwrapArg<nsISupports>(cx, val, &global, &globalRef.ptr, &val);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_GLOBAL_NOT_NATIVE);
    }
  }

  unsigned argcount = NS_MIN(argc, 1u);
  switch (argcount) {
    case 0: {

      JS::Value* argv = JS_ARGV(cx, vp);

      const MozXMLHttpRequestParameters arg0;
      if (!const_cast<MozXMLHttpRequestParameters&>(arg0).Init(cx, obj, (0 < argc) ? argv[0] : JSVAL_NULL)) {
        return false;
      }
      ErrorResult rv;
      nsRefPtr<nsXMLHttpRequest> result;
      result = nsXMLHttpRequest::Constructor(cx, global, arg0, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "constructor");
      }
      if (!WrapNewBindingObject(cx, obj, result, vp)) {
        MOZ_ASSERT(JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    case 1: {
      JS::Value* argv_start = JS_ARGV(cx, vp);
      if (argv_start[0].isNullOrUndefined()) {
        const MozXMLHttpRequestParameters arg0;
        if (!const_cast<MozXMLHttpRequestParameters&>(arg0).Init(cx, obj, argv_start[0])) {
          return false;
        }
        ErrorResult rv;
        nsRefPtr<nsXMLHttpRequest> result;
        result = nsXMLHttpRequest::Constructor(cx, global, arg0, rv);
        if (rv.Failed()) {
          return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "constructor");
        }
        if (!WrapNewBindingObject(cx, obj, result, vp)) {
          MOZ_ASSERT(JS_IsExceptionPending(cx));
          return false;
        }
        return true;
      }
      if (argv_start[0].isObject()) {
        do {
          const MozXMLHttpRequestParameters arg0;
          if (!IsConvertibleToDictionary(cx, &argv_start[0].toObject())) {
            break;
          }

          if (!const_cast<MozXMLHttpRequestParameters&>(arg0).Init(cx, obj, argv_start[0])) {
            return false;
          }
          ErrorResult rv;
          nsRefPtr<nsXMLHttpRequest> result;
          result = nsXMLHttpRequest::Constructor(cx, global, arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "constructor");
          }
          if (!WrapNewBindingObject(cx, obj, result, vp)) {
            MOZ_ASSERT(JS_IsExceptionPending(cx));
            return false;
          }
          return true;
        } while (0);
      }

      JS::Value* argv = JS_ARGV(cx, vp);

      FakeDependentString arg0_holder;
      const NonNull<nsAString> arg0;
      if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
      ErrorResult rv;
      nsRefPtr<nsXMLHttpRequest> result;
      result = nsXMLHttpRequest::Constructor(cx, global, arg0, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "XMLHttpRequest", "constructor");
      }
      if (!WrapNewBindingObject(cx, obj, result, vp)) {
        MOZ_ASSERT(JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.constructor");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}

JSNativeHolder _constructor_holder = {
  _constructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "XMLHttpRequestPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = XMLHttpRequestEventTargetBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sChromeMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sChromeMethods, sChromeMethods_ids) ||
       !InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sChromeAttributes, sChromeAttributes_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids) ||
       !InitIds(aCx, sConstants, sConstants_ids))) {
    sChromeMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::XMLHttpRequest],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::XMLHttpRequest],
                              &Class.mClass,
                              &sNativeProperties,
                              xpc::AccessCheck::isChrome(aGlobal) ? &sChromeOnlyNativeProperties : nullptr,
                              "XMLHttpRequest");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "XMLHttpRequest",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::EventTarget, prototypes::id::XMLHttpRequestEventTarget, prototypes::id::XMLHttpRequest, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<nsXMLHttpRequest>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, nsXMLHttpRequest* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<nsXMLHttpRequest*>(aObject) ==
             reinterpret_cast<nsXMLHttpRequest*>(aObject));
  MOZ_ASSERT(static_cast<nsXHREventTarget*>(aObject) ==
             reinterpret_cast<nsXHREventTarget*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::EventTarget*>(aObject) ==
             reinterpret_cast<mozilla::dom::EventTarget*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace XMLHttpRequestBinding



namespace XMLHttpRequestBinding_workers {

static bool
get_onreadystatechange(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  ErrorResult rv;
  JSObject* result;
  result = self->GetOnreadystatechange(cx, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "onreadystatechange");
  }
  *vp = JS::ObjectOrNullValue(result);
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}

static bool
set_onreadystatechange(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* argv)
{
  JSObject* arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    arg0 = &argv[0].toObject();
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnreadystatechange(cx, arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "onreadystatechange");
  }

  return true;
}


const JSJitInfo onreadystatechange_getterinfo = {
  (JSJitPropertyOp)get_onreadystatechange,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onreadystatechange_setterinfo = {
  (JSJitPropertyOp)set_onreadystatechange,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_readyState(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  uint16_t result;
  result = self->ReadyState();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo readyState_getterinfo = {
  (JSJitPropertyOp)get_readyState,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
open(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.open");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  bool arg2;
  if (2 < argc) {
    if (!ValueToPrimitive<bool, eDefault>(cx, argv[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = true;
  }
  FakeDependentString arg3_holder;
  const Optional<nsAString> arg3;
  if (3 < argc) {
    if (!ConvertJSValueToString(cx, argv[3], &argv[3], eNull, eNull, arg3_holder)) {
      return false;
    }
    const_cast<Optional<nsAString>&>(arg3) = &arg3_holder;
  }
  FakeDependentString arg4_holder;
  const Optional<nsAString> arg4;
  if (4 < argc) {
    if (!ConvertJSValueToString(cx, argv[4], &argv[4], eNull, eNull, arg4_holder)) {
      return false;
    }
    const_cast<Optional<nsAString>&>(arg4) = &arg4_holder;
  }
  ErrorResult rv;
  self->Open(arg0, arg1, arg2, arg3, arg4, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "open");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo open_methodinfo = {
  (JSJitPropertyOp)open,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
setRequestHeader(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.setRequestHeader");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  ErrorResult rv;
  self->SetRequestHeader(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "setRequestHeader");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo setRequestHeader_methodinfo = {
  (JSJitPropertyOp)setRequestHeader,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_timeout(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  uint32_t result;
  result = self->Timeout();
  *vp = UINT_TO_JSVAL(result);
  return true;
}

static bool
set_timeout(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* argv)
{
  uint32_t arg0;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  self->SetTimeout(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "timeout");
  }

  return true;
}


const JSJitInfo timeout_getterinfo = {
  (JSJitPropertyOp)get_timeout,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo timeout_setterinfo = {
  (JSJitPropertyOp)set_timeout,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_withCredentials(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  bool result;
  result = self->WithCredentials();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}

static bool
set_withCredentials(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* argv)
{
  bool arg0;
  if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  self->SetWithCredentials(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "withCredentials");
  }

  return true;
}


const JSJitInfo withCredentials_getterinfo = {
  (JSJitPropertyOp)get_withCredentials,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo withCredentials_setterinfo = {
  (JSJitPropertyOp)set_withCredentials,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_upload(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  ErrorResult rv;
  mozilla::dom::workers::XMLHttpRequestUpload* result;
  result = self->GetUpload(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "upload");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo upload_getterinfo = {
  (JSJitPropertyOp)get_upload,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
send(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  unsigned argcount = NS_MIN(argc, 1u);
  switch (argcount) {
    case 0: {
      ErrorResult rv;
      self->Send(rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "send");
      }
      *vp = JSVAL_VOID;
      return true;
      break;
    }
    case 1: {
      JS::Value* argv_start = JS_ARGV(cx, vp);
      if (argv_start[0].isObject()) {
        do {
          Maybe<ArrayBuffer> arg0_holder;
          NonNull<ArrayBuffer> arg0;
          arg0_holder.construct(&argv_start[0].toObject());
          if (!arg0_holder.ref().inited()) {
            break;
          }
          arg0 = arg0_holder.addr();
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          Maybe<ArrayBufferView> arg0_holder;
          NonNull<ArrayBufferView> arg0;
          arg0_holder.construct(&argv_start[0].toObject());
          if (!arg0_holder.ref().inited()) {
            break;
          }
          arg0 = arg0_holder.addr();
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          JSObject* arg0;
          arg0 = &argv_start[0].toObject();
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          NonNull<JSObject> arg0;
          arg0 = &argv_start[0].toObject();
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          NonNull<JSObject> arg0;
          arg0 = &argv_start[0].toObject();
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          JSObject* arg0;
          arg0 = &argv_start[0].toObject();
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
      }

      JS::Value* argv = JS_ARGV(cx, vp);

      FakeDependentString arg0_holder;
      const NonNull<nsAString> arg0;
      if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
      ErrorResult rv;
      self->Send(arg0, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "send");
      }
      *vp = JSVAL_VOID;
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.send");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}


const JSJitInfo send_methodinfo = {
  (JSJitPropertyOp)send,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
abort(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  self->Abort(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "abort");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo abort_methodinfo = {
  (JSJitPropertyOp)abort,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_status(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  ErrorResult rv;
  uint16_t result;
  result = self->GetStatus(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "status");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo status_getterinfo = {
  (JSJitPropertyOp)get_status,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_statusText(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  nsString result;
  self->GetStatusText(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo statusText_getterinfo = {
  (JSJitPropertyOp)get_statusText,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
getResponseHeader(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.getResponseHeader");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  nsString result;
  self->GetResponseHeader(arg0, result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "getResponseHeader");
  }
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getResponseHeader_methodinfo = {
  (JSJitPropertyOp)getResponseHeader,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
getAllResponseHeaders(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  nsString result;
  self->GetAllResponseHeaders(result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "getAllResponseHeaders");
  }
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getAllResponseHeaders_methodinfo = {
  (JSJitPropertyOp)getAllResponseHeaders,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
overrideMimeType(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.overrideMimeType");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->OverrideMimeType(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "overrideMimeType");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo overrideMimeType_methodinfo = {
  (JSJitPropertyOp)overrideMimeType,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_responseType(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  XMLHttpRequestResponseType result;
  result = self->ResponseType();
  MOZ_ASSERT(uint32_t(result) < ArrayLength(XMLHttpRequestResponseTypeValues::strings));
  JSString* result_str = JS_NewStringCopyN(cx, XMLHttpRequestResponseTypeValues::strings[uint32_t(result)].value, XMLHttpRequestResponseTypeValues::strings[uint32_t(result)].length);
  if (!result_str) {
  return false;
  }
  *vp = JS::StringValue(result_str);
  return true;
}

static bool
set_responseType(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* argv)
{
  XMLHttpRequestResponseType arg0;
  {
    bool ok;
    int index = FindEnumStringIndex<false>(cx, argv[0], XMLHttpRequestResponseTypeValues::strings, "XMLHttpRequestResponseType", &ok);
    if (!ok) {
      return false;
    }
    if (index < 0) {
      return true;
    }
    arg0 = static_cast<XMLHttpRequestResponseType>(index);
  }
  ErrorResult rv;
  self->SetResponseType(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "responseType");
  }

  return true;
}


const JSJitInfo responseType_getterinfo = {
  (JSJitPropertyOp)get_responseType,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo responseType_setterinfo = {
  (JSJitPropertyOp)set_responseType,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_response(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  ErrorResult rv;
  JS::Value result;
  result = self->GetResponse(cx, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "response");
  }
  *vp = result;
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo response_getterinfo = {
  (JSJitPropertyOp)get_response,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_responseText(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  ErrorResult rv;
  nsString result;
  self->GetResponseText(result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "responseText");
  }
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo responseText_getterinfo = {
  (JSJitPropertyOp)get_responseText,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_responseXML(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  JSObject* result;
  result = self->GetResponseXML();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo responseXML_getterinfo = {
  (JSJitPropertyOp)get_responseXML,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_multipart(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  bool result;
  result = self->Multipart();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}

static bool
set_multipart(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* argv)
{
  bool arg0;
  if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  self->SetMultipart(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "multipart");
  }

  return true;
}


const JSJitInfo multipart_getterinfo = {
  (JSJitPropertyOp)get_multipart,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo multipart_setterinfo = {
  (JSJitPropertyOp)set_multipart,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozBackgroundRequest(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  bool result;
  result = self->MozBackgroundRequest();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}

static bool
set_mozBackgroundRequest(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* argv)
{
  bool arg0;
  if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  self->SetMozBackgroundRequest(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "mozBackgroundRequest");
  }

  return true;
}


const JSJitInfo mozBackgroundRequest_getterinfo = {
  (JSJitPropertyOp)get_mozBackgroundRequest,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo mozBackgroundRequest_setterinfo = {
  (JSJitPropertyOp)set_mozBackgroundRequest,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_channel(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  JSObject* result;
  result = self->GetChannel();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo channel_getterinfo = {
  (JSJitPropertyOp)get_channel,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
sendAsBinary(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.sendAsBinary");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SendAsBinary(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "sendAsBinary");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo sendAsBinary_methodinfo = {
  (JSJitPropertyOp)sendAsBinary,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
getInterface(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.getInterface");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  JSObject* arg0;
  if (argv[0].isObject()) {
    arg0 = &argv[0].toObject();
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  JS::Value result;
  result = self->GetInterface(cx, arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "getInterface");
  }
  *vp = result;
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getInterface_methodinfo = {
  (JSJitPropertyOp)getInterface,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozAnon(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  bool result;
  result = self->MozAnon();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo mozAnon_getterinfo = {
  (JSJitPropertyOp)get_mozAnon,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozSystem(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::XMLHttpRequest* self, JS::Value* vp)
{
  bool result;
  result = self->MozSystem();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo mozSystem_getterinfo = {
  (JSJitPropertyOp)get_mozSystem,
  prototypes::id::XMLHttpRequest_workers,
  PrototypeTraits<prototypes::id::XMLHttpRequest_workers>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::workers::XMLHttpRequest* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::XMLHttpRequest_workers, mozilla::dom::workers::XMLHttpRequest>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "XMLHttpRequest_workers");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::workers::XMLHttpRequest* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::XMLHttpRequest_workers, mozilla::dom::workers::XMLHttpRequest>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "XMLHttpRequest_workers");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::workers::XMLHttpRequest* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::XMLHttpRequest_workers, mozilla::dom::workers::XMLHttpRequest>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "XMLHttpRequest_workers");
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{

  mozilla::dom::workers::XMLHttpRequest* self = UnwrapDOMObject<mozilla::dom::workers::XMLHttpRequest>(obj);
  if (self) {
    self->_finalize(fop);
  }
}

static void
_trace(JSTracer* trc, JSObject* obj)
{

  mozilla::dom::workers::XMLHttpRequest* self = UnwrapDOMObject<mozilla::dom::workers::XMLHttpRequest>(obj);
  if (self) {
    self->_trace(trc);
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("open", genericMethod, &open_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("setRequestHeader", genericMethod, &setRequestHeader_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("send", genericMethod, &send_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("abort", genericMethod, &abort_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getResponseHeader", genericMethod, &getResponseHeader_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getAllResponseHeaders", genericMethod, &getAllResponseHeaders_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("overrideMimeType", genericMethod, &overrideMimeType_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("sendAsBinary", genericMethod, &sendAsBinary_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNINFO("getInterface", genericMethod, &getInterface_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sChromeMethods[] = {
  { true, &sChromeMethods_specs[0] },
  { false, NULL }
};

static JSPropertySpec sAttributes_specs[] = {
  { "onreadystatechange", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &onreadystatechange_getterinfo }, { (JSStrictPropertyOp)genericSetter, &onreadystatechange_setterinfo }},
  { "readyState", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &readyState_getterinfo }, JSOP_NULLWRAPPER},
  { "timeout", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &timeout_getterinfo }, { (JSStrictPropertyOp)genericSetter, &timeout_setterinfo }},
  { "withCredentials", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &withCredentials_getterinfo }, { (JSStrictPropertyOp)genericSetter, &withCredentials_setterinfo }},
  { "upload", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &upload_getterinfo }, JSOP_NULLWRAPPER},
  { "status", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &status_getterinfo }, JSOP_NULLWRAPPER},
  { "statusText", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &statusText_getterinfo }, JSOP_NULLWRAPPER},
  { "responseType", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &responseType_getterinfo }, { (JSStrictPropertyOp)genericSetter, &responseType_setterinfo }},
  { "response", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &response_getterinfo }, JSOP_NULLWRAPPER},
  { "responseText", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &responseText_getterinfo }, JSOP_NULLWRAPPER},
  { "responseXML", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &responseXML_getterinfo }, JSOP_NULLWRAPPER},
  { "multipart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &multipart_getterinfo }, { (JSStrictPropertyOp)genericSetter, &multipart_setterinfo }},
  { "mozBackgroundRequest", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozBackgroundRequest_getterinfo }, { (JSStrictPropertyOp)genericSetter, &mozBackgroundRequest_setterinfo }},
  { "mozAnon", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozAnon_getterinfo }, JSOP_NULLWRAPPER},
  { "mozSystem", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozSystem_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static JSPropertySpec sChromeAttributes_specs[] = {
  { "channel", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &channel_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sChromeAttributes[] = {
  { true, &sChromeAttributes_specs[0] },
  { false, NULL }
};

static ConstantSpec sConstants_specs[] = {
  { "UNSENT", INT_TO_JSVAL(0) },
  { "OPENED", INT_TO_JSVAL(1) },
  { "HEADERS_RECEIVED", INT_TO_JSVAL(2) },
  { "LOADING", INT_TO_JSVAL(3) },
  { "DONE", INT_TO_JSVAL(4) },
  { 0, JSVAL_VOID }
};

static Prefable<ConstantSpec> sConstants[] = {
  { true, &sConstants_specs[0] },
  { false, NULL }
};


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, nullptr, sMethods_specs,
  sAttributes, nullptr, sAttributes_specs,
  nullptr, nullptr, nullptr,
  sConstants, nullptr, sConstants_specs
};

static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeMethods, nullptr, sChromeMethods_specs,
  sChromeAttributes, nullptr, sChromeAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
static JSBool
_constructor(JSContext* cx, unsigned argc, JS::Value* vp)
{

  JSObject* obj = JS_GetGlobalForObject(cx, JSVAL_TO_OBJECT(JS_CALLEE(cx, vp)));

  unsigned argcount = NS_MIN(argc, 1u);
  switch (argcount) {
    case 0: {

      JS::Value* argv = JS_ARGV(cx, vp);

      const MozXMLHttpRequestParametersWorkers arg0;
      if (!const_cast<MozXMLHttpRequestParametersWorkers&>(arg0).Init(cx, obj, (0 < argc) ? argv[0] : JSVAL_NULL)) {
        return false;
      }
      ErrorResult rv;
      mozilla::dom::workers::XMLHttpRequest* result;
      result = mozilla::dom::workers::XMLHttpRequest::Constructor(cx, obj, arg0, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "constructor");
      }
      if (!WrapNewBindingObject(cx, obj, result, vp)) {
        MOZ_ASSERT(JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    case 1: {
      JS::Value* argv_start = JS_ARGV(cx, vp);
      if (argv_start[0].isNullOrUndefined()) {
        const MozXMLHttpRequestParametersWorkers arg0;
        if (!const_cast<MozXMLHttpRequestParametersWorkers&>(arg0).Init(cx, obj, argv_start[0])) {
          return false;
        }
        ErrorResult rv;
        mozilla::dom::workers::XMLHttpRequest* result;
        result = mozilla::dom::workers::XMLHttpRequest::Constructor(cx, obj, arg0, rv);
        if (rv.Failed()) {
          return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "constructor");
        }
        if (!WrapNewBindingObject(cx, obj, result, vp)) {
          MOZ_ASSERT(JS_IsExceptionPending(cx));
          return false;
        }
        return true;
      }
      if (argv_start[0].isObject()) {
        do {
          const MozXMLHttpRequestParametersWorkers arg0;
          if (!IsConvertibleToDictionary(cx, &argv_start[0].toObject())) {
            break;
          }

          if (!const_cast<MozXMLHttpRequestParametersWorkers&>(arg0).Init(cx, obj, argv_start[0])) {
            return false;
          }
          ErrorResult rv;
          mozilla::dom::workers::XMLHttpRequest* result;
          result = mozilla::dom::workers::XMLHttpRequest::Constructor(cx, obj, arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "constructor");
          }
          if (!WrapNewBindingObject(cx, obj, result, vp)) {
            MOZ_ASSERT(JS_IsExceptionPending(cx));
            return false;
          }
          return true;
        } while (0);
      }

      JS::Value* argv = JS_ARGV(cx, vp);

      FakeDependentString arg0_holder;
      const NonNull<nsAString> arg0;
      if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
      ErrorResult rv;
      mozilla::dom::workers::XMLHttpRequest* result;
      result = mozilla::dom::workers::XMLHttpRequest::Constructor(cx, obj, arg0, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<false>(cx, rv, "XMLHttpRequest", "constructor");
      }
      if (!WrapNewBindingObject(cx, obj, result, vp)) {
        MOZ_ASSERT(JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "XMLHttpRequest.constructor");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}

JSNativeHolder _constructor_holder = {
  _constructor,
  &sWorkerNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "XMLHttpRequestPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sWorkerNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = XMLHttpRequestEventTargetBinding_workers::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::XMLHttpRequest_workers],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::XMLHttpRequest_workers],
                              &Class.mClass,
                              &sNativeProperties,
                              mozilla::dom::workers::GetWorkerPrivateFromContext(aCx)->IsChromeWorker() ? &sChromeOnlyNativeProperties : nullptr,
                              "XMLHttpRequest");
}


DOMJSClass Class = {
  { "XMLHttpRequest",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    JS_PropertyStub, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    _trace, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::EventTarget_workers, prototypes::id::XMLHttpRequestEventTarget_workers, prototypes::id::XMLHttpRequest_workers, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    false,
    &sWorkerNativePropertyHooks,
    GetParentObject<mozilla::dom::workers::XMLHttpRequest>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, mozilla::dom::workers::XMLHttpRequest* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  *aTriedToWrap = true;
  return aObject->GetJSObject();
}

} // namespace XMLHttpRequestBinding_workers



} // namespace dom
} // namespace mozilla
