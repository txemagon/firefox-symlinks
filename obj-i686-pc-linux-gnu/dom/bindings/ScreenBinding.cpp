/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "EventHandlerBinding.h"
#include "EventTargetBinding.h"
#include "PrimitiveConversions.h"
#include "ScreenBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsScreen.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace ScreenBinding {

static bool
get_availWidth(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  ErrorResult rv;
  int32_t result;
  result = self->GetAvailWidth(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "availWidth");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo availWidth_getterinfo = {
  (JSJitPropertyOp)get_availWidth,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_availHeight(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  ErrorResult rv;
  int32_t result;
  result = self->GetAvailHeight(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "availHeight");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo availHeight_getterinfo = {
  (JSJitPropertyOp)get_availHeight,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_width(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  ErrorResult rv;
  int32_t result;
  result = self->GetWidth(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "width");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo width_getterinfo = {
  (JSJitPropertyOp)get_width,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_height(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  ErrorResult rv;
  int32_t result;
  result = self->GetHeight(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "height");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo height_getterinfo = {
  (JSJitPropertyOp)get_height,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_colorDepth(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  ErrorResult rv;
  int32_t result;
  result = self->GetColorDepth(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "colorDepth");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo colorDepth_getterinfo = {
  (JSJitPropertyOp)get_colorDepth,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_pixelDepth(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  ErrorResult rv;
  int32_t result;
  result = self->GetPixelDepth(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "pixelDepth");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo pixelDepth_getterinfo = {
  (JSJitPropertyOp)get_pixelDepth,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_top(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  ErrorResult rv;
  int32_t result;
  result = self->GetTop(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "top");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo top_getterinfo = {
  (JSJitPropertyOp)get_top,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_left(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  ErrorResult rv;
  int32_t result;
  result = self->GetLeft(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "left");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo left_getterinfo = {
  (JSJitPropertyOp)get_left,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_availTop(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  ErrorResult rv;
  int32_t result;
  result = self->GetAvailTop(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "availTop");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo availTop_getterinfo = {
  (JSJitPropertyOp)get_availTop,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_availLeft(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  ErrorResult rv;
  int32_t result;
  result = self->GetAvailLeft(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "availLeft");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo availLeft_getterinfo = {
  (JSJitPropertyOp)get_availLeft,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozOrientation(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  nsString result;
  self->GetMozOrientation(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo mozOrientation_getterinfo = {
  (JSJitPropertyOp)get_mozOrientation,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_onmozorientationchange(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnmozorientationchange();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onmozorientationchange(JSContext* cx, JSHandleObject obj, nsScreen* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnmozorientationchange(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "onmozorientationchange");
  }

  return true;
}


const JSJitInfo onmozorientationchange_getterinfo = {
  (JSJitPropertyOp)get_onmozorientationchange,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onmozorientationchange_setterinfo = {
  (JSJitPropertyOp)set_onmozorientationchange,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
mozLockOrientation(JSContext* cx, JSHandleObject obj, nsScreen* self, unsigned argc, JS::Value* vp)
{

  unsigned argcount = NS_MIN(argc, 1u);
  switch (argcount) {
    case 1: {
      JS::Value* argv_start = JS_ARGV(cx, vp);
      if (argv_start[0].isObject()) {
        do {
          const Sequence< nsString > arg0;
          JSObject* seq = &argv_start[0].toObject();

          if (!IsArrayLike(cx, seq)) {
            break;
          }
          uint32_t length;
          // JS_GetArrayLength actually works on all objects
          if (!JS_GetArrayLength(cx, seq, &length)) {
            return false;
          }
          Sequence< nsString > &arr = const_cast< Sequence< nsString >& >(arg0);
          if (!arr.SetCapacity(length)) {
            JS_ReportOutOfMemory(cx);
            return false;
          }
          for (uint32_t i = 0; i < length; ++i) {
            jsval temp;
            if (!JS_GetElement(cx, seq, i, &temp)) {
              return false;
            }
            nsString& slot = *arr.AppendElement();
            {
              FakeDependentString str;
              if (!ConvertJSValueToString(cx, temp, &temp, eStringify, eStringify, str)) {
                return false;
              }
              slot = str;
            }

          }
          ErrorResult rv;
          bool result;
          result = self->MozLockOrientation(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "mozLockOrientation");
          }
          *vp = BOOLEAN_TO_JSVAL(result);
          return true;
        } while (0);
      }

      JS::Value* argv = JS_ARGV(cx, vp);

      FakeDependentString arg0_holder;
      const NonNull<nsAString> arg0;
      if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
      ErrorResult rv;
      bool result;
      result = self->MozLockOrientation(arg0, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "Screen", "mozLockOrientation");
      }
      *vp = BOOLEAN_TO_JSVAL(result);
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Screen.mozLockOrientation");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}


const JSJitInfo mozLockOrientation_methodinfo = {
  (JSJitPropertyOp)mozLockOrientation,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
mozUnlockOrientation(JSContext* cx, JSHandleObject obj, nsScreen* self, unsigned argc, JS::Value* vp)
{
  self->MozUnlockOrientation();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo mozUnlockOrientation_methodinfo = {
  (JSJitPropertyOp)mozUnlockOrientation,
  prototypes::id::Screen,
  PrototypeTraits<prototypes::id::Screen>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsScreen* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::Screen, nsScreen>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Screen");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsScreen* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::Screen, nsScreen>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Screen");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsScreen* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::Screen, nsScreen>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Screen");
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Screen attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsScreen>::value), "Must be an nsISupports class");
  nsScreen* self = UnwrapDOMObject<nsScreen>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsScreen>::value), "Must be an nsISupports class");
  nsScreen* self = UnwrapDOMObject<nsScreen>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("mozLockOrientation", genericMethod, &mozLockOrientation_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("mozUnlockOrientation", genericMethod, &mozUnlockOrientation_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[3] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "availWidth", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &availWidth_getterinfo }, JSOP_NULLWRAPPER},
  { "availHeight", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &availHeight_getterinfo }, JSOP_NULLWRAPPER},
  { "width", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &width_getterinfo }, JSOP_NULLWRAPPER},
  { "height", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &height_getterinfo }, JSOP_NULLWRAPPER},
  { "colorDepth", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &colorDepth_getterinfo }, JSOP_NULLWRAPPER},
  { "pixelDepth", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &pixelDepth_getterinfo }, JSOP_NULLWRAPPER},
  { "top", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &top_getterinfo }, JSOP_NULLWRAPPER},
  { "left", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &left_getterinfo }, JSOP_NULLWRAPPER},
  { "availTop", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &availTop_getterinfo }, JSOP_NULLWRAPPER},
  { "availLeft", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &availLeft_getterinfo }, JSOP_NULLWRAPPER},
  { "mozOrientation", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozOrientation_getterinfo }, JSOP_NULLWRAPPER},
  { "onmozorientationchange", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &onmozorientationchange_getterinfo }, { (JSStrictPropertyOp)genericSetter, &onmozorientationchange_setterinfo }},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[13] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::Screen,
  constructors::id::Screen,
  &EventTargetBinding::sNativePropertyHooks
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "ScreenPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = EventTargetBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::Screen],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::Screen],
                              &Class.mClass,
                              &sNativeProperties,
                              nullptr,
                              "Screen");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  {
    XPCWrappedNativeScope* scope = xpc::GetObjectScope(aGlobal);
    if (!scope) {
      *aEnabled = false;
      return nullptr;
    }

    if (!scope->ExperimentalBindingsEnabled()) {
      *aEnabled = false;
      return nullptr;
    }
  }

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "Screen",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::EventTarget, prototypes::id::Screen, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<nsScreen>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, nsScreen* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<nsScreen*>(aObject) ==
             reinterpret_cast<nsScreen*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::EventTarget*>(aObject) ==
             reinterpret_cast<mozilla::dom::EventTarget*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  {
    XPCWrappedNativeScope* scope = xpc::GetObjectScope(global);
    if (!scope) {
      *aTriedToWrap = false;
      return NULL;
    }

    if (!scope->ExperimentalBindingsEnabled()) {
      aCache->ClearIsDOMBinding();
      *aTriedToWrap = false;
      return NULL;
    }
  }

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace ScreenBinding



} // namespace dom
} // namespace mozilla
