/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "CSSBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/CSS.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace CSSBinding {

static JSBool
supports(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  // We have to be careful to leave "obj" in its existing compartment, even
  // while we grab our global from the real underlying object, because we
  // use it for unwrapping the other arguments later.
  nsISupports* global;
  xpc_qsSelfRef globalRef;
  {
    JS::Value val;
    Maybe<JSAutoCompartment> ac;
    if (js::IsWrapper(obj)) {
      JSObject* realObj = XPCWrapper::Unwrap(cx, obj, false);
      if (!realObj) {
        return Throw<true>(cx, NS_ERROR_XPC_SECURITY_MANAGER_VETO);
      }
      ac.construct(cx, realObj);
      val.setObject(*JS_GetGlobalForObject(cx, realObj));
    } else {
      val.setObject(*JS_GetGlobalForObject(cx, obj));
    }

    nsresult rv = xpc_qsUnwrapArg<nsISupports>(cx, val, &global, &globalRef.ptr,
                                               &val);
    if (NS_FAILED(rv)) {
      return Throw<true>(cx, NS_ERROR_XPC_BAD_CONVERT_JS);
    }
  }


  unsigned argcount = NS_MIN(argc, 2u);
  switch (argcount) {
    case 1: {

      JS::Value* argv = JS_ARGV(cx, vp);

      FakeDependentString arg0_holder;
      const NonNull<nsAString> arg0;
      if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
      ErrorResult rv;
      bool result;
      result = mozilla::dom::CSS::Supports(global, arg0, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "CSS", "supports");
      }
      *vp = BOOLEAN_TO_JSVAL(result);
      return true;
      break;
    }
    case 2: {

      JS::Value* argv = JS_ARGV(cx, vp);

      FakeDependentString arg0_holder;
      const NonNull<nsAString> arg0;
      if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
      FakeDependentString arg1_holder;
      const NonNull<nsAString> arg1;
      if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
      ErrorResult rv;
      bool result;
      result = mozilla::dom::CSS::Supports(global, arg0, arg1, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "CSS", "supports");
      }
      *vp = BOOLEAN_TO_JSVAL(result);
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CSS.supports");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}

static JSFunctionSpec sStaticMethods_specs[] = {
  JS_FNINFO("supports", supports, nullptr, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sStaticMethods[] = {
  { true, &sStaticMethods_specs[0] },
  { false, NULL }
};

static jsid sStaticMethods_ids[2] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  sStaticMethods, sStaticMethods_ids, sStaticMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::_ID_Count,
  constructors::id::CSS,
  NULL
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sStaticMethods_ids[0] == JSID_VOID &&
      !InitIds(aCx, sStaticMethods, sStaticMethods_ids)) {
    sStaticMethods_ids[0] = JSID_VOID;
    return;
  }

  static bool sPrefCachesInited = false;
  if (!sPrefCachesInited) {
    sPrefCachesInited = true;
    Preferences::AddBoolVarCache(&sStaticMethods[0].enabled, "layout.css.supports-rule.enabled");
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              nullptr, nullptr,
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::CSS],
                              nullptr,
                              &sNativeProperties,
                              nullptr,
                              "CSS");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

bool
PrefEnabled()
{
  return mozilla::dom::CSS::PrefEnabled();
}

} // namespace CSSBinding



} // namespace dom
} // namespace mozilla
