/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "ElementBinding.h"
#include "EventTargetBinding.h"
#include "HTMLCollectionBinding.h"
#include "HTMLElementBinding.h"
#include "HTMLTableCaptionElementBinding.h"
#include "HTMLTableElementBinding.h"
#include "HTMLTableSectionElementBinding.h"
#include "NodeBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/HTMLTableCaptionElement.h"
#include "mozilla/dom/HTMLTableElement.h"
#include "mozilla/dom/HTMLTableSectionElement.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsGenericHTMLElement.h"
#include "nsIDOMHTMLTableElement.h"
#include "nsIHTMLCollection.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace HTMLTableElementBinding {

static bool
get_caption(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  mozilla::dom::HTMLTableCaptionElement* result;
  result = self->GetCaption();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static bool
set_caption(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  mozilla::dom::HTMLTableCaptionElement* arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::HTMLTableCaptionElement, mozilla::dom::HTMLTableCaptionElement>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLTableCaptionElement");
        return false;
      }
    }
  } else if (argv[0].isNullOrUndefined()) {
    arg0 = NULL;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  self->SetCaption(arg0);

  return true;
}


const JSJitInfo caption_getterinfo = {
  (JSJitPropertyOp)get_caption,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo caption_setterinfo = {
  (JSJitPropertyOp)set_caption,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
createCaption(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, unsigned argc, JS::Value* vp)
{
  nsRefPtr<nsGenericHTMLElement> result;
  result = self->CreateCaption();
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo createCaption_methodinfo = {
  (JSJitPropertyOp)createCaption,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
deleteCaption(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, unsigned argc, JS::Value* vp)
{
  self->DeleteCaption();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo deleteCaption_methodinfo = {
  (JSJitPropertyOp)deleteCaption,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_tHead(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  mozilla::dom::HTMLTableSectionElement* result;
  result = self->GetTHead();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static bool
set_tHead(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  mozilla::dom::HTMLTableSectionElement* arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::HTMLTableSectionElement, mozilla::dom::HTMLTableSectionElement>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLTableSectionElement");
        return false;
      }
    }
  } else if (argv[0].isNullOrUndefined()) {
    arg0 = NULL;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  self->SetTHead(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "tHead");
  }

  return true;
}


const JSJitInfo tHead_getterinfo = {
  (JSJitPropertyOp)get_tHead,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo tHead_setterinfo = {
  (JSJitPropertyOp)set_tHead,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
createTHead(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, unsigned argc, JS::Value* vp)
{
  nsRefPtr<nsGenericHTMLElement> result;
  result = self->CreateTHead();
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo createTHead_methodinfo = {
  (JSJitPropertyOp)createTHead,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
deleteTHead(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, unsigned argc, JS::Value* vp)
{
  self->DeleteTHead();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo deleteTHead_methodinfo = {
  (JSJitPropertyOp)deleteTHead,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_tFoot(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  mozilla::dom::HTMLTableSectionElement* result;
  result = self->GetTFoot();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static bool
set_tFoot(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  mozilla::dom::HTMLTableSectionElement* arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::HTMLTableSectionElement, mozilla::dom::HTMLTableSectionElement>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLTableSectionElement");
        return false;
      }
    }
  } else if (argv[0].isNullOrUndefined()) {
    arg0 = NULL;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  self->SetTFoot(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "tFoot");
  }

  return true;
}


const JSJitInfo tFoot_getterinfo = {
  (JSJitPropertyOp)get_tFoot,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo tFoot_setterinfo = {
  (JSJitPropertyOp)set_tFoot,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
createTFoot(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, unsigned argc, JS::Value* vp)
{
  nsRefPtr<nsGenericHTMLElement> result;
  result = self->CreateTFoot();
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo createTFoot_methodinfo = {
  (JSJitPropertyOp)createTFoot,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
deleteTFoot(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, unsigned argc, JS::Value* vp)
{
  self->DeleteTFoot();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo deleteTFoot_methodinfo = {
  (JSJitPropertyOp)deleteTFoot,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_tBodies(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  nsIHTMLCollection* result;
  result = self->TBodies();
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo tBodies_getterinfo = {
  (JSJitPropertyOp)get_tBodies,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_rows(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  nsIHTMLCollection* result;
  result = self->Rows();
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo rows_getterinfo = {
  (JSJitPropertyOp)get_rows,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
insertRow(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, unsigned argc, JS::Value* vp)
{

  JS::Value* argv = JS_ARGV(cx, vp);

  int32_t arg0;
  if (0 < argc) {
    if (!ValueToPrimitive<int32_t, eDefault>(cx, argv[0], &arg0)) {
      return false;
    }
  } else {
    arg0 = -1;
  }
  ErrorResult rv;
  nsRefPtr<nsGenericHTMLElement> result;
  result = self->InsertRow(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "insertRow");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo insertRow_methodinfo = {
  (JSJitPropertyOp)insertRow,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
deleteRow(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "HTMLTableElement.deleteRow");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  int32_t arg0;
  if (!ValueToPrimitive<int32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  self->DeleteRow(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "deleteRow");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo deleteRow_methodinfo = {
  (JSJitPropertyOp)deleteRow,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_align(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  nsString result;
  self->GetAlign(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_align(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetAlign(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "align");
  }

  return true;
}


const JSJitInfo align_getterinfo = {
  (JSJitPropertyOp)get_align,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo align_setterinfo = {
  (JSJitPropertyOp)set_align,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_border(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  nsString result;
  self->GetBorder(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_border(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetBorder(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "border");
  }

  return true;
}


const JSJitInfo border_getterinfo = {
  (JSJitPropertyOp)get_border,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo border_setterinfo = {
  (JSJitPropertyOp)set_border,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_frame(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  nsString result;
  self->GetFrame(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_frame(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetFrame(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "frame");
  }

  return true;
}


const JSJitInfo frame_getterinfo = {
  (JSJitPropertyOp)get_frame,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo frame_setterinfo = {
  (JSJitPropertyOp)set_frame,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_rules(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  nsString result;
  self->GetRules(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_rules(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetRules(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "rules");
  }

  return true;
}


const JSJitInfo rules_getterinfo = {
  (JSJitPropertyOp)get_rules,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo rules_setterinfo = {
  (JSJitPropertyOp)set_rules,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_summary(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  nsString result;
  self->GetSummary(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_summary(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetSummary(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "summary");
  }

  return true;
}


const JSJitInfo summary_getterinfo = {
  (JSJitPropertyOp)get_summary,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo summary_setterinfo = {
  (JSJitPropertyOp)set_summary,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_width(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  nsString result;
  self->GetWidth(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_width(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetWidth(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "width");
  }

  return true;
}


const JSJitInfo width_getterinfo = {
  (JSJitPropertyOp)get_width,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo width_setterinfo = {
  (JSJitPropertyOp)set_width,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_bgColor(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  nsString result;
  self->GetBgColor(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_bgColor(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eEmpty, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetBgColor(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "bgColor");
  }

  return true;
}


const JSJitInfo bgColor_getterinfo = {
  (JSJitPropertyOp)get_bgColor,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo bgColor_setterinfo = {
  (JSJitPropertyOp)set_bgColor,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_cellPadding(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  nsString result;
  self->GetCellPadding(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_cellPadding(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eEmpty, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetCellPadding(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "cellPadding");
  }

  return true;
}


const JSJitInfo cellPadding_getterinfo = {
  (JSJitPropertyOp)get_cellPadding,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo cellPadding_setterinfo = {
  (JSJitPropertyOp)set_cellPadding,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_cellSpacing(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* vp)
{
  nsString result;
  self->GetCellSpacing(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_cellSpacing(JSContext* cx, JSHandleObject obj, mozilla::dom::HTMLTableElement* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eEmpty, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetCellSpacing(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLTableElement", "cellSpacing");
  }

  return true;
}


const JSJitInfo cellSpacing_getterinfo = {
  (JSJitPropertyOp)get_cellSpacing,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo cellSpacing_setterinfo = {
  (JSJitPropertyOp)set_cellSpacing,
  prototypes::id::HTMLTableElement,
  PrototypeTraits<prototypes::id::HTMLTableElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::HTMLTableElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::HTMLTableElement, mozilla::dom::HTMLTableElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLTableElement");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::HTMLTableElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::HTMLTableElement, mozilla::dom::HTMLTableElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLTableElement");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::HTMLTableElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::HTMLTableElement, mozilla::dom::HTMLTableElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLTableElement");
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "HTMLTableElement attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::HTMLTableElement>::value), "Must be an nsISupports class");
  mozilla::dom::HTMLTableElement* self = UnwrapDOMObject<mozilla::dom::HTMLTableElement>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::HTMLTableElement>::value), "Must be an nsISupports class");
  mozilla::dom::HTMLTableElement* self = UnwrapDOMObject<mozilla::dom::HTMLTableElement>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("createCaption", genericMethod, &createCaption_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("deleteCaption", genericMethod, &deleteCaption_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("createTHead", genericMethod, &createTHead_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("deleteTHead", genericMethod, &deleteTHead_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("createTFoot", genericMethod, &createTFoot_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("deleteTFoot", genericMethod, &deleteTFoot_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("insertRow", genericMethod, &insertRow_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("deleteRow", genericMethod, &deleteRow_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[9] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "caption", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &caption_getterinfo }, { (JSStrictPropertyOp)genericSetter, &caption_setterinfo }},
  { "tHead", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &tHead_getterinfo }, { (JSStrictPropertyOp)genericSetter, &tHead_setterinfo }},
  { "tFoot", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &tFoot_getterinfo }, { (JSStrictPropertyOp)genericSetter, &tFoot_setterinfo }},
  { "tBodies", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &tBodies_getterinfo }, JSOP_NULLWRAPPER},
  { "rows", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &rows_getterinfo }, JSOP_NULLWRAPPER},
  { "align", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &align_getterinfo }, { (JSStrictPropertyOp)genericSetter, &align_setterinfo }},
  { "border", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &border_getterinfo }, { (JSStrictPropertyOp)genericSetter, &border_setterinfo }},
  { "frame", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &frame_getterinfo }, { (JSStrictPropertyOp)genericSetter, &frame_setterinfo }},
  { "rules", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &rules_getterinfo }, { (JSStrictPropertyOp)genericSetter, &rules_setterinfo }},
  { "summary", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &summary_getterinfo }, { (JSStrictPropertyOp)genericSetter, &summary_setterinfo }},
  { "width", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &width_getterinfo }, { (JSStrictPropertyOp)genericSetter, &width_setterinfo }},
  { "bgColor", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &bgColor_getterinfo }, { (JSStrictPropertyOp)genericSetter, &bgColor_setterinfo }},
  { "cellPadding", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &cellPadding_getterinfo }, { (JSStrictPropertyOp)genericSetter, &cellPadding_setterinfo }},
  { "cellSpacing", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &cellSpacing_getterinfo }, { (JSStrictPropertyOp)genericSetter, &cellSpacing_setterinfo }},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[15] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::HTMLTableElement,
  constructors::id::HTMLTableElement,
  &HTMLElementBinding::sNativePropertyHooks
};

static JSBool
_hasInstance(JSContext* cx, JSHandleObject obj, JSMutableHandleValue vp, JSBool* bp)
{
  if (!vp.isObject()) {
    *bp = false;
    return true;
  }

  jsval protov;
  if (!JS_GetProperty(cx, obj, "prototype", &protov))
    return false;
  if (!protov.isObject()) {
    JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_BAD_PROTOTYPE,
                         "HTMLTableElement");
    return false;
  }
  JSObject *objProto = &protov.toObject();

  JSObject* instance = &vp.toObject();
  JSObject* proto;
  if (!JS_GetPrototype(cx, instance, &proto))
    return false;
  while (proto) {
    if (proto == objProto) {
      *bp = true;
      return true;
    }
    if (!JS_GetPrototype(cx, proto, &proto))
      return false;
  }

  // FIXME Limit this to chrome by checking xpc::AccessCheck::isChrome(obj).
  nsISupports* native =
    nsContentUtils::XPConnect()->GetNativeOfWrapper(cx, instance);
  nsCOMPtr<nsIDOMHTMLTableElement> qiResult = do_QueryInterface(native);
  *bp = !!qiResult;
  return true;

}


static DOMIfaceAndProtoJSClass InterfaceObjectClass = {
  {
    "Function",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    ThrowingConstructor, /* call */
    _hasInstance, /* hasInstance */
    ThrowingConstructor, /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterface,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "HTMLTableElementPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = HTMLElementBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::HTMLTableElement],
                              &InterfaceObjectClass.mBase, nullptr, 0, &protoAndIfaceArray[constructors::id::HTMLTableElement],
                              &Class.mClass,
                              &sNativeProperties,
                              nullptr,
                              "HTMLTableElement");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "HTMLTableElement",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::EventTarget, prototypes::id::Node, prototypes::id::Element, prototypes::id::HTMLElement, prototypes::id::HTMLTableElement, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<mozilla::dom::HTMLTableElement>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, mozilla::dom::HTMLTableElement* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<mozilla::dom::HTMLTableElement*>(aObject) ==
             reinterpret_cast<mozilla::dom::HTMLTableElement*>(aObject));
  MOZ_ASSERT(static_cast<nsGenericHTMLElement*>(aObject) ==
             reinterpret_cast<nsGenericHTMLElement*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::Element*>(aObject) ==
             reinterpret_cast<mozilla::dom::Element*>(aObject));
  MOZ_ASSERT(static_cast<nsINode*>(aObject) ==
             reinterpret_cast<nsINode*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::EventTarget*>(aObject) ==
             reinterpret_cast<mozilla::dom::EventTarget*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace HTMLTableElementBinding



} // namespace dom
} // namespace mozilla
