/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "MediaStreamList.h"
#include "MediaStreamListBinding.h"
#include "PrimitiveConversions.h"
#include "URLBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIDOMMediaStream.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace MediaStreamListBinding {

static bool
get_length(JSContext* cx, JSHandleObject obj, mozilla::dom::MediaStreamList* self, JS::Value* vp)
{
  uint32_t result;
  result = self->Length();
  *vp = UINT_TO_JSVAL(result);
  return true;
}


const JSJitInfo length_getterinfo = {
  (JSJitPropertyOp)get_length,
  prototypes::id::MediaStreamList,
  PrototypeTraits<prototypes::id::MediaStreamList>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::MediaStreamList* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::MediaStreamList, mozilla::dom::MediaStreamList>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "MediaStreamList");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

nsTArray<nsAutoPtr<mozilla::dom::MediaStreamList> >* sDeferredFinalizePointers;

static void*
GetDeferredFinalizePointers()
{
  nsTArray<nsAutoPtr<mozilla::dom::MediaStreamList> >* pointers = sDeferredFinalizePointers;
  sDeferredFinalizePointers = nullptr;
  return pointers;
}

static bool
DeferredFinalize(uint32_t slice, void* data)
{
  MOZ_ASSERT(slice > 0, "nonsensical/useless call with slice == 0");
  nsTArray<nsAutoPtr<mozilla::dom::MediaStreamList> >* pointers = static_cast<nsTArray<nsAutoPtr<mozilla::dom::MediaStreamList> >*>(data);
  uint32_t oldLen = pointers->Length();
  slice = NS_MIN(oldLen, slice);
  uint32_t newLen = oldLen - slice;
  pointers->RemoveElementsAt(newLen, slice);
  if (newLen == 0) {
    delete pointers;
    return true;
  }
  return false;
}

static JSPropertySpec sAttributes_specs[] = {
  { "length", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &length_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[2] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  ResolveOwnProperty,
  EnumerateOwnProperties,
  { &sNativeProperties, nullptr },
  prototypes::id::MediaStreamList,
  constructors::id::_ID_Count,
  NULL
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "MediaStreamListPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sAttributes_ids[0] == JSID_VOID &&
      !InitIds(aCx, sAttributes, sAttributes_ids)) {
    sAttributes_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::MediaStreamList],
                              nullptr, nullptr, 0, nullptr,
                              &Class,
                              &sNativeProperties,
                              nullptr,
                              NULL);
}

bool
ResolveOwnProperty(JSContext* cx, JSObject* wrapper, JSObject* obj, jsid id, JSPropertyDescriptor* desc, unsigned flags)
{
  // We rely on getOwnPropertyDescriptor not shadowing prototype properties by named
  // properties. If that changes we'll need to filter here.
  return js::GetProxyHandler(obj)->getOwnPropertyDescriptor(cx, wrapper, id, desc, flags);

}

bool
EnumerateOwnProperties(JSContext* cx, JSObject* wrapper, JSObject* obj, JS::AutoIdVector& props)
{
  // We rely on getOwnPropertyNames not shadowing prototype properties by named
  // properties. If that changes we'll need to filter here.
  return js::GetProxyHandler(obj)->getOwnPropertyNames(cx, wrapper, props);

}

MOZ_ALWAYS_INLINE bool
IsProxy(JSObject* obj)
{
  return js::IsProxy(obj) && js::GetProxyHandler(obj) == DOMProxyHandler::getInstance();
}

MOZ_ALWAYS_INLINE mozilla::dom::MediaStreamList*
UnwrapProxy(JSObject* obj)
{
  if (xpc::WrapperFactory::IsXrayWrapper(obj)) {
    obj = js::UnwrapObject(obj);
  }
  MOZ_ASSERT(IsProxy(obj));
  return static_cast<mozilla::dom::MediaStreamList*>(js::GetProxyPrivate(obj).toPrivate());
}


const DOMClass Class = {
  { prototypes::id::MediaStreamList, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
  false,
  &sNativePropertyHooks,
  GetParentObject<mozilla::dom::MediaStreamList>::Get,
  GetProtoObject,
  nullptr
};



DOMProxyHandler::DOMProxyHandler()
  : mozilla::dom::DOMProxyHandler(Class)
{

}


bool
DOMProxyHandler::getOwnPropertyDescriptor(JSContext* cx, JSObject* proxy, jsid id, JSPropertyDescriptor* desc, unsigned flags)
{
  int32_t index = GetArrayIndexFromId(cx, id);
  if (!(flags & JSRESOLVE_ASSIGNING)) {
    if (IsArrayIndex(index)) {
      mozilla::dom::MediaStreamList* self = UnwrapProxy(proxy);
      bool found;
      nsRefPtr<nsIDOMMediaStream> result;
      result = self->IndexedGetter(index, found);

      if (found) {
        if (!result) {
          desc->value = JSVAL_NULL;
          FillPropertyDescriptor(desc, proxy, true);
          return true;
        }
        if (!WrapObject(cx, proxy, result, &desc->value)) {
          return false;
        }
        FillPropertyDescriptor(desc, proxy, true);
        return true;
      }
    }
  }

  JSObject* expando;
  if (!xpc::WrapperFactory::IsXrayWrapper(proxy) && (expando = GetExpandoObject(proxy))) {
    if (!JS_GetPropertyDescriptorById(cx, expando, id, flags, desc)) {
      return false;
    }
    if (desc->obj) {
      // Pretend the property lives on the wrapper.
      desc->obj = proxy;
      return true;
    }
  }

  desc->obj = NULL;
  return true;
}


bool
DOMProxyHandler::getOwnPropertyNames(JSContext* cx, JSObject* proxy, JS::AutoIdVector& props)
{
  uint32_t length = UnwrapProxy(proxy)->Length();
  MOZ_ASSERT(int32_t(length) >= 0);
  for (int32_t i = 0; i < int32_t(length); ++i) {
    if (!props.append(INT_TO_JSID(i))) {
      return false;
    }
  }

  JSObject* expando;
  if (!xpc::WrapperFactory::IsXrayWrapper(proxy) && (expando = DOMProxyHandler::GetExpandoObject(proxy)) &&
      !js::GetPropertyNames(cx, expando, JSITER_OWNONLY | JSITER_HIDDEN, &props)) {
    return false;
  }

  return true;
}


bool
DOMProxyHandler::hasOwn(JSContext* cx, JSObject* proxy, jsid id, bool* bp)
{
  int32_t index = GetArrayIndexFromId(cx, id);
  if (IsArrayIndex(index)) {
    mozilla::dom::MediaStreamList* self = UnwrapProxy(proxy);
    bool found;
    nsRefPtr<nsIDOMMediaStream> result;
    result = self->IndexedGetter(index, found);
    (void)result;

    *bp = found;
    return true;
  }

  JSObject* expando = GetExpandoObject(proxy);
  if (expando) {
    JSBool b = true;
    JSBool ok = JS_HasPropertyById(cx, expando, id, &b);
    *bp = !!b;
    if (!ok || *bp) {
      return ok;
    }
  }

  *bp = false;
  return true;
}


bool
DOMProxyHandler::get(JSContext* cx, JSObject* proxy, JSObject* receiver, jsid id, JS::Value* vp)
{
  MOZ_ASSERT(!xpc::WrapperFactory::IsXrayWrapper(proxy),
              "Should not have a XrayWrapper here");

  int32_t index = GetArrayIndexFromId(cx, id);
  if (IsArrayIndex(index)) {
    mozilla::dom::MediaStreamList* self = UnwrapProxy(proxy);
    bool found;
    nsRefPtr<nsIDOMMediaStream> result;
    result = self->IndexedGetter(index, found);

    if (found) {
      if (!result) {
        *vp = JSVAL_NULL;
        return true;
      }
      if (!WrapObject(cx, proxy, result, vp)) {
        return false;
      }
      return true;
    }
    // Even if we don't have this index, we don't forward the
    // get on to our expando object.
  } else {
    JSObject* expando = DOMProxyHandler::GetExpandoObject(proxy);
    if (expando) {
      JSBool hasProp;
      if (!JS_HasPropertyById(cx, expando, id, &hasProp)) {
        return false;
      }

      if (hasProp) {
        return JS_GetPropertyById(cx, expando, id, vp);
      }
    }
  }

  {  // Scope for this "found" so it doesn't leak to things below
    bool found;
    if (!GetPropertyOnPrototype(cx, proxy, id, &found, vp)) {
      return false;
    }

    if (found) {
      return true;
    }
  }

  vp->setUndefined();
  return true;
}


JSString*
DOMProxyHandler::obj_toString(JSContext* cx, JSObject* proxy)
{
  return mozilla::dom::DOMProxyHandler::obj_toString(cx, "MediaStreamList");
}


void
DOMProxyHandler::finalize(JSFreeOp* fop, JSObject* proxy)
{
  mozilla::dom::MediaStreamList* self = UnwrapProxy(proxy);

  if (self) {
    static bool registered = false;
    if (!registered) {
      XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
      if (!rt) {
        nsAutoPtr<mozilla::dom::MediaStreamList> dying;
        Take(dying, self);
        return;
      }
      rt->RegisterDeferredFinalize(GetDeferredFinalizePointers, DeferredFinalize);
      registered = true;
    }
    if (!sDeferredFinalizePointers) {
      sDeferredFinalizePointers = new nsAutoTArray<nsAutoPtr<mozilla::dom::MediaStreamList>, 16>();
    }
    nsAutoPtr<mozilla::dom::MediaStreamList>* defer = sDeferredFinalizePointers->AppendElement();
    if (!defer) {
      nsAutoPtr<mozilla::dom::MediaStreamList> dying;
      Take(dying, self);
      return;
    }
    Take(*defer, self);
  }
}


bool
DOMProxyHandler::getElementIfPresent(JSContext* cx, JSObject* proxy, JSObject* receiver, uint32_t index, JS::Value* vp, bool* present)
{
  MOZ_ASSERT(!xpc::WrapperFactory::IsXrayWrapper(proxy),
               "Should not have a XrayWrapper here");

  mozilla::dom::MediaStreamList* self = UnwrapProxy(proxy);
  bool found;
  nsRefPtr<nsIDOMMediaStream> result;
  result = self->IndexedGetter(index, found);

  if (found) {
    if (!result) {
      *vp = JSVAL_NULL;
      *present = found;
      return true;
    }
    if (!WrapObject(cx, proxy, result, vp)) {
      return false;
    }
    *present = found;
    return true;
  }
  // We skip the expando object and any named getters if
  // there is an indexed getter.


  JSObject *proto;
  if (!js::GetObjectProto(cx, proxy, &proto)) {
    return false;
  }
  if (proto) {
    JSBool isPresent;
    if (!JS_GetElementIfPresent(cx, proto, index, proxy, vp, &isPresent)) {
      return false;
    }
    *present = isPresent;
    return true;
  }

  *present = false;
  // Can't Debug_SetValueRangeToCrashOnTouch because it's not public
  return true;
}


DOMProxyHandler*
DOMProxyHandler::getInstance()
{
  static DOMProxyHandler instance;
  return &instance;
}


bool
DOMProxyHandler::delete_(JSContext* cx, JSObject* proxy, jsid id, bool* bp)
{
  int32_t index = GetArrayIndexFromId(cx, id);
  if (IsArrayIndex(index)) {
    mozilla::dom::MediaStreamList* self = UnwrapProxy(proxy);
    bool found;
    nsRefPtr<nsIDOMMediaStream> result;
    result = self->IndexedGetter(index, found);
    (void)result;
    if (found) {
      // XXXbz we should throw if Throw is true!
      *bp = false;
    } else {
      *bp = true;
    }
    // We always return here, even if the property was not found
    return true;
  }
  return dom::DOMProxyHandler::delete_(cx, proxy, id, bp);
}


bool
Is(JSObject* obj)
{
  return IsProxy(obj);
}

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, mozilla::dom::MediaStreamList* aObject)
{
  MOZ_ASSERT(static_cast<mozilla::dom::MediaStreamList*>(aObject) ==
             reinterpret_cast<mozilla::dom::MediaStreamList*>(aObject));

  JSObject* global = JS_GetGlobalForObject(aCx, aScope);
  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject *obj = NewProxyObject(aCx, DOMProxyHandler::getInstance(),
                                 JS::PrivateValue(aObject), proto, global);
  if (!obj) {
    return NULL;
  }

  // Make sure the native objects inherit from NonRefcountedDOMObject so that we
  // log their ctor and dtor.
  MustInheritFromNonRefcountedDOMObject(aObject);


  return obj;
}

} // namespace MediaStreamListBinding



} // namespace dom
} // namespace mozilla
