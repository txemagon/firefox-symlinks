/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "PerformanceTimingBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsPerformance.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace PerformanceTimingBinding {

static bool
get_navigationStart(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->NavigationStart();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo navigationStart_getterinfo = {
  (JSJitPropertyOp)get_navigationStart,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_unloadEventStart(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->UnloadEventStart();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo unloadEventStart_getterinfo = {
  (JSJitPropertyOp)get_unloadEventStart,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_unloadEventEnd(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->UnloadEventEnd();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo unloadEventEnd_getterinfo = {
  (JSJitPropertyOp)get_unloadEventEnd,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_redirectStart(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->RedirectStart();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo redirectStart_getterinfo = {
  (JSJitPropertyOp)get_redirectStart,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_redirectEnd(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->RedirectEnd();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo redirectEnd_getterinfo = {
  (JSJitPropertyOp)get_redirectEnd,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_fetchStart(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->FetchStart();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo fetchStart_getterinfo = {
  (JSJitPropertyOp)get_fetchStart,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_domainLookupStart(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->DomainLookupStart();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo domainLookupStart_getterinfo = {
  (JSJitPropertyOp)get_domainLookupStart,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_domainLookupEnd(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->DomainLookupEnd();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo domainLookupEnd_getterinfo = {
  (JSJitPropertyOp)get_domainLookupEnd,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_connectStart(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->ConnectStart();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo connectStart_getterinfo = {
  (JSJitPropertyOp)get_connectStart,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_connectEnd(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->ConnectEnd();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo connectEnd_getterinfo = {
  (JSJitPropertyOp)get_connectEnd,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_requestStart(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->RequestStart();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo requestStart_getterinfo = {
  (JSJitPropertyOp)get_requestStart,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_responseStart(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->ResponseStart();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo responseStart_getterinfo = {
  (JSJitPropertyOp)get_responseStart,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_responseEnd(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->ResponseEnd();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo responseEnd_getterinfo = {
  (JSJitPropertyOp)get_responseEnd,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_domLoading(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->DomLoading();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo domLoading_getterinfo = {
  (JSJitPropertyOp)get_domLoading,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_domInteractive(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->DomInteractive();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo domInteractive_getterinfo = {
  (JSJitPropertyOp)get_domInteractive,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_domContentLoadedEventStart(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->DomContentLoadedEventStart();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo domContentLoadedEventStart_getterinfo = {
  (JSJitPropertyOp)get_domContentLoadedEventStart,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_domContentLoadedEventEnd(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->DomContentLoadedEventEnd();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo domContentLoadedEventEnd_getterinfo = {
  (JSJitPropertyOp)get_domContentLoadedEventEnd,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_domComplete(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->DomComplete();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo domComplete_getterinfo = {
  (JSJitPropertyOp)get_domComplete,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_loadEventStart(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->LoadEventStart();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo loadEventStart_getterinfo = {
  (JSJitPropertyOp)get_loadEventStart,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_loadEventEnd(JSContext* cx, JSHandleObject obj, nsPerformanceTiming* self, JS::Value* vp)
{
  uint64_t result;
  result = self->LoadEventEnd();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo loadEventEnd_getterinfo = {
  (JSJitPropertyOp)get_loadEventEnd,
  prototypes::id::PerformanceTiming,
  PrototypeTraits<prototypes::id::PerformanceTiming>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsPerformanceTiming* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::PerformanceTiming, nsPerformanceTiming>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "PerformanceTiming");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsPerformanceTiming>::value), "Must be an nsISupports class");
  nsPerformanceTiming* self = UnwrapDOMObject<nsPerformanceTiming>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsPerformanceTiming>::value), "Must be an nsISupports class");
  nsPerformanceTiming* self = UnwrapDOMObject<nsPerformanceTiming>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNINFO("QueryInterface", QueryInterface, nullptr, 1, 0),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sChromeMethods[] = {
  { true, &sChromeMethods_specs[0] },
  { false, NULL }
};

static jsid sChromeMethods_ids[2] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "navigationStart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &navigationStart_getterinfo }, JSOP_NULLWRAPPER},
  { "unloadEventStart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &unloadEventStart_getterinfo }, JSOP_NULLWRAPPER},
  { "unloadEventEnd", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &unloadEventEnd_getterinfo }, JSOP_NULLWRAPPER},
  { "redirectStart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &redirectStart_getterinfo }, JSOP_NULLWRAPPER},
  { "redirectEnd", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &redirectEnd_getterinfo }, JSOP_NULLWRAPPER},
  { "fetchStart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &fetchStart_getterinfo }, JSOP_NULLWRAPPER},
  { "domainLookupStart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &domainLookupStart_getterinfo }, JSOP_NULLWRAPPER},
  { "domainLookupEnd", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &domainLookupEnd_getterinfo }, JSOP_NULLWRAPPER},
  { "connectStart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &connectStart_getterinfo }, JSOP_NULLWRAPPER},
  { "connectEnd", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &connectEnd_getterinfo }, JSOP_NULLWRAPPER},
  { "requestStart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &requestStart_getterinfo }, JSOP_NULLWRAPPER},
  { "responseStart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &responseStart_getterinfo }, JSOP_NULLWRAPPER},
  { "responseEnd", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &responseEnd_getterinfo }, JSOP_NULLWRAPPER},
  { "domLoading", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &domLoading_getterinfo }, JSOP_NULLWRAPPER},
  { "domInteractive", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &domInteractive_getterinfo }, JSOP_NULLWRAPPER},
  { "domContentLoadedEventStart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &domContentLoadedEventStart_getterinfo }, JSOP_NULLWRAPPER},
  { "domContentLoadedEventEnd", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &domContentLoadedEventEnd_getterinfo }, JSOP_NULLWRAPPER},
  { "domComplete", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &domComplete_getterinfo }, JSOP_NULLWRAPPER},
  { "loadEventStart", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &loadEventStart_getterinfo }, JSOP_NULLWRAPPER},
  { "loadEventEnd", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &loadEventEnd_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[21] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};

static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeMethods, sChromeMethods_ids, sChromeMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, &sChromeOnlyNativeProperties },
  prototypes::id::PerformanceTiming,
  constructors::id::PerformanceTiming,
  NULL
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "PerformanceTimingPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sChromeMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sChromeMethods, sChromeMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids))) {
    sChromeMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::PerformanceTiming],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::PerformanceTiming],
                              &Class.mClass,
                              &sNativeProperties,
                              xpc::AccessCheck::isChrome(aGlobal) ? &sChromeOnlyNativeProperties : nullptr,
                              "PerformanceTiming");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "PerformanceTiming",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::PerformanceTiming, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<nsPerformanceTiming>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, nsPerformanceTiming* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<nsPerformanceTiming*>(aObject) ==
             reinterpret_cast<nsPerformanceTiming*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace PerformanceTimingBinding



} // namespace dom
} // namespace mozilla
