/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "BlobBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace EndingTypesValues {

  const EnumEntry strings[3] = {
    {"transparent", 11},
    {"native", 6},
    { NULL, 0 }
  };
} // namespace EndingTypesValues


bool
BlobPropertyBagWorkers::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "endings", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "endings", &temp)) {
      return false;
    }
  }
  if (found) {
    {
      bool ok;
      int index = FindEnumStringIndex<true>(cx, temp, EndingTypesValues::strings, "EndingTypes", &ok);
      if (!ok) {
        return false;
      }
      MOZ_ASSERT(index >= 0);
      mEndings = static_cast<EndingTypes>(index);
    }
  } else {
    mEndings = EndingTypesValues::Transparent;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "type", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "type", &temp)) {
      return false;
    }
  }
  {
    FakeDependentString str;
    if (found) {
      if (!ConvertJSValueToString(cx, temp, &temp, eStringify, eStringify, str)) {
        return false;
      }
    } else {
      static const PRUnichar data[] = { 0 };
      str.SetData(data, ArrayLength(data) - 1);
    }
    mType = str;
  }

  return true;
}

bool
BlobPropertyBagWorkers::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    EndingTypes& currentValue = mEndings;
    MOZ_ASSERT(uint32_t(currentValue) < ArrayLength(EndingTypesValues::strings));
    JSString* currentValue_str = JS_NewStringCopyN(cx, EndingTypesValues::strings[uint32_t(currentValue)].value, EndingTypesValues::strings[uint32_t(currentValue)].length);
    if (!currentValue_str) {
    return false;
    }
    temp = JS::StringValue(currentValue_str);
    if (!JS_DefineProperty(cx, obj, "endings", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    nsString& currentValue = mType;
    if (!xpc::NonVoidStringToJsval(cx, currentValue, &temp)) {
      return false;
    }
    if (!JS_DefineProperty(cx, obj, "type", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}

bool BlobPropertyBag::initedIds = false;
jsid BlobPropertyBag::endings_id = JSID_VOID;
jsid BlobPropertyBag::type_id = JSID_VOID;

bool
BlobPropertyBag::InitIds(JSContext* cx)
{
  MOZ_ASSERT(!initedIds);
  if (!InternJSString(cx, endings_id, "endings") ||
      !InternJSString(cx, type_id, "type")) {
    return false;
  }
  initedIds = true;
  return true;
}

bool
BlobPropertyBag::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  if (cx && !initedIds && !InitIds(cx)) {
    return false;
  }
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), endings_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), endings_id, &temp)) {
      return false;
    }
  }
  if (found) {
    {
      bool ok;
      int index = FindEnumStringIndex<true>(cx, temp, EndingTypesValues::strings, "EndingTypes", &ok);
      if (!ok) {
        return false;
      }
      MOZ_ASSERT(index >= 0);
      mEndings = static_cast<EndingTypes>(index);
    }
  } else {
    mEndings = EndingTypesValues::Transparent;
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), type_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), type_id, &temp)) {
      return false;
    }
  }
  {
    FakeDependentString str;
    if (found) {
      if (!ConvertJSValueToString(cx, temp, &temp, eStringify, eStringify, str)) {
        return false;
      }
    } else {
      static const PRUnichar data[] = { 0 };
      str.SetData(data, ArrayLength(data) - 1);
    }
    mType = str;
  }

  return true;
}

bool
BlobPropertyBag::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  if (!initedIds && !InitIds(cx)) {
    return false;
  }
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    EndingTypes& currentValue = mEndings;
    MOZ_ASSERT(uint32_t(currentValue) < ArrayLength(EndingTypesValues::strings));
    JSString* currentValue_str = JS_NewStringCopyN(cx, EndingTypesValues::strings[uint32_t(currentValue)].value, EndingTypesValues::strings[uint32_t(currentValue)].length);
    if (!currentValue_str) {
    return false;
    }
    temp = JS::StringValue(currentValue_str);
    if (!JS_DefinePropertyById(cx, obj, endings_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    nsString& currentValue = mType;
    if (!xpc::NonVoidStringToJsval(cx, currentValue, &temp)) {
      return false;
    }
    if (!JS_DefinePropertyById(cx, obj, type_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}

} // namespace dom
} // namespace mozilla
