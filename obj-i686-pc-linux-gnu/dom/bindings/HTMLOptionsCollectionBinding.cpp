/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "HTMLCollectionBinding.h"
#include "HTMLOptionsCollectionBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/UnionConversions.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsHTMLOptionElement.h"
#include "nsHTMLSelectElement.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace HTMLOptionsCollectionBinding {

static bool
get_length(JSContext* cx, JSHandleObject obj, nsHTMLOptionCollection* self, JS::Value* vp)
{
  uint32_t result;
  result = self->Length();
  *vp = UINT_TO_JSVAL(result);
  return true;
}

static bool
set_length(JSContext* cx, JSHandleObject obj, nsHTMLOptionCollection* self, JS::Value* argv)
{
  uint32_t arg0;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  self->SetLength(arg0);

  return true;
}


const JSJitInfo length_getterinfo = {
  (JSJitPropertyOp)get_length,
  prototypes::id::HTMLOptionsCollection,
  PrototypeTraits<prototypes::id::HTMLOptionsCollection>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo length_setterinfo = {
  (JSJitPropertyOp)set_length,
  prototypes::id::HTMLOptionsCollection,
  PrototypeTraits<prototypes::id::HTMLOptionsCollection>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
namedItem(JSContext* cx, JSHandleObject obj, nsHTMLOptionCollection* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "HTMLOptionsCollection.namedItem");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  JSObject* result;
  result = self->NamedItem(cx, arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLOptionsCollection", "namedItem");
  }
  *vp = JS::ObjectOrNullValue(result);
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo namedItem_methodinfo = {
  (JSJitPropertyOp)namedItem,
  prototypes::id::HTMLOptionsCollection,
  PrototypeTraits<prototypes::id::HTMLOptionsCollection>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
add(JSContext* cx, JSHandleObject obj, nsHTMLOptionCollection* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "HTMLOptionsCollection.add");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  const HTMLOptionElementOrHTMLOptGroupElement arg0;
  HTMLOptionElementOrHTMLOptGroupElementArgument arg0_holder(arg0);
  {
    bool done = false, failed = false, tryNext;
    if (argv[0].isObject()) {
      done = (failed = !arg0_holder.TrySetToHTMLOptionElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext ||
             (failed = !arg0_holder.TrySetToHTMLOptGroupElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext;

    }
    if (failed) {
      return false;
    }
    if (!done) {
      ThrowErrorMessage(cx, MSG_NOT_IN_UNION, "HTMLOptionElement, HTMLOptGroupElement");
      return false;
    }
  }
  Maybe<HTMLElementOrLongArgument > arg1_holder;
  const Nullable<HTMLElementOrLong > arg1;
  if (!(1 < argc) || argv[1].isNullOrUndefined()) {
    const_cast<Nullable<HTMLElementOrLong >& >(arg1).SetNull();
  } else {
    arg1_holder.construct(const_cast<Nullable<HTMLElementOrLong >& >(arg1).SetValue());
    {
      bool done = false, failed = false, tryNext;
      if (argv[1].isObject()) {
        done = (failed = !arg1_holder.ref().TrySetToHTMLElement(cx, obj, argv[1], &argv[1], tryNext)) || !tryNext;

      }
      if (!done) {
        done = (failed = !arg1_holder.ref().TrySetToLong(cx, obj, argv[1], &argv[1], tryNext)) || !tryNext;
      }
      if (failed) {
        return false;
      }
      if (!done) {
        ThrowErrorMessage(cx, MSG_NOT_IN_UNION, "HTMLElement, Long");
        return false;
      }
    }
  }
  ErrorResult rv;
  self->Add(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLOptionsCollection", "add");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo add_methodinfo = {
  (JSJitPropertyOp)add,
  prototypes::id::HTMLOptionsCollection,
  PrototypeTraits<prototypes::id::HTMLOptionsCollection>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
remove(JSContext* cx, JSHandleObject obj, nsHTMLOptionCollection* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "HTMLOptionsCollection.remove");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  int32_t arg0;
  if (!ValueToPrimitive<int32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  self->Remove(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLOptionsCollection", "remove");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo remove_methodinfo = {
  (JSJitPropertyOp)remove,
  prototypes::id::HTMLOptionsCollection,
  PrototypeTraits<prototypes::id::HTMLOptionsCollection>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_selectedIndex(JSContext* cx, JSHandleObject obj, nsHTMLOptionCollection* self, JS::Value* vp)
{
  ErrorResult rv;
  int32_t result;
  result = self->GetSelectedIndex(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLOptionsCollection", "selectedIndex");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}

static bool
set_selectedIndex(JSContext* cx, JSHandleObject obj, nsHTMLOptionCollection* self, JS::Value* argv)
{
  int32_t arg0;
  if (!ValueToPrimitive<int32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  self->SetSelectedIndex(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLOptionsCollection", "selectedIndex");
  }

  return true;
}


const JSJitInfo selectedIndex_getterinfo = {
  (JSJitPropertyOp)get_selectedIndex,
  prototypes::id::HTMLOptionsCollection,
  PrototypeTraits<prototypes::id::HTMLOptionsCollection>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo selectedIndex_setterinfo = {
  (JSJitPropertyOp)set_selectedIndex,
  prototypes::id::HTMLOptionsCollection,
  PrototypeTraits<prototypes::id::HTMLOptionsCollection>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsHTMLOptionCollection* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::HTMLOptionsCollection, nsHTMLOptionCollection>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLOptionsCollection");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsHTMLOptionCollection* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::HTMLOptionsCollection, nsHTMLOptionCollection>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLOptionsCollection");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsHTMLOptionCollection* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::HTMLOptionsCollection, nsHTMLOptionCollection>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLOptionsCollection");
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "HTMLOptionsCollection attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("namedItem", genericMethod, &namedItem_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("add", genericMethod, &add_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("remove", genericMethod, &remove_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[4] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "length", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &length_getterinfo }, { (JSStrictPropertyOp)genericSetter, &length_setterinfo }},
  { "selectedIndex", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &selectedIndex_getterinfo }, { (JSStrictPropertyOp)genericSetter, &selectedIndex_setterinfo }},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[3] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  ResolveOwnProperty,
  EnumerateOwnProperties,
  { &sNativeProperties, nullptr },
  prototypes::id::HTMLOptionsCollection,
  constructors::id::HTMLOptionsCollection,
  &HTMLCollectionBinding::sNativePropertyHooks
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "HTMLOptionsCollectionPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = HTMLCollectionBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::HTMLOptionsCollection],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::HTMLOptionsCollection],
                              &Class,
                              &sNativeProperties,
                              nullptr,
                              "HTMLOptionsCollection");
}

bool
ResolveOwnProperty(JSContext* cx, JSObject* wrapper, JSObject* obj, jsid id, JSPropertyDescriptor* desc, unsigned flags)
{
  // We rely on getOwnPropertyDescriptor not shadowing prototype properties by named
  // properties. If that changes we'll need to filter here.
  return js::GetProxyHandler(obj)->getOwnPropertyDescriptor(cx, wrapper, id, desc, flags);

}

bool
EnumerateOwnProperties(JSContext* cx, JSObject* wrapper, JSObject* obj, JS::AutoIdVector& props)
{
  // We rely on getOwnPropertyNames not shadowing prototype properties by named
  // properties. If that changes we'll need to filter here.
  return js::GetProxyHandler(obj)->getOwnPropertyNames(cx, wrapper, props);

}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

MOZ_ALWAYS_INLINE bool
IsProxy(JSObject* obj)
{
  return js::IsProxy(obj) && js::GetProxyHandler(obj) == DOMProxyHandler::getInstance();
}

MOZ_ALWAYS_INLINE nsHTMLOptionCollection*
UnwrapProxy(JSObject* obj)
{
  if (xpc::WrapperFactory::IsXrayWrapper(obj)) {
    obj = js::UnwrapObject(obj);
  }
  MOZ_ASSERT(IsProxy(obj));
  return static_cast<nsHTMLOptionCollection*>(js::GetProxyPrivate(obj).toPrivate());
}


const DOMClass Class = {
  { prototypes::id::HTMLCollection, prototypes::id::HTMLOptionsCollection, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
  true,
  &sNativePropertyHooks,
  GetParentObject<nsHTMLOptionCollection>::Get,
  GetProtoObject,
  nullptr
};



DOMProxyHandler::DOMProxyHandler()
  : mozilla::dom::DOMProxyHandler(Class)
{

}


bool
DOMProxyHandler::getOwnPropertyDescriptor(JSContext* cx, JSObject* proxy, jsid id, JSPropertyDescriptor* desc, unsigned flags)
{
  int32_t index = GetArrayIndexFromId(cx, id);
  if (flags & JSRESOLVE_ASSIGNING) {
    if (IsArrayIndex(index)) {
      FillPropertyDescriptor(desc, proxy, JSVAL_VOID, false);
      return true;
    }
  } else {
    if (IsArrayIndex(index)) {
      nsHTMLOptionCollection* self = UnwrapProxy(proxy);
      bool found;
      mozilla::dom::Element* result;
      result = self->IndexedGetter(index, found);

      if (found) {
        if (!result) {
          desc->value = JSVAL_NULL;
          FillPropertyDescriptor(desc, proxy, false);
          return true;
        }
        if (!WrapNewBindingObject(cx, proxy, result, &desc->value)) {
          if (!HandleNewBindingWrappingFailure(cx, proxy, result, &desc->value)) {
            return false;
          }
          FillPropertyDescriptor(desc, proxy, false);
          return true;
        }
        FillPropertyDescriptor(desc, proxy, false);
        return true;
      }
    }
  }

  JSObject* expando;
  if (!xpc::WrapperFactory::IsXrayWrapper(proxy) && (expando = GetExpandoObject(proxy))) {
    if (!JS_GetPropertyDescriptorById(cx, expando, id, flags, desc)) {
      return false;
    }
    if (desc->obj) {
      // Pretend the property lives on the wrapper.
      desc->obj = proxy;
      return true;
    }
  }

  if (!IsArrayIndex(index) && !(flags & JSRESOLVE_ASSIGNING) && !HasPropertyOnPrototype(cx, proxy, this, id)) {
    JS::Value nameVal = js::IdToValue(id);
    FakeDependentString name;
    if (!ConvertJSValueToString(cx, nameVal, &nameVal,
                                eStringify, eStringify, name)) {
      return false;
    }

    nsHTMLOptionCollection* self = UnwrapProxy(proxy);
    bool found;
    ErrorResult rv;
    JSObject* result;
    result = self->NamedGetter(cx, name, found, rv);
    if (rv.Failed()) {
      return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLOptionsCollection", "namedItem");
    }

    if (found) {
      desc->value = JS::ObjectOrNullValue(result);
      if (!MaybeWrapValue(cx, &desc->value)) {
        return false;
      }
      FillPropertyDescriptor(desc, proxy, true);
      return true;
    }
  }

  desc->obj = NULL;
  return true;
}


bool
DOMProxyHandler::defineProperty(JSContext* cx, JSObject* proxy, jsid id, JSPropertyDescriptor* desc)
{
  int32_t index = GetArrayIndexFromId(cx, id);
  if (IsArrayIndex(index)) {
    nsHTMLOptionCollection* self = UnwrapProxy(proxy);
    nsRefPtr<nsHTMLOptionElement> option_holder;
    nsHTMLOptionElement* option;
    if (desc->value.isObject()) {
      jsval tmpVal = desc->value;
      nsHTMLOptionElement* tmp;
      if (NS_FAILED(xpc_qsUnwrapArg<nsHTMLOptionElement>(cx, desc->value, &tmp, static_cast<nsHTMLOptionElement**>(getter_AddRefs(option_holder)), &tmpVal))) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "HTMLOptionElement");return false;
      }
      MOZ_ASSERT(tmp);
      if (tmpVal != desc->value && !option_holder) {
        // We have to have a strong ref, because we got this off
        // some random object that might get GCed
        option_holder = tmp;
      }
      option = tmp;
    } else if (desc->value.isNullOrUndefined()) {
      option = NULL;
    } else {
      ThrowErrorMessage(cx, MSG_NOT_OBJECT);
      return false;
    }
    ErrorResult rv;
    self->IndexedSetter(index, option, rv);
    if (rv.Failed()) {
      return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLOptionsCollection", "__indexedsettercreator");
    }
    return true;
  }
  JS::Value nameVal = js::IdToValue(id);
  FakeDependentString name;
  if (!ConvertJSValueToString(cx, nameVal, &nameVal,
                              eStringify, eStringify, name)) {
    return false;
  }

  nsHTMLOptionCollection* self = UnwrapProxy(proxy);
  bool found;
  ErrorResult rv;
  JSObject* result;
  result = self->NamedGetter(cx, name, found, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLOptionsCollection", "namedItem");
  }
  (void)result;

  if (found) {
    return ThrowErrorMessage(cx, MSG_NO_PROPERTY_SETTER, "HTMLOptionsCollection");
  }return mozilla::dom::DOMProxyHandler::defineProperty(cx, proxy, id, desc);
}


bool
DOMProxyHandler::getOwnPropertyNames(JSContext* cx, JSObject* proxy, JS::AutoIdVector& props)
{
  uint32_t length = UnwrapProxy(proxy)->Length();
  MOZ_ASSERT(int32_t(length) >= 0);
  for (int32_t i = 0; i < int32_t(length); ++i) {
    if (!props.append(INT_TO_JSID(i))) {
      return false;
    }
  }

  nsTArray<nsString> names;
  UnwrapProxy(proxy)->GetSupportedNames(names);
  if (!AppendNamedPropertyIds(cx, proxy, names, props)) {
    return false;
  }

  JSObject* expando;
  if (!xpc::WrapperFactory::IsXrayWrapper(proxy) && (expando = DOMProxyHandler::GetExpandoObject(proxy)) &&
      !js::GetPropertyNames(cx, expando, JSITER_OWNONLY | JSITER_HIDDEN, &props)) {
    return false;
  }

  return true;
}


bool
DOMProxyHandler::hasOwn(JSContext* cx, JSObject* proxy, jsid id, bool* bp)
{
  int32_t index = GetArrayIndexFromId(cx, id);
  if (IsArrayIndex(index)) {
    nsHTMLOptionCollection* self = UnwrapProxy(proxy);
    bool found;
    mozilla::dom::Element* result;
    result = self->IndexedGetter(index, found);
    (void)result;

    *bp = found;
    return true;
  }

  JSObject* expando = GetExpandoObject(proxy);
  if (expando) {
    JSBool b = true;
    JSBool ok = JS_HasPropertyById(cx, expando, id, &b);
    *bp = !!b;
    if (!ok || *bp) {
      return ok;
    }
  }

  if (!HasPropertyOnPrototype(cx, proxy, this, id)) {
    JS::Value nameVal = js::IdToValue(id);
    FakeDependentString name;
    if (!ConvertJSValueToString(cx, nameVal, &nameVal,
                                eStringify, eStringify, name)) {
      return false;
    }

    nsHTMLOptionCollection* self = UnwrapProxy(proxy);
    bool found;
    ErrorResult rv;
    JSObject* result;
    result = self->NamedGetter(cx, name, found, rv);
    if (rv.Failed()) {
      return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLOptionsCollection", "namedItem");
    }
    (void)result;

    *bp = found;
    return true;
  }

  *bp = false;
  return true;
}


bool
DOMProxyHandler::get(JSContext* cx, JSObject* proxy, JSObject* receiver, jsid id, JS::Value* vp)
{
  MOZ_ASSERT(!xpc::WrapperFactory::IsXrayWrapper(proxy),
              "Should not have a XrayWrapper here");

  int32_t index = GetArrayIndexFromId(cx, id);
  if (IsArrayIndex(index)) {
    nsHTMLOptionCollection* self = UnwrapProxy(proxy);
    bool found;
    mozilla::dom::Element* result;
    result = self->IndexedGetter(index, found);

    if (found) {
      if (!result) {
        *vp = JSVAL_NULL;
        return true;
      }
      if (!WrapNewBindingObject(cx, proxy, result, vp)) {
        if (!HandleNewBindingWrappingFailure(cx, proxy, result, vp)) {
          return false;
        }
        return true;
      }
      return true;
    }
    // Even if we don't have this index, we don't forward the
    // get on to our expando object.
  } else {
    JSObject* expando = DOMProxyHandler::GetExpandoObject(proxy);
    if (expando) {
      JSBool hasProp;
      if (!JS_HasPropertyById(cx, expando, id, &hasProp)) {
        return false;
      }

      if (hasProp) {
        return JS_GetPropertyById(cx, expando, id, vp);
      }
    }
  }

  {  // Scope for this "found" so it doesn't leak to things below
    bool found;
    if (!GetPropertyOnPrototype(cx, proxy, id, &found, vp)) {
      return false;
    }

    if (found) {
      return true;
    }
  }
  if (!IsArrayIndex(index)) {
    JS::Value nameVal = js::IdToValue(id);
    FakeDependentString name;
    if (!ConvertJSValueToString(cx, nameVal, &nameVal,
                                eStringify, eStringify, name)) {
      return false;
    }

    nsHTMLOptionCollection* self = UnwrapProxy(proxy);
    bool found;
    ErrorResult rv;
    JSObject* result;
    result = self->NamedGetter(cx, name, found, rv);
    if (rv.Failed()) {
      return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLOptionsCollection", "namedItem");
    }

    if (found) {
      *vp = JS::ObjectOrNullValue(result);
      if (!MaybeWrapValue(cx, vp)) {
        return false;
      }
      return true;
    }
  }

  vp->setUndefined();
  return true;
}


JSString*
DOMProxyHandler::obj_toString(JSContext* cx, JSObject* proxy)
{
  return mozilla::dom::DOMProxyHandler::obj_toString(cx, "HTMLOptionsCollection");
}


void
DOMProxyHandler::finalize(JSFreeOp* fop, JSObject* proxy)
{
  nsHTMLOptionCollection* self = UnwrapProxy(proxy);

  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}


bool
DOMProxyHandler::getElementIfPresent(JSContext* cx, JSObject* proxy, JSObject* receiver, uint32_t index, JS::Value* vp, bool* present)
{
  MOZ_ASSERT(!xpc::WrapperFactory::IsXrayWrapper(proxy),
               "Should not have a XrayWrapper here");

  nsHTMLOptionCollection* self = UnwrapProxy(proxy);
  bool found;
  mozilla::dom::Element* result;
  result = self->IndexedGetter(index, found);

  if (found) {
    if (!result) {
      *vp = JSVAL_NULL;
      *present = found;
      return true;
    }
    if (!WrapNewBindingObject(cx, proxy, result, vp)) {
      if (!HandleNewBindingWrappingFailure(cx, proxy, result, vp)) {
        return false;
      }
      *present = found;
      return true;
    }
    *present = found;
    return true;
  }
  // We skip the expando object and any named getters if
  // there is an indexed getter.


  JSObject *proto;
  if (!js::GetObjectProto(cx, proxy, &proto)) {
    return false;
  }
  if (proto) {
    JSBool isPresent;
    if (!JS_GetElementIfPresent(cx, proto, index, proxy, vp, &isPresent)) {
      return false;
    }
    *present = isPresent;
    return true;
  }

  *present = false;
  // Can't Debug_SetValueRangeToCrashOnTouch because it's not public
  return true;
}


DOMProxyHandler*
DOMProxyHandler::getInstance()
{
  static DOMProxyHandler instance;
  return &instance;
}


bool
DOMProxyHandler::delete_(JSContext* cx, JSObject* proxy, jsid id, bool* bp)
{
  int32_t index = GetArrayIndexFromId(cx, id);
  if (IsArrayIndex(index)) {
    nsHTMLOptionCollection* self = UnwrapProxy(proxy);
    bool found;
    mozilla::dom::Element* result;
    result = self->IndexedGetter(index, found);
    (void)result;
    if (found) {
      // XXXbz we should throw if Throw is true!
      *bp = false;
    } else {
      *bp = true;
    }
    // We always return here, even if the property was not found
    return true;
  }
  if (!HasPropertyOnPrototype(cx, proxy, this, id)) {
    JS::Value nameVal = js::IdToValue(id);
    FakeDependentString name;
    if (!ConvertJSValueToString(cx, nameVal, &nameVal,
                                eStringify, eStringify, name)) {
      return false;
    }

    nsHTMLOptionCollection* self = UnwrapProxy(proxy);
    bool found;
    ErrorResult rv;
    JSObject* result;
    result = self->NamedGetter(cx, name, found, rv);
    if (rv.Failed()) {
      return ThrowMethodFailedWithDetails<true>(cx, rv, "HTMLOptionsCollection", "namedItem");
    }
    (void)result;
    if (found) {
      // XXXbz we should throw if Throw is true!
      *bp = false;
    } else {
      *bp = true;
    }
    if (found) {
      return true;
    }
  }
  return dom::DOMProxyHandler::delete_(cx, proxy, id, bp);
}


bool
Is(JSObject* obj)
{
  return IsProxy(obj);
}

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, nsHTMLOptionCollection* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<nsHTMLOptionCollection*>(aObject) ==
             reinterpret_cast<nsHTMLOptionCollection*>(aObject));
  MOZ_ASSERT(static_cast<nsIHTMLCollection*>(aObject) ==
             reinterpret_cast<nsIHTMLCollection*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject *obj = NewProxyObject(aCx, DOMProxyHandler::getInstance(),
                                 JS::PrivateValue(aObject), proto, parent);
  if (!obj) {
    return NULL;
  }

  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace HTMLOptionsCollectionBinding



} // namespace dom
} // namespace mozilla
