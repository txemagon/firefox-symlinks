/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "FunctionBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {





JS::Value
Function::Call(JSContext* cx, JSObject* aThisObj, const nsTArray< JS::Value >& arguments, ErrorResult& aRv)
{
  JS::Value rval = JSVAL_VOID;
  JS::AutoValueVector argv(cx);
  if (!argv.resize((1 - 1) + arguments.Length())) {
    aRv.Throw(NS_ERROR_OUT_OF_MEMORY);
    return JS::UndefinedValue();
  }
  unsigned argc = (1 - 1) + arguments.Length();

  do {
    for (uint32_t idx = 0; idx < arguments.Length(); ++idx) {
      argv[0 + idx] = arguments[idx];
      if (!MaybeWrapValue(cx, &argv[0 + idx])) {
        aRv.Throw(NS_ERROR_UNEXPECTED);
        return JS::UndefinedValue();
      }
      continue;
    }
    break;
  } while (0);

  if (!JS_CallFunctionValue(cx, aThisObj, JS::ObjectValue(*mCallable),
                            argc, argv.begin(), &rval)) {
    aRv.Throw(NS_ERROR_UNEXPECTED);
    return JS::UndefinedValue();
  }
  JS::Value rvalDecl;
  rvalDecl = rval;
  return rvalDecl;
}



} // namespace dom
} // namespace mozilla
