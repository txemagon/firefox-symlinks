/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "PrimitiveConversions.h"
#include "TestDictionaryBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/FloatingPoint.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

bool
GrandparentDictWorkers::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "someNum", &found)) {
    return false;
  }
  if (found) {
    mSomeNum.Construct();
    if (!JS_GetProperty(cx, &val.toObject(), "someNum", &temp)) {
      return false;
    }
    if (!ValueToPrimitive<double, eDefault>(cx, temp, &(mSomeNum.Value()))) {
      return false;
    } else if (!MOZ_DOUBLE_IS_FINITE((mSomeNum.Value()))) {
      // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
      //       when passed a non-finite float too.
      ThrowErrorMessage(cx, MSG_NOT_FINITE);
      return false;
    }
  }
  return true;
}

bool
GrandparentDictWorkers::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);

  if (mSomeNum.WasPassed()) {
    JS::Value temp;
    double& currentValue = mSomeNum.Value();
    temp = JS_NumberValue(double(currentValue));
    if (!JS_DefineProperty(cx, obj, "someNum", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}

bool GrandparentDict::initedIds = false;
jsid GrandparentDict::someNum_id = JSID_VOID;

bool
GrandparentDict::InitIds(JSContext* cx)
{
  MOZ_ASSERT(!initedIds);
  if (!InternJSString(cx, someNum_id, "someNum")) {
    return false;
  }
  initedIds = true;
  return true;
}

bool
GrandparentDict::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  if (cx && !initedIds && !InitIds(cx)) {
    return false;
  }
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), someNum_id, &found)) {
    return false;
  }
  if (found) {
    mSomeNum.Construct();
    if (!JS_GetPropertyById(cx, &val.toObject(), someNum_id, &temp)) {
      return false;
    }
    if (!ValueToPrimitive<double, eDefault>(cx, temp, &(mSomeNum.Value()))) {
      return false;
    } else if (!MOZ_DOUBLE_IS_FINITE((mSomeNum.Value()))) {
      // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
      //       when passed a non-finite float too.
      ThrowErrorMessage(cx, MSG_NOT_FINITE);
      return false;
    }
  }
  return true;
}

bool
GrandparentDict::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  if (!initedIds && !InitIds(cx)) {
    return false;
  }
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);

  if (mSomeNum.WasPassed()) {
    JS::Value temp;
    double& currentValue = mSomeNum.Value();
    temp = JS_NumberValue(double(currentValue));
    if (!JS_DefinePropertyById(cx, obj, someNum_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}

} // namespace dom
} // namespace mozilla
