/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "EventHandlerBinding.h"
#include "EventListenerBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/UnionConversions.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIDOMEvent.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {





JS::Value
EventHandlerNonNull::Call(JSContext* cx, JSObject* aThisObj, nsIDOMEvent* event, ErrorResult& aRv)
{
  JS::Value rval = JSVAL_VOID;
  JS::AutoValueVector argv(cx);
  if (!argv.resize(1)) {
    aRv.Throw(NS_ERROR_OUT_OF_MEMORY);
    return JS::UndefinedValue();
  }
  unsigned argc = 1;

  do {
    if (!WrapObject(cx, mCallable, event, &argv[0])) {
      aRv.Throw(NS_ERROR_UNEXPECTED);
      return JS::UndefinedValue();
    }
    break;
  } while (0);

  if (!JS_CallFunctionValue(cx, aThisObj, JS::ObjectValue(*mCallable),
                            argc, argv.begin(), &rval)) {
    aRv.Throw(NS_ERROR_UNEXPECTED);
    return JS::UndefinedValue();
  }
  JS::Value rvalDecl;
  rvalDecl = rval;
  return rvalDecl;
}







void
BeforeUnloadEventHandlerNonNull::Call(JSContext* cx, JSObject* aThisObj, nsIDOMEvent* event, nsString& retval, ErrorResult& aRv)
{
  JS::Value rval = JSVAL_VOID;
  JS::AutoValueVector argv(cx);
  if (!argv.resize(1)) {
    aRv.Throw(NS_ERROR_OUT_OF_MEMORY);
    return;
  }
  unsigned argc = 1;

  do {
    if (!WrapObject(cx, mCallable, event, &argv[0])) {
      aRv.Throw(NS_ERROR_UNEXPECTED);
      return;
    }
    break;
  } while (0);

  if (!JS_CallFunctionValue(cx, aThisObj, JS::ObjectValue(*mCallable),
                            argc, argv.begin(), &rval)) {
    aRv.Throw(NS_ERROR_UNEXPECTED);
    return;
  }
  FakeDependentString rvalHolder;
  const NonNull<nsAString> rvalDecl;
  if (!ConvertJSValueToString(cx, rval, &rval, eNull, eNull, rvalHolder)) {
    aRv.Throw(NS_ERROR_UNEXPECTED);
    return;
  }
  const_cast<NonNull<nsAString>&>(rvalDecl) = &rvalHolder;
  retval = rvalDecl;
}







bool
OnErrorEventHandlerNonNull::Call(JSContext* cx, JSObject* aThisObj, const EventOrString& event, const Optional< nsAString >& source, const Optional< uint32_t >& lineno, const Optional< uint32_t >& column, ErrorResult& aRv)
{
  JS::Value rval = JSVAL_VOID;
  JS::AutoValueVector argv(cx);
  if (!argv.resize(4)) {
    aRv.Throw(NS_ERROR_OUT_OF_MEMORY);
    return bool(0);
  }
  unsigned argc = 4;

  do {
    if (column.WasPassed()) {
      argv[3] = UINT_TO_JSVAL(column.Value());
      break;
    } else if (argc == 4) {
      // This is our current trailing argument; reduce argc
      --argc;
    } else {
      argv[3] = JS::UndefinedValue();
    }
  } while (0);

  do {
    if (lineno.WasPassed()) {
      argv[2] = UINT_TO_JSVAL(lineno.Value());
      break;
    } else if (argc == 3) {
      // This is our current trailing argument; reduce argc
      --argc;
    } else {
      argv[2] = JS::UndefinedValue();
    }
  } while (0);

  do {
    if (source.WasPassed()) {
      nsString mutableStr(source.Value());
      if (!xpc::NonVoidStringToJsval(cx, mutableStr, &argv[1])) {
        aRv.Throw(NS_ERROR_UNEXPECTED);
        return bool(0);
      }
      break;
    } else if (argc == 2) {
      // This is our current trailing argument; reduce argc
      --argc;
    } else {
      argv[1] = JS::UndefinedValue();
    }
  } while (0);

  do {
    if (!event.ToJSVal(cx, mCallable, &argv[0])) {
      aRv.Throw(NS_ERROR_UNEXPECTED);
      return bool(0);
    }
    break;
  } while (0);

  if (!JS_CallFunctionValue(cx, aThisObj, JS::ObjectValue(*mCallable),
                            argc, argv.begin(), &rval)) {
    aRv.Throw(NS_ERROR_UNEXPECTED);
    return bool(0);
  }
  bool rvalDecl;
  if (!ValueToPrimitive<bool, eDefault>(cx, rval, &rvalDecl)) {
    aRv.Throw(NS_ERROR_UNEXPECTED);
    return bool(0);
  }
  return rvalDecl;
}



} // namespace dom
} // namespace mozilla
