/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "DOMStringMapBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsDOMStringMap.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace DOMStringMapBinding {

static JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNINFO("QueryInterface", QueryInterface, nullptr, 1, 0),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sChromeMethods[] = {
  { true, &sChromeMethods_specs[0] },
  { false, NULL }
};

static jsid sChromeMethods_ids[2] = { JSID_VOID };


static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeMethods, sChromeMethods_ids, sChromeMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  ResolveOwnProperty,
  EnumerateOwnProperties,
  { nullptr, &sChromeOnlyNativeProperties },
  prototypes::id::DOMStringMap,
  constructors::id::DOMStringMap,
  NULL
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "DOMStringMapPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sChromeMethods_ids[0] == JSID_VOID &&
      !InitIds(aCx, sChromeMethods, sChromeMethods_ids)) {
    sChromeMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::DOMStringMap],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::DOMStringMap],
                              &Class,
                              nullptr,
                              xpc::AccessCheck::isChrome(aGlobal) ? &sChromeOnlyNativeProperties : nullptr,
                              "DOMStringMap");
}

bool
ResolveOwnProperty(JSContext* cx, JSObject* wrapper, JSObject* obj, jsid id, JSPropertyDescriptor* desc, unsigned flags)
{
  // We rely on getOwnPropertyDescriptor not shadowing prototype properties by named
  // properties. If that changes we'll need to filter here.
  return js::GetProxyHandler(obj)->getOwnPropertyDescriptor(cx, wrapper, id, desc, flags);

}

bool
EnumerateOwnProperties(JSContext* cx, JSObject* wrapper, JSObject* obj, JS::AutoIdVector& props)
{
  // We rely on getOwnPropertyNames not shadowing prototype properties by named
  // properties. If that changes we'll need to filter here.
  return js::GetProxyHandler(obj)->getOwnPropertyNames(cx, wrapper, props);

}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

MOZ_ALWAYS_INLINE bool
IsProxy(JSObject* obj)
{
  return js::IsProxy(obj) && js::GetProxyHandler(obj) == DOMProxyHandler::getInstance();
}

MOZ_ALWAYS_INLINE nsDOMStringMap*
UnwrapProxy(JSObject* obj)
{
  if (xpc::WrapperFactory::IsXrayWrapper(obj)) {
    obj = js::UnwrapObject(obj);
  }
  MOZ_ASSERT(IsProxy(obj));
  return static_cast<nsDOMStringMap*>(js::GetProxyPrivate(obj).toPrivate());
}


const DOMClass Class = {
  { prototypes::id::DOMStringMap, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
  true,
  &sNativePropertyHooks,
  GetParentObject<nsDOMStringMap>::Get,
  GetProtoObject,
  nullptr
};



DOMProxyHandler::DOMProxyHandler()
  : mozilla::dom::DOMProxyHandler(Class)
{

}


bool
DOMProxyHandler::getOwnPropertyDescriptor(JSContext* cx, JSObject* proxy, jsid id, JSPropertyDescriptor* desc, unsigned flags)
{
  if (flags & JSRESOLVE_ASSIGNING) {
    FillPropertyDescriptor(desc, proxy, JSVAL_VOID, false);
    return true;
  }

  JSObject* expando;
  if (!xpc::WrapperFactory::IsXrayWrapper(proxy) && (expando = GetExpandoObject(proxy))) {
    if (!JS_GetPropertyDescriptorById(cx, expando, id, flags, desc)) {
      return false;
    }
    if (desc->obj) {
      // Pretend the property lives on the wrapper.
      desc->obj = proxy;
      return true;
    }
  }

  if (!(flags & JSRESOLVE_ASSIGNING) && !HasPropertyOnPrototype(cx, proxy, this, id)) {
    JS::Value nameVal = js::IdToValue(id);
    FakeDependentString name;
    if (!ConvertJSValueToString(cx, nameVal, &nameVal,
                                eStringify, eStringify, name)) {
      return false;
    }

    nsDOMStringMap* self = UnwrapProxy(proxy);
    bool found;
    nsString result;
    self->NamedGetter(name, found, result);

    if (found) {
      if (!xpc::NonVoidStringToJsval(cx, result, &desc->value)) {
        return false;
      }
      FillPropertyDescriptor(desc, proxy, false);
      return true;
    }
  }

  desc->obj = NULL;
  return true;
}


bool
DOMProxyHandler::defineProperty(JSContext* cx, JSObject* proxy, jsid id, JSPropertyDescriptor* desc)
{
  JS::Value nameVal = js::IdToValue(id);
  FakeDependentString name;
  if (!ConvertJSValueToString(cx, nameVal, &nameVal,
                              eStringify, eStringify, name)) {
    return false;
  }

  nsDOMStringMap* self = UnwrapProxy(proxy);
  FakeDependentString value_holder;
  const NonNull<nsAString> value;
  if (!ConvertJSValueToString(cx, desc->value, &desc->value, eStringify, eStringify, value_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(value) = &value_holder;
  ErrorResult rv;
  self->NamedSetter(name, value, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "DOMStringMap", "__namedsettercreator");
  }

  return true;

}


bool
DOMProxyHandler::getOwnPropertyNames(JSContext* cx, JSObject* proxy, JS::AutoIdVector& props)
{
  nsTArray<nsString> names;
  UnwrapProxy(proxy)->GetSupportedNames(names);
  if (!AppendNamedPropertyIds(cx, proxy, names, props)) {
    return false;
  }

  JSObject* expando;
  if (!xpc::WrapperFactory::IsXrayWrapper(proxy) && (expando = DOMProxyHandler::GetExpandoObject(proxy)) &&
      !js::GetPropertyNames(cx, expando, JSITER_OWNONLY | JSITER_HIDDEN, &props)) {
    return false;
  }

  return true;
}


bool
DOMProxyHandler::hasOwn(JSContext* cx, JSObject* proxy, jsid id, bool* bp)
{
  JSObject* expando = GetExpandoObject(proxy);
  if (expando) {
    JSBool b = true;
    JSBool ok = JS_HasPropertyById(cx, expando, id, &b);
    *bp = !!b;
    if (!ok || *bp) {
      return ok;
    }
  }

  if (!HasPropertyOnPrototype(cx, proxy, this, id)) {
    JS::Value nameVal = js::IdToValue(id);
    FakeDependentString name;
    if (!ConvertJSValueToString(cx, nameVal, &nameVal,
                                eStringify, eStringify, name)) {
      return false;
    }

    nsDOMStringMap* self = UnwrapProxy(proxy);
    bool found;
    nsString result;
    self->NamedGetter(name, found, result);
    (void)result;

    *bp = found;
    return true;
  }

  *bp = false;
  return true;
}


bool
DOMProxyHandler::get(JSContext* cx, JSObject* proxy, JSObject* receiver, jsid id, JS::Value* vp)
{
  MOZ_ASSERT(!xpc::WrapperFactory::IsXrayWrapper(proxy),
              "Should not have a XrayWrapper here");

  JSObject* expando = DOMProxyHandler::GetExpandoObject(proxy);
  if (expando) {
    JSBool hasProp;
    if (!JS_HasPropertyById(cx, expando, id, &hasProp)) {
      return false;
    }

    if (hasProp) {
      return JS_GetPropertyById(cx, expando, id, vp);
    }
  }

  {  // Scope for this "found" so it doesn't leak to things below
    bool found;
    if (!GetPropertyOnPrototype(cx, proxy, id, &found, vp)) {
      return false;
    }

    if (found) {
      return true;
    }
  }
  JS::Value nameVal = js::IdToValue(id);
  FakeDependentString name;
  if (!ConvertJSValueToString(cx, nameVal, &nameVal,
                              eStringify, eStringify, name)) {
    return false;
  }

  nsDOMStringMap* self = UnwrapProxy(proxy);
  bool found;
  nsString result;
  self->NamedGetter(name, found, result);

  if (found) {
    if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
      return false;
    }
    return true;
  }

  vp->setUndefined();
  return true;
}


JSString*
DOMProxyHandler::obj_toString(JSContext* cx, JSObject* proxy)
{
  return mozilla::dom::DOMProxyHandler::obj_toString(cx, "DOMStringMap");
}


void
DOMProxyHandler::finalize(JSFreeOp* fop, JSObject* proxy)
{
  nsDOMStringMap* self = UnwrapProxy(proxy);

  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}


bool
DOMProxyHandler::getElementIfPresent(JSContext* cx, JSObject* proxy, JSObject* receiver, uint32_t index, JS::Value* vp, bool* present)
{
  MOZ_ASSERT(!xpc::WrapperFactory::IsXrayWrapper(proxy),
               "Should not have a XrayWrapper here");

  JS::Value nameVal = UINT_TO_JSVAL(index);
  FakeDependentString name;
  if (!ConvertJSValueToString(cx, nameVal, &nameVal,
                              eStringify, eStringify, name)) {
    return false;
  }

  nsDOMStringMap* self = UnwrapProxy(proxy);
  bool found;
  nsString result;
  self->NamedGetter(name, found, result);

  if (found) {
    if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
      return false;
    }
    *present = found;
    return true;
  }

  JSObject* expando = GetExpandoObject(proxy);
  if (expando) {
    JSBool isPresent;
    if (!JS_GetElementIfPresent(cx, expando, index, expando, vp, &isPresent)) {
      return false;
    }
    if (isPresent) {
      *present = true;
      return true;
    }
  }

  JSObject *proto;
  if (!js::GetObjectProto(cx, proxy, &proto)) {
    return false;
  }
  if (proto) {
    JSBool isPresent;
    if (!JS_GetElementIfPresent(cx, proto, index, proxy, vp, &isPresent)) {
      return false;
    }
    *present = isPresent;
    return true;
  }

  *present = false;
  // Can't Debug_SetValueRangeToCrashOnTouch because it's not public
  return true;
}


DOMProxyHandler*
DOMProxyHandler::getInstance()
{
  static DOMProxyHandler instance;
  return &instance;
}


bool
DOMProxyHandler::delete_(JSContext* cx, JSObject* proxy, jsid id, bool* bp)
{
  if (!HasPropertyOnPrototype(cx, proxy, this, id)) {
    JS::Value nameVal = js::IdToValue(id);
    FakeDependentString name;
    if (!ConvertJSValueToString(cx, nameVal, &nameVal,
                                eStringify, eStringify, name)) {
      return false;
    }

    nsDOMStringMap* self = UnwrapProxy(proxy);
    bool found;
    self->NamedDeleter(name, found);
    *bp = true;
    if (found) {
      return true;
    }
  }
  return dom::DOMProxyHandler::delete_(cx, proxy, id, bp);
}


bool
Is(JSObject* obj)
{
  return IsProxy(obj);
}

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, nsDOMStringMap* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<nsDOMStringMap*>(aObject) ==
             reinterpret_cast<nsDOMStringMap*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject *obj = NewProxyObject(aCx, DOMProxyHandler::getInstance(),
                                 JS::PrivateValue(aObject), proto, parent);
  if (!obj) {
    return NULL;
  }

  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace DOMStringMapBinding



} // namespace dom
} // namespace mozilla
