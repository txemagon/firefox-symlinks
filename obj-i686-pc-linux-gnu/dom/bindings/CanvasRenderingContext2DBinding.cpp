/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "CanvasRenderingContext2DBinding.h"
#include "ImageDataBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/FloatingPoint.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/CanvasRenderingContext2D.h"
#include "mozilla/dom/HTMLCanvasElement.h"
#include "mozilla/dom/ImageData.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/UnionConversions.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIDOMCanvasRenderingContext2D.h"
#include "nsIDOMWindow.h"
#include "nsIDOMXULElement.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace CanvasRenderingContext2DBinding {

static bool
get_canvas(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  mozilla::dom::HTMLCanvasElement* result;
  result = self->GetCanvas();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo canvas_getterinfo = {
  (JSJitPropertyOp)get_canvas,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
save(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{
  self->Save();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo save_methodinfo = {
  (JSJitPropertyOp)save,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
restore(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{
  self->Restore();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo restore_methodinfo = {
  (JSJitPropertyOp)restore,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
scale(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.scale");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  ErrorResult rv;
  self->Scale(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "scale");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo scale_methodinfo = {
  (JSJitPropertyOp)scale,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
rotate(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.rotate");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  ErrorResult rv;
  self->Rotate(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "rotate");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo rotate_methodinfo = {
  (JSJitPropertyOp)rotate,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
translate(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.translate");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  ErrorResult rv;
  self->Translate(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "translate");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo translate_methodinfo = {
  (JSJitPropertyOp)translate,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
transform(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 6) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.transform");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg4;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[4], &arg4)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg4)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg5;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[5], &arg5)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg5)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  ErrorResult rv;
  self->Transform(arg0, arg1, arg2, arg3, arg4, arg5, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "transform");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo transform_methodinfo = {
  (JSJitPropertyOp)transform,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
setTransform(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 6) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.setTransform");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg4;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[4], &arg4)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg4)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg5;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[5], &arg5)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg5)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  ErrorResult rv;
  self->SetTransform(arg0, arg1, arg2, arg3, arg4, arg5, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "setTransform");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo setTransform_methodinfo = {
  (JSJitPropertyOp)setTransform,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_globalAlpha(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  double result;
  result = self->GlobalAlpha();
  *vp = JS_NumberValue(double(result));
  return true;
}

static bool
set_globalAlpha(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  self->SetGlobalAlpha(arg0);

  return true;
}


const JSJitInfo globalAlpha_getterinfo = {
  (JSJitPropertyOp)get_globalAlpha,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo globalAlpha_setterinfo = {
  (JSJitPropertyOp)set_globalAlpha,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_globalCompositeOperation(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  ErrorResult rv;
  nsString result;
  self->GetGlobalCompositeOperation(result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "globalCompositeOperation");
  }
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_globalCompositeOperation(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetGlobalCompositeOperation(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "globalCompositeOperation");
  }

  return true;
}


const JSJitInfo globalCompositeOperation_getterinfo = {
  (JSJitPropertyOp)get_globalCompositeOperation,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo globalCompositeOperation_setterinfo = {
  (JSJitPropertyOp)set_globalCompositeOperation,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_strokeStyle(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  ErrorResult rv;
  JS::Value result;
  result = self->GetStrokeStyle(cx, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "strokeStyle");
  }
  *vp = result;
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}

static bool
set_strokeStyle(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  JS::Value arg0;
  arg0 = argv[0];
  self->SetStrokeStyle(cx, arg0);

  return true;
}


const JSJitInfo strokeStyle_getterinfo = {
  (JSJitPropertyOp)get_strokeStyle,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo strokeStyle_setterinfo = {
  (JSJitPropertyOp)set_strokeStyle,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_fillStyle(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  ErrorResult rv;
  JS::Value result;
  result = self->GetFillStyle(cx, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "fillStyle");
  }
  *vp = result;
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}

static bool
set_fillStyle(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  JS::Value arg0;
  arg0 = argv[0];
  self->SetFillStyle(cx, arg0);

  return true;
}


const JSJitInfo fillStyle_getterinfo = {
  (JSJitPropertyOp)get_fillStyle,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo fillStyle_setterinfo = {
  (JSJitPropertyOp)set_fillStyle,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
createLinearGradient(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 4) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.createLinearGradient");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  ErrorResult rv;
  nsRefPtr<nsIDOMCanvasGradient> result;
  result = self->CreateLinearGradient(arg0, arg1, arg2, arg3, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "createLinearGradient");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo createLinearGradient_methodinfo = {
  (JSJitPropertyOp)createLinearGradient,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
createRadialGradient(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 6) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.createRadialGradient");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg4;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[4], &arg4)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg4)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg5;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[5], &arg5)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg5)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  ErrorResult rv;
  nsRefPtr<nsIDOMCanvasGradient> result;
  result = self->CreateRadialGradient(arg0, arg1, arg2, arg3, arg4, arg5, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "createRadialGradient");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo createRadialGradient_methodinfo = {
  (JSJitPropertyOp)createRadialGradient,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
createPattern(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.createPattern");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  const HTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement arg0;
  HTMLImageElementOrHTMLCanvasElementOrHTMLVideoElementArgument arg0_holder(arg0);
  {
    bool done = false, failed = false, tryNext;
    if (argv[0].isObject()) {
      done = (failed = !arg0_holder.TrySetToHTMLImageElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext ||
             (failed = !arg0_holder.TrySetToHTMLCanvasElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext ||
             (failed = !arg0_holder.TrySetToHTMLVideoElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext;

    }
    if (failed) {
      return false;
    }
    if (!done) {
      ThrowErrorMessage(cx, MSG_NOT_IN_UNION, "HTMLImageElement, HTMLCanvasElement, HTMLVideoElement");
      return false;
    }
  }
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eEmpty, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  ErrorResult rv;
  nsRefPtr<nsIDOMCanvasPattern> result;
  result = self->CreatePattern(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "createPattern");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo createPattern_methodinfo = {
  (JSJitPropertyOp)createPattern,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_shadowOffsetX(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  double result;
  result = self->ShadowOffsetX();
  *vp = JS_NumberValue(double(result));
  return true;
}

static bool
set_shadowOffsetX(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    return true;
  }
  self->SetShadowOffsetX(arg0);

  return true;
}


const JSJitInfo shadowOffsetX_getterinfo = {
  (JSJitPropertyOp)get_shadowOffsetX,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo shadowOffsetX_setterinfo = {
  (JSJitPropertyOp)set_shadowOffsetX,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_shadowOffsetY(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  double result;
  result = self->ShadowOffsetY();
  *vp = JS_NumberValue(double(result));
  return true;
}

static bool
set_shadowOffsetY(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    return true;
  }
  self->SetShadowOffsetY(arg0);

  return true;
}


const JSJitInfo shadowOffsetY_getterinfo = {
  (JSJitPropertyOp)get_shadowOffsetY,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo shadowOffsetY_setterinfo = {
  (JSJitPropertyOp)set_shadowOffsetY,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_shadowBlur(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  double result;
  result = self->ShadowBlur();
  *vp = JS_NumberValue(double(result));
  return true;
}

static bool
set_shadowBlur(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    return true;
  }
  self->SetShadowBlur(arg0);

  return true;
}


const JSJitInfo shadowBlur_getterinfo = {
  (JSJitPropertyOp)get_shadowBlur,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo shadowBlur_setterinfo = {
  (JSJitPropertyOp)set_shadowBlur,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_shadowColor(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  nsString result;
  self->GetShadowColor(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_shadowColor(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetShadowColor(arg0);

  return true;
}


const JSJitInfo shadowColor_getterinfo = {
  (JSJitPropertyOp)get_shadowColor,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo shadowColor_setterinfo = {
  (JSJitPropertyOp)set_shadowColor,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
clearRect(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 4) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.clearRect");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  self->ClearRect(arg0, arg1, arg2, arg3);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo clearRect_methodinfo = {
  (JSJitPropertyOp)clearRect,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
fillRect(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 4) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.fillRect");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  self->FillRect(arg0, arg1, arg2, arg3);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo fillRect_methodinfo = {
  (JSJitPropertyOp)fillRect,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
strokeRect(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 4) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.strokeRect");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  self->StrokeRect(arg0, arg1, arg2, arg3);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo strokeRect_methodinfo = {
  (JSJitPropertyOp)strokeRect,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
beginPath(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{
  self->BeginPath();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo beginPath_methodinfo = {
  (JSJitPropertyOp)beginPath,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
fill(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{
  self->Fill();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo fill_methodinfo = {
  (JSJitPropertyOp)fill,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
stroke(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{
  self->Stroke();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo stroke_methodinfo = {
  (JSJitPropertyOp)stroke,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
clip(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{
  self->Clip();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo clip_methodinfo = {
  (JSJitPropertyOp)clip,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
isPointInPath(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.isPointInPath");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  }
  bool result;
  result = self->IsPointInPath(arg0, arg1);
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo isPointInPath_methodinfo = {
  (JSJitPropertyOp)isPointInPath,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
isPointInStroke(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.isPointInStroke");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  bool result;
  result = self->IsPointInStroke(arg0, arg1);
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo isPointInStroke_methodinfo = {
  (JSJitPropertyOp)isPointInStroke,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
fillText(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 3) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.fillText");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  const Optional< double > arg3;
  if (3 < argc) {
    const_cast< Optional< double > &>(arg3).Construct();
    if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &const_cast< double & >(arg3.Value()))) {
      return false;
    } else if (!MOZ_DOUBLE_IS_FINITE(const_cast< double & >(arg3.Value()))) {
      // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
      //       when passed a non-finite float too.
      *vp = JSVAL_VOID;
      return true;
    }
  }
  ErrorResult rv;
  self->FillText(arg0, arg1, arg2, arg3, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "fillText");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo fillText_methodinfo = {
  (JSJitPropertyOp)fillText,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
strokeText(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 3) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.strokeText");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  const Optional< double > arg3;
  if (3 < argc) {
    const_cast< Optional< double > &>(arg3).Construct();
    if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &const_cast< double & >(arg3.Value()))) {
      return false;
    } else if (!MOZ_DOUBLE_IS_FINITE(const_cast< double & >(arg3.Value()))) {
      // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
      //       when passed a non-finite float too.
      *vp = JSVAL_VOID;
      return true;
    }
  }
  ErrorResult rv;
  self->StrokeText(arg0, arg1, arg2, arg3, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "strokeText");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo strokeText_methodinfo = {
  (JSJitPropertyOp)strokeText,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
measureText(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.measureText");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  nsRefPtr<nsIDOMTextMetrics> result;
  result = self->MeasureText(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "measureText");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo measureText_methodinfo = {
  (JSJitPropertyOp)measureText,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
drawImage(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  unsigned argcount = NS_MIN(argc, 9u);
  switch (argcount) {
    case 3: {

      JS::Value* argv = JS_ARGV(cx, vp);

      const HTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement arg0;
      HTMLImageElementOrHTMLCanvasElementOrHTMLVideoElementArgument arg0_holder(arg0);
      {
        bool done = false, failed = false, tryNext;
        if (argv[0].isObject()) {
          done = (failed = !arg0_holder.TrySetToHTMLImageElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext ||
                 (failed = !arg0_holder.TrySetToHTMLCanvasElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext ||
                 (failed = !arg0_holder.TrySetToHTMLVideoElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext;

        }
        if (failed) {
          return false;
        }
        if (!done) {
          ThrowErrorMessage(cx, MSG_NOT_IN_UNION, "HTMLImageElement, HTMLCanvasElement, HTMLVideoElement");
          return false;
        }
      }
      double arg1;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      double arg2;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      ErrorResult rv;
      self->DrawImage(arg0, arg1, arg2, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "drawImage");
      }
      *vp = JSVAL_VOID;
      return true;
      break;
    }
    case 5: {

      JS::Value* argv = JS_ARGV(cx, vp);

      const HTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement arg0;
      HTMLImageElementOrHTMLCanvasElementOrHTMLVideoElementArgument arg0_holder(arg0);
      {
        bool done = false, failed = false, tryNext;
        if (argv[0].isObject()) {
          done = (failed = !arg0_holder.TrySetToHTMLImageElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext ||
                 (failed = !arg0_holder.TrySetToHTMLCanvasElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext ||
                 (failed = !arg0_holder.TrySetToHTMLVideoElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext;

        }
        if (failed) {
          return false;
        }
        if (!done) {
          ThrowErrorMessage(cx, MSG_NOT_IN_UNION, "HTMLImageElement, HTMLCanvasElement, HTMLVideoElement");
          return false;
        }
      }
      double arg1;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      double arg2;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      double arg3;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      double arg4;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[4], &arg4)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg4)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      ErrorResult rv;
      self->DrawImage(arg0, arg1, arg2, arg3, arg4, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "drawImage");
      }
      *vp = JSVAL_VOID;
      return true;
      break;
    }
    case 9: {

      JS::Value* argv = JS_ARGV(cx, vp);

      const HTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement arg0;
      HTMLImageElementOrHTMLCanvasElementOrHTMLVideoElementArgument arg0_holder(arg0);
      {
        bool done = false, failed = false, tryNext;
        if (argv[0].isObject()) {
          done = (failed = !arg0_holder.TrySetToHTMLImageElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext ||
                 (failed = !arg0_holder.TrySetToHTMLCanvasElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext ||
                 (failed = !arg0_holder.TrySetToHTMLVideoElement(cx, obj, argv[0], &argv[0], tryNext)) || !tryNext;

        }
        if (failed) {
          return false;
        }
        if (!done) {
          ThrowErrorMessage(cx, MSG_NOT_IN_UNION, "HTMLImageElement, HTMLCanvasElement, HTMLVideoElement");
          return false;
        }
      }
      double arg1;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      double arg2;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      double arg3;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      double arg4;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[4], &arg4)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg4)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      double arg5;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[5], &arg5)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg5)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      double arg6;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[6], &arg6)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg6)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      double arg7;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[7], &arg7)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg7)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      double arg8;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[8], &arg8)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg8)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        *vp = JSVAL_VOID;
        return true;
      }
      ErrorResult rv;
      self->DrawImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "drawImage");
      }
      *vp = JSVAL_VOID;
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.drawImage");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}


const JSJitInfo drawImage_methodinfo = {
  (JSJitPropertyOp)drawImage,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
createImageData(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  unsigned argcount = NS_MIN(argc, 2u);
  switch (argcount) {
    case 1: {

      JS::Value* argv = JS_ARGV(cx, vp);

      NonNull<mozilla::dom::ImageData> arg0;
      if (argv[0].isObject()) {
        {
          nsresult rv = UnwrapObject<prototypes::id::ImageData, mozilla::dom::ImageData>(cx, &argv[0].toObject(), arg0);
          if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "ImageData");
            return false;
          }
        }
      } else {
        ThrowErrorMessage(cx, MSG_NOT_OBJECT);
        return false;
      }
      ErrorResult rv;
      nsRefPtr<mozilla::dom::ImageData> result;
      result = self->CreateImageData(cx, arg0, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "createImageData");
      }
      if (!WrapNewBindingNonWrapperCachedObject(cx, obj, result, vp)) {
        MOZ_ASSERT(JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    case 2: {

      JS::Value* argv = JS_ARGV(cx, vp);

      double arg0;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        ThrowErrorMessage(cx, MSG_NOT_FINITE);
        return false;
      }
      double arg1;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        ThrowErrorMessage(cx, MSG_NOT_FINITE);
        return false;
      }
      ErrorResult rv;
      nsRefPtr<mozilla::dom::ImageData> result;
      result = self->CreateImageData(cx, arg0, arg1, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "createImageData");
      }
      if (!WrapNewBindingNonWrapperCachedObject(cx, obj, result, vp)) {
        MOZ_ASSERT(JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.createImageData");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}


const JSJitInfo createImageData_methodinfo = {
  (JSJitPropertyOp)createImageData,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getImageData(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 4) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.getImageData");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  ErrorResult rv;
  nsRefPtr<mozilla::dom::ImageData> result;
  result = self->GetImageData(cx, arg0, arg1, arg2, arg3, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "getImageData");
  }
  if (!WrapNewBindingNonWrapperCachedObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getImageData_methodinfo = {
  (JSJitPropertyOp)getImageData,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
putImageData(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  unsigned argcount = NS_MIN(argc, 7u);
  switch (argcount) {
    case 3: {

      JS::Value* argv = JS_ARGV(cx, vp);

      NonNull<mozilla::dom::ImageData> arg0;
      if (argv[0].isObject()) {
        {
          nsresult rv = UnwrapObject<prototypes::id::ImageData, mozilla::dom::ImageData>(cx, &argv[0].toObject(), arg0);
          if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "ImageData");
            return false;
          }
        }
      } else {
        ThrowErrorMessage(cx, MSG_NOT_OBJECT);
        return false;
      }
      double arg1;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        ThrowErrorMessage(cx, MSG_NOT_FINITE);
        return false;
      }
      double arg2;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        ThrowErrorMessage(cx, MSG_NOT_FINITE);
        return false;
      }
      ErrorResult rv;
      self->PutImageData(arg0, arg1, arg2, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "putImageData");
      }
      *vp = JSVAL_VOID;
      return true;
      break;
    }
    case 7: {

      JS::Value* argv = JS_ARGV(cx, vp);

      NonNull<mozilla::dom::ImageData> arg0;
      if (argv[0].isObject()) {
        {
          nsresult rv = UnwrapObject<prototypes::id::ImageData, mozilla::dom::ImageData>(cx, &argv[0].toObject(), arg0);
          if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "ImageData");
            return false;
          }
        }
      } else {
        ThrowErrorMessage(cx, MSG_NOT_OBJECT);
        return false;
      }
      double arg1;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        ThrowErrorMessage(cx, MSG_NOT_FINITE);
        return false;
      }
      double arg2;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        ThrowErrorMessage(cx, MSG_NOT_FINITE);
        return false;
      }
      double arg3;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        ThrowErrorMessage(cx, MSG_NOT_FINITE);
        return false;
      }
      double arg4;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[4], &arg4)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg4)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        ThrowErrorMessage(cx, MSG_NOT_FINITE);
        return false;
      }
      double arg5;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[5], &arg5)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg5)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        ThrowErrorMessage(cx, MSG_NOT_FINITE);
        return false;
      }
      double arg6;
      if (!ValueToPrimitive<double, eDefault>(cx, argv[6], &arg6)) {
        return false;
      } else if (!MOZ_DOUBLE_IS_FINITE(arg6)) {
        // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
        //       when passed a non-finite float too.
        ThrowErrorMessage(cx, MSG_NOT_FINITE);
        return false;
      }
      ErrorResult rv;
      self->PutImageData(arg0, arg1, arg2, arg3, arg4, arg5, arg6, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "putImageData");
      }
      *vp = JSVAL_VOID;
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.putImageData");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}


const JSJitInfo putImageData_methodinfo = {
  (JSJitPropertyOp)putImageData,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozCurrentTransform(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  ErrorResult rv;
  JSObject* result;
  result = self->GetMozCurrentTransform(cx, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "mozCurrentTransform");
  }
  *vp = JS::ObjectValue(*result);
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}

static bool
set_mozCurrentTransform(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  NonNull<JSObject> arg0;
  if (argv[0].isObject()) {
    arg0 = &argv[0].toObject();
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  self->SetMozCurrentTransform(cx, (JSObject&)arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "mozCurrentTransform");
  }

  return true;
}


const JSJitInfo mozCurrentTransform_getterinfo = {
  (JSJitPropertyOp)get_mozCurrentTransform,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo mozCurrentTransform_setterinfo = {
  (JSJitPropertyOp)set_mozCurrentTransform,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozCurrentTransformInverse(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  ErrorResult rv;
  JSObject* result;
  result = self->GetMozCurrentTransformInverse(cx, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "mozCurrentTransformInverse");
  }
  *vp = JS::ObjectValue(*result);
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}

static bool
set_mozCurrentTransformInverse(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  NonNull<JSObject> arg0;
  if (argv[0].isObject()) {
    arg0 = &argv[0].toObject();
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  self->SetMozCurrentTransformInverse(cx, (JSObject&)arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "mozCurrentTransformInverse");
  }

  return true;
}


const JSJitInfo mozCurrentTransformInverse_getterinfo = {
  (JSJitPropertyOp)get_mozCurrentTransformInverse,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo mozCurrentTransformInverse_setterinfo = {
  (JSJitPropertyOp)set_mozCurrentTransformInverse,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozFillRule(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  nsString result;
  self->GetFillRule(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_mozFillRule(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetFillRule(arg0);

  return true;
}


const JSJitInfo mozFillRule_getterinfo = {
  (JSJitPropertyOp)get_mozFillRule,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo mozFillRule_setterinfo = {
  (JSJitPropertyOp)set_mozFillRule,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozDash(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  ErrorResult rv;
  JS::Value result;
  result = self->GetMozDash(cx, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "mozDash");
  }
  *vp = result;
  if (!MaybeWrapValue(cx, vp)) {
    return false;
  }
  return true;
}

static bool
set_mozDash(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  JS::Value arg0;
  arg0 = argv[0];
  ErrorResult rv;
  self->SetMozDash(cx, arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "mozDash");
  }

  return true;
}


const JSJitInfo mozDash_getterinfo = {
  (JSJitPropertyOp)get_mozDash,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo mozDash_setterinfo = {
  (JSJitPropertyOp)set_mozDash,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozDashOffset(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  double result;
  result = self->MozDashOffset();
  *vp = JS_NumberValue(double(result));
  return true;
}

static bool
set_mozDashOffset(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    return true;
  }
  self->SetMozDashOffset(arg0);

  return true;
}


const JSJitInfo mozDashOffset_getterinfo = {
  (JSJitPropertyOp)get_mozDashOffset,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo mozDashOffset_setterinfo = {
  (JSJitPropertyOp)set_mozDashOffset,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozTextStyle(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  nsString result;
  self->GetMozTextStyle(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_mozTextStyle(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetMozTextStyle(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "mozTextStyle");
  }

  return true;
}


const JSJitInfo mozTextStyle_getterinfo = {
  (JSJitPropertyOp)get_mozTextStyle,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo mozTextStyle_setterinfo = {
  (JSJitPropertyOp)set_mozTextStyle,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_mozImageSmoothingEnabled(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  bool result;
  result = self->ImageSmoothingEnabled();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}

static bool
set_mozImageSmoothingEnabled(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  bool arg0;
  if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  self->SetImageSmoothingEnabled(arg0);

  return true;
}


const JSJitInfo mozImageSmoothingEnabled_getterinfo = {
  (JSJitPropertyOp)get_mozImageSmoothingEnabled,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo mozImageSmoothingEnabled_setterinfo = {
  (JSJitPropertyOp)set_mozImageSmoothingEnabled,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
drawWindow(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 6) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.drawWindow");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<nsIDOMWindow> arg0_holder;
  nsIDOMWindow* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    nsIDOMWindow* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMWindow>(cx, argv[0], &tmp, static_cast<nsIDOMWindow**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Window");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg4;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[4], &arg4)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg4)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  FakeDependentString arg5_holder;
  const NonNull<nsAString> arg5;
  if (!ConvertJSValueToString(cx, argv[5], &argv[5], eStringify, eStringify, arg5_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg5) = &arg5_holder;
  uint32_t arg6;
  if (6 < argc) {
    if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[6], &arg6)) {
      return false;
    }
  } else {
    arg6 = 0;
  }
  ErrorResult rv;
  self->DrawWindow(arg0, arg1, arg2, arg3, arg4, arg5, arg6, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "drawWindow");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo drawWindow_methodinfo = {
  (JSJitPropertyOp)drawWindow,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
asyncDrawXULElement(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 6) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.asyncDrawXULElement");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<nsIDOMXULElement> arg0_holder;
  nsIDOMXULElement* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    nsIDOMXULElement* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMXULElement>(cx, argv[0], &tmp, static_cast<nsIDOMXULElement**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "XULElement");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  double arg4;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[4], &arg4)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg4)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  FakeDependentString arg5_holder;
  const NonNull<nsAString> arg5;
  if (!ConvertJSValueToString(cx, argv[5], &argv[5], eStringify, eStringify, arg5_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg5) = &arg5_holder;
  uint32_t arg6;
  if (6 < argc) {
    if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[6], &arg6)) {
      return false;
    }
  } else {
    arg6 = 0;
  }
  ErrorResult rv;
  self->AsyncDrawXULElement(arg0, arg1, arg2, arg3, arg4, arg5, arg6, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "asyncDrawXULElement");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo asyncDrawXULElement_methodinfo = {
  (JSJitPropertyOp)asyncDrawXULElement,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_lineWidth(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  double result;
  result = self->LineWidth();
  *vp = JS_NumberValue(double(result));
  return true;
}

static bool
set_lineWidth(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    return true;
  }
  self->SetLineWidth(arg0);

  return true;
}


const JSJitInfo lineWidth_getterinfo = {
  (JSJitPropertyOp)get_lineWidth,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo lineWidth_setterinfo = {
  (JSJitPropertyOp)set_lineWidth,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_lineCap(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  nsString result;
  self->GetLineCap(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_lineCap(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetLineCap(arg0);

  return true;
}


const JSJitInfo lineCap_getterinfo = {
  (JSJitPropertyOp)get_lineCap,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo lineCap_setterinfo = {
  (JSJitPropertyOp)set_lineCap,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_lineJoin(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  ErrorResult rv;
  nsString result;
  self->GetLineJoin(result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "lineJoin");
  }
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_lineJoin(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetLineJoin(arg0);

  return true;
}


const JSJitInfo lineJoin_getterinfo = {
  (JSJitPropertyOp)get_lineJoin,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo lineJoin_setterinfo = {
  (JSJitPropertyOp)set_lineJoin,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_miterLimit(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  double result;
  result = self->MiterLimit();
  *vp = JS_NumberValue(double(result));
  return true;
}

static bool
set_miterLimit(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    return true;
  }
  self->SetMiterLimit(arg0);

  return true;
}


const JSJitInfo miterLimit_getterinfo = {
  (JSJitPropertyOp)get_miterLimit,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo miterLimit_setterinfo = {
  (JSJitPropertyOp)set_miterLimit,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_font(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  nsString result;
  self->GetFont(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_font(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetFont(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "font");
  }

  return true;
}


const JSJitInfo font_getterinfo = {
  (JSJitPropertyOp)get_font,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo font_setterinfo = {
  (JSJitPropertyOp)set_font,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_textAlign(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  nsString result;
  self->GetTextAlign(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_textAlign(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetTextAlign(arg0);

  return true;
}


const JSJitInfo textAlign_getterinfo = {
  (JSJitPropertyOp)get_textAlign,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo textAlign_setterinfo = {
  (JSJitPropertyOp)set_textAlign,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_textBaseline(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* vp)
{
  nsString result;
  self->GetTextBaseline(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_textBaseline(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetTextBaseline(arg0);

  return true;
}


const JSJitInfo textBaseline_getterinfo = {
  (JSJitPropertyOp)get_textBaseline,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo textBaseline_setterinfo = {
  (JSJitPropertyOp)set_textBaseline,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
closePath(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{
  self->ClosePath();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo closePath_methodinfo = {
  (JSJitPropertyOp)closePath,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
moveTo(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.moveTo");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  self->MoveTo(arg0, arg1);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo moveTo_methodinfo = {
  (JSJitPropertyOp)moveTo,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
lineTo(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.lineTo");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  self->LineTo(arg0, arg1);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo lineTo_methodinfo = {
  (JSJitPropertyOp)lineTo,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
quadraticCurveTo(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 4) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.quadraticCurveTo");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  self->QuadraticCurveTo(arg0, arg1, arg2, arg3);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo quadraticCurveTo_methodinfo = {
  (JSJitPropertyOp)quadraticCurveTo,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
bezierCurveTo(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 6) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.bezierCurveTo");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg4;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[4], &arg4)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg4)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg5;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[5], &arg5)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg5)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  self->BezierCurveTo(arg0, arg1, arg2, arg3, arg4, arg5);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo bezierCurveTo_methodinfo = {
  (JSJitPropertyOp)bezierCurveTo,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
arcTo(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 5) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.arcTo");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg4;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[4], &arg4)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg4)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  ErrorResult rv;
  self->ArcTo(arg0, arg1, arg2, arg3, arg4, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "arcTo");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo arcTo_methodinfo = {
  (JSJitPropertyOp)arcTo,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
rect(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 4) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.rect");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  self->Rect(arg0, arg1, arg2, arg3);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo rect_methodinfo = {
  (JSJitPropertyOp)rect,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
arc(JSContext* cx, JSHandleObject obj, mozilla::dom::CanvasRenderingContext2D* self, unsigned argc, JS::Value* vp)
{

  if (argc < 5) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D.arc");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[0], &arg0)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg0)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[2], &arg2)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg2)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[3], &arg3)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg3)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  double arg4;
  if (!ValueToPrimitive<double, eDefault>(cx, argv[4], &arg4)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg4)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    *vp = JSVAL_VOID;
    return true;
  }
  bool arg5;
  if (5 < argc) {
    if (!ValueToPrimitive<bool, eDefault>(cx, argv[5], &arg5)) {
      return false;
    }
  } else {
    arg5 = false;
  }
  ErrorResult rv;
  self->Arc(arg0, arg1, arg2, arg3, arg4, arg5, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CanvasRenderingContext2D", "arc");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo arc_methodinfo = {
  (JSJitPropertyOp)arc,
  prototypes::id::CanvasRenderingContext2D,
  PrototypeTraits<prototypes::id::CanvasRenderingContext2D>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::CanvasRenderingContext2D* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::CanvasRenderingContext2D, mozilla::dom::CanvasRenderingContext2D>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "CanvasRenderingContext2D");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::CanvasRenderingContext2D* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::CanvasRenderingContext2D, mozilla::dom::CanvasRenderingContext2D>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "CanvasRenderingContext2D");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::CanvasRenderingContext2D* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::CanvasRenderingContext2D, mozilla::dom::CanvasRenderingContext2D>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "CanvasRenderingContext2D");
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CanvasRenderingContext2D attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::CanvasRenderingContext2D>::value), "Must be an nsISupports class");
  mozilla::dom::CanvasRenderingContext2D* self = UnwrapDOMObject<mozilla::dom::CanvasRenderingContext2D>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::CanvasRenderingContext2D>::value), "Must be an nsISupports class");
  mozilla::dom::CanvasRenderingContext2D* self = UnwrapDOMObject<mozilla::dom::CanvasRenderingContext2D>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("save", genericMethod, &save_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("restore", genericMethod, &restore_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("scale", genericMethod, &scale_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("rotate", genericMethod, &rotate_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("translate", genericMethod, &translate_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("transform", genericMethod, &transform_methodinfo, 6, JSPROP_ENUMERATE),
  JS_FNINFO("setTransform", genericMethod, &setTransform_methodinfo, 6, JSPROP_ENUMERATE),
  JS_FNINFO("createLinearGradient", genericMethod, &createLinearGradient_methodinfo, 4, JSPROP_ENUMERATE),
  JS_FNINFO("createRadialGradient", genericMethod, &createRadialGradient_methodinfo, 6, JSPROP_ENUMERATE),
  JS_FNINFO("createPattern", genericMethod, &createPattern_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("clearRect", genericMethod, &clearRect_methodinfo, 4, JSPROP_ENUMERATE),
  JS_FNINFO("fillRect", genericMethod, &fillRect_methodinfo, 4, JSPROP_ENUMERATE),
  JS_FNINFO("strokeRect", genericMethod, &strokeRect_methodinfo, 4, JSPROP_ENUMERATE),
  JS_FNINFO("beginPath", genericMethod, &beginPath_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("fill", genericMethod, &fill_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("stroke", genericMethod, &stroke_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("clip", genericMethod, &clip_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("isPointInPath", genericMethod, &isPointInPath_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("isPointInStroke", genericMethod, &isPointInStroke_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("fillText", genericMethod, &fillText_methodinfo, 3, JSPROP_ENUMERATE),
  JS_FNINFO("strokeText", genericMethod, &strokeText_methodinfo, 3, JSPROP_ENUMERATE),
  JS_FNINFO("measureText", genericMethod, &measureText_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("drawImage", genericMethod, &drawImage_methodinfo, 3, JSPROP_ENUMERATE),
  JS_FNINFO("createImageData", genericMethod, &createImageData_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getImageData", genericMethod, &getImageData_methodinfo, 4, JSPROP_ENUMERATE),
  JS_FNINFO("putImageData", genericMethod, &putImageData_methodinfo, 3, JSPROP_ENUMERATE),
  JS_FNINFO("closePath", genericMethod, &closePath_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("moveTo", genericMethod, &moveTo_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("lineTo", genericMethod, &lineTo_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("quadraticCurveTo", genericMethod, &quadraticCurveTo_methodinfo, 4, JSPROP_ENUMERATE),
  JS_FNINFO("bezierCurveTo", genericMethod, &bezierCurveTo_methodinfo, 6, JSPROP_ENUMERATE),
  JS_FNINFO("arcTo", genericMethod, &arcTo_methodinfo, 5, JSPROP_ENUMERATE),
  JS_FNINFO("rect", genericMethod, &rect_methodinfo, 4, JSPROP_ENUMERATE),
  JS_FNINFO("arc", genericMethod, &arc_methodinfo, 5, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[35] = { JSID_VOID };

static JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNINFO("drawWindow", genericMethod, &drawWindow_methodinfo, 6, JSPROP_ENUMERATE),
  JS_FNINFO("asyncDrawXULElement", genericMethod, &asyncDrawXULElement_methodinfo, 6, JSPROP_ENUMERATE),
  JS_FNINFO("QueryInterface", QueryInterface, nullptr, 1, 0),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sChromeMethods[] = {
  { true, &sChromeMethods_specs[0] },
  { false, NULL }
};

static jsid sChromeMethods_ids[4] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "canvas", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &canvas_getterinfo }, JSOP_NULLWRAPPER},
  { "globalAlpha", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &globalAlpha_getterinfo }, { (JSStrictPropertyOp)genericSetter, &globalAlpha_setterinfo }},
  { "globalCompositeOperation", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &globalCompositeOperation_getterinfo }, { (JSStrictPropertyOp)genericSetter, &globalCompositeOperation_setterinfo }},
  { "strokeStyle", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &strokeStyle_getterinfo }, { (JSStrictPropertyOp)genericSetter, &strokeStyle_setterinfo }},
  { "fillStyle", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &fillStyle_getterinfo }, { (JSStrictPropertyOp)genericSetter, &fillStyle_setterinfo }},
  { "shadowOffsetX", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &shadowOffsetX_getterinfo }, { (JSStrictPropertyOp)genericSetter, &shadowOffsetX_setterinfo }},
  { "shadowOffsetY", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &shadowOffsetY_getterinfo }, { (JSStrictPropertyOp)genericSetter, &shadowOffsetY_setterinfo }},
  { "shadowBlur", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &shadowBlur_getterinfo }, { (JSStrictPropertyOp)genericSetter, &shadowBlur_setterinfo }},
  { "shadowColor", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &shadowColor_getterinfo }, { (JSStrictPropertyOp)genericSetter, &shadowColor_setterinfo }},
  { "mozCurrentTransform", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozCurrentTransform_getterinfo }, { (JSStrictPropertyOp)genericSetter, &mozCurrentTransform_setterinfo }},
  { "mozCurrentTransformInverse", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozCurrentTransformInverse_getterinfo }, { (JSStrictPropertyOp)genericSetter, &mozCurrentTransformInverse_setterinfo }},
  { "mozFillRule", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozFillRule_getterinfo }, { (JSStrictPropertyOp)genericSetter, &mozFillRule_setterinfo }},
  { "mozDash", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozDash_getterinfo }, { (JSStrictPropertyOp)genericSetter, &mozDash_setterinfo }},
  { "mozDashOffset", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozDashOffset_getterinfo }, { (JSStrictPropertyOp)genericSetter, &mozDashOffset_setterinfo }},
  { "mozTextStyle", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozTextStyle_getterinfo }, { (JSStrictPropertyOp)genericSetter, &mozTextStyle_setterinfo }},
  { "mozImageSmoothingEnabled", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &mozImageSmoothingEnabled_getterinfo }, { (JSStrictPropertyOp)genericSetter, &mozImageSmoothingEnabled_setterinfo }},
  { "lineWidth", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &lineWidth_getterinfo }, { (JSStrictPropertyOp)genericSetter, &lineWidth_setterinfo }},
  { "lineCap", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &lineCap_getterinfo }, { (JSStrictPropertyOp)genericSetter, &lineCap_setterinfo }},
  { "lineJoin", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &lineJoin_getterinfo }, { (JSStrictPropertyOp)genericSetter, &lineJoin_setterinfo }},
  { "miterLimit", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &miterLimit_getterinfo }, { (JSStrictPropertyOp)genericSetter, &miterLimit_setterinfo }},
  { "font", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &font_getterinfo }, { (JSStrictPropertyOp)genericSetter, &font_setterinfo }},
  { "textAlign", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &textAlign_getterinfo }, { (JSStrictPropertyOp)genericSetter, &textAlign_setterinfo }},
  { "textBaseline", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &textBaseline_getterinfo }, { (JSStrictPropertyOp)genericSetter, &textBaseline_setterinfo }},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[24] = { JSID_VOID };

static ConstantSpec sChromeConstants_specs[] = {
  { "DRAWWINDOW_DRAW_CARET", UINT_TO_JSVAL(1) },
  { "DRAWWINDOW_DO_NOT_FLUSH", UINT_TO_JSVAL(2) },
  { "DRAWWINDOW_DRAW_VIEW", UINT_TO_JSVAL(4) },
  { "DRAWWINDOW_USE_WIDGET_LAYERS", UINT_TO_JSVAL(8) },
  { "DRAWWINDOW_ASYNC_DECODE_IMAGES", UINT_TO_JSVAL(16) },
  { 0, JSVAL_VOID }
};

static Prefable<ConstantSpec> sChromeConstants[] = {
  { true, &sChromeConstants_specs[0] },
  { false, NULL }
};

static jsid sChromeConstants_ids[6] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};

static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeMethods, sChromeMethods_ids, sChromeMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeConstants, sChromeConstants_ids, sChromeConstants_specs
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, &sChromeOnlyNativeProperties },
  prototypes::id::CanvasRenderingContext2D,
  constructors::id::CanvasRenderingContext2D,
  NULL
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "CanvasRenderingContext2DPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sChromeMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sChromeMethods, sChromeMethods_ids) ||
       !InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids) ||
       !InitIds(aCx, sChromeConstants, sChromeConstants_ids))) {
    sChromeMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::CanvasRenderingContext2D],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::CanvasRenderingContext2D],
                              &Class.mClass,
                              &sNativeProperties,
                              xpc::AccessCheck::isChrome(aGlobal) ? &sChromeOnlyNativeProperties : nullptr,
                              "CanvasRenderingContext2D");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "CanvasRenderingContext2D",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::CanvasRenderingContext2D, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<mozilla::dom::CanvasRenderingContext2D>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, mozilla::dom::CanvasRenderingContext2D* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<mozilla::dom::CanvasRenderingContext2D*>(aObject) ==
             reinterpret_cast<mozilla::dom::CanvasRenderingContext2D*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace CanvasRenderingContext2DBinding



} // namespace dom
} // namespace mozilla
