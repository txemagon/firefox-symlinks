/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "FileReaderSyncBinding.h"
#include "PrimitiveConversions.h"
#include "URLBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/URL.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIDOMFile.h"
#include "nsIDOMMediaStream.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

bool
objectURLOptionsWorkers::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }


  return true;
}

bool
objectURLOptionsWorkers::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);



  return true;
}

bool
objectURLOptions::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }


  return true;
}

bool
objectURLOptions::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);



  return true;
}

namespace URLBinding {

static JSBool
createObjectURL(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  // We have to be careful to leave "obj" in its existing compartment, even
  // while we grab our global from the real underlying object, because we
  // use it for unwrapping the other arguments later.
  nsISupports* global;
  xpc_qsSelfRef globalRef;
  {
    JS::Value val;
    Maybe<JSAutoCompartment> ac;
    if (js::IsWrapper(obj)) {
      JSObject* realObj = XPCWrapper::Unwrap(cx, obj, false);
      if (!realObj) {
        return Throw<true>(cx, NS_ERROR_XPC_SECURITY_MANAGER_VETO);
      }
      ac.construct(cx, realObj);
      val.setObject(*JS_GetGlobalForObject(cx, realObj));
    } else {
      val.setObject(*JS_GetGlobalForObject(cx, obj));
    }

    nsresult rv = xpc_qsUnwrapArg<nsISupports>(cx, val, &global, &globalRef.ptr,
                                               &val);
    if (NS_FAILED(rv)) {
      return Throw<true>(cx, NS_ERROR_XPC_BAD_CONVERT_JS);
    }
  }


  unsigned argcount = NS_MIN(argc, 2u);
  switch (argcount) {
    case 1: {
      JS::Value* argv_start = JS_ARGV(cx, vp);
      if (argv_start[0].isObject()) {
        do {
          nsRefPtr<nsIDOMBlob> arg0_holder;
          nsIDOMBlob* arg0;
          jsval tmpVal = argv_start[0];
          nsIDOMBlob* tmp;
          if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMBlob>(cx, argv_start[0], &tmp, static_cast<nsIDOMBlob**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
            break;
          }
          MOZ_ASSERT(tmp);
          arg0 = tmp;

          JS::Value* argv = JS_ARGV(cx, vp);

          const objectURLOptions arg1;
          if (!const_cast<objectURLOptions&>(arg1).Init(cx, obj, (1 < argc) ? argv[1] : JSVAL_NULL)) {
            return false;
          }
          ErrorResult rv;
          nsString result;
          mozilla::dom::URL::CreateObjectURL(global, arg0, arg1, result, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "URL", "createObjectURL");
          }
          if (!xpc::StringToJsval(cx, result, vp)) {
            return false;
          }
          return true;
        } while (0);
        do {
          nsRefPtr<nsIDOMMediaStream> arg0_holder;
          nsIDOMMediaStream* arg0;
          jsval tmpVal = argv_start[0];
          nsIDOMMediaStream* tmp;
          if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMMediaStream>(cx, argv_start[0], &tmp, static_cast<nsIDOMMediaStream**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
            break;
          }
          MOZ_ASSERT(tmp);
          arg0 = tmp;

          JS::Value* argv = JS_ARGV(cx, vp);

          const objectURLOptions arg1;
          if (!const_cast<objectURLOptions&>(arg1).Init(cx, obj, (1 < argc) ? argv[1] : JSVAL_NULL)) {
            return false;
          }
          ErrorResult rv;
          nsString result;
          mozilla::dom::URL::CreateObjectURL(global, arg0, arg1, result, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "URL", "createObjectURL");
          }
          if (!xpc::StringToJsval(cx, result, vp)) {
            return false;
          }
          return true;
        } while (0);
      }
      return ThrowErrorMessage(cx, MSG_INVALID_ARG, "0", "1");
      break;
    }
    case 2: {
      JS::Value* argv_start = JS_ARGV(cx, vp);
      if (argv_start[0].isObject()) {
        do {
          nsRefPtr<nsIDOMBlob> arg0_holder;
          nsIDOMBlob* arg0;
          jsval tmpVal = argv_start[0];
          nsIDOMBlob* tmp;
          if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMBlob>(cx, argv_start[0], &tmp, static_cast<nsIDOMBlob**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
            break;
          }
          MOZ_ASSERT(tmp);
          arg0 = tmp;

          JS::Value* argv = JS_ARGV(cx, vp);

          const objectURLOptions arg1;
          if (!const_cast<objectURLOptions&>(arg1).Init(cx, obj, (1 < argc) ? argv[1] : JSVAL_NULL)) {
            return false;
          }
          ErrorResult rv;
          nsString result;
          mozilla::dom::URL::CreateObjectURL(global, arg0, arg1, result, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "URL", "createObjectURL");
          }
          if (!xpc::StringToJsval(cx, result, vp)) {
            return false;
          }
          return true;
        } while (0);
        do {
          nsRefPtr<nsIDOMMediaStream> arg0_holder;
          nsIDOMMediaStream* arg0;
          jsval tmpVal = argv_start[0];
          nsIDOMMediaStream* tmp;
          if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMMediaStream>(cx, argv_start[0], &tmp, static_cast<nsIDOMMediaStream**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
            break;
          }
          MOZ_ASSERT(tmp);
          arg0 = tmp;

          JS::Value* argv = JS_ARGV(cx, vp);

          const objectURLOptions arg1;
          if (!const_cast<objectURLOptions&>(arg1).Init(cx, obj, (1 < argc) ? argv[1] : JSVAL_NULL)) {
            return false;
          }
          ErrorResult rv;
          nsString result;
          mozilla::dom::URL::CreateObjectURL(global, arg0, arg1, result, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "URL", "createObjectURL");
          }
          if (!xpc::StringToJsval(cx, result, vp)) {
            return false;
          }
          return true;
        } while (0);
      }
      return ThrowErrorMessage(cx, MSG_INVALID_ARG, "0", "2");
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "URL.createObjectURL");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}

static JSBool
revokeObjectURL(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  // We have to be careful to leave "obj" in its existing compartment, even
  // while we grab our global from the real underlying object, because we
  // use it for unwrapping the other arguments later.
  nsISupports* global;
  xpc_qsSelfRef globalRef;
  {
    JS::Value val;
    Maybe<JSAutoCompartment> ac;
    if (js::IsWrapper(obj)) {
      JSObject* realObj = XPCWrapper::Unwrap(cx, obj, false);
      if (!realObj) {
        return Throw<true>(cx, NS_ERROR_XPC_SECURITY_MANAGER_VETO);
      }
      ac.construct(cx, realObj);
      val.setObject(*JS_GetGlobalForObject(cx, realObj));
    } else {
      val.setObject(*JS_GetGlobalForObject(cx, obj));
    }

    nsresult rv = xpc_qsUnwrapArg<nsISupports>(cx, val, &global, &globalRef.ptr,
                                               &val);
    if (NS_FAILED(rv)) {
      return Throw<true>(cx, NS_ERROR_XPC_BAD_CONVERT_JS);
    }
  }


  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "URL.revokeObjectURL");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  mozilla::dom::URL::RevokeObjectURL(global, arg0);
  *vp = JSVAL_VOID;
  return true;
}

static JSFunctionSpec sStaticMethods_specs[] = {
  JS_FNINFO("createObjectURL", createObjectURL, nullptr, 1, JSPROP_ENUMERATE),
  JS_FNINFO("revokeObjectURL", revokeObjectURL, nullptr, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sStaticMethods[] = {
  { true, &sStaticMethods_specs[0] },
  { false, NULL }
};

static jsid sStaticMethods_ids[3] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  sStaticMethods, sStaticMethods_ids, sStaticMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::_ID_Count,
  constructors::id::URL,
  NULL
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sStaticMethods_ids[0] == JSID_VOID &&
      !InitIds(aCx, sStaticMethods, sStaticMethods_ids)) {
    sStaticMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              nullptr, nullptr,
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::URL],
                              nullptr,
                              &sNativeProperties,
                              nullptr,
                              "URL");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

} // namespace URLBinding



} // namespace dom
} // namespace mozilla
