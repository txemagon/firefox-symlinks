/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "EventHandlerBinding.h"
#include "EventSourceBinding.h"
#include "EventTargetBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/EventSource.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

bool
EventSourceInitWorkers::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasProperty(cx, &val.toObject(), "withCredentials", &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetProperty(cx, &val.toObject(), "withCredentials", &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mWithCredentials)) {
      return false;
    }
  } else {
    mWithCredentials = false;
  }
  return true;
}

bool
EventSourceInitWorkers::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mWithCredentials;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefineProperty(cx, obj, "withCredentials", temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}

bool EventSourceInit::initedIds = false;
jsid EventSourceInit::withCredentials_id = JSID_VOID;

bool
EventSourceInit::InitIds(JSContext* cx)
{
  MOZ_ASSERT(!initedIds);
  if (!InternJSString(cx, withCredentials_id, "withCredentials")) {
    return false;
  }
  initedIds = true;
  return true;
}

bool
EventSourceInit::Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  MOZ_ASSERT_IF(!cx, val.isNull());
  if (cx && !initedIds && !InitIds(cx)) {
    return false;
  }
  JSBool found;
  JS::Value temp;
  bool isNull = val.isNullOrUndefined();
  if (!IsConvertibleToDictionary(cx, val)) {
    return ThrowErrorMessage(cx, MSG_NOT_DICTIONARY);
  }

  if (isNull) {
    found = false;
  } else if (!JS_HasPropertyById(cx, &val.toObject(), withCredentials_id, &found)) {
    return false;
  }
  if (found) {
    if (!JS_GetPropertyById(cx, &val.toObject(), withCredentials_id, &temp)) {
      return false;
    }
  }
  if (found) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp, &mWithCredentials)) {
      return false;
    }
  } else {
    mWithCredentials = false;
  }
  return true;
}

bool
EventSourceInit::ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp)
{
  if (!initedIds && !InitIds(cx)) {
    return false;
  }
  JSObject* obj = JS_NewObject(cx, nullptr, nullptr, nullptr);
  if (!obj) {
    return false;
  }
  *vp = JS::ObjectValue(*obj);

  {
    // scope for 'temp' and 'currentValue'
    JS::Value temp;
    bool& currentValue = mWithCredentials;
    temp = BOOLEAN_TO_JSVAL(currentValue);
    if (!JS_DefinePropertyById(cx, obj, withCredentials_id, temp, nullptr, nullptr, JSPROP_ENUMERATE)) {
      return false;
    }
  }

  return true;
}

namespace EventSourceBinding {

static bool
get_url(JSContext* cx, JSHandleObject obj, mozilla::dom::EventSource* self, JS::Value* vp)
{
  nsString result;
  self->GetUrl(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo url_getterinfo = {
  (JSJitPropertyOp)get_url,
  prototypes::id::EventSource,
  PrototypeTraits<prototypes::id::EventSource>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_withCredentials(JSContext* cx, JSHandleObject obj, mozilla::dom::EventSource* self, JS::Value* vp)
{
  bool result;
  result = self->WithCredentials();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo withCredentials_getterinfo = {
  (JSJitPropertyOp)get_withCredentials,
  prototypes::id::EventSource,
  PrototypeTraits<prototypes::id::EventSource>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_readyState(JSContext* cx, JSHandleObject obj, mozilla::dom::EventSource* self, JS::Value* vp)
{
  uint16_t result;
  result = self->ReadyState();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo readyState_getterinfo = {
  (JSJitPropertyOp)get_readyState,
  prototypes::id::EventSource,
  PrototypeTraits<prototypes::id::EventSource>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_onopen(JSContext* cx, JSHandleObject obj, mozilla::dom::EventSource* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnopen();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onopen(JSContext* cx, JSHandleObject obj, mozilla::dom::EventSource* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnopen(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "EventSource", "onopen");
  }

  return true;
}


const JSJitInfo onopen_getterinfo = {
  (JSJitPropertyOp)get_onopen,
  prototypes::id::EventSource,
  PrototypeTraits<prototypes::id::EventSource>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onopen_setterinfo = {
  (JSJitPropertyOp)set_onopen,
  prototypes::id::EventSource,
  PrototypeTraits<prototypes::id::EventSource>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_onmessage(JSContext* cx, JSHandleObject obj, mozilla::dom::EventSource* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnmessage();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onmessage(JSContext* cx, JSHandleObject obj, mozilla::dom::EventSource* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnmessage(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "EventSource", "onmessage");
  }

  return true;
}


const JSJitInfo onmessage_getterinfo = {
  (JSJitPropertyOp)get_onmessage,
  prototypes::id::EventSource,
  PrototypeTraits<prototypes::id::EventSource>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onmessage_setterinfo = {
  (JSJitPropertyOp)set_onmessage,
  prototypes::id::EventSource,
  PrototypeTraits<prototypes::id::EventSource>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_onerror(JSContext* cx, JSHandleObject obj, mozilla::dom::EventSource* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnerror();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onerror(JSContext* cx, JSHandleObject obj, mozilla::dom::EventSource* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnerror(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "EventSource", "onerror");
  }

  return true;
}


const JSJitInfo onerror_getterinfo = {
  (JSJitPropertyOp)get_onerror,
  prototypes::id::EventSource,
  PrototypeTraits<prototypes::id::EventSource>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onerror_setterinfo = {
  (JSJitPropertyOp)set_onerror,
  prototypes::id::EventSource,
  PrototypeTraits<prototypes::id::EventSource>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
close(JSContext* cx, JSHandleObject obj, mozilla::dom::EventSource* self, unsigned argc, JS::Value* vp)
{
  self->Close();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo close_methodinfo = {
  (JSJitPropertyOp)close,
  prototypes::id::EventSource,
  PrototypeTraits<prototypes::id::EventSource>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::EventSource* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::EventSource, mozilla::dom::EventSource>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventSource");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::EventSource* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::EventSource, mozilla::dom::EventSource>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventSource");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::EventSource* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::EventSource, mozilla::dom::EventSource>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventSource");
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "EventSource attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::EventSource>::value), "Must be an nsISupports class");
  mozilla::dom::EventSource* self = UnwrapDOMObject<mozilla::dom::EventSource>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::EventSource>::value), "Must be an nsISupports class");
  mozilla::dom::EventSource* self = UnwrapDOMObject<mozilla::dom::EventSource>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("close", genericMethod, &close_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[2] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "url", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &url_getterinfo }, JSOP_NULLWRAPPER},
  { "withCredentials", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &withCredentials_getterinfo }, JSOP_NULLWRAPPER},
  { "readyState", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &readyState_getterinfo }, JSOP_NULLWRAPPER},
  { "onopen", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &onopen_getterinfo }, { (JSStrictPropertyOp)genericSetter, &onopen_setterinfo }},
  { "onmessage", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &onmessage_getterinfo }, { (JSStrictPropertyOp)genericSetter, &onmessage_setterinfo }},
  { "onerror", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &onerror_getterinfo }, { (JSStrictPropertyOp)genericSetter, &onerror_setterinfo }},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[7] = { JSID_VOID };

static ConstantSpec sConstants_specs[] = {
  { "CONNECTING", INT_TO_JSVAL(0) },
  { "OPEN", INT_TO_JSVAL(1) },
  { "CLOSED", INT_TO_JSVAL(2) },
  { 0, JSVAL_VOID }
};

static Prefable<ConstantSpec> sConstants[] = {
  { true, &sConstants_specs[0] },
  { false, NULL }
};

static jsid sConstants_ids[4] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  sConstants, sConstants_ids, sConstants_specs
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::EventSource,
  constructors::id::EventSource,
  &EventTargetBinding::sNativePropertyHooks
};

static JSBool
_constructor(JSContext* cx, unsigned argc, JS::Value* vp)
{

  JSObject* obj = JS_GetGlobalForObject(cx, JSVAL_TO_OBJECT(JS_CALLEE(cx, vp)));

  nsISupports* global;
  xpc_qsSelfRef globalRef;
  {
    nsresult rv;
    JS::Value val = OBJECT_TO_JSVAL(obj);
    rv = xpc_qsUnwrapArg<nsISupports>(cx, val, &global, &globalRef.ptr, &val);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_GLOBAL_NOT_NATIVE);
    }
  }

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "EventSource.constructor");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  const EventSourceInit arg1;
  if (!const_cast<EventSourceInit&>(arg1).Init(cx, obj, (1 < argc) ? argv[1] : JSVAL_NULL)) {
    return false;
  }
  ErrorResult rv;
  nsRefPtr<mozilla::dom::EventSource> result;
  result = mozilla::dom::EventSource::Constructor(global, arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "EventSource", "constructor");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

JSNativeHolder _constructor_holder = {
  _constructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "EventSourcePrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = EventTargetBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids) ||
       !InitIds(aCx, sConstants, sConstants_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::EventSource],
                              nullptr, &_constructor_holder, 1, &protoAndIfaceArray[constructors::id::EventSource],
                              &Class.mClass,
                              &sNativeProperties,
                              nullptr,
                              "EventSource");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

bool
PrefEnabled()
{
  return mozilla::dom::EventSource::PrefEnabled();
}


DOMJSClass Class = {
  { "EventSource",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::EventTarget, prototypes::id::EventSource, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<mozilla::dom::EventSource>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, mozilla::dom::EventSource* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<mozilla::dom::EventSource*>(aObject) ==
             reinterpret_cast<mozilla::dom::EventSource*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::EventTarget*>(aObject) ==
             reinterpret_cast<mozilla::dom::EventTarget*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace EventSourceBinding



} // namespace dom
} // namespace mozilla
