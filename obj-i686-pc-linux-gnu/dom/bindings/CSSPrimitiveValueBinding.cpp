/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "CSSPrimitiveValueBinding.h"
#include "CSSValueBinding.h"
#include "PrimitiveConversions.h"
#include "RGBColorBinding.h"
#include "RectBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/FloatingPoint.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "nsContentUtils.h"
#include "nsDOMCSSRGBColor.h"
#include "nsDOMCSSRect.h"
#include "nsDOMQS.h"
#include "nsIDOMCounter.h"
#include "nsROCSSPrimitiveValue.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace CSSPrimitiveValueBinding {

static bool
get_primitiveType(JSContext* cx, JSHandleObject obj, nsROCSSPrimitiveValue* self, JS::Value* vp)
{
  uint16_t result;
  result = self->PrimitiveType();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo primitiveType_getterinfo = {
  (JSJitPropertyOp)get_primitiveType,
  prototypes::id::CSSPrimitiveValue,
  PrototypeTraits<prototypes::id::CSSPrimitiveValue>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
setFloatValue(JSContext* cx, JSHandleObject obj, nsROCSSPrimitiveValue* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CSSPrimitiveValue.setFloatValue");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  uint16_t arg0;
  if (!ValueToPrimitive<uint16_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  float arg1;
  if (!ValueToPrimitive<float, eDefault>(cx, argv[1], &arg1)) {
    return false;
  } else if (!MOZ_DOUBLE_IS_FINITE(arg1)) {
    // Note: MOZ_DOUBLE_IS_FINITE will do the right thing
    //       when passed a non-finite float too.
    ThrowErrorMessage(cx, MSG_NOT_FINITE);
    return false;
  }
  ErrorResult rv;
  self->SetFloatValue(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CSSPrimitiveValue", "setFloatValue");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo setFloatValue_methodinfo = {
  (JSJitPropertyOp)setFloatValue,
  prototypes::id::CSSPrimitiveValue,
  PrototypeTraits<prototypes::id::CSSPrimitiveValue>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
getFloatValue(JSContext* cx, JSHandleObject obj, nsROCSSPrimitiveValue* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CSSPrimitiveValue.getFloatValue");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  uint16_t arg0;
  if (!ValueToPrimitive<uint16_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  float result;
  result = self->GetFloatValue(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CSSPrimitiveValue", "getFloatValue");
  }
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo getFloatValue_methodinfo = {
  (JSJitPropertyOp)getFloatValue,
  prototypes::id::CSSPrimitiveValue,
  PrototypeTraits<prototypes::id::CSSPrimitiveValue>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
setStringValue(JSContext* cx, JSHandleObject obj, nsROCSSPrimitiveValue* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "CSSPrimitiveValue.setStringValue");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  uint16_t arg0;
  if (!ValueToPrimitive<uint16_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  ErrorResult rv;
  self->SetStringValue(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CSSPrimitiveValue", "setStringValue");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo setStringValue_methodinfo = {
  (JSJitPropertyOp)setStringValue,
  prototypes::id::CSSPrimitiveValue,
  PrototypeTraits<prototypes::id::CSSPrimitiveValue>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
getStringValue(JSContext* cx, JSHandleObject obj, nsROCSSPrimitiveValue* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  nsString result;
  self->GetStringValue(result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CSSPrimitiveValue", "getStringValue");
  }
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getStringValue_methodinfo = {
  (JSJitPropertyOp)getStringValue,
  prototypes::id::CSSPrimitiveValue,
  PrototypeTraits<prototypes::id::CSSPrimitiveValue>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
getCounterValue(JSContext* cx, JSHandleObject obj, nsROCSSPrimitiveValue* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  nsRefPtr<nsIDOMCounter> result;
  result = self->GetCounterValue(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CSSPrimitiveValue", "getCounterValue");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getCounterValue_methodinfo = {
  (JSJitPropertyOp)getCounterValue,
  prototypes::id::CSSPrimitiveValue,
  PrototypeTraits<prototypes::id::CSSPrimitiveValue>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getRectValue(JSContext* cx, JSHandleObject obj, nsROCSSPrimitiveValue* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  nsDOMCSSRect* result;
  result = self->GetRectValue(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CSSPrimitiveValue", "getRectValue");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getRectValue_methodinfo = {
  (JSJitPropertyOp)getRectValue,
  prototypes::id::CSSPrimitiveValue,
  PrototypeTraits<prototypes::id::CSSPrimitiveValue>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getRGBColorValue(JSContext* cx, JSHandleObject obj, nsROCSSPrimitiveValue* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  nsDOMCSSRGBColor* result;
  result = self->GetRGBColorValue(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "CSSPrimitiveValue", "getRGBColorValue");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getRGBColorValue_methodinfo = {
  (JSJitPropertyOp)getRGBColorValue,
  prototypes::id::CSSPrimitiveValue,
  PrototypeTraits<prototypes::id::CSSPrimitiveValue>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsROCSSPrimitiveValue* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::CSSPrimitiveValue, nsROCSSPrimitiveValue>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "CSSPrimitiveValue");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsROCSSPrimitiveValue* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::CSSPrimitiveValue, nsROCSSPrimitiveValue>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "CSSPrimitiveValue");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsROCSSPrimitiveValue>::value), "Must be an nsISupports class");
  nsROCSSPrimitiveValue* self = UnwrapDOMObject<nsROCSSPrimitiveValue>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsROCSSPrimitiveValue>::value), "Must be an nsISupports class");
  nsROCSSPrimitiveValue* self = UnwrapDOMObject<nsROCSSPrimitiveValue>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("setFloatValue", genericMethod, &setFloatValue_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("getFloatValue", genericMethod, &getFloatValue_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("setStringValue", genericMethod, &setStringValue_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("getStringValue", genericMethod, &getStringValue_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getCounterValue", genericMethod, &getCounterValue_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getRectValue", genericMethod, &getRectValue_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getRGBColorValue", genericMethod, &getRGBColorValue_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[8] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "primitiveType", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &primitiveType_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[2] = { JSID_VOID };

static ConstantSpec sConstants_specs[] = {
  { "CSS_UNKNOWN", INT_TO_JSVAL(0) },
  { "CSS_NUMBER", INT_TO_JSVAL(1) },
  { "CSS_PERCENTAGE", INT_TO_JSVAL(2) },
  { "CSS_EMS", INT_TO_JSVAL(3) },
  { "CSS_EXS", INT_TO_JSVAL(4) },
  { "CSS_PX", INT_TO_JSVAL(5) },
  { "CSS_CM", INT_TO_JSVAL(6) },
  { "CSS_MM", INT_TO_JSVAL(7) },
  { "CSS_IN", INT_TO_JSVAL(8) },
  { "CSS_PT", INT_TO_JSVAL(9) },
  { "CSS_PC", INT_TO_JSVAL(10) },
  { "CSS_DEG", INT_TO_JSVAL(11) },
  { "CSS_RAD", INT_TO_JSVAL(12) },
  { "CSS_GRAD", INT_TO_JSVAL(13) },
  { "CSS_MS", INT_TO_JSVAL(14) },
  { "CSS_S", INT_TO_JSVAL(15) },
  { "CSS_HZ", INT_TO_JSVAL(16) },
  { "CSS_KHZ", INT_TO_JSVAL(17) },
  { "CSS_DIMENSION", INT_TO_JSVAL(18) },
  { "CSS_STRING", INT_TO_JSVAL(19) },
  { "CSS_URI", INT_TO_JSVAL(20) },
  { "CSS_IDENT", INT_TO_JSVAL(21) },
  { "CSS_ATTR", INT_TO_JSVAL(22) },
  { "CSS_COUNTER", INT_TO_JSVAL(23) },
  { "CSS_RECT", INT_TO_JSVAL(24) },
  { "CSS_RGBCOLOR", INT_TO_JSVAL(25) },
  { 0, JSVAL_VOID }
};

static Prefable<ConstantSpec> sConstants[] = {
  { true, &sConstants_specs[0] },
  { false, NULL }
};

static jsid sConstants_ids[27] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  sConstants, sConstants_ids, sConstants_specs
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::CSSPrimitiveValue,
  constructors::id::CSSPrimitiveValue,
  &CSSValueBinding::sNativePropertyHooks
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "CSSPrimitiveValuePrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = CSSValueBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids) ||
       !InitIds(aCx, sConstants, sConstants_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::CSSPrimitiveValue],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::CSSPrimitiveValue],
                              &Class.mClass,
                              &sNativeProperties,
                              nullptr,
                              "CSSPrimitiveValue");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "CSSPrimitiveValue",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::CSSValue, prototypes::id::CSSPrimitiveValue, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<nsROCSSPrimitiveValue>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, nsROCSSPrimitiveValue* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<nsROCSSPrimitiveValue*>(aObject) ==
             reinterpret_cast<nsROCSSPrimitiveValue*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::CSSValue*>(aObject) ==
             reinterpret_cast<mozilla::dom::CSSValue*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace CSSPrimitiveValueBinding



} // namespace dom
} // namespace mozilla
