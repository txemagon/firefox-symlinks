/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "ClientRectListBinding.h"
#include "DOMTokenListBinding.h"
#include "DocumentBinding.h"
#include "ElementBinding.h"
#include "EventHandlerBinding.h"
#include "EventTargetBinding.h"
#include "HTMLCollectionBinding.h"
#include "NodeBinding.h"
#include "NodeListBinding.h"
#include "PrimitiveConversions.h"
#include "UndoManagerBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/Element.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/UndoManager.h"
#include "nsClientRect.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsDOMTokenList.h"
#include "nsIDOMAttr.h"
#include "nsIDOMClientRect.h"
#include "nsIDOMElement.h"
#include "nsIHTMLCollection.h"
#include "nsINodeList.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace ElementBinding {

static bool
get_tagName(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  nsString result;
  self->GetTagName(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo tagName_getterinfo = {
  (JSJitPropertyOp)get_tagName,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_id(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  nsString result;
  self->GetId(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_id(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  self->SetId(arg0);

  return true;
}


const JSJitInfo id_getterinfo = {
  (JSJitPropertyOp)get_id,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo id_setterinfo = {
  (JSJitPropertyOp)set_id,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_classList(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  nsDOMTokenList* result;
  result = self->GetClassList();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo classList_getterinfo = {
  (JSJitPropertyOp)get_classList,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
getAttribute(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.getAttribute");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  nsString result;
  self->GetAttribute(arg0, result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getAttribute_methodinfo = {
  (JSJitPropertyOp)getAttribute,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
getAttributeNS(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.getAttributeNS");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  nsString result;
  self->GetAttributeNS(arg0, arg1, result);
  if (!xpc::StringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getAttributeNS_methodinfo = {
  (JSJitPropertyOp)getAttributeNS,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
setAttribute(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.setAttribute");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  ErrorResult rv;
  self->SetAttribute(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "setAttribute");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo setAttribute_methodinfo = {
  (JSJitPropertyOp)setAttribute,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
setAttributeNS(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 3) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.setAttributeNS");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  FakeDependentString arg2_holder;
  const NonNull<nsAString> arg2;
  if (!ConvertJSValueToString(cx, argv[2], &argv[2], eStringify, eStringify, arg2_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg2) = &arg2_holder;
  ErrorResult rv;
  self->SetAttributeNS(arg0, arg1, arg2, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "setAttributeNS");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo setAttributeNS_methodinfo = {
  (JSJitPropertyOp)setAttributeNS,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
removeAttribute(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.removeAttribute");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->RemoveAttribute(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "removeAttribute");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo removeAttribute_methodinfo = {
  (JSJitPropertyOp)removeAttribute,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
removeAttributeNS(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.removeAttributeNS");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  ErrorResult rv;
  self->RemoveAttributeNS(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "removeAttributeNS");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo removeAttributeNS_methodinfo = {
  (JSJitPropertyOp)removeAttributeNS,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
hasAttribute(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.hasAttribute");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  bool result;
  result = self->HasAttribute(arg0);
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo hasAttribute_methodinfo = {
  (JSJitPropertyOp)hasAttribute,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
hasAttributeNS(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.hasAttributeNS");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  bool result;
  result = self->HasAttributeNS(arg0, arg1);
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo hasAttributeNS_methodinfo = {
  (JSJitPropertyOp)hasAttributeNS,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
getElementsByTagName(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.getElementsByTagName");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  nsRefPtr<nsIHTMLCollection> result;
  result = self->GetElementsByTagName(arg0);
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getElementsByTagName_methodinfo = {
  (JSJitPropertyOp)getElementsByTagName,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getElementsByTagNameNS(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.getElementsByTagNameNS");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  ErrorResult rv;
  nsRefPtr<nsIHTMLCollection> result;
  result = self->GetElementsByTagNameNS(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "getElementsByTagNameNS");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getElementsByTagNameNS_methodinfo = {
  (JSJitPropertyOp)getElementsByTagNameNS,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getElementsByClassName(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.getElementsByClassName");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  nsRefPtr<nsIHTMLCollection> result;
  result = self->GetElementsByClassName(arg0);
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getElementsByClassName_methodinfo = {
  (JSJitPropertyOp)getElementsByClassName,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_children(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  nsIHTMLCollection* result;
  result = self->Children();
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo children_getterinfo = {
  (JSJitPropertyOp)get_children,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_firstElementChild(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  mozilla::dom::Element* result;
  result = self->GetFirstElementChild();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo firstElementChild_getterinfo = {
  (JSJitPropertyOp)get_firstElementChild,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_lastElementChild(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  mozilla::dom::Element* result;
  result = self->GetLastElementChild();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo lastElementChild_getterinfo = {
  (JSJitPropertyOp)get_lastElementChild,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_previousElementSibling(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  mozilla::dom::Element* result;
  result = self->GetPreviousElementSibling();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo previousElementSibling_getterinfo = {
  (JSJitPropertyOp)get_previousElementSibling,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_nextElementSibling(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  mozilla::dom::Element* result;
  result = self->GetNextElementSibling();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo nextElementSibling_getterinfo = {
  (JSJitPropertyOp)get_nextElementSibling,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_childElementCount(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  uint32_t result;
  result = self->ChildElementCount();
  *vp = UINT_TO_JSVAL(result);
  return true;
}


const JSJitInfo childElementCount_getterinfo = {
  (JSJitPropertyOp)get_childElementCount,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_onmouseenter(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnmouseenter();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onmouseenter(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnmouseenter(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "onmouseenter");
  }

  return true;
}


const JSJitInfo onmouseenter_getterinfo = {
  (JSJitPropertyOp)get_onmouseenter,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onmouseenter_setterinfo = {
  (JSJitPropertyOp)set_onmouseenter,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_onmouseleave(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnmouseleave();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onmouseleave(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnmouseleave(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "onmouseleave");
  }

  return true;
}


const JSJitInfo onmouseleave_getterinfo = {
  (JSJitPropertyOp)get_onmouseleave,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onmouseleave_setterinfo = {
  (JSJitPropertyOp)set_onmouseleave,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_onwheel(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnwheel();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onwheel(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnwheel(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "onwheel");
  }

  return true;
}


const JSJitInfo onwheel_getterinfo = {
  (JSJitPropertyOp)get_onwheel,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onwheel_setterinfo = {
  (JSJitPropertyOp)set_onwheel,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
mozMatchesSelector(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.mozMatchesSelector");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  bool result;
  result = self->MozMatchesSelector(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "mozMatchesSelector");
  }
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo mozMatchesSelector_methodinfo = {
  (JSJitPropertyOp)mozMatchesSelector,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
setCapture(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  JS::Value* argv = JS_ARGV(cx, vp);

  bool arg0;
  if (0 < argc) {
    if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
      return false;
    }
  } else {
    arg0 = false;
  }
  self->SetCapture(arg0);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo setCapture_methodinfo = {
  (JSJitPropertyOp)setCapture,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
releaseCapture(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{
  self->ReleaseCapture();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo releaseCapture_methodinfo = {
  (JSJitPropertyOp)releaseCapture,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
mozRequestFullScreen(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{
  self->MozRequestFullScreen();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo mozRequestFullScreen_methodinfo = {
  (JSJitPropertyOp)mozRequestFullScreen,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
mozRequestPointerLock(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{
  self->MozRequestPointerLock();
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo mozRequestPointerLock_methodinfo = {
  (JSJitPropertyOp)mozRequestPointerLock,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
getAttributeNode(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.getAttributeNode");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  nsIDOMAttr* result;
  result = self->GetAttributeNode(arg0);
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getAttributeNode_methodinfo = {
  (JSJitPropertyOp)getAttributeNode,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
setAttributeNode(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.setAttributeNode");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<nsIDOMAttr> arg0_holder;
  nsIDOMAttr* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    nsIDOMAttr* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMAttr>(cx, argv[0], &tmp, static_cast<nsIDOMAttr**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Attr");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  nsRefPtr<nsIDOMAttr> result;
  result = self->SetAttributeNode(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "setAttributeNode");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo setAttributeNode_methodinfo = {
  (JSJitPropertyOp)setAttributeNode,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
removeAttributeNode(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.removeAttributeNode");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<nsIDOMAttr> arg0_holder;
  nsIDOMAttr* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    nsIDOMAttr* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMAttr>(cx, argv[0], &tmp, static_cast<nsIDOMAttr**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Attr");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  nsRefPtr<nsIDOMAttr> result;
  result = self->RemoveAttributeNode(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "removeAttributeNode");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo removeAttributeNode_methodinfo = {
  (JSJitPropertyOp)removeAttributeNode,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getAttributeNodeNS(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.getAttributeNodeNS");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eNull, eNull, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  ErrorResult rv;
  nsIDOMAttr* result;
  result = self->GetAttributeNodeNS(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "getAttributeNodeNS");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getAttributeNodeNS_methodinfo = {
  (JSJitPropertyOp)getAttributeNodeNS,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
setAttributeNodeNS(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.setAttributeNodeNS");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<nsIDOMAttr> arg0_holder;
  nsIDOMAttr* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    nsIDOMAttr* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMAttr>(cx, argv[0], &tmp, static_cast<nsIDOMAttr**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Attr");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  nsRefPtr<nsIDOMAttr> result;
  result = self->SetAttributeNodeNS(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "setAttributeNodeNS");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo setAttributeNodeNS_methodinfo = {
  (JSJitPropertyOp)setAttributeNodeNS,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getClientRects(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  nsRefPtr<nsClientRectList> result;
  result = self->GetClientRects(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "getClientRects");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getClientRects_methodinfo = {
  (JSJitPropertyOp)getClientRects,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getBoundingClientRect(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{
  nsRefPtr<nsIDOMClientRect> result;
  result = self->GetBoundingClientRect();
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getBoundingClientRect_methodinfo = {
  (JSJitPropertyOp)getBoundingClientRect,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
scrollIntoView(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  JS::Value* argv = JS_ARGV(cx, vp);

  bool arg0;
  if (0 < argc) {
    if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
      return false;
    }
  } else {
    arg0 = true;
  }
  self->ScrollIntoView(arg0);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo scrollIntoView_methodinfo = {
  (JSJitPropertyOp)scrollIntoView,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_scrollTop(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  int32_t result;
  result = self->ScrollTop();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}

static bool
set_scrollTop(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* argv)
{
  int32_t arg0;
  if (!ValueToPrimitive<int32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  self->SetScrollTop(arg0);

  return true;
}


const JSJitInfo scrollTop_getterinfo = {
  (JSJitPropertyOp)get_scrollTop,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo scrollTop_setterinfo = {
  (JSJitPropertyOp)set_scrollTop,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_scrollLeft(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  int32_t result;
  result = self->ScrollLeft();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}

static bool
set_scrollLeft(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* argv)
{
  int32_t arg0;
  if (!ValueToPrimitive<int32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  self->SetScrollLeft(arg0);

  return true;
}


const JSJitInfo scrollLeft_getterinfo = {
  (JSJitPropertyOp)get_scrollLeft,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo scrollLeft_setterinfo = {
  (JSJitPropertyOp)set_scrollLeft,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_scrollWidth(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  int32_t result;
  result = self->ScrollWidth();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo scrollWidth_getterinfo = {
  (JSJitPropertyOp)get_scrollWidth,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_scrollHeight(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  int32_t result;
  result = self->ScrollHeight();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo scrollHeight_getterinfo = {
  (JSJitPropertyOp)get_scrollHeight,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_clientTop(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  int32_t result;
  result = self->ClientTop();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo clientTop_getterinfo = {
  (JSJitPropertyOp)get_clientTop,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_clientLeft(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  int32_t result;
  result = self->ClientLeft();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo clientLeft_getterinfo = {
  (JSJitPropertyOp)get_clientLeft,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_clientWidth(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  int32_t result;
  result = self->ClientWidth();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo clientWidth_getterinfo = {
  (JSJitPropertyOp)get_clientWidth,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_clientHeight(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  int32_t result;
  result = self->ClientHeight();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo clientHeight_getterinfo = {
  (JSJitPropertyOp)get_clientHeight,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_scrollTopMax(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  int32_t result;
  result = self->ScrollTopMax();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo scrollTopMax_getterinfo = {
  (JSJitPropertyOp)get_scrollTopMax,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_scrollLeftMax(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  int32_t result;
  result = self->ScrollLeftMax();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo scrollLeftMax_getterinfo = {
  (JSJitPropertyOp)get_scrollLeftMax,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_undoManager(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  nsRefPtr<mozilla::dom::UndoManager> result;
  result = self->GetUndoManager();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo undoManager_getterinfo = {
  (JSJitPropertyOp)get_undoManager,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_undoScope(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  bool result;
  result = self->UndoScope();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}

static bool
set_undoScope(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* argv)
{
  bool arg0;
  if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  self->SetUndoScope(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "undoScope");
  }

  return true;
}


const JSJitInfo undoScope_getterinfo = {
  (JSJitPropertyOp)get_undoScope,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo undoScope_setterinfo = {
  (JSJitPropertyOp)set_undoScope,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_innerHTML(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  ErrorResult rv;
  nsString result;
  self->GetInnerHTML(result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "innerHTML");
  }
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_innerHTML(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eEmpty, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetInnerHTML(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "innerHTML");
  }

  return true;
}


const JSJitInfo innerHTML_getterinfo = {
  (JSJitPropertyOp)get_innerHTML,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo innerHTML_setterinfo = {
  (JSJitPropertyOp)set_innerHTML,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_outerHTML(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* vp)
{
  ErrorResult rv;
  nsString result;
  self->GetOuterHTML(result, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "outerHTML");
  }
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}

static bool
set_outerHTML(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, JS::Value* argv)
{
  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eEmpty, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  self->SetOuterHTML(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "outerHTML");
  }

  return true;
}


const JSJitInfo outerHTML_getterinfo = {
  (JSJitPropertyOp)get_outerHTML,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo outerHTML_setterinfo = {
  (JSJitPropertyOp)set_outerHTML,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
insertAdjacentHTML(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.insertAdjacentHTML");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  ErrorResult rv;
  self->InsertAdjacentHTML(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "insertAdjacentHTML");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo insertAdjacentHTML_methodinfo = {
  (JSJitPropertyOp)insertAdjacentHTML,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
querySelector(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.querySelector");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  mozilla::dom::Element* result;
  result = self->QuerySelector(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "querySelector");
  }
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo querySelector_methodinfo = {
  (JSJitPropertyOp)querySelector,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
querySelectorAll(JSContext* cx, JSHandleObject obj, mozilla::dom::Element* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element.querySelectorAll");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  ErrorResult rv;
  nsRefPtr<nsINodeList> result;
  result = self->QuerySelectorAll(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "Element", "querySelectorAll");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo querySelectorAll_methodinfo = {
  (JSJitPropertyOp)querySelectorAll,
  prototypes::id::Element,
  PrototypeTraits<prototypes::id::Element>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::Element* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::Element, mozilla::dom::Element>(cx, obj, self);
    if (NS_FAILED(rv)) {
      mozilla::dom::Element *objPtr;
      xpc_qsSelfRef objRef;
      JS::Value val = JS::ObjectValue(*obj);
      nsresult rv = xpc_qsUnwrapArg<mozilla::dom::Element>(cx, val, &objPtr, &objRef.ptr, &val);
      if (NS_FAILED(rv)) {
          return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Element");
      }
      // We should be castable!
      MOZ_ASSERT(!objRef.ptr);
      // We should have an object, too!
      MOZ_ASSERT(objPtr);
      self = objPtr;
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::Element* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::Element, mozilla::dom::Element>(cx, obj, self);
    if (NS_FAILED(rv)) {
      mozilla::dom::Element *objPtr;
      xpc_qsSelfRef objRef;
      JS::Value val = JS::ObjectValue(*obj);
      nsresult rv = xpc_qsUnwrapArg<mozilla::dom::Element>(cx, val, &objPtr, &objRef.ptr, &val);
      if (NS_FAILED(rv)) {
          return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Element");
      }
      // We should be castable!
      MOZ_ASSERT(!objRef.ptr);
      // We should have an object, too!
      MOZ_ASSERT(objPtr);
      self = objPtr;
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericLenientGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::Element* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::Element, mozilla::dom::Element>(cx, obj, self);
    if (NS_FAILED(rv)) {
      mozilla::dom::Element *objPtr;
      xpc_qsSelfRef objRef;
      JS::Value val = JS::ObjectValue(*obj);
      nsresult rv = xpc_qsUnwrapArg<mozilla::dom::Element>(cx, val, &objPtr, &objRef.ptr, &val);
      if (NS_FAILED(rv)) {
          MOZ_ASSERT(!JS_IsExceptionPending(cx));
          JS_SET_RVAL(cx, vp, JS::UndefinedValue());
          return true;
      }
      // We should be castable!
      MOZ_ASSERT(!objRef.ptr);
      // We should have an object, too!
      MOZ_ASSERT(objPtr);
      self = objPtr;
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::Element* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::Element, mozilla::dom::Element>(cx, obj, self);
    if (NS_FAILED(rv)) {
      mozilla::dom::Element *objPtr;
      xpc_qsSelfRef objRef;
      JS::Value val = JS::ObjectValue(*obj);
      nsresult rv = xpc_qsUnwrapArg<mozilla::dom::Element>(cx, val, &objPtr, &objRef.ptr, &val);
      if (NS_FAILED(rv)) {
          return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Element");
      }
      // We should be castable!
      MOZ_ASSERT(!objRef.ptr);
      // We should have an object, too!
      MOZ_ASSERT(objPtr);
      self = objPtr;
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSBool
genericLenientSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::Element* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::Element, mozilla::dom::Element>(cx, obj, self);
    if (NS_FAILED(rv)) {
      mozilla::dom::Element *objPtr;
      xpc_qsSelfRef objRef;
      JS::Value val = JS::ObjectValue(*obj);
      nsresult rv = xpc_qsUnwrapArg<mozilla::dom::Element>(cx, val, &objPtr, &objRef.ptr, &val);
      if (NS_FAILED(rv)) {
          MOZ_ASSERT(!JS_IsExceptionPending(cx));
          return true;
      }
      // We should be castable!
      MOZ_ASSERT(!objRef.ptr);
      // We should have an object, too!
      MOZ_ASSERT(objPtr);
      self = objPtr;
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "Element attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::Element>::value), "Must be an nsISupports class");
  mozilla::dom::Element* self = UnwrapDOMObject<mozilla::dom::Element>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::Element>::value), "Must be an nsISupports class");
  mozilla::dom::Element* self = UnwrapDOMObject<mozilla::dom::Element>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("getAttribute", genericMethod, &getAttribute_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getAttributeNS", genericMethod, &getAttributeNS_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("setAttribute", genericMethod, &setAttribute_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("setAttributeNS", genericMethod, &setAttributeNS_methodinfo, 3, JSPROP_ENUMERATE),
  JS_FNINFO("removeAttribute", genericMethod, &removeAttribute_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("removeAttributeNS", genericMethod, &removeAttributeNS_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("hasAttribute", genericMethod, &hasAttribute_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("hasAttributeNS", genericMethod, &hasAttributeNS_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("getElementsByTagName", genericMethod, &getElementsByTagName_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getElementsByTagNameNS", genericMethod, &getElementsByTagNameNS_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("getElementsByClassName", genericMethod, &getElementsByClassName_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("mozMatchesSelector", genericMethod, &mozMatchesSelector_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("setCapture", genericMethod, &setCapture_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("releaseCapture", genericMethod, &releaseCapture_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("mozRequestFullScreen", genericMethod, &mozRequestFullScreen_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("mozRequestPointerLock", genericMethod, &mozRequestPointerLock_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getAttributeNode", genericMethod, &getAttributeNode_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("setAttributeNode", genericMethod, &setAttributeNode_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("removeAttributeNode", genericMethod, &removeAttributeNode_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getAttributeNodeNS", genericMethod, &getAttributeNodeNS_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("setAttributeNodeNS", genericMethod, &setAttributeNodeNS_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getClientRects", genericMethod, &getClientRects_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getBoundingClientRect", genericMethod, &getBoundingClientRect_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("scrollIntoView", genericMethod, &scrollIntoView_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("insertAdjacentHTML", genericMethod, &insertAdjacentHTML_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("querySelector", genericMethod, &querySelector_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("querySelectorAll", genericMethod, &querySelectorAll_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[28] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "tagName", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &tagName_getterinfo }, JSOP_NULLWRAPPER},
  { "id", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &id_getterinfo }, { (JSStrictPropertyOp)genericSetter, &id_setterinfo }},
  { "classList", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &classList_getterinfo }, JSOP_NULLWRAPPER},
  { "children", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &children_getterinfo }, JSOP_NULLWRAPPER},
  { "firstElementChild", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &firstElementChild_getterinfo }, JSOP_NULLWRAPPER},
  { "lastElementChild", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &lastElementChild_getterinfo }, JSOP_NULLWRAPPER},
  { "previousElementSibling", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &previousElementSibling_getterinfo }, JSOP_NULLWRAPPER},
  { "nextElementSibling", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &nextElementSibling_getterinfo }, JSOP_NULLWRAPPER},
  { "childElementCount", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &childElementCount_getterinfo }, JSOP_NULLWRAPPER},
  { "onmouseenter", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericLenientGetter, &onmouseenter_getterinfo }, { (JSStrictPropertyOp)genericLenientSetter, &onmouseenter_setterinfo }},
  { "onmouseleave", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericLenientGetter, &onmouseleave_getterinfo }, { (JSStrictPropertyOp)genericLenientSetter, &onmouseleave_setterinfo }},
  { "onwheel", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &onwheel_getterinfo }, { (JSStrictPropertyOp)genericSetter, &onwheel_setterinfo }},
  { "scrollTop", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &scrollTop_getterinfo }, { (JSStrictPropertyOp)genericSetter, &scrollTop_setterinfo }},
  { "scrollLeft", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &scrollLeft_getterinfo }, { (JSStrictPropertyOp)genericSetter, &scrollLeft_setterinfo }},
  { "scrollWidth", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &scrollWidth_getterinfo }, JSOP_NULLWRAPPER},
  { "scrollHeight", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &scrollHeight_getterinfo }, JSOP_NULLWRAPPER},
  { "clientTop", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &clientTop_getterinfo }, JSOP_NULLWRAPPER},
  { "clientLeft", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &clientLeft_getterinfo }, JSOP_NULLWRAPPER},
  { "clientWidth", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &clientWidth_getterinfo }, JSOP_NULLWRAPPER},
  { "clientHeight", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &clientHeight_getterinfo }, JSOP_NULLWRAPPER},
  { "scrollTopMax", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &scrollTopMax_getterinfo }, JSOP_NULLWRAPPER},
  { "scrollLeftMax", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &scrollLeftMax_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER },
  { "undoManager", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &undoManager_getterinfo }, JSOP_NULLWRAPPER},
  { "undoScope", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &undoScope_getterinfo }, { (JSStrictPropertyOp)genericSetter, &undoScope_setterinfo }},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER },
  { "innerHTML", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &innerHTML_getterinfo }, { (JSStrictPropertyOp)genericSetter, &innerHTML_setterinfo }},
  { "outerHTML", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &outerHTML_getterinfo }, { (JSStrictPropertyOp)genericSetter, &outerHTML_setterinfo }},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { true, &sAttributes_specs[23] },
  { true, &sAttributes_specs[26] },
  { false, NULL }
};

static jsid sAttributes_ids[29] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::Element,
  constructors::id::Element,
  &NodeBinding::sNativePropertyHooks
};

static JSBool
_hasInstance(JSContext* cx, JSHandleObject obj, JSMutableHandleValue vp, JSBool* bp)
{
  if (!vp.isObject()) {
    *bp = false;
    return true;
  }

  jsval protov;
  if (!JS_GetProperty(cx, obj, "prototype", &protov))
    return false;
  if (!protov.isObject()) {
    JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_BAD_PROTOTYPE,
                         "Element");
    return false;
  }
  JSObject *objProto = &protov.toObject();

  JSObject* instance = &vp.toObject();
  JSObject* proto;
  if (!JS_GetPrototype(cx, instance, &proto))
    return false;
  while (proto) {
    if (proto == objProto) {
      *bp = true;
      return true;
    }
    if (!JS_GetPrototype(cx, proto, &proto))
      return false;
  }

  // FIXME Limit this to chrome by checking xpc::AccessCheck::isChrome(obj).
  nsISupports* native =
    nsContentUtils::XPConnect()->GetNativeOfWrapper(cx, instance);
  nsCOMPtr<nsIDOMElement> qiResult = do_QueryInterface(native);
  *bp = !!qiResult;
  return true;

}


static DOMIfaceAndProtoJSClass InterfaceObjectClass = {
  {
    "Function",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    ThrowingConstructor, /* call */
    _hasInstance, /* hasInstance */
    ThrowingConstructor, /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterface,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "ElementPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = NodeBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  static bool sPrefCachesInited = false;
  if (!sPrefCachesInited) {
    sPrefCachesInited = true;
    Preferences::AddBoolVarCache(&sAttributes[1].enabled, "dom.undo_manager.enabled");
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::Element],
                              &InterfaceObjectClass.mBase, nullptr, 0, &protoAndIfaceArray[constructors::id::Element],
                              &Class.mClass,
                              &sNativeProperties,
                              nullptr,
                              "Element");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "Element",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::EventTarget, prototypes::id::Node, prototypes::id::Element, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<mozilla::dom::Element>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, mozilla::dom::Element* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<mozilla::dom::Element*>(aObject) ==
             reinterpret_cast<mozilla::dom::Element*>(aObject));
  MOZ_ASSERT(static_cast<nsINode*>(aObject) ==
             reinterpret_cast<nsINode*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::EventTarget*>(aObject) ==
             reinterpret_cast<mozilla::dom::EventTarget*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace ElementBinding



} // namespace dom
} // namespace mozilla
