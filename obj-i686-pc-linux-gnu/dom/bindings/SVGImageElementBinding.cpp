/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "DOMParserBinding.h"
#include "ElementBinding.h"
#include "EventTargetBinding.h"
#include "HTMLImageElementBinding.h"
#include "NodeBinding.h"
#include "PrimitiveConversions.h"
#include "SVGAnimatedPreserveAspectRatio.h"
#include "SVGAnimatedPreserveAspectRatioBinding.h"
#include "SVGCircleElementBinding.h"
#include "SVGElementBinding.h"
#include "SVGGraphicsElementBinding.h"
#include "SVGImageElementBinding.h"
#include "SVGLocatableElementBinding.h"
#include "SVGTransformableElementBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "imgINotificationObserver.h"
#include "imgIRequest.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/SVGImageElement.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIChannel.h"
#include "nsIDOMSVGAnimatedLength.h"
#include "nsIDOMSVGAnimatedString.h"
#include "nsIDOMSVGImageElement.h"
#include "nsIStreamListener.h"
#include "nsIURI.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace SVGImageElementBinding {

static bool
get_x(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, JS::Value* vp)
{
  nsRefPtr<nsIDOMSVGAnimatedLength> result;
  result = self->X();
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo x_getterinfo = {
  (JSJitPropertyOp)get_x,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_y(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, JS::Value* vp)
{
  nsRefPtr<nsIDOMSVGAnimatedLength> result;
  result = self->Y();
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo y_getterinfo = {
  (JSJitPropertyOp)get_y,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_width(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, JS::Value* vp)
{
  nsRefPtr<nsIDOMSVGAnimatedLength> result;
  result = self->Width();
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo width_getterinfo = {
  (JSJitPropertyOp)get_width,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_height(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, JS::Value* vp)
{
  nsRefPtr<nsIDOMSVGAnimatedLength> result;
  result = self->Height();
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo height_getterinfo = {
  (JSJitPropertyOp)get_height,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_preserveAspectRatio(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, JS::Value* vp)
{
  nsRefPtr<mozilla::dom::DOMSVGAnimatedPreserveAspectRatio> result;
  result = self->PreserveAspectRatio();
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo preserveAspectRatio_getterinfo = {
  (JSJitPropertyOp)get_preserveAspectRatio,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  true,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_loadingEnabled(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, JS::Value* vp)
{
  bool result;
  result = self->LoadingEnabled();
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}

static bool
set_loadingEnabled(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, JS::Value* argv)
{
  bool arg0;
  if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  self->SetLoadingEnabled(arg0);

  return true;
}


const JSJitInfo loadingEnabled_getterinfo = {
  (JSJitPropertyOp)get_loadingEnabled,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo loadingEnabled_setterinfo = {
  (JSJitPropertyOp)set_loadingEnabled,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_imageBlockingStatus(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, JS::Value* vp)
{
  int16_t result;
  result = self->ImageBlockingStatus();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo imageBlockingStatus_getterinfo = {
  (JSJitPropertyOp)get_imageBlockingStatus,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
addObserver(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGImageElement.addObserver");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<imgINotificationObserver> arg0_holder;
  imgINotificationObserver* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    imgINotificationObserver* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<imgINotificationObserver>(cx, argv[0], &tmp, static_cast<imgINotificationObserver**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "imgINotificationObserver");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  self->AddObserver(arg0);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo addObserver_methodinfo = {
  (JSJitPropertyOp)addObserver,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
removeObserver(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGImageElement.removeObserver");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<imgINotificationObserver> arg0_holder;
  imgINotificationObserver* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    imgINotificationObserver* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<imgINotificationObserver>(cx, argv[0], &tmp, static_cast<imgINotificationObserver**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "imgINotificationObserver");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  self->RemoveObserver(arg0);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo removeObserver_methodinfo = {
  (JSJitPropertyOp)removeObserver,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
getRequest(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGImageElement.getRequest");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  int32_t arg0;
  if (!ValueToPrimitive<int32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  nsRefPtr<imgIRequest> result;
  result = self->GetRequest(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGImageElement", "getRequest");
  }
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapObject(cx, obj, result, &NS_GET_IID(imgIRequest), vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getRequest_methodinfo = {
  (JSJitPropertyOp)getRequest,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
getRequestType(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGImageElement.getRequestType");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<imgIRequest> arg0_holder;
  imgIRequest* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    imgIRequest* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<imgIRequest>(cx, argv[0], &tmp, static_cast<imgIRequest**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "imgIRequest");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  int32_t result;
  result = self->GetRequestType(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGImageElement", "getRequestType");
  }
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo getRequestType_methodinfo = {
  (JSJitPropertyOp)getRequestType,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_currentURI(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, JS::Value* vp)
{
  ErrorResult rv;
  nsRefPtr<nsIURI> result;
  result = self->GetCurrentURI(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGImageElement", "currentURI");
  }
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapObject(cx, obj, result, &NS_GET_IID(nsIURI), vp)) {
    return false;
  }
  return true;
}


const JSJitInfo currentURI_getterinfo = {
  (JSJitPropertyOp)get_currentURI,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
loadImageWithChannel(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGImageElement.loadImageWithChannel");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<nsIChannel> arg0_holder;
  nsIChannel* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    nsIChannel* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<nsIChannel>(cx, argv[0], &tmp, static_cast<nsIChannel**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "MozChannel");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  nsRefPtr<nsIStreamListener> result;
  result = self->LoadImageWithChannel(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGImageElement", "loadImageWithChannel");
  }
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapObject(cx, obj, result, &NS_GET_IID(nsIStreamListener), vp)) {
    return false;
  }
  return true;
}


const JSJitInfo loadImageWithChannel_methodinfo = {
  (JSJitPropertyOp)loadImageWithChannel,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
forceReload(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  self->ForceReload(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGImageElement", "forceReload");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo forceReload_methodinfo = {
  (JSJitPropertyOp)forceReload,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
forceImageState(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGImageElement.forceImageState");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  bool arg0;
  if (!ValueToPrimitive<bool, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  uint64_t arg1;
  if (!ValueToPrimitive<uint64_t, eDefault>(cx, argv[1], &arg1)) {
    return false;
  }
  self->ForceImageState(arg0, arg1);
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo forceImageState_methodinfo = {
  (JSJitPropertyOp)forceImageState,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_href(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGImageElement* self, JS::Value* vp)
{
  nsRefPtr<nsIDOMSVGAnimatedString> result;
  result = self->Href();
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo href_getterinfo = {
  (JSJitPropertyOp)get_href,
  prototypes::id::SVGImageElement,
  PrototypeTraits<prototypes::id::SVGImageElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::SVGImageElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::SVGImageElement, mozilla::dom::SVGImageElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "SVGImageElement");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::SVGImageElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::SVGImageElement, mozilla::dom::SVGImageElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "SVGImageElement");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::SVGImageElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::SVGImageElement, mozilla::dom::SVGImageElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "SVGImageElement");
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGImageElement attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::SVGImageElement>::value), "Must be an nsISupports class");
  mozilla::dom::SVGImageElement* self = UnwrapDOMObject<mozilla::dom::SVGImageElement>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::SVGImageElement>::value), "Must be an nsISupports class");
  mozilla::dom::SVGImageElement* self = UnwrapDOMObject<mozilla::dom::SVGImageElement>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNINFO("addObserver", genericMethod, &addObserver_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("removeObserver", genericMethod, &removeObserver_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getRequest", genericMethod, &getRequest_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getRequestType", genericMethod, &getRequestType_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("loadImageWithChannel", genericMethod, &loadImageWithChannel_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("forceReload", genericMethod, &forceReload_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("forceImageState", genericMethod, &forceImageState_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sChromeMethods[] = {
  { true, &sChromeMethods_specs[0] },
  { false, NULL }
};

static jsid sChromeMethods_ids[8] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "x", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &x_getterinfo }, JSOP_NULLWRAPPER},
  { "y", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &y_getterinfo }, JSOP_NULLWRAPPER},
  { "width", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &width_getterinfo }, JSOP_NULLWRAPPER},
  { "height", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &height_getterinfo }, JSOP_NULLWRAPPER},
  { "preserveAspectRatio", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &preserveAspectRatio_getterinfo }, JSOP_NULLWRAPPER},
  { "href", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &href_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[7] = { JSID_VOID };

static JSPropertySpec sChromeAttributes_specs[] = {
  { "loadingEnabled", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &loadingEnabled_getterinfo }, { (JSStrictPropertyOp)genericSetter, &loadingEnabled_setterinfo }},
  { "imageBlockingStatus", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &imageBlockingStatus_getterinfo }, JSOP_NULLWRAPPER},
  { "currentURI", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &currentURI_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sChromeAttributes[] = {
  { true, &sChromeAttributes_specs[0] },
  { false, NULL }
};

static jsid sChromeAttributes_ids[4] = { JSID_VOID };

static ConstantSpec sChromeConstants_specs[] = {
  { "UNKNOWN_REQUEST", INT_TO_JSVAL(-1) },
  { "CURRENT_REQUEST", INT_TO_JSVAL(0) },
  { "PENDING_REQUEST", INT_TO_JSVAL(1) },
  { 0, JSVAL_VOID }
};

static Prefable<ConstantSpec> sChromeConstants[] = {
  { true, &sChromeConstants_specs[0] },
  { false, NULL }
};

static jsid sChromeConstants_ids[4] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};

static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeMethods, sChromeMethods_ids, sChromeMethods_specs,
  sChromeAttributes, sChromeAttributes_ids, sChromeAttributes_specs,
  nullptr, nullptr, nullptr,
  sChromeConstants, sChromeConstants_ids, sChromeConstants_specs
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, &sChromeOnlyNativeProperties },
  prototypes::id::SVGImageElement,
  constructors::id::SVGImageElement,
  &SVGGraphicsElementBinding::sNativePropertyHooks
};

static JSBool
_hasInstance(JSContext* cx, JSHandleObject obj, JSMutableHandleValue vp, JSBool* bp)
{
  if (!vp.isObject()) {
    *bp = false;
    return true;
  }

  jsval protov;
  if (!JS_GetProperty(cx, obj, "prototype", &protov))
    return false;
  if (!protov.isObject()) {
    JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_BAD_PROTOTYPE,
                         "SVGImageElement");
    return false;
  }
  JSObject *objProto = &protov.toObject();

  JSObject* instance = &vp.toObject();
  JSObject* proto;
  if (!JS_GetPrototype(cx, instance, &proto))
    return false;
  while (proto) {
    if (proto == objProto) {
      *bp = true;
      return true;
    }
    if (!JS_GetPrototype(cx, proto, &proto))
      return false;
  }

  // FIXME Limit this to chrome by checking xpc::AccessCheck::isChrome(obj).
  nsISupports* native =
    nsContentUtils::XPConnect()->GetNativeOfWrapper(cx, instance);
  nsCOMPtr<nsIDOMSVGImageElement> qiResult = do_QueryInterface(native);
  *bp = !!qiResult;
  return true;

}


static DOMIfaceAndProtoJSClass InterfaceObjectClass = {
  {
    "Function",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    ThrowingConstructor, /* call */
    _hasInstance, /* hasInstance */
    ThrowingConstructor, /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterface,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "SVGImageElementPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = SVGGraphicsElementBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sChromeMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sChromeMethods, sChromeMethods_ids) ||
       !InitIds(aCx, sChromeAttributes, sChromeAttributes_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids) ||
       !InitIds(aCx, sChromeConstants, sChromeConstants_ids))) {
    sChromeMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::SVGImageElement],
                              &InterfaceObjectClass.mBase, nullptr, 0, &protoAndIfaceArray[constructors::id::SVGImageElement],
                              &Class.mClass,
                              &sNativeProperties,
                              xpc::AccessCheck::isChrome(aGlobal) ? &sChromeOnlyNativeProperties : nullptr,
                              "SVGImageElement");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "SVGImageElement",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::EventTarget, prototypes::id::Node, prototypes::id::Element, prototypes::id::SVGElement, prototypes::id::SVGLocatableElement, prototypes::id::SVGTransformableElement, prototypes::id::SVGGraphicsElement, prototypes::id::SVGImageElement, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<mozilla::dom::SVGImageElement>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, mozilla::dom::SVGImageElement* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<mozilla::dom::SVGImageElement*>(aObject) ==
             reinterpret_cast<mozilla::dom::SVGImageElement*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::SVGGraphicsElement*>(aObject) ==
             reinterpret_cast<mozilla::dom::SVGGraphicsElement*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::SVGTransformableElement*>(aObject) ==
             reinterpret_cast<mozilla::dom::SVGTransformableElement*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::SVGLocatableElement*>(aObject) ==
             reinterpret_cast<mozilla::dom::SVGLocatableElement*>(aObject));
  MOZ_ASSERT(static_cast<nsSVGElement*>(aObject) ==
             reinterpret_cast<nsSVGElement*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::Element*>(aObject) ==
             reinterpret_cast<mozilla::dom::Element*>(aObject));
  MOZ_ASSERT(static_cast<nsINode*>(aObject) ==
             reinterpret_cast<nsINode*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::EventTarget*>(aObject) ==
             reinterpret_cast<mozilla::dom::EventTarget*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace SVGImageElementBinding



} // namespace dom
} // namespace mozilla
