/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "DOMSVGMatrix.h"
#include "ElementBinding.h"
#include "EventTargetBinding.h"
#include "NodeBinding.h"
#include "PrimitiveConversions.h"
#include "SVGElementBinding.h"
#include "SVGLocatableElementBinding.h"
#include "SVGMatrixBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/SVGLocatableElement.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIDOMSVGRect.h"
#include "nsSVGElement.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace SVGLocatableElementBinding {

static bool
get_nearestViewportElement(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGLocatableElement* self, JS::Value* vp)
{
  nsSVGElement* result;
  result = self->GetNearestViewportElement();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo nearestViewportElement_getterinfo = {
  (JSJitPropertyOp)get_nearestViewportElement,
  prototypes::id::SVGLocatableElement,
  PrototypeTraits<prototypes::id::SVGLocatableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_farthestViewportElement(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGLocatableElement* self, JS::Value* vp)
{
  nsSVGElement* result;
  result = self->GetFarthestViewportElement();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo farthestViewportElement_getterinfo = {
  (JSJitPropertyOp)get_farthestViewportElement,
  prototypes::id::SVGLocatableElement,
  PrototypeTraits<prototypes::id::SVGLocatableElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
getBBox(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGLocatableElement* self, unsigned argc, JS::Value* vp)
{
  ErrorResult rv;
  nsRefPtr<nsIDOMSVGRect> result;
  result = self->GetBBox(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGLocatableElement", "getBBox");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getBBox_methodinfo = {
  (JSJitPropertyOp)getBBox,
  prototypes::id::SVGLocatableElement,
  PrototypeTraits<prototypes::id::SVGLocatableElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getCTM(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGLocatableElement* self, unsigned argc, JS::Value* vp)
{
  nsRefPtr<mozilla::DOMSVGMatrix> result;
  result = self->GetCTM();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getCTM_methodinfo = {
  (JSJitPropertyOp)getCTM,
  prototypes::id::SVGLocatableElement,
  PrototypeTraits<prototypes::id::SVGLocatableElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
getScreenCTM(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGLocatableElement* self, unsigned argc, JS::Value* vp)
{
  nsRefPtr<mozilla::DOMSVGMatrix> result;
  result = self->GetScreenCTM();
  if (!result) {
    *vp = JSVAL_NULL;
    return true;
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getScreenCTM_methodinfo = {
  (JSJitPropertyOp)getScreenCTM,
  prototypes::id::SVGLocatableElement,
  PrototypeTraits<prototypes::id::SVGLocatableElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

static bool
getTransformToElement(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGLocatableElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGLocatableElement.getTransformToElement");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  NonNull<nsSVGElement> arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::SVGElement, nsSVGElement>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        nsSVGElement *objPtr;
        xpc_qsSelfRef objRef;
        JS::Value val = JS::ObjectValue(*&argv[0].toObject());
        nsresult rv = xpc_qsUnwrapArg<nsSVGElement>(cx, val, &objPtr, &objRef.ptr, &val);
        if (NS_FAILED(rv)) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "SVGElement");
            return false;
        }
        // We should be castable!
        MOZ_ASSERT(!objRef.ptr);
        // We should have an object, too!
        MOZ_ASSERT(objPtr);
        arg0 = objPtr;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  nsRefPtr<mozilla::DOMSVGMatrix> result;
  result = self->GetTransformToElement(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGLocatableElement", "getTransformToElement");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getTransformToElement_methodinfo = {
  (JSJitPropertyOp)getTransformToElement,
  prototypes::id::SVGLocatableElement,
  PrototypeTraits<prototypes::id::SVGLocatableElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::SVGLocatableElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::SVGLocatableElement, mozilla::dom::SVGLocatableElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      mozilla::dom::SVGLocatableElement *objPtr;
      xpc_qsSelfRef objRef;
      JS::Value val = JS::ObjectValue(*obj);
      nsresult rv = xpc_qsUnwrapArg<mozilla::dom::SVGLocatableElement>(cx, val, &objPtr, &objRef.ptr, &val);
      if (NS_FAILED(rv)) {
          return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "SVGLocatableElement");
      }
      // We should be castable!
      MOZ_ASSERT(!objRef.ptr);
      // We should have an object, too!
      MOZ_ASSERT(objPtr);
      self = objPtr;
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::SVGLocatableElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::SVGLocatableElement, mozilla::dom::SVGLocatableElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      mozilla::dom::SVGLocatableElement *objPtr;
      xpc_qsSelfRef objRef;
      JS::Value val = JS::ObjectValue(*obj);
      nsresult rv = xpc_qsUnwrapArg<mozilla::dom::SVGLocatableElement>(cx, val, &objPtr, &objRef.ptr, &val);
      if (NS_FAILED(rv)) {
          return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "SVGLocatableElement");
      }
      // We should be castable!
      MOZ_ASSERT(!objRef.ptr);
      // We should have an object, too!
      MOZ_ASSERT(objPtr);
      self = objPtr;
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("getBBox", genericMethod, &getBBox_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getCTM", genericMethod, &getCTM_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getScreenCTM", genericMethod, &getScreenCTM_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getTransformToElement", genericMethod, &getTransformToElement_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[5] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "nearestViewportElement", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &nearestViewportElement_getterinfo }, JSOP_NULLWRAPPER},
  { "farthestViewportElement", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &farthestViewportElement_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[3] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::SVGLocatableElement,
  constructors::id::SVGLocatableElement,
  &SVGElementBinding::sNativePropertyHooks
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "SVGLocatableElementPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = SVGElementBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::SVGLocatableElement],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::SVGLocatableElement],
                              nullptr,
                              &sNativeProperties,
                              nullptr,
                              "SVGLocatableElement");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

} // namespace SVGLocatableElementBinding



} // namespace dom
} // namespace mozilla
