/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "ElementBinding.h"
#include "EventTargetBinding.h"
#include "NodeBinding.h"
#include "PrimitiveConversions.h"
#include "SVGCircleElementBinding.h"
#include "SVGElementBinding.h"
#include "SVGGraphicsElementBinding.h"
#include "SVGLocatableElementBinding.h"
#include "SVGPointBinding.h"
#include "SVGTextContentElementBinding.h"
#include "SVGTransformableElementBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "mozilla/FloatingPoint.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/SVGTextContentElement.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIDOMSVGAnimatedEnum.h"
#include "nsIDOMSVGAnimatedLength.h"
#include "nsIDOMSVGRect.h"
#include "nsISVGPoint.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace SVGTextContentElementBinding {

static bool
get_textLength(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGTextContentElement* self, JS::Value* vp)
{
  ErrorResult rv;
  nsRefPtr<nsIDOMSVGAnimatedLength> result;
  result = self->GetTextLength(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGTextContentElement", "textLength");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo textLength_getterinfo = {
  (JSJitPropertyOp)get_textLength,
  prototypes::id::SVGTextContentElement,
  PrototypeTraits<prototypes::id::SVGTextContentElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_lengthAdjust(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGTextContentElement* self, JS::Value* vp)
{
  ErrorResult rv;
  nsRefPtr<nsIDOMSVGAnimatedEnumeration> result;
  result = self->GetLengthAdjust(rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGTextContentElement", "lengthAdjust");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo lengthAdjust_getterinfo = {
  (JSJitPropertyOp)get_lengthAdjust,
  prototypes::id::SVGTextContentElement,
  PrototypeTraits<prototypes::id::SVGTextContentElement>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getNumberOfChars(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGTextContentElement* self, unsigned argc, JS::Value* vp)
{
  int32_t result;
  result = self->GetNumberOfChars();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo getNumberOfChars_methodinfo = {
  (JSJitPropertyOp)getNumberOfChars,
  prototypes::id::SVGTextContentElement,
  PrototypeTraits<prototypes::id::SVGTextContentElement>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
getComputedTextLength(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGTextContentElement* self, unsigned argc, JS::Value* vp)
{
  float result;
  result = self->GetComputedTextLength();
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo getComputedTextLength_methodinfo = {
  (JSJitPropertyOp)getComputedTextLength,
  prototypes::id::SVGTextContentElement,
  PrototypeTraits<prototypes::id::SVGTextContentElement>::Depth,
  JSJitInfo::Method,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
getSubStringLength(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGTextContentElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGTextContentElement.getSubStringLength");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  uint32_t arg0;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  uint32_t arg1;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[1], &arg1)) {
    return false;
  }
  ErrorResult rv;
  float result;
  result = self->GetSubStringLength(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGTextContentElement", "getSubStringLength");
  }
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo getSubStringLength_methodinfo = {
  (JSJitPropertyOp)getSubStringLength,
  prototypes::id::SVGTextContentElement,
  PrototypeTraits<prototypes::id::SVGTextContentElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
getStartPositionOfChar(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGTextContentElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGTextContentElement.getStartPositionOfChar");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  uint32_t arg0;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  nsRefPtr<mozilla::nsISVGPoint> result;
  result = self->GetStartPositionOfChar(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGTextContentElement", "getStartPositionOfChar");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getStartPositionOfChar_methodinfo = {
  (JSJitPropertyOp)getStartPositionOfChar,
  prototypes::id::SVGTextContentElement,
  PrototypeTraits<prototypes::id::SVGTextContentElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getEndPositionOfChar(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGTextContentElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGTextContentElement.getEndPositionOfChar");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  uint32_t arg0;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  nsRefPtr<mozilla::nsISVGPoint> result;
  result = self->GetEndPositionOfChar(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGTextContentElement", "getEndPositionOfChar");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    MOZ_ASSERT(JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}


const JSJitInfo getEndPositionOfChar_methodinfo = {
  (JSJitPropertyOp)getEndPositionOfChar,
  prototypes::id::SVGTextContentElement,
  PrototypeTraits<prototypes::id::SVGTextContentElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getExtentOfChar(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGTextContentElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGTextContentElement.getExtentOfChar");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  uint32_t arg0;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  nsRefPtr<nsIDOMSVGRect> result;
  result = self->GetExtentOfChar(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGTextContentElement", "getExtentOfChar");
  }
  if (!WrapObject(cx, obj, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo getExtentOfChar_methodinfo = {
  (JSJitPropertyOp)getExtentOfChar,
  prototypes::id::SVGTextContentElement,
  PrototypeTraits<prototypes::id::SVGTextContentElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
getRotationOfChar(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGTextContentElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGTextContentElement.getRotationOfChar");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  uint32_t arg0;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  ErrorResult rv;
  float result;
  result = self->GetRotationOfChar(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGTextContentElement", "getRotationOfChar");
  }
  *vp = JS_NumberValue(double(result));
  return true;
}


const JSJitInfo getRotationOfChar_methodinfo = {
  (JSJitPropertyOp)getRotationOfChar,
  prototypes::id::SVGTextContentElement,
  PrototypeTraits<prototypes::id::SVGTextContentElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
getCharNumAtPosition(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGTextContentElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGTextContentElement.getCharNumAtPosition");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  NonNull<mozilla::nsISVGPoint> arg0;
  if (argv[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::SVGPoint, mozilla::nsISVGPoint>(cx, &argv[0].toObject(), arg0);
      if (NS_FAILED(rv)) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "SVGPoint");
        return false;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  int32_t result;
  result = self->GetCharNumAtPosition(arg0);
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo getCharNumAtPosition_methodinfo = {
  (JSJitPropertyOp)getCharNumAtPosition,
  prototypes::id::SVGTextContentElement,
  PrototypeTraits<prototypes::id::SVGTextContentElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
selectSubString(JSContext* cx, JSHandleObject obj, mozilla::dom::SVGTextContentElement* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "SVGTextContentElement.selectSubString");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  uint32_t arg0;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[0], &arg0)) {
    return false;
  }
  uint32_t arg1;
  if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[1], &arg1)) {
    return false;
  }
  ErrorResult rv;
  self->SelectSubString(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "SVGTextContentElement", "selectSubString");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo selectSubString_methodinfo = {
  (JSJitPropertyOp)selectSubString,
  prototypes::id::SVGTextContentElement,
  PrototypeTraits<prototypes::id::SVGTextContentElement>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::SVGTextContentElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::SVGTextContentElement, mozilla::dom::SVGTextContentElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "SVGTextContentElement");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::SVGTextContentElement* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::SVGTextContentElement, mozilla::dom::SVGTextContentElement>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "SVGTextContentElement");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("getNumberOfChars", genericMethod, &getNumberOfChars_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getComputedTextLength", genericMethod, &getComputedTextLength_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("getSubStringLength", genericMethod, &getSubStringLength_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("getStartPositionOfChar", genericMethod, &getStartPositionOfChar_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getEndPositionOfChar", genericMethod, &getEndPositionOfChar_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getExtentOfChar", genericMethod, &getExtentOfChar_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getRotationOfChar", genericMethod, &getRotationOfChar_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("getCharNumAtPosition", genericMethod, &getCharNumAtPosition_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FNINFO("selectSubString", genericMethod, &selectSubString_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[10] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "textLength", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &textLength_getterinfo }, JSOP_NULLWRAPPER},
  { "lengthAdjust", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &lengthAdjust_getterinfo }, JSOP_NULLWRAPPER},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[3] = { JSID_VOID };

static ConstantSpec sConstants_specs[] = {
  { "LENGTHADJUST_UNKNOWN", INT_TO_JSVAL(0) },
  { "LENGTHADJUST_SPACING", INT_TO_JSVAL(1) },
  { "LENGTHADJUST_SPACINGANDGLYPHS", INT_TO_JSVAL(2) },
  { 0, JSVAL_VOID }
};

static Prefable<ConstantSpec> sConstants[] = {
  { true, &sConstants_specs[0] },
  { false, NULL }
};

static jsid sConstants_ids[4] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  sConstants, sConstants_ids, sConstants_specs
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::SVGTextContentElement,
  constructors::id::SVGTextContentElement,
  &SVGGraphicsElementBinding::sNativePropertyHooks
};

JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "SVGTextContentElementPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = SVGGraphicsElementBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids) ||
       !InitIds(aCx, sConstants, sConstants_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::SVGTextContentElement],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::SVGTextContentElement],
                              nullptr,
                              &sNativeProperties,
                              nullptr,
                              "SVGTextContentElement");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

} // namespace SVGTextContentElementBinding



} // namespace dom
} // namespace mozilla
