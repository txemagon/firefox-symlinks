/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "EventListenerBinding.h"
#include "EventTargetBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "jsapi.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/EventTarget.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/workers/bindings/EventTarget.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIDOMEvent.h"
#include "nsIDOMEventListener.h"
#include "nsIDOMEventTarget.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace EventTargetBinding {

static bool
addEventListener(JSContext* cx, JSHandleObject obj, mozilla::dom::EventTarget* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "EventTarget.addEventListener");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  nsRefPtr<nsIDOMEventListener> arg1;
  if (argv[1].isObject()) {
    if (!IsConvertibleToCallbackInterface(cx, &argv[1].toObject())) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventListener");
        return false;
    }

    nsresult rv;
    XPCCallContext ccx(JS_CALLER, cx);
    if (!ccx.IsValid()) {
      rv = NS_ERROR_XPC_BAD_CONVERT_JS;
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventListener");
      return false;
    }

    const nsIID& iid = NS_GET_IID(nsIDOMEventListener);
    nsRefPtr<nsXPCWrappedJS> wrappedJS;
    rv = nsXPCWrappedJS::GetNewOrUsed(ccx, &argv[1].toObject(), iid,
                                      NULL, getter_AddRefs(wrappedJS));
    if (NS_FAILED(rv) || !wrappedJS) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventListener");
      return false;
    }

    // Use a temp nsCOMPtr for the null-check, because arg1 might be
    // OwningNonNull, not an nsCOMPtr.
    nsCOMPtr<nsIDOMEventListener> tmp = do_QueryObject(wrappedJS.get());
    if (!tmp) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventListener");
      return false;
    }
    arg1 = tmp.forget();
  } else if (argv[1].isNullOrUndefined()) {
    arg1 = NULL;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  bool arg2;
  if (2 < argc) {
    if (!ValueToPrimitive<bool, eDefault>(cx, argv[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = false;
  }
  const Nullable<bool> arg3;
  if (!(3 < argc) || argv[3].isNullOrUndefined()) {
    const_cast< Nullable<bool>& >(arg3).SetNull();
  } else if (!ValueToPrimitive<bool, eDefault>(cx, argv[3], &const_cast< Nullable<bool>& >(arg3).SetValue())) {
    return false;
  }
  ErrorResult rv;
  self->AddEventListener(arg0, arg1, arg2, arg3, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "EventTarget", "addEventListener");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo addEventListener_methodinfo = {
  (JSJitPropertyOp)addEventListener,
  prototypes::id::EventTarget,
  PrototypeTraits<prototypes::id::EventTarget>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
removeEventListener(JSContext* cx, JSHandleObject obj, mozilla::dom::EventTarget* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "EventTarget.removeEventListener");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  nsRefPtr<nsIDOMEventListener> arg1;
  if (argv[1].isObject()) {
    if (!IsConvertibleToCallbackInterface(cx, &argv[1].toObject())) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventListener");
        return false;
    }

    nsresult rv;
    XPCCallContext ccx(JS_CALLER, cx);
    if (!ccx.IsValid()) {
      rv = NS_ERROR_XPC_BAD_CONVERT_JS;
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventListener");
      return false;
    }

    const nsIID& iid = NS_GET_IID(nsIDOMEventListener);
    nsRefPtr<nsXPCWrappedJS> wrappedJS;
    rv = nsXPCWrappedJS::GetNewOrUsed(ccx, &argv[1].toObject(), iid,
                                      NULL, getter_AddRefs(wrappedJS));
    if (NS_FAILED(rv) || !wrappedJS) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventListener");
      return false;
    }

    // Use a temp nsCOMPtr for the null-check, because arg1 might be
    // OwningNonNull, not an nsCOMPtr.
    nsCOMPtr<nsIDOMEventListener> tmp = do_QueryObject(wrappedJS.get());
    if (!tmp) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventListener");
      return false;
    }
    arg1 = tmp.forget();
  } else if (argv[1].isNullOrUndefined()) {
    arg1 = NULL;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  bool arg2;
  if (2 < argc) {
    if (!ValueToPrimitive<bool, eDefault>(cx, argv[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = false;
  }
  ErrorResult rv;
  self->RemoveEventListener(arg0, arg1, arg2, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "EventTarget", "removeEventListener");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo removeEventListener_methodinfo = {
  (JSJitPropertyOp)removeEventListener,
  prototypes::id::EventTarget,
  PrototypeTraits<prototypes::id::EventTarget>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
dispatchEvent(JSContext* cx, JSHandleObject obj, mozilla::dom::EventTarget* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "EventTarget.dispatchEvent");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<nsIDOMEvent> arg0_holder;
  nsIDOMEvent* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    nsIDOMEvent* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMEvent>(cx, argv[0], &tmp, static_cast<nsIDOMEvent**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Event");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  bool result;
  result = self->DispatchEvent(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "EventTarget", "dispatchEvent");
  }
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo dispatchEvent_methodinfo = {
  (JSJitPropertyOp)dispatchEvent,
  prototypes::id::EventTarget,
  PrototypeTraits<prototypes::id::EventTarget>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::EventTarget* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::EventTarget, mozilla::dom::EventTarget>(cx, obj, self);
    if (NS_FAILED(rv)) {
      mozilla::dom::EventTarget *objPtr;
      xpc_qsSelfRef objRef;
      JS::Value val = JS::ObjectValue(*obj);
      nsresult rv = xpc_qsUnwrapArg<mozilla::dom::EventTarget>(cx, val, &objPtr, &objRef.ptr, &val);
      if (NS_FAILED(rv)) {
          return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventTarget");
      }
      // We should be castable!
      MOZ_ASSERT(!objRef.ptr);
      // We should have an object, too!
      MOZ_ASSERT(objPtr);
      self = objPtr;
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("addEventListener", genericMethod, &addEventListener_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("removeEventListener", genericMethod, &removeEventListener_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("dispatchEvent", genericMethod, &dispatchEvent_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[4] = { JSID_VOID };

static JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNINFO("QueryInterface", QueryInterface, nullptr, 1, 0),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sChromeMethods[] = {
  { true, &sChromeMethods_specs[0] },
  { false, NULL }
};

static jsid sChromeMethods_ids[2] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};

static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeMethods, sChromeMethods_ids, sChromeMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, &sChromeOnlyNativeProperties },
  prototypes::id::EventTarget,
  constructors::id::EventTarget,
  NULL
};

static JSBool
_hasInstance(JSContext* cx, JSHandleObject obj, JSMutableHandleValue vp, JSBool* bp)
{
  if (!vp.isObject()) {
    *bp = false;
    return true;
  }

  jsval protov;
  if (!JS_GetProperty(cx, obj, "prototype", &protov))
    return false;
  if (!protov.isObject()) {
    JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_BAD_PROTOTYPE,
                         "EventTarget");
    return false;
  }
  JSObject *objProto = &protov.toObject();

  JSObject* instance = &vp.toObject();
  JSObject* proto;
  if (!JS_GetPrototype(cx, instance, &proto))
    return false;
  while (proto) {
    if (proto == objProto) {
      *bp = true;
      return true;
    }
    if (!JS_GetPrototype(cx, proto, &proto))
      return false;
  }

  // FIXME Limit this to chrome by checking xpc::AccessCheck::isChrome(obj).
  nsISupports* native =
    nsContentUtils::XPConnect()->GetNativeOfWrapper(cx, instance);
  nsCOMPtr<nsIDOMEventTarget> qiResult = do_QueryInterface(native);
  *bp = !!qiResult;
  return true;

}


static DOMIfaceAndProtoJSClass InterfaceObjectClass = {
  {
    "Function",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    ThrowingConstructor, /* call */
    _hasInstance, /* hasInstance */
    ThrowingConstructor, /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterface,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "EventTargetPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sChromeMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sChromeMethods, sChromeMethods_ids) ||
       !InitIds(aCx, sMethods, sMethods_ids))) {
    sChromeMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::EventTarget],
                              &InterfaceObjectClass.mBase, nullptr, 0, &protoAndIfaceArray[constructors::id::EventTarget],
                              nullptr,
                              &sNativeProperties,
                              xpc::AccessCheck::isChrome(aGlobal) ? &sChromeOnlyNativeProperties : nullptr,
                              "EventTarget");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

} // namespace EventTargetBinding



namespace EventTargetBinding_workers {

static bool
addEventListener(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::EventTarget* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "EventTarget.addEventListener");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  JSObject* arg1;
  if (argv[1].isObject()) {
    if (!IsConvertibleToCallbackInterface(cx, &argv[1].toObject())) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventListener_workers");
        return false;
    }

    arg1 = &argv[1].toObject();
  } else if (argv[1].isNullOrUndefined()) {
    arg1 = NULL;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  bool arg2;
  if (2 < argc) {
    if (!ValueToPrimitive<bool, eDefault>(cx, argv[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = false;
  }
  const Nullable<bool> arg3;
  if (!(3 < argc) || argv[3].isNullOrUndefined()) {
    const_cast< Nullable<bool>& >(arg3).SetNull();
  } else if (!ValueToPrimitive<bool, eDefault>(cx, argv[3], &const_cast< Nullable<bool>& >(arg3).SetValue())) {
    return false;
  }
  ErrorResult rv;
  self->AddEventListener(arg0, arg1, arg2, arg3, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "EventTarget", "addEventListener");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo addEventListener_methodinfo = {
  (JSJitPropertyOp)addEventListener,
  prototypes::id::EventTarget_workers,
  PrototypeTraits<prototypes::id::EventTarget_workers>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
removeEventListener(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::EventTarget* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "EventTarget.removeEventListener");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  JSObject* arg1;
  if (argv[1].isObject()) {
    if (!IsConvertibleToCallbackInterface(cx, &argv[1].toObject())) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventListener_workers");
        return false;
    }

    arg1 = &argv[1].toObject();
  } else if (argv[1].isNullOrUndefined()) {
    arg1 = NULL;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  bool arg2;
  if (2 < argc) {
    if (!ValueToPrimitive<bool, eDefault>(cx, argv[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = false;
  }
  ErrorResult rv;
  self->RemoveEventListener(arg0, arg1, arg2, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "EventTarget", "removeEventListener");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo removeEventListener_methodinfo = {
  (JSJitPropertyOp)removeEventListener,
  prototypes::id::EventTarget_workers,
  PrototypeTraits<prototypes::id::EventTarget_workers>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
dispatchEvent(JSContext* cx, JSHandleObject obj, mozilla::dom::workers::EventTarget* self, unsigned argc, JS::Value* vp)
{

  if (argc < 1) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "EventTarget.dispatchEvent");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  JSObject* arg0;
  if (argv[0].isObject()) {
    arg0 = &argv[0].toObject();
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  ErrorResult rv;
  bool result;
  result = self->DispatchEvent(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<false>(cx, rv, "EventTarget", "dispatchEvent");
  }
  *vp = BOOLEAN_TO_JSVAL(result);
  return true;
}


const JSJitInfo dispatchEvent_methodinfo = {
  (JSJitPropertyOp)dispatchEvent,
  prototypes::id::EventTarget_workers,
  PrototypeTraits<prototypes::id::EventTarget_workers>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::workers::EventTarget* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::EventTarget_workers, mozilla::dom::workers::EventTarget>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "EventTarget_workers");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("addEventListener", genericMethod, &addEventListener_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("removeEventListener", genericMethod, &removeEventListener_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FNINFO("dispatchEvent", genericMethod, &dispatchEvent_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, nullptr, sMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
JSNativeHolder _constructor_holder = {
  ThrowingConstructor,
  &sWorkerNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "EventTargetPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sWorkerNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::EventTarget_workers],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::EventTarget_workers],
                              nullptr,
                              &sNativeProperties,
                              nullptr,
                              "EventTarget");
}

} // namespace EventTargetBinding_workers



} // namespace dom
} // namespace mozilla
