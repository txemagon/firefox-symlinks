/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "DOMParserBinding.h"
#include "DocumentBinding.h"
#include "PrimitiveConversions.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "jsfriendapi.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/TypedArray.h"
#include "nsContentUtils.h"
#include "nsDOMParser.h"
#include "nsDOMQS.h"
#include "nsIDocument.h"
#include "nsIInputStream.h"
#include "nsIPrincipal.h"
#include "nsIURI.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace SupportedTypeValues {

  const EnumEntry strings[6] = {
    {"text/html", 9},
    {"text/xml", 8},
    {"application/xml", 15},
    {"application/xhtml+xml", 21},
    {"image/svg+xml", 13},
    { NULL, 0 }
  };
} // namespace SupportedTypeValues


namespace DOMParserBinding {

static bool
parseFromString(JSContext* cx, JSHandleObject obj, nsDOMParser* self, unsigned argc, JS::Value* vp)
{

  if (argc < 2) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMParser.parseFromString");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  FakeDependentString arg0_holder;
  const NonNull<nsAString> arg0;
  if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
  SupportedType arg1;
  {
    bool ok;
    int index = FindEnumStringIndex<true>(cx, argv[1], SupportedTypeValues::strings, "SupportedType", &ok);
    if (!ok) {
      return false;
    }
    MOZ_ASSERT(index >= 0);
    arg1 = static_cast<SupportedType>(index);
  }
  ErrorResult rv;
  nsRefPtr<nsIDocument> result;
  result = self->ParseFromString(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "DOMParser", "parseFromString");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo parseFromString_methodinfo = {
  (JSJitPropertyOp)parseFromString,
  prototypes::id::DOMParser,
  PrototypeTraits<prototypes::id::DOMParser>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
parseFromBuffer(JSContext* cx, JSHandleObject obj, nsDOMParser* self, unsigned argc, JS::Value* vp)
{

  unsigned argcount = NS_MIN(argc, 3u);
  switch (argcount) {
    case 3: {
      JS::Value* argv_start = JS_ARGV(cx, vp);
      if (argv_start[0].isObject()) {
        do {
          Maybe<Uint8Array> arg0_holder;
          NonNull<Uint8Array> arg0;
          arg0_holder.construct(&argv_start[0].toObject());
          if (!arg0_holder.ref().inited()) {
            break;
          }
          arg0 = arg0_holder.addr();

          JS::Value* argv = JS_ARGV(cx, vp);

          uint32_t arg1;
          if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[1], &arg1)) {
            return false;
          }
          SupportedType arg2;
          {
            bool ok;
            int index = FindEnumStringIndex<true>(cx, argv[2], SupportedTypeValues::strings, "SupportedType", &ok);
            if (!ok) {
              return false;
            }
            MOZ_ASSERT(index >= 0);
            arg2 = static_cast<SupportedType>(index);
          }
          ErrorResult rv;
          nsRefPtr<nsIDocument> result;
          result = self->ParseFromBuffer(arg0, arg1, arg2, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "DOMParser", "parseFromBuffer");
          }
          if (!WrapNewBindingObject(cx, obj, result, vp)) {
            if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
              return false;
            }
            return true;
          }
          return true;
        } while (0);
        do {
          const Sequence< uint8_t > arg0;
          JSObject* seq = &argv_start[0].toObject();

          if (!IsArrayLike(cx, seq)) {
            break;
          }
          uint32_t length;
          // JS_GetArrayLength actually works on all objects
          if (!JS_GetArrayLength(cx, seq, &length)) {
            return false;
          }
          Sequence< uint8_t > &arr = const_cast< Sequence< uint8_t >& >(arg0);
          if (!arr.SetCapacity(length)) {
            JS_ReportOutOfMemory(cx);
            return false;
          }
          for (uint32_t i = 0; i < length; ++i) {
            jsval temp;
            if (!JS_GetElement(cx, seq, i, &temp)) {
              return false;
            }
            uint8_t& slot = *arr.AppendElement();
            if (!ValueToPrimitive<uint8_t, eDefault>(cx, temp, &slot)) {
              return false;
            }
          }

          JS::Value* argv = JS_ARGV(cx, vp);

          uint32_t arg1;
          if (!ValueToPrimitive<uint32_t, eDefault>(cx, argv[1], &arg1)) {
            return false;
          }
          SupportedType arg2;
          {
            bool ok;
            int index = FindEnumStringIndex<true>(cx, argv[2], SupportedTypeValues::strings, "SupportedType", &ok);
            if (!ok) {
              return false;
            }
            MOZ_ASSERT(index >= 0);
            arg2 = static_cast<SupportedType>(index);
          }
          ErrorResult rv;
          nsRefPtr<nsIDocument> result;
          result = self->ParseFromBuffer(arg0, arg1, arg2, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "DOMParser", "parseFromBuffer");
          }
          if (!WrapNewBindingObject(cx, obj, result, vp)) {
            if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
              return false;
            }
            return true;
          }
          return true;
        } while (0);
      }
      return ThrowErrorMessage(cx, MSG_INVALID_ARG, "0", "3");
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMParser.parseFromBuffer");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}


const JSJitInfo parseFromBuffer_methodinfo = {
  (JSJitPropertyOp)parseFromBuffer,
  prototypes::id::DOMParser,
  PrototypeTraits<prototypes::id::DOMParser>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
parseFromStream(JSContext* cx, JSHandleObject obj, nsDOMParser* self, unsigned argc, JS::Value* vp)
{

  if (argc < 4) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMParser.parseFromStream");
  }

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<nsIInputStream> arg0_holder;
  nsIInputStream* arg0;
  if (argv[0].isObject()) {
    jsval tmpVal = argv[0];
    nsIInputStream* tmp;
    if (NS_FAILED(xpc_qsUnwrapArg<nsIInputStream>(cx, argv[0], &tmp, static_cast<nsIInputStream**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "InputStream");return false;
    }
    MOZ_ASSERT(tmp);
    if (tmpVal != argv[0] && !arg0_holder) {
      // We have to have a strong ref, because we got this off
      // some random object that might get GCed
      arg0_holder = tmp;
    }
    arg0 = tmp;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT);
    return false;
  }
  FakeDependentString arg1_holder;
  const NonNull<nsAString> arg1;
  if (!ConvertJSValueToString(cx, argv[1], &argv[1], eNull, eNull, arg1_holder)) {
    return false;
  }
  const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
  int32_t arg2;
  if (!ValueToPrimitive<int32_t, eDefault>(cx, argv[2], &arg2)) {
    return false;
  }
  SupportedType arg3;
  {
    bool ok;
    int index = FindEnumStringIndex<true>(cx, argv[3], SupportedTypeValues::strings, "SupportedType", &ok);
    if (!ok) {
      return false;
    }
    MOZ_ASSERT(index >= 0);
    arg3 = static_cast<SupportedType>(index);
  }
  ErrorResult rv;
  nsRefPtr<nsIDocument> result;
  result = self->ParseFromStream(arg0, arg1, arg2, arg3, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "DOMParser", "parseFromStream");
  }
  if (!WrapNewBindingObject(cx, obj, result, vp)) {
    if (!HandleNewBindingWrappingFailure(cx, obj, result, vp)) {
      return false;
    }
    return true;
  }
  return true;
}


const JSJitInfo parseFromStream_methodinfo = {
  (JSJitPropertyOp)parseFromStream,
  prototypes::id::DOMParser,
  PrototypeTraits<prototypes::id::DOMParser>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_OBJECT   /* returnType.  Only relevant for getters/methods. */
};

static bool
init(JSContext* cx, JSHandleObject obj, nsDOMParser* self, unsigned argc, JS::Value* vp)
{

  JS::Value* argv = JS_ARGV(cx, vp);

  nsRefPtr<nsIPrincipal> arg0_holder;
  nsIPrincipal* arg0;
  if (0 < argc) {
    if (argv[0].isObject()) {
      jsval tmpVal = argv[0];
      nsIPrincipal* tmp;
      if (NS_FAILED(xpc_qsUnwrapArg<nsIPrincipal>(cx, argv[0], &tmp, static_cast<nsIPrincipal**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Principal");return false;
      }
      MOZ_ASSERT(tmp);
      if (tmpVal != argv[0] && !arg0_holder) {
        // We have to have a strong ref, because we got this off
        // some random object that might get GCed
        arg0_holder = tmp;
      }
      arg0 = tmp;
    } else if (argv[0].isNullOrUndefined()) {
      arg0 = NULL;
    } else {
      ThrowErrorMessage(cx, MSG_NOT_OBJECT);
      return false;
    }
  } else {
    arg0 = NULL;
  }
  nsRefPtr<nsIURI> arg1_holder;
  nsIURI* arg1;
  if (1 < argc) {
    if (argv[1].isObject()) {
      jsval tmpVal = argv[1];
      nsIURI* tmp;
      if (NS_FAILED(xpc_qsUnwrapArg<nsIURI>(cx, argv[1], &tmp, static_cast<nsIURI**>(getter_AddRefs(arg1_holder)), &tmpVal))) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "URI");return false;
      }
      MOZ_ASSERT(tmp);
      if (tmpVal != argv[1] && !arg1_holder) {
        // We have to have a strong ref, because we got this off
        // some random object that might get GCed
        arg1_holder = tmp;
      }
      arg1 = tmp;
    } else if (argv[1].isNullOrUndefined()) {
      arg1 = NULL;
    } else {
      ThrowErrorMessage(cx, MSG_NOT_OBJECT);
      return false;
    }
  } else {
    arg1 = NULL;
  }
  nsRefPtr<nsIURI> arg2_holder;
  nsIURI* arg2;
  if (2 < argc) {
    if (argv[2].isObject()) {
      jsval tmpVal = argv[2];
      nsIURI* tmp;
      if (NS_FAILED(xpc_qsUnwrapArg<nsIURI>(cx, argv[2], &tmp, static_cast<nsIURI**>(getter_AddRefs(arg2_holder)), &tmpVal))) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "URI");return false;
      }
      MOZ_ASSERT(tmp);
      if (tmpVal != argv[2] && !arg2_holder) {
        // We have to have a strong ref, because we got this off
        // some random object that might get GCed
        arg2_holder = tmp;
      }
      arg2 = tmp;
    } else if (argv[2].isNullOrUndefined()) {
      arg2 = NULL;
    } else {
      ThrowErrorMessage(cx, MSG_NOT_OBJECT);
      return false;
    }
  } else {
    arg2 = NULL;
  }
  ErrorResult rv;
  self->Init(arg0, arg1, arg2, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "DOMParser", "init");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo init_methodinfo = {
  (JSJitPropertyOp)init,
  prototypes::id::DOMParser,
  PrototypeTraits<prototypes::id::DOMParser>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  nsDOMParser* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::DOMParser, nsDOMParser>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "DOMParser");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsDOMParser>::value), "Must be an nsISupports class");
  nsDOMParser* self = UnwrapDOMObject<nsDOMParser>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, nsDOMParser>::value), "Must be an nsISupports class");
  nsDOMParser* self = UnwrapDOMObject<nsDOMParser>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("parseFromString", genericMethod, &parseFromString_methodinfo, 2, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[2] = { JSID_VOID };

static JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNINFO("parseFromBuffer", genericMethod, &parseFromBuffer_methodinfo, 3, JSPROP_ENUMERATE),
  JS_FNINFO("parseFromStream", genericMethod, &parseFromStream_methodinfo, 4, JSPROP_ENUMERATE),
  JS_FNINFO("init", genericMethod, &init_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("QueryInterface", QueryInterface, nullptr, 1, 0),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sChromeMethods[] = {
  { true, &sChromeMethods_specs[0] },
  { false, NULL }
};

static jsid sChromeMethods_ids[5] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};

static const NativeProperties sChromeOnlyNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sChromeMethods, sChromeMethods_ids, sChromeMethods_specs,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, &sChromeOnlyNativeProperties },
  prototypes::id::DOMParser,
  constructors::id::DOMParser,
  NULL
};

static JSBool
_constructor(JSContext* cx, unsigned argc, JS::Value* vp)
{

  JSObject* obj = JS_GetGlobalForObject(cx, JSVAL_TO_OBJECT(JS_CALLEE(cx, vp)));

  nsISupports* global;
  xpc_qsSelfRef globalRef;
  {
    nsresult rv;
    JS::Value val = OBJECT_TO_JSVAL(obj);
    rv = xpc_qsUnwrapArg<nsISupports>(cx, val, &global, &globalRef.ptr, &val);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_GLOBAL_NOT_NATIVE);
    }
  }

  unsigned argcount = NS_MIN(argc, 3u);
  switch (argcount) {
    case 0: {
      ErrorResult rv;
      nsRefPtr<nsDOMParser> result;
      result = nsDOMParser::Constructor(global, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "DOMParser", "constructor");
      }
      if (!WrapNewBindingObject(cx, obj, result, vp)) {
        MOZ_ASSERT(JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    case 1: {
      /* Fall through */
    }
    case 2: {
      /* Fall through */
    }
    case 3: {

      JS::Value* argv = JS_ARGV(cx, vp);

      nsRefPtr<nsIPrincipal> arg0_holder;
      nsIPrincipal* arg0;
      if (argv[0].isObject()) {
        jsval tmpVal = argv[0];
        nsIPrincipal* tmp;
        if (NS_FAILED(xpc_qsUnwrapArg<nsIPrincipal>(cx, argv[0], &tmp, static_cast<nsIPrincipal**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
          ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Principal");return false;
        }
        MOZ_ASSERT(tmp);
        if (tmpVal != argv[0] && !arg0_holder) {
          // We have to have a strong ref, because we got this off
          // some random object that might get GCed
          arg0_holder = tmp;
        }
        arg0 = tmp;
      } else if (argv[0].isNullOrUndefined()) {
        arg0 = NULL;
      } else {
        ThrowErrorMessage(cx, MSG_NOT_OBJECT);
        return false;
      }
      nsRefPtr<nsIURI> arg1_holder;
      nsIURI* arg1;
      if (1 < argc) {
        if (argv[1].isObject()) {
          jsval tmpVal = argv[1];
          nsIURI* tmp;
          if (NS_FAILED(xpc_qsUnwrapArg<nsIURI>(cx, argv[1], &tmp, static_cast<nsIURI**>(getter_AddRefs(arg1_holder)), &tmpVal))) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "URI");return false;
          }
          MOZ_ASSERT(tmp);
          if (tmpVal != argv[1] && !arg1_holder) {
            // We have to have a strong ref, because we got this off
            // some random object that might get GCed
            arg1_holder = tmp;
          }
          arg1 = tmp;
        } else if (argv[1].isNullOrUndefined()) {
          arg1 = NULL;
        } else {
          ThrowErrorMessage(cx, MSG_NOT_OBJECT);
          return false;
        }
      } else {
        arg1 = NULL;
      }
      nsRefPtr<nsIURI> arg2_holder;
      nsIURI* arg2;
      if (2 < argc) {
        if (argv[2].isObject()) {
          jsval tmpVal = argv[2];
          nsIURI* tmp;
          if (NS_FAILED(xpc_qsUnwrapArg<nsIURI>(cx, argv[2], &tmp, static_cast<nsIURI**>(getter_AddRefs(arg2_holder)), &tmpVal))) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "URI");return false;
          }
          MOZ_ASSERT(tmp);
          if (tmpVal != argv[2] && !arg2_holder) {
            // We have to have a strong ref, because we got this off
            // some random object that might get GCed
            arg2_holder = tmp;
          }
          arg2 = tmp;
        } else if (argv[2].isNullOrUndefined()) {
          arg2 = NULL;
        } else {
          ThrowErrorMessage(cx, MSG_NOT_OBJECT);
          return false;
        }
      } else {
        arg2 = NULL;
      }
      ErrorResult rv;
      nsRefPtr<nsDOMParser> result;
      result = nsDOMParser::Constructor(global, arg0, arg1, arg2, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "DOMParser", "constructor");
      }
      if (!WrapNewBindingObject(cx, obj, result, vp)) {
        MOZ_ASSERT(JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMParser.constructor");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}

JSNativeHolder _constructor_holder = {
  _constructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "DOMParserPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = JS_GetObjectPrototype(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sChromeMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sChromeMethods, sChromeMethods_ids) ||
       !InitIds(aCx, sMethods, sMethods_ids))) {
    sChromeMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::DOMParser],
                              nullptr, &_constructor_holder, 0, &protoAndIfaceArray[constructors::id::DOMParser],
                              &Class.mClass,
                              &sNativeProperties,
                              xpc::AccessCheck::isChrome(aGlobal) ? &sChromeOnlyNativeProperties : nullptr,
                              "DOMParser");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}


DOMJSClass Class = {
  { "DOMParser",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::DOMParser, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<nsDOMParser>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, nsDOMParser* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<nsDOMParser*>(aObject) ==
             reinterpret_cast<nsDOMParser*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace DOMParserBinding



} // namespace dom
} // namespace mozilla
