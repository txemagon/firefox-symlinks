/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "AccessCheck.h"
#include "EventHandlerBinding.h"
#include "EventTargetBinding.h"
#include "FileReaderSyncBinding.h"
#include "PrimitiveConversions.h"
#include "WebSocket.h"
#include "WebSocketBinding.h"
#include "WorkerPrivate.h"
#include "XPCQuickStubs.h"
#include "XPCWrapper.h"
#include "jsfriendapi.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/TypedArray.h"
#include "nsContentUtils.h"
#include "nsDOMQS.h"
#include "nsIDOMFile.h"

using namespace mozilla::dom;
namespace mozilla {
namespace dom {

namespace BinaryTypeValues {

  const EnumEntry strings[3] = {
    {"blob", 4},
    {"arraybuffer", 11},
    { NULL, 0 }
  };
} // namespace BinaryTypeValues


namespace WebSocketBinding {

static bool
get_url(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* vp)
{
  nsString result;
  self->GetUrl(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo url_getterinfo = {
  (JSJitPropertyOp)get_url,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_readyState(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* vp)
{
  uint16_t result;
  result = self->ReadyState();
  *vp = INT_TO_JSVAL(int32_t(result));
  return true;
}


const JSJitInfo readyState_getterinfo = {
  (JSJitPropertyOp)get_readyState,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_INT32   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_bufferedAmount(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* vp)
{
  uint32_t result;
  result = self->BufferedAmount();
  *vp = UINT_TO_JSVAL(result);
  return true;
}


const JSJitInfo bufferedAmount_getterinfo = {
  (JSJitPropertyOp)get_bufferedAmount,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Getter,
  true,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_DOUBLE   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_onopen(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnopen();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onopen(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnopen(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "onopen");
  }

  return true;
}


const JSJitInfo onopen_getterinfo = {
  (JSJitPropertyOp)get_onopen,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onopen_setterinfo = {
  (JSJitPropertyOp)set_onopen,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_onerror(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnerror();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onerror(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnerror(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "onerror");
  }

  return true;
}


const JSJitInfo onerror_getterinfo = {
  (JSJitPropertyOp)get_onerror,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onerror_setterinfo = {
  (JSJitPropertyOp)set_onerror,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_onclose(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnclose();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onclose(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnclose(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "onclose");
  }

  return true;
}


const JSJitInfo onclose_getterinfo = {
  (JSJitPropertyOp)get_onclose,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onclose_setterinfo = {
  (JSJitPropertyOp)set_onclose,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_extensions(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* vp)
{
  nsString result;
  self->GetExtensions(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo extensions_getterinfo = {
  (JSJitPropertyOp)get_extensions,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_protocol(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* vp)
{
  nsString result;
  self->GetProtocol(result);
  if (!xpc::NonVoidStringToJsval(cx, result, vp)) {
    return false;
  }
  return true;
}


const JSJitInfo protocol_getterinfo = {
  (JSJitPropertyOp)get_protocol,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

static bool
close(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, unsigned argc, JS::Value* vp)
{

  JS::Value* argv = JS_ARGV(cx, vp);

  const Optional< uint16_t > arg0;
  if (0 < argc) {
    const_cast< Optional< uint16_t > &>(arg0).Construct();
    if (!ValueToPrimitive<uint16_t, eClamp>(cx, argv[0], &const_cast< uint16_t & >(arg0.Value()))) {
      return false;
    }
  }
  FakeDependentString arg1_holder;
  const Optional<nsAString> arg1;
  if (1 < argc) {
    if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
      return false;
    }
    const_cast<Optional<nsAString>&>(arg1) = &arg1_holder;
  }
  ErrorResult rv;
  self->Close(arg0, arg1, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "close");
  }
  *vp = JSVAL_VOID;
  return true;
}


const JSJitInfo close_methodinfo = {
  (JSJitPropertyOp)close,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_onmessage(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* vp)
{
  nsRefPtr<EventHandlerNonNull> result;
  result = self->GetOnmessage();
  if (result) {
    *vp = JS::ObjectValue(*result->Callable());
    if (!MaybeWrapValue(cx, vp)) {
      return false;
    }
    return true;
  } else {
    *vp = JS::NullValue();
    return true;
  }
}

static bool
set_onmessage(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* argv)
{
  nsRefPtr<EventHandlerNonNull> arg0;
  if (argv[0].isObject() && JS_ObjectIsCallable(cx, &argv[0].toObject())) {
    bool inited;
    arg0 = new EventHandlerNonNull(cx, obj, &argv[0].toObject(), &inited);
    if (!inited) {
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  ErrorResult rv;
  self->SetOnmessage(arg0, rv);
  if (rv.Failed()) {
    return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "onmessage");
  }

  return true;
}


const JSJitInfo onmessage_getterinfo = {
  (JSJitPropertyOp)get_onmessage,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNKNOWN   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo onmessage_setterinfo = {
  (JSJitPropertyOp)set_onmessage,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
get_binaryType(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* vp)
{
  BinaryType result;
  result = self->BinaryType();
  MOZ_ASSERT(uint32_t(result) < ArrayLength(BinaryTypeValues::strings));
  JSString* result_str = JS_NewStringCopyN(cx, BinaryTypeValues::strings[uint32_t(result)].value, BinaryTypeValues::strings[uint32_t(result)].length);
  if (!result_str) {
  return false;
  }
  *vp = JS::StringValue(result_str);
  return true;
}

static bool
set_binaryType(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, JS::Value* argv)
{
  BinaryType arg0;
  {
    bool ok;
    int index = FindEnumStringIndex<false>(cx, argv[0], BinaryTypeValues::strings, "BinaryType", &ok);
    if (!ok) {
      return false;
    }
    if (index < 0) {
      return true;
    }
    arg0 = static_cast<BinaryType>(index);
  }
  self->SetBinaryType(arg0);

  return true;
}


const JSJitInfo binaryType_getterinfo = {
  (JSJitPropertyOp)get_binaryType,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Getter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_STRING   /* returnType.  Only relevant for getters/methods. */
};

const JSJitInfo binaryType_setterinfo = {
  (JSJitPropertyOp)set_binaryType,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Setter,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static bool
send(JSContext* cx, JSHandleObject obj, mozilla::dom::WebSocket* self, unsigned argc, JS::Value* vp)
{

  unsigned argcount = NS_MIN(argc, 1u);
  switch (argcount) {
    case 1: {
      JS::Value* argv_start = JS_ARGV(cx, vp);
      if (argv_start[0].isObject()) {
        do {
          nsRefPtr<nsIDOMBlob> arg0_holder;
          nsIDOMBlob* arg0;
          jsval tmpVal = argv_start[0];
          nsIDOMBlob* tmp;
          if (NS_FAILED(xpc_qsUnwrapArg<nsIDOMBlob>(cx, argv_start[0], &tmp, static_cast<nsIDOMBlob**>(getter_AddRefs(arg0_holder)), &tmpVal))) {
            break;
          }
          MOZ_ASSERT(tmp);
          arg0 = tmp;
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          Maybe<ArrayBuffer> arg0_holder;
          NonNull<ArrayBuffer> arg0;
          arg0_holder.construct(&argv_start[0].toObject());
          if (!arg0_holder.ref().inited()) {
            break;
          }
          arg0 = arg0_holder.addr();
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
        do {
          Maybe<ArrayBufferView> arg0_holder;
          NonNull<ArrayBufferView> arg0;
          arg0_holder.construct(&argv_start[0].toObject());
          if (!arg0_holder.ref().inited()) {
            break;
          }
          arg0 = arg0_holder.addr();
          ErrorResult rv;
          self->Send(arg0, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "send");
          }
          *vp = JSVAL_VOID;
          return true;
        } while (0);
      }

      JS::Value* argv = JS_ARGV(cx, vp);

      FakeDependentString arg0_holder;
      const NonNull<nsAString> arg0;
      if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
      ErrorResult rv;
      self->Send(arg0, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "send");
      }
      *vp = JSVAL_VOID;
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "WebSocket.send");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}


const JSJitInfo send_methodinfo = {
  (JSJitPropertyOp)send,
  prototypes::id::WebSocket,
  PrototypeTraits<prototypes::id::WebSocket>::Depth,
  JSJitInfo::Method,
  false,  /* isInfallible. False in setters. */
  false,  /* isConstant. Only relevant for getters. */
  JSVAL_TYPE_UNDEFINED   /* returnType.  Only relevant for getters/methods. */
};

static JSBool
genericMethod(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::WebSocket* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::WebSocket, mozilla::dom::WebSocket>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "WebSocket");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Method);
  JSJitMethodOp method = (JSJitMethodOp)info->op;
  return method(cx, obj, self, argc, vp);
}

static JSBool
genericGetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::WebSocket* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::WebSocket, mozilla::dom::WebSocket>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "WebSocket");
    }
  }
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Getter);
  JSJitPropertyOp getter = info->op;
  return getter(cx, obj, self, vp);
}

static JSBool
genericSetter(JSContext* cx, unsigned argc, JS::Value* vp)
{
  js::RootedObject obj(cx, JS_THIS_OBJECT(cx, vp));
  if (!obj) {
    return false;
  }

  mozilla::dom::WebSocket* self;
  {
    nsresult rv = UnwrapObject<prototypes::id::WebSocket, mozilla::dom::WebSocket>(cx, obj, self);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "WebSocket");
    }
  }
  if (argc == 0) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "WebSocket attribute setter");
  }
  JS::Value* argv = JS_ARGV(cx, vp);
  const JSJitInfo *info = FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp));
  MOZ_ASSERT(info->type == JSJitInfo::Setter);
  JSJitPropertyOp setter = info->op;
  if (!setter(cx, obj, self, argv)) {
    return false;
  }
  *vp = JSVAL_VOID;
  return true;
}

static JSBool
_addProperty(JSContext* cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::WebSocket>::value), "Must be an nsISupports class");
  mozilla::dom::WebSocket* self = UnwrapDOMObject<mozilla::dom::WebSocket>(obj);
  nsContentUtils::PreserveWrapper(reinterpret_cast<nsISupports*>(self), self);
  return true;
}

static void
_finalize(JSFreeOp* fop, JSObject* obj)
{
  MOZ_STATIC_ASSERT((IsBaseOf<nsISupports, mozilla::dom::WebSocket>::value), "Must be an nsISupports class");
  mozilla::dom::WebSocket* self = UnwrapDOMObject<mozilla::dom::WebSocket>(obj);
  if (self) {
    ClearWrapper(self, self);
    XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
    if (rt) {
      rt->DeferredRelease(reinterpret_cast<nsISupports*>(self));
    } else {
      NS_RELEASE(self);
    }
  }
}

static JSFunctionSpec sMethods_specs[] = {
  JS_FNINFO("close", genericMethod, &close_methodinfo, 0, JSPROP_ENUMERATE),
  JS_FNINFO("send", genericMethod, &send_methodinfo, 1, JSPROP_ENUMERATE),
  JS_FS_END
};

static Prefable<JSFunctionSpec> sMethods[] = {
  { true, &sMethods_specs[0] },
  { false, NULL }
};

static jsid sMethods_ids[3] = { JSID_VOID };

static JSPropertySpec sAttributes_specs[] = {
  { "url", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &url_getterinfo }, JSOP_NULLWRAPPER},
  { "readyState", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &readyState_getterinfo }, JSOP_NULLWRAPPER},
  { "bufferedAmount", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &bufferedAmount_getterinfo }, JSOP_NULLWRAPPER},
  { "onopen", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &onopen_getterinfo }, { (JSStrictPropertyOp)genericSetter, &onopen_setterinfo }},
  { "onerror", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &onerror_getterinfo }, { (JSStrictPropertyOp)genericSetter, &onerror_setterinfo }},
  { "onclose", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &onclose_getterinfo }, { (JSStrictPropertyOp)genericSetter, &onclose_setterinfo }},
  { "extensions", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &extensions_getterinfo }, JSOP_NULLWRAPPER},
  { "protocol", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &protocol_getterinfo }, JSOP_NULLWRAPPER},
  { "onmessage", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &onmessage_getterinfo }, { (JSStrictPropertyOp)genericSetter, &onmessage_setterinfo }},
  { "binaryType", 0, JSPROP_SHARED | JSPROP_ENUMERATE | JSPROP_NATIVE_ACCESSORS, { (JSPropertyOp)genericGetter, &binaryType_getterinfo }, { (JSStrictPropertyOp)genericSetter, &binaryType_setterinfo }},
  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
};

static Prefable<JSPropertySpec> sAttributes[] = {
  { true, &sAttributes_specs[0] },
  { false, NULL }
};

static jsid sAttributes_ids[11] = { JSID_VOID };

static ConstantSpec sConstants_specs[] = {
  { "CONNECTING", INT_TO_JSVAL(0) },
  { "OPEN", INT_TO_JSVAL(1) },
  { "CLOSING", INT_TO_JSVAL(2) },
  { "CLOSED", INT_TO_JSVAL(3) },
  { 0, JSVAL_VOID }
};

static Prefable<ConstantSpec> sConstants[] = {
  { true, &sConstants_specs[0] },
  { false, NULL }
};

static jsid sConstants_ids[5] = { JSID_VOID };


static const NativeProperties sNativeProperties = {
  nullptr, nullptr, nullptr,
  nullptr, nullptr, nullptr,
  sMethods, sMethods_ids, sMethods_specs,
  sAttributes, sAttributes_ids, sAttributes_specs,
  nullptr, nullptr, nullptr,
  sConstants, sConstants_ids, sConstants_specs
};
const NativePropertyHooks sNativePropertyHooks = {
  nullptr,
  nullptr,
  { &sNativeProperties, nullptr },
  prototypes::id::WebSocket,
  constructors::id::WebSocket,
  &EventTargetBinding::sNativePropertyHooks
};

static JSBool
_constructor(JSContext* cx, unsigned argc, JS::Value* vp)
{

  JSObject* obj = JS_GetGlobalForObject(cx, JSVAL_TO_OBJECT(JS_CALLEE(cx, vp)));

  nsISupports* global;
  xpc_qsSelfRef globalRef;
  {
    nsresult rv;
    JS::Value val = OBJECT_TO_JSVAL(obj);
    rv = xpc_qsUnwrapArg<nsISupports>(cx, val, &global, &globalRef.ptr, &val);
    if (NS_FAILED(rv)) {
      return ThrowErrorMessage(cx, MSG_GLOBAL_NOT_NATIVE);
    }
  }

  unsigned argcount = NS_MIN(argc, 2u);
  switch (argcount) {
    case 1: {

      JS::Value* argv = JS_ARGV(cx, vp);

      FakeDependentString arg0_holder;
      const NonNull<nsAString> arg0;
      if (!ConvertJSValueToString(cx, argv[0], &argv[0], eStringify, eStringify, arg0_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
      ErrorResult rv;
      nsRefPtr<mozilla::dom::WebSocket> result;
      result = mozilla::dom::WebSocket::Constructor(cx, global, arg0, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "constructor");
      }
      if (!WrapNewBindingObject(cx, obj, result, vp)) {
        MOZ_ASSERT(JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    case 2: {
      JS::Value* argv_start = JS_ARGV(cx, vp);
      FakeDependentString arg0_holder;
      const NonNull<nsAString> arg0;
      if (!ConvertJSValueToString(cx, argv_start[0], &argv_start[0], eStringify, eStringify, arg0_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg0) = &arg0_holder;
      if (argv_start[1].isObject()) {
        do {
          const Sequence< nsString > arg1;
          JSObject* seq = &argv_start[1].toObject();

          if (!IsArrayLike(cx, seq)) {
            break;
          }
          uint32_t length;
          // JS_GetArrayLength actually works on all objects
          if (!JS_GetArrayLength(cx, seq, &length)) {
            return false;
          }
          Sequence< nsString > &arr = const_cast< Sequence< nsString >& >(arg1);
          if (!arr.SetCapacity(length)) {
            JS_ReportOutOfMemory(cx);
            return false;
          }
          for (uint32_t i = 0; i < length; ++i) {
            jsval temp;
            if (!JS_GetElement(cx, seq, i, &temp)) {
              return false;
            }
            nsString& slot = *arr.AppendElement();
            {
              FakeDependentString str;
              if (!ConvertJSValueToString(cx, temp, &temp, eStringify, eStringify, str)) {
                return false;
              }
              slot = str;
            }

          }
          ErrorResult rv;
          nsRefPtr<mozilla::dom::WebSocket> result;
          result = mozilla::dom::WebSocket::Constructor(cx, global, arg0, arg1, rv);
          if (rv.Failed()) {
            return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "constructor");
          }
          if (!WrapNewBindingObject(cx, obj, result, vp)) {
            MOZ_ASSERT(JS_IsExceptionPending(cx));
            return false;
          }
          return true;
        } while (0);
      }

      JS::Value* argv = JS_ARGV(cx, vp);

      FakeDependentString arg1_holder;
      const NonNull<nsAString> arg1;
      if (!ConvertJSValueToString(cx, argv[1], &argv[1], eStringify, eStringify, arg1_holder)) {
        return false;
      }
      const_cast<NonNull<nsAString>&>(arg1) = &arg1_holder;
      ErrorResult rv;
      nsRefPtr<mozilla::dom::WebSocket> result;
      result = mozilla::dom::WebSocket::Constructor(cx, global, arg0, arg1, rv);
      if (rv.Failed()) {
        return ThrowMethodFailedWithDetails<true>(cx, rv, "WebSocket", "constructor");
      }
      if (!WrapNewBindingObject(cx, obj, result, vp)) {
        MOZ_ASSERT(JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "WebSocket.constructor");

      break;
    }
  }
  MOZ_NOT_REACHED("We have an always-returning default case");
  return false;
}

JSNativeHolder _constructor_holder = {
  _constructor,
  &sNativePropertyHooks
};

static DOMIfaceAndProtoJSClass PrototypeClass = {
  {
    "WebSocketPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(2),
    JS_PropertyStub,       /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr,               /* finalize */
    nullptr,               /* checkAccess */
    nullptr,               /* call */
    nullptr,               /* hasInstance */
    nullptr,               /* construct */
    nullptr,               /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  eInterfacePrototype,
  &sNativePropertyHooks
};

void
CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject** protoAndIfaceArray)
{
  JSObject* parentProto = EventTargetBinding::GetProtoObject(aCx, aGlobal);
  if (!parentProto) {
    return;
  }


  if (sMethods_ids[0] == JSID_VOID &&
      (!InitIds(aCx, sMethods, sMethods_ids) ||
       !InitIds(aCx, sAttributes, sAttributes_ids) ||
       !InitIds(aCx, sConstants, sConstants_ids))) {
    sMethods_ids[0] = JSID_VOID;
    return;
  }

  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &PrototypeClass.mBase, &protoAndIfaceArray[prototypes::id::WebSocket],
                              nullptr, &_constructor_holder, 1, &protoAndIfaceArray[constructors::id::WebSocket],
                              &Class.mClass,
                              &sNativeProperties,
                              nullptr,
                              "WebSocket");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JSObject* aGlobal, bool* aEnabled)
{

  *aEnabled = true;
  return GetConstructorObject(aCx, aGlobal);
}

bool
PrefEnabled()
{
  return mozilla::dom::WebSocket::PrefEnabled();
}


DOMJSClass Class = {
  { "WebSocket",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(3),
    _addProperty, /* addProperty */
    JS_PropertyStub,       /* delProperty */
    JS_PropertyStub,       /* getProperty */
    JS_StrictPropertyStub, /* setProperty */
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    _finalize, /* finalize */
    NULL,                  /* checkAccess */
    NULL,                  /* call */
    NULL,                  /* hasInstance */
    NULL,                  /* construct */
    NULL, /* trace */
    JSCLASS_NO_INTERNAL_MEMBERS
  },
  {
    { prototypes::id::EventTarget, prototypes::id::WebSocket, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
    true,
    &sNativePropertyHooks,
    GetParentObject<mozilla::dom::WebSocket>::Get,
    GetProtoObject,
    nullptr
  }
};

JSObject*
Wrap(JSContext* aCx, JSObject* aScope, mozilla::dom::WebSocket* aObject, nsWrapperCache* aCache, bool* aTriedToWrap)
{
  MOZ_ASSERT(static_cast<mozilla::dom::WebSocket*>(aObject) ==
             reinterpret_cast<mozilla::dom::WebSocket*>(aObject));
  MOZ_ASSERT(static_cast<mozilla::dom::EventTarget*>(aObject) ==
             reinterpret_cast<mozilla::dom::EventTarget*>(aObject));

  *aTriedToWrap = true;

  JSObject* parent = WrapNativeParent(aCx, aScope, aObject->GetParentObject());
  if (!parent) {
    return NULL;
  }

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.  Scope so we don't
  // collide with the "obj" we declare in CreateBindingJSObject.
  {
    JSObject* obj = aCache->GetWrapper();
    if (obj) {
      return obj;
    }
  }

  JSAutoCompartment ac(aCx, parent);
  JSObject* global = JS_GetGlobalForObject(aCx, parent);

  JSObject* proto = GetProtoObject(aCx, global);
  if (!proto) {
    return NULL;
  }

  JSObject* obj = JS_NewObject(aCx, &Class.mBase, proto, parent);
  if (!obj) {
    return NULL;
  }

  js::SetReservedSlot(obj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(aObject));
  NS_ADDREF(aObject);


  aCache->SetWrapper(obj);

  return obj;
}

} // namespace WebSocketBinding



} // namespace dom
} // namespace mozilla
