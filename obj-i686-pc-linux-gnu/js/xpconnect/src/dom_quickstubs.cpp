/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */
#include "jsapi.h"
#include "qsWinUndefs.h"
#include "prtypes.h"
#include "nsID.h"
#include "dom_quickstubs.h"
#include "nscore.h"
#include "nsCOMPtr.h"
#include "nsDependentString.h"
#include "xpcprivate.h"  // for XPCCallContext
#include "XPCQuickStubs.h"
#include "nsWrapperCacheInlines.h"
#include "nsIDOMWindow.h"
#include "nsISelection.h"
#include "nsIDOMCSSStyleDeclaration.h"
#include "nsIDOMElement.h"
#include "nsIDOMStorage.h"
#include "nsISupports.h"
#include "nsIDOMJSWindow.h"
#include "nsIDOMScreen.h"
#include "nsIDOMClientRect.h"
#include "nsIDOMPaintRequest.h"
#include "nsIDOMCanvasRenderingContext2D.h"
#include "nsIDOMCharacterData.h"
#include "nsIDOMDocument.h"
#include "nsIDOMNode.h"
#include "nsIDOMNamedNodeMap.h"
#include "nsIDOMText.h"
#include "nsIDOMDOMStringList.h"
#include "nsIBoxObject.h"
#include "nsIDOMXULDocument.h"
#include "nsIDOMElementCSSInlineStyle.h"
#include "nsIDOMCSSPrimitiveValue.h"
#include "nsIDOMRect.h"
#include "nsIDOMEventListener.h"
#include "nsIDOMEvent.h"
#include "nsIDOMEventTarget.h"
#include "nsIDOMMouseEvent.h"
#include "nsIDOMKeyEvent.h"
#include "nsIDOMMutationEvent.h"
#include "nsIDOMDataTransfer.h"
#include "nsIDOMDragEvent.h"
#include "nsIDOMScrollAreaEvent.h"
#include "nsIDOMClientRectList.h"
#include "nsIDOMPaintRequestList.h"
#include "nsIDOMNotifyPaintEvent.h"
#include "nsIDOMMessageEvent.h"
#include "nsIDOMMouseScrollEvent.h"
#include "nsIDOMProgressEvent.h"
#include "nsIDOMUIEvent.h"
#include "nsIDOMTouchEvent.h"
#include "nsIDOMHTMLBaseElement.h"
#include "nsIDOMHTMLFormElement.h"
#include "nsIDOMHTMLButtonElement.h"
#include "nsIDOMHTMLCommandElement.h"
#include "nsIDOMHTMLCollection.h"
#include "nsIDOMHTMLFrameElement.h"
#include "nsIDOMHTMLIFrameElement.h"
#include "nsIDOMFileList.h"
#include "nsIDOMHTMLInputElement.h"
#include "nsIDOMHTMLLinkElement.h"
#include "nsIDOMHTMLMeterElement.h"
#include "nsIDOMHTMLMenuElement.h"
#include "nsIDOMHTMLMenuItemElement.h"
#include "nsIDOMHTMLOptionElement.h"
#include "nsIDOMHTMLProgressElement.h"
#include "nsIDOMHTMLElement.h"
#include "nsIVariant.h"
#include "nsIDOMHTMLOptionsCollection.h"
#include "nsIDOMHTMLSelectElement.h"
#include "nsIDOMHTMLStyleElement.h"
#include "nsIDOMHTMLTextAreaElement.h"
#include "nsIDOMHTMLTitleElement.h"
#include "nsIDOMHTMLCanvasElement.h"
#include "nsIDOMRange.h"
#include "nsIDOMDocumentFragment.h"
#include "nsIDOMToString.h"
#include "nsIDOMStorageItem.h"
#include "nsIDOMNodeIterator.h"
#include "nsIDOMXPathExpression.h"
#include "nsIDOMXPathNSResolver.h"
#include "nsIDOMXPathResult.h"
#include "nsIDOMNSXPathExpression.h"
#include "nsIRDFCompositeDataSource.h"
#include "nsIXULTemplateBuilder.h"
#include "nsIRDFResource.h"
#include "nsIControllers.h"
#include "nsIDOMNodeList.h"
#include "nsIDOMXULElement.h"
#include "nsIDOMFile.h"
#include "nsIDOMDOMError.h"
#include "nsIDOMFileReader.h"
#include "nsIDOMNotifyAudioAvailableEvent.h"
#include "nsIDOMHTMLAudioElement.h"
#include "nsIIDBRequest.h"
#include "nsIIDBCursor.h"
#include "nsIIDBCursorWithValue.h"
#include "nsIIDBObjectStore.h"
#include "nsIIDBTransaction.h"
#include "nsIIDBDatabase.h"
#include "nsIIDBOpenDBRequest.h"
#include "nsIIDBFactory.h"
#include "nsIIDBFileHandle.h"
#include "nsIIDBIndex.h"
#include "nsIIDBKeyRange.h"
#include "nsIIDBVersionChangeEvent.h"
#include "nsIURI.h"
#include "nsIIndexedDatabaseManager.h"
#include "nsIDOMLockedFile.h"
#include "nsIDOMDOMRequest.h"
#include "nsIDOMFileHandle.h"
#include "nsIDOMFileRequest.h"
#include "nsIDOMSVGElement.h"
#include "nsIDOMHTMLDocument.h"
#include "nsINode.h"
#include "nsIContent.h"
#include "nsIDocument.h"
#include "nsCSSPropertiesQS.h"
#include "nsDOMTokenList.h"
#include "nsGenericDOMDataNode.h"
#include "mozilla/dom/Element.h"
#include "nsGenericHTMLElement.h"
#include "nsSVGElement.h"
#include "nsDOMQS.h"
#include "nsDOMStringMap.h"
#include "HTMLPropertiesCollection.h"
#include "nsHTMLMenuElement.h"
#include "nsICSSDeclaration.h"
#include "mozilla/dom/NodeBinding.h"
#include "mozilla/dom/ElementBinding.h"
#include "mozilla/dom/HTMLElementBinding.h"
#include "mozilla/dom/DocumentBinding.h"
#include "mozilla/dom/SVGElementBinding.h"
#include "nsPerformance.h"
#include "mozilla/dom/HTMLDocumentBinding.h"


// === XPCNativeInterface cache 

static XPCNativeInterface* interfaces[42];

void DOM_MarkInterfaces()
{
    for (uint32_t i = 0; i < 42; ++i)
        if (interfaces[i])
            interfaces[i]->Mark();
}
void DOM_ClearInterfaces()
{
    memset(interfaces, 0, 42 * sizeof(XPCNativeInterface*));
}

static const uint32_t k_nsIDOMNode = 0;
static const uint32_t k_nsIDOMDataTransfer = 1;
static const uint32_t k_nsIDOMCanvasGradient = 2;
static const uint32_t k_nsIControllers = 3;
static const uint32_t k_nsIDOMFileRequest = 4;
static const uint32_t k_nsIDOMLockedFile = 5;
static const uint32_t k_nsIRDFResource = 6;
static const uint32_t k_nsIXULTemplateBuilder = 7;
static const uint32_t k_nsIDOMPaintRequestList = 8;
static const uint32_t k_nsIRDFCompositeDataSource = 9;
static const uint32_t k_nsIDOMHTMLOptionsCollection = 10;
static const uint32_t k_nsIDOMTouch = 11;
static const uint32_t k_nsIIDBObjectStore = 12;
static const uint32_t k_nsIDOMRange = 13;
static const uint32_t k_nsIDOMStorage = 14;
static const uint32_t k_nsIIDBRequest = 15;
static const uint32_t k_nsIIDBDatabase = 16;
static const uint32_t k_nsISupports = 17;
static const uint32_t k_nsIDOMNodeList = 18;
static const uint32_t k_nsIDOMDOMRequest = 19;
static const uint32_t k_nsIDOMDOMError = 20;
static const uint32_t k_nsIDOMCSSStyleDeclaration = 21;
static const uint32_t k_nsIDOMCSSPrimitiveValue = 22;
static const uint32_t k_nsIIDBIndex = 23;
static const uint32_t k_nsIBoxObject = 24;
static const uint32_t k_nsIIDBOpenDBRequest = 25;
static const uint32_t k_nsIDOMDOMStringList = 26;
static const uint32_t k_nsIDOMHTMLCollection = 27;
static const uint32_t k_nsIDOMDocumentFragment = 28;
static const uint32_t k_nsIDOMTouchList = 29;
static const uint32_t k_nsIIDBTransaction = 30;
static const uint32_t k_nsIDOMText = 31;
static const uint32_t k_nsIDOMCanvasPattern = 32;
static const uint32_t k_nsISelection = 33;
static const uint32_t k_nsIDOMClientRect = 34;
static const uint32_t k_nsIDOMHTMLFormElement = 35;
static const uint32_t k_nsIDOMDocument = 36;
static const uint32_t k_nsIDOMClientRectList = 37;
static const uint32_t k_nsIDOMFileHandle = 38;
static const uint32_t k_nsIDOMWindow = 39;
static const uint32_t k_nsIDOMEventTarget = 40;
static const uint32_t k_nsIDOMFileList = 41;


// === interface nsIDOMWindow

static JSBool
nsIDOMWindow_GetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMWindow_SetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetName(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMWindow_GetScriptableParent(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMWindow> result;
    rv = self->GetScriptableParent(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMWindow), &interfaces[k_nsIDOMWindow], vp);
}

static JSBool
nsIDOMWindow_GetScriptableTop(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMWindow> result;
    rv = self->GetScriptableTop(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMWindow), &interfaces[k_nsIDOMWindow], vp);
}

static JSBool
nsIDOMWindow_GetSelf(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMWindow> result;
    rv = self->GetSelf(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMWindow), &interfaces[k_nsIDOMWindow], vp);
}

static JSBool
nsIDOMWindow_GetSelection(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsISelection> result;
    rv = self->GetSelection(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsISelection), &interfaces[k_nsISelection], vp);
}

static JSBool
nsIDOMWindow_ScrollByLines(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    int32_t arg0;
    if (!JS_ValueToECMAInt32(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->ScrollByLines(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMWindow_GetComputedStyle(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMElement *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMElement>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    xpc_qsDOMString arg1(cx, (1 < argc ? argv[1] : JSVAL_NULL), (1 < argc ? &argv[1] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    nsCOMPtr<nsIDOMCSSStyleDeclaration> result;
    rv = self->GetComputedStyle(arg0, arg1, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMCSSStyleDeclaration), &interfaces[k_nsIDOMCSSStyleDeclaration], vp);
}

static JSBool
nsIDOMWindow_GetSessionStorage(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMStorage> result;
    rv = self->GetSessionStorage(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMStorage), &interfaces[k_nsIDOMStorage], vp);
}

static JSBool
nsIDOMWindow_GetLocalStorage(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMStorage> result;
    rv = self->GetLocalStorage(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMStorage), &interfaces[k_nsIDOMStorage], vp);
}

static JSBool
nsIDOMWindow_GetOnmouseenter(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, false))
        return JS_FALSE;
      if (!self) {
        *vp = JSVAL_NULL;
        return JS_TRUE;
    }
    nsresult rv;
    jsval result;
    rv = self->GetOnmouseenter(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMWindow_SetOnmouseenter(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, false))
        return JS_FALSE;
      if (!self) {
        return JS_TRUE;
    }
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnmouseenter(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMWindow_GetOnmouseleave(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, false))
        return JS_FALSE;
      if (!self) {
        *vp = JSVAL_NULL;
        return JS_TRUE;
    }
    nsresult rv;
    jsval result;
    rv = self->GetOnmouseleave(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMWindow_SetOnmouseleave(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMWindow *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, false))
        return JS_FALSE;
      if (!self) {
        return JS_TRUE;
    }
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnmouseleave(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMWindowPerformance

static JSBool
nsIDOMWindowPerformance_GetPerformance(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsPIDOMWindow *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsPerformance* result = self->GetPerformance();

#ifdef DEBUG
    nsresult debug_rv;
    nsCOMPtr<nsIDOMWindowPerformance> debug_self;
    CallQueryInterface(self, getter_AddRefs(debug_self));
    nsCOMPtr<nsISupports> debug_result;
    debug_rv = debug_self->GetPerformance(getter_AddRefs(debug_result));
    NS_ASSERTION(NS_SUCCEEDED(debug_rv) && xpc_qsSameResult(debug_result, result),
                 "Got the wrong answer from the custom method call!");
#endif
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsISupports), &interfaces[k_nsISupports], vp);
}

// === interface nsIDOMJSWindow

static JSBool
nsIDOMJSWindow_Dump(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMJSWindow *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->Dump(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMScreen

static JSBool
nsIDOMScreen_GetTop(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMScreen *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetTop(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMScreen_GetHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMScreen *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetHeight(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMScreen_GetWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMScreen *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetWidth(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMScreen_GetLeft(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMScreen *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetLeft(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

// === interface nsIDOMClientRect

static JSBool
nsIDOMClientRect_GetLeft(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMClientRect *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetLeft(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMClientRect_GetTop(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMClientRect *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetTop(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMClientRect_GetRight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMClientRect *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetRight(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMClientRect_GetBottom(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMClientRect *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetBottom(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMClientRect_GetWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMClientRect *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetWidth(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMClientRect_GetHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMClientRect *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetHeight(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

// === interface nsIDOMPaintRequest

static JSBool
nsIDOMPaintRequest_GetClientRect(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMPaintRequest *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMClientRect> result;
    rv = self->GetClientRect(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMClientRect), &interfaces[k_nsIDOMClientRect], vp);
}

static JSBool
nsIDOMPaintRequest_GetXPCOMReason(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMPaintRequest *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetXPCOMReason(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

// === interface nsIDOMTextMetrics

static JSBool
nsIDOMTextMetrics_GetWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTextMetrics *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetWidth(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

// === interface nsIDOMCanvasGradient

static JSBool
nsIDOMCanvasGradient_AddColorStop(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMCanvasGradient *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    double arg0_dbl;
    if (!JS_ValueToNumber(cx, argv[0], &arg0_dbl))
        return JS_FALSE;
    float arg0 = (float) arg0_dbl;
    xpc_qsDOMString arg1(cx, argv[1], &argv[1],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->AddColorStop(arg0, arg1);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMCanvasPattern

// === interface nsIDOMCharacterData

static JSBool
nsIDOMCharacterData_GetData(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMCharacterData *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetData(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMCharacterData_SetData(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMCharacterData *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetData(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMCharacterData_GetLength(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMCharacterData *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetLength(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

// === interface nsIDOMDocument

static JSBool
nsIDOMDocument_GetOnreadystatechange(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsDocument *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, false))
        return JS_FALSE;
      if (!self) {
        *vp = JSVAL_NULL;
        return JS_TRUE;
    }
    nsresult rv;
    jsval result;
    rv = self->GetOnreadystatechange(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMDocument_SetOnreadystatechange(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsDocument *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, false))
        return JS_FALSE;
      if (!self) {
        return JS_TRUE;
    }
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnreadystatechange(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMDocument_GetOnmouseenter(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsDocument *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, false))
        return JS_FALSE;
      if (!self) {
        *vp = JSVAL_NULL;
        return JS_TRUE;
    }
    nsresult rv;
    jsval result;
    rv = self->GetOnmouseenter(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMDocument_SetOnmouseenter(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsDocument *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, false))
        return JS_FALSE;
      if (!self) {
        return JS_TRUE;
    }
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnmouseenter(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMDocument_GetOnmouseleave(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsDocument *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, false))
        return JS_FALSE;
      if (!self) {
        *vp = JSVAL_NULL;
        return JS_TRUE;
    }
    nsresult rv;
    jsval result;
    rv = self->GetOnmouseleave(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMDocument_SetOnmouseleave(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsDocument *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, false))
        return JS_FALSE;
      if (!self) {
        return JS_TRUE;
    }
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnmouseleave(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMElement

static JSBool
nsIDOMElement_GetOnmouseenter(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    mozilla::dom::Element *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, false))
        return JS_FALSE;
      if (!self) {
        *vp = JSVAL_NULL;
        return JS_TRUE;
    }
    nsresult rv;
    jsval result;
    rv = self->GetOnmouseenter(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMElement_SetOnmouseenter(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    mozilla::dom::Element *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, false))
        return JS_FALSE;
      if (!self) {
        return JS_TRUE;
    }
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnmouseenter(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMElement_GetOnmouseleave(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    mozilla::dom::Element *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, false))
        return JS_FALSE;
      if (!self) {
        *vp = JSVAL_NULL;
        return JS_TRUE;
    }
    nsresult rv;
    jsval result;
    rv = self->GetOnmouseleave(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMElement_SetOnmouseleave(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    mozilla::dom::Element *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, false))
        return JS_FALSE;
      if (!self) {
        return JS_TRUE;
    }
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnmouseleave(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMNamedNodeMap

static JSBool
nsIDOMNamedNodeMap_Item(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMNamedNodeMap *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNode> result;
    rv = self->Item(arg0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNode), &interfaces[k_nsIDOMNode], vp);
}

static JSBool
nsIDOMNamedNodeMap_GetLength(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMNamedNodeMap *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetLength(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

// === interface nsIDOMText

static JSBool
nsIDOMText_SplitText(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMText *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMText> result;
    rv = self->SplitText(arg0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMText), &interfaces[k_nsIDOMText], vp);
}

// === interface nsIDOMDOMStringList

static JSBool
nsIDOMDOMStringList_Item(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMDOMStringList *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->Item(arg0, result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMDOMStringList_GetLength(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMDOMStringList *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetLength(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMDOMStringList_Contains(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMDOMStringList *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->Contains(arg0, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

// === interface nsIDOMXULDocument

static JSBool
nsIDOMXULDocument_GetBoxObjectFor(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMXULDocument *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMElement *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMElement>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    nsCOMPtr<nsIBoxObject> result;
    rv = self->GetBoxObjectFor(arg0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIBoxObject), &interfaces[k_nsIBoxObject], vp);
}

// === interface nsIDOMElementCSSInlineStyle

static JSBool
nsIDOMElementCSSInlineStyle_GetStyle(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsStyledElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    /* XXXbz MathML elements inherit from nsStyledElement but
       don't actually implement GetStyle. */
    if (self->GetNameSpaceID() == kNameSpaceID_MathML)
      return xpc_qsThrow(cx, NS_ERROR_XPC_BAD_CONVERT_JS);
    nsIDOMCSSStyleDeclaration* result = self->GetStyle(&rv);
#ifdef DEBUG
    nsresult debug_rv;
    nsCOMPtr<nsIDOMElementCSSInlineStyle> debug_self;
    CallQueryInterface(self, getter_AddRefs(debug_self));
    nsCOMPtr<nsIDOMCSSStyleDeclaration> debug_result;
    debug_rv = debug_self->GetStyle(getter_AddRefs(debug_result));
    NS_ASSERTION(NS_SUCCEEDED(debug_rv) == NS_SUCCEEDED(rv) && xpc_qsSameResult(debug_result, result),
                 "Got the wrong answer from the custom method call!");
#endif
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMCSSStyleDeclaration), &interfaces[k_nsIDOMCSSStyleDeclaration], vp);
}

// === interface nsIDOMRect

static JSBool
nsIDOMRect_GetTop(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMRect *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMCSSPrimitiveValue> result;
    rv = self->GetTop(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMCSSPrimitiveValue), &interfaces[k_nsIDOMCSSPrimitiveValue], vp);
}

static JSBool
nsIDOMRect_GetRight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMRect *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMCSSPrimitiveValue> result;
    rv = self->GetRight(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMCSSPrimitiveValue), &interfaces[k_nsIDOMCSSPrimitiveValue], vp);
}

static JSBool
nsIDOMRect_GetBottom(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMRect *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMCSSPrimitiveValue> result;
    rv = self->GetBottom(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMCSSPrimitiveValue), &interfaces[k_nsIDOMCSSPrimitiveValue], vp);
}

static JSBool
nsIDOMRect_GetLeft(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMRect *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMCSSPrimitiveValue> result;
    rv = self->GetLeft(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMCSSPrimitiveValue), &interfaces[k_nsIDOMCSSPrimitiveValue], vp);
}

// === interface nsIDOMEventTarget

static JSBool
nsIDOMEventTarget_AddEventListener(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMEventTarget *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsIDOMEventListener *arg1;
    xpc_qsSelfRef arg1ref;
    rv = xpc_qsUnwrapArg<nsIDOMEventListener>(cx, argv[1], &arg1, &arg1ref.ptr, &argv[1]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 1);
        return JS_FALSE;
    }
    JSBool arg2;
    JS_ValueToBoolean(cx, (2 < argc ? argv[2] : JSVAL_NULL), &arg2);
    JSBool arg3;
    JS_ValueToBoolean(cx, (3 < argc ? argv[3] : JSVAL_NULL), &arg3);
    rv = self->AddEventListener(arg0, arg1, arg2, arg3, NS_MIN<uint32_t>(argc, 4) - 2);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMEventTarget_RemoveEventListener(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMEventTarget *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsIDOMEventListener *arg1;
    xpc_qsSelfRef arg1ref;
    rv = xpc_qsUnwrapArg<nsIDOMEventListener>(cx, argv[1], &arg1, &arg1ref.ptr, &argv[1]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 1);
        return JS_FALSE;
    }
    JSBool arg2;
    JS_ValueToBoolean(cx, (2 < argc ? argv[2] : JSVAL_NULL), &arg2);
    rv = self->RemoveEventListener(arg0, arg1, arg2);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMEventTarget_DispatchEvent(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMEventTarget *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMEvent *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMEvent>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    bool result;
    rv = self->DispatchEvent(arg0, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

// === interface nsIDOMEvent

static JSBool
nsIDOMEvent_GetType(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetType(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMEvent_GetTarget(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMEventTarget> result;
    rv = self->GetTarget(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMEventTarget), &interfaces[k_nsIDOMEventTarget], vp);
}

static JSBool
nsIDOMEvent_GetCurrentTarget(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMEventTarget> result;
    rv = self->GetCurrentTarget(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMEventTarget), &interfaces[k_nsIDOMEventTarget], vp);
}

static JSBool
nsIDOMEvent_GetEventPhase(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint16_t result;
    rv = self->GetEventPhase(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL((int32_t) result);
    return JS_TRUE;
}

static JSBool
nsIDOMEvent_GetBubbles(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetBubbles(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMEvent_GetCancelable(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetCancelable(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMEvent_GetTimeStamp(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    DOMTimeStamp result;
    rv = self->GetTimeStamp(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc_qsUint64ToJsval(cx, result, vp);
}

static JSBool
nsIDOMEvent_StopPropagation(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->StopPropagation();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMEvent_PreventDefault(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->PreventDefault();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMEvent_InitEvent(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 3)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    JSBool arg1;
    JS_ValueToBoolean(cx, argv[1], &arg1);
    JSBool arg2;
    JS_ValueToBoolean(cx, argv[2], &arg2);
    nsresult rv;
    rv = self->InitEvent(arg0, arg1, arg2);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMEvent_GetDefaultPrevented(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetDefaultPrevented(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMEvent_StopImmediatePropagation(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->StopImmediatePropagation();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMMouseEvent

static JSBool
nsIDOMMouseEvent_GetScreenX(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetScreenX(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetScreenY(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetScreenY(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetMozMovementX(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetMozMovementX(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetMozMovementY(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetMozMovementY(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetClientX(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetClientX(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetClientY(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetClientY(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetCtrlKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetCtrlKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetShiftKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetShiftKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetAltKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetAltKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetMetaKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetMetaKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetButton(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint16_t result;
    rv = self->GetButton(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL((int32_t) result);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetButtons(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint16_t result;
    rv = self->GetButtons(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL((int32_t) result);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetRelatedTarget(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMEventTarget> result;
    rv = self->GetRelatedTarget(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMEventTarget), &interfaces[k_nsIDOMEventTarget], vp);
}

static JSBool
nsIDOMMouseEvent_InitMouseEvent(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 15)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    JSBool arg1;
    JS_ValueToBoolean(cx, argv[1], &arg1);
    JSBool arg2;
    JS_ValueToBoolean(cx, argv[2], &arg2);
    nsresult rv;
    nsIDOMWindow *arg3;
    xpc_qsSelfRef arg3ref;
    rv = xpc_qsUnwrapArg<nsIDOMWindow>(cx, argv[3], &arg3, &arg3ref.ptr, &argv[3]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 3);
        return JS_FALSE;
    }
    int32_t arg4;
    if (!JS_ValueToECMAInt32(cx, argv[4], &arg4))
        return JS_FALSE;
    int32_t arg5;
    if (!JS_ValueToECMAInt32(cx, argv[5], &arg5))
        return JS_FALSE;
    int32_t arg6;
    if (!JS_ValueToECMAInt32(cx, argv[6], &arg6))
        return JS_FALSE;
    int32_t arg7;
    if (!JS_ValueToECMAInt32(cx, argv[7], &arg7))
        return JS_FALSE;
    int32_t arg8;
    if (!JS_ValueToECMAInt32(cx, argv[8], &arg8))
        return JS_FALSE;
    JSBool arg9;
    JS_ValueToBoolean(cx, argv[9], &arg9);
    JSBool arg10;
    JS_ValueToBoolean(cx, argv[10], &arg10);
    JSBool arg11;
    JS_ValueToBoolean(cx, argv[11], &arg11);
    JSBool arg12;
    JS_ValueToBoolean(cx, argv[12], &arg12);
    uint32_t arg13_u32;
    if (!JS_ValueToECMAUint32(cx, argv[13], &arg13_u32))
        return JS_FALSE;
    uint16_t arg13 = (uint16_t) arg13_u32;
    nsIDOMEventTarget *arg14;
    xpc_qsSelfRef arg14ref;
    rv = xpc_qsUnwrapArg<nsIDOMEventTarget>(cx, argv[14], &arg14, &arg14ref.ptr, &argv[14]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 14);
        return JS_FALSE;
    }
    rv = self->InitMouseEvent(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetMozPressure(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetMozPressure(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetMozInputSource(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint16_t result;
    rv = self->GetMozInputSource(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL((int32_t) result);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_InitNSMouseEvent(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 17)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    JSBool arg1;
    JS_ValueToBoolean(cx, argv[1], &arg1);
    JSBool arg2;
    JS_ValueToBoolean(cx, argv[2], &arg2);
    nsresult rv;
    nsIDOMWindow *arg3;
    xpc_qsSelfRef arg3ref;
    rv = xpc_qsUnwrapArg<nsIDOMWindow>(cx, argv[3], &arg3, &arg3ref.ptr, &argv[3]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 3);
        return JS_FALSE;
    }
    int32_t arg4;
    if (!JS_ValueToECMAInt32(cx, argv[4], &arg4))
        return JS_FALSE;
    int32_t arg5;
    if (!JS_ValueToECMAInt32(cx, argv[5], &arg5))
        return JS_FALSE;
    int32_t arg6;
    if (!JS_ValueToECMAInt32(cx, argv[6], &arg6))
        return JS_FALSE;
    int32_t arg7;
    if (!JS_ValueToECMAInt32(cx, argv[7], &arg7))
        return JS_FALSE;
    int32_t arg8;
    if (!JS_ValueToECMAInt32(cx, argv[8], &arg8))
        return JS_FALSE;
    JSBool arg9;
    JS_ValueToBoolean(cx, argv[9], &arg9);
    JSBool arg10;
    JS_ValueToBoolean(cx, argv[10], &arg10);
    JSBool arg11;
    JS_ValueToBoolean(cx, argv[11], &arg11);
    JSBool arg12;
    JS_ValueToBoolean(cx, argv[12], &arg12);
    uint32_t arg13_u32;
    if (!JS_ValueToECMAUint32(cx, argv[13], &arg13_u32))
        return JS_FALSE;
    uint16_t arg13 = (uint16_t) arg13_u32;
    nsIDOMEventTarget *arg14;
    xpc_qsSelfRef arg14ref;
    rv = xpc_qsUnwrapArg<nsIDOMEventTarget>(cx, argv[14], &arg14, &arg14ref.ptr, &argv[14]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 14);
        return JS_FALSE;
    }
    double arg15_dbl;
    if (!JS_ValueToNumber(cx, argv[15], &arg15_dbl))
        return JS_FALSE;
    float arg15 = (float) arg15_dbl;
    uint32_t arg16_u32;
    if (!JS_ValueToECMAUint32(cx, argv[16], &arg16_u32))
        return JS_FALSE;
    uint16_t arg16 = (uint16_t) arg16_u32;
    rv = self->InitNSMouseEvent(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMMouseEvent_GetModifierState(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMMouseEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetModifierState(arg0, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

// === interface nsIDOMKeyEvent

static JSBool
nsIDOMKeyEvent_GetCharCode(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMKeyEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetCharCode(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMKeyEvent_GetKeyCode(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMKeyEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetKeyCode(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMKeyEvent_GetAltKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMKeyEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetAltKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMKeyEvent_GetCtrlKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMKeyEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetCtrlKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMKeyEvent_GetShiftKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMKeyEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetShiftKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMKeyEvent_GetMetaKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMKeyEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetMetaKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMKeyEvent_InitKeyEvent(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMKeyEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 10)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    JSBool arg1;
    JS_ValueToBoolean(cx, argv[1], &arg1);
    JSBool arg2;
    JS_ValueToBoolean(cx, argv[2], &arg2);
    nsresult rv;
    nsIDOMWindow *arg3;
    xpc_qsSelfRef arg3ref;
    rv = xpc_qsUnwrapArg<nsIDOMWindow>(cx, argv[3], &arg3, &arg3ref.ptr, &argv[3]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 3);
        return JS_FALSE;
    }
    JSBool arg4;
    JS_ValueToBoolean(cx, argv[4], &arg4);
    JSBool arg5;
    JS_ValueToBoolean(cx, argv[5], &arg5);
    JSBool arg6;
    JS_ValueToBoolean(cx, argv[6], &arg6);
    JSBool arg7;
    JS_ValueToBoolean(cx, argv[7], &arg7);
    uint32_t arg8;
    if (!JS_ValueToECMAUint32(cx, argv[8], &arg8))
        return JS_FALSE;
    uint32_t arg9;
    if (!JS_ValueToECMAUint32(cx, argv[9], &arg9))
        return JS_FALSE;
    rv = self->InitKeyEvent(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMKeyEvent_GetModifierState(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMKeyEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetModifierState(arg0, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMKeyEvent_GetLocation(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMKeyEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetLocation(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

// === interface nsIDOMMutationEvent

static JSBool
nsIDOMMutationEvent_GetRelatedNode(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMutationEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNode> result;
    rv = self->GetRelatedNode(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNode), &interfaces[k_nsIDOMNode], vp);
}

static JSBool
nsIDOMMutationEvent_GetPrevValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMutationEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetPrevValue(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMMutationEvent_GetNewValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMutationEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetNewValue(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMMutationEvent_GetAttrName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMutationEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetAttrName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMMutationEvent_GetAttrChange(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMutationEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint16_t result;
    rv = self->GetAttrChange(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL((int32_t) result);
    return JS_TRUE;
}

static JSBool
nsIDOMMutationEvent_InitMutationEvent(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMMutationEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 8)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    JSBool arg1;
    JS_ValueToBoolean(cx, argv[1], &arg1);
    JSBool arg2;
    JS_ValueToBoolean(cx, argv[2], &arg2);
    nsresult rv;
    nsIDOMNode *arg3;
    xpc_qsSelfRef arg3ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[3], &arg3, &arg3ref.ptr, &argv[3]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 3);
        return JS_FALSE;
    }
    xpc_qsDOMString arg4(cx, argv[4], &argv[4],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg4.IsValid())
        return JS_FALSE;
    xpc_qsDOMString arg5(cx, argv[5], &argv[5],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg5.IsValid())
        return JS_FALSE;
    xpc_qsDOMString arg6(cx, argv[6], &argv[6],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg6.IsValid())
        return JS_FALSE;
    uint32_t arg7_u32;
    if (!JS_ValueToECMAUint32(cx, argv[7], &arg7_u32))
        return JS_FALSE;
    uint16_t arg7 = (uint16_t) arg7_u32;
    rv = self->InitMutationEvent(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMDragEvent

static JSBool
nsIDOMDragEvent_GetDataTransfer(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMDragEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDataTransfer> result;
    rv = self->GetDataTransfer(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDataTransfer), &interfaces[k_nsIDOMDataTransfer], vp);
}

static JSBool
nsIDOMDragEvent_InitDragEvent(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMDragEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 16)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    JSBool arg1;
    JS_ValueToBoolean(cx, argv[1], &arg1);
    JSBool arg2;
    JS_ValueToBoolean(cx, argv[2], &arg2);
    nsresult rv;
    nsIDOMWindow *arg3;
    xpc_qsSelfRef arg3ref;
    rv = xpc_qsUnwrapArg<nsIDOMWindow>(cx, argv[3], &arg3, &arg3ref.ptr, &argv[3]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 3);
        return JS_FALSE;
    }
    int32_t arg4;
    if (!JS_ValueToECMAInt32(cx, argv[4], &arg4))
        return JS_FALSE;
    int32_t arg5;
    if (!JS_ValueToECMAInt32(cx, argv[5], &arg5))
        return JS_FALSE;
    int32_t arg6;
    if (!JS_ValueToECMAInt32(cx, argv[6], &arg6))
        return JS_FALSE;
    int32_t arg7;
    if (!JS_ValueToECMAInt32(cx, argv[7], &arg7))
        return JS_FALSE;
    int32_t arg8;
    if (!JS_ValueToECMAInt32(cx, argv[8], &arg8))
        return JS_FALSE;
    JSBool arg9;
    JS_ValueToBoolean(cx, argv[9], &arg9);
    JSBool arg10;
    JS_ValueToBoolean(cx, argv[10], &arg10);
    JSBool arg11;
    JS_ValueToBoolean(cx, argv[11], &arg11);
    JSBool arg12;
    JS_ValueToBoolean(cx, argv[12], &arg12);
    uint32_t arg13_u32;
    if (!JS_ValueToECMAUint32(cx, argv[13], &arg13_u32))
        return JS_FALSE;
    uint16_t arg13 = (uint16_t) arg13_u32;
    nsIDOMEventTarget *arg14;
    xpc_qsSelfRef arg14ref;
    rv = xpc_qsUnwrapArg<nsIDOMEventTarget>(cx, argv[14], &arg14, &arg14ref.ptr, &argv[14]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 14);
        return JS_FALSE;
    }
    nsIDOMDataTransfer *arg15;
    xpc_qsSelfRef arg15ref;
    rv = xpc_qsUnwrapArg<nsIDOMDataTransfer>(cx, argv[15], &arg15, &arg15ref.ptr, &argv[15]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 15);
        return JS_FALSE;
    }
    rv = self->InitDragEvent(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMScrollAreaEvent

static JSBool
nsIDOMScrollAreaEvent_GetX(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMScrollAreaEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetX(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMScrollAreaEvent_GetY(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMScrollAreaEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetY(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMScrollAreaEvent_GetWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMScrollAreaEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetWidth(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMScrollAreaEvent_GetHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMScrollAreaEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetHeight(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMScrollAreaEvent_InitScrollAreaEvent(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMScrollAreaEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 9)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    JSBool arg1;
    JS_ValueToBoolean(cx, argv[1], &arg1);
    JSBool arg2;
    JS_ValueToBoolean(cx, argv[2], &arg2);
    nsresult rv;
    nsIDOMWindow *arg3;
    xpc_qsSelfRef arg3ref;
    rv = xpc_qsUnwrapArg<nsIDOMWindow>(cx, argv[3], &arg3, &arg3ref.ptr, &argv[3]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 3);
        return JS_FALSE;
    }
    int32_t arg4;
    if (!JS_ValueToECMAInt32(cx, argv[4], &arg4))
        return JS_FALSE;
    double arg5_dbl;
    if (!JS_ValueToNumber(cx, argv[5], &arg5_dbl))
        return JS_FALSE;
    float arg5 = (float) arg5_dbl;
    double arg6_dbl;
    if (!JS_ValueToNumber(cx, argv[6], &arg6_dbl))
        return JS_FALSE;
    float arg6 = (float) arg6_dbl;
    double arg7_dbl;
    if (!JS_ValueToNumber(cx, argv[7], &arg7_dbl))
        return JS_FALSE;
    float arg7 = (float) arg7_dbl;
    double arg8_dbl;
    if (!JS_ValueToNumber(cx, argv[8], &arg8_dbl))
        return JS_FALSE;
    float arg8 = (float) arg8_dbl;
    rv = self->InitScrollAreaEvent(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMNotifyPaintEvent

static JSBool
nsIDOMNotifyPaintEvent_GetClientRects(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMNotifyPaintEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMClientRectList> result;
    rv = self->GetClientRects(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMClientRectList), &interfaces[k_nsIDOMClientRectList], vp);
}

static JSBool
nsIDOMNotifyPaintEvent_GetBoundingClientRect(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMNotifyPaintEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMClientRect> result;
    rv = self->GetBoundingClientRect(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMClientRect), &interfaces[k_nsIDOMClientRect], vp);
}

static JSBool
nsIDOMNotifyPaintEvent_GetPaintRequests(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMNotifyPaintEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMPaintRequestList> result;
    rv = self->GetPaintRequests(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMPaintRequestList), &interfaces[k_nsIDOMPaintRequestList], vp);
}

// === interface nsIDOMMessageEvent

static JSBool
nsIDOMMessageEvent_GetData(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMessageEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetData(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMMessageEvent_GetOrigin(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMessageEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetOrigin(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMMessageEvent_GetLastEventId(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMessageEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetLastEventId(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMMessageEvent_GetSource(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMessageEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMWindow> result;
    rv = self->GetSource(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMWindow), &interfaces[k_nsIDOMWindow], vp);
}

static JSBool
nsIDOMMessageEvent_InitMessageEvent(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMMessageEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 7)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    JSBool arg1;
    JS_ValueToBoolean(cx, argv[1], &arg1);
    JSBool arg2;
    JS_ValueToBoolean(cx, argv[2], &arg2);
    jsval arg3 = argv[3];
    xpc_qsDOMString arg4(cx, argv[4], &argv[4],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg4.IsValid())
        return JS_FALSE;
    xpc_qsDOMString arg5(cx, argv[5], &argv[5],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg5.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsIDOMWindow *arg6;
    xpc_qsSelfRef arg6ref;
    rv = xpc_qsUnwrapArg<nsIDOMWindow>(cx, argv[6], &arg6, &arg6ref.ptr, &argv[6]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 6);
        return JS_FALSE;
    }
    rv = self->InitMessageEvent(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMMouseScrollEvent

static JSBool
nsIDOMMouseScrollEvent_GetAxis(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMMouseScrollEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetAxis(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMMouseScrollEvent_InitMouseScrollEvent(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMMouseScrollEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 16)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    JSBool arg1;
    JS_ValueToBoolean(cx, argv[1], &arg1);
    JSBool arg2;
    JS_ValueToBoolean(cx, argv[2], &arg2);
    nsresult rv;
    nsIDOMWindow *arg3;
    xpc_qsSelfRef arg3ref;
    rv = xpc_qsUnwrapArg<nsIDOMWindow>(cx, argv[3], &arg3, &arg3ref.ptr, &argv[3]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 3);
        return JS_FALSE;
    }
    int32_t arg4;
    if (!JS_ValueToECMAInt32(cx, argv[4], &arg4))
        return JS_FALSE;
    int32_t arg5;
    if (!JS_ValueToECMAInt32(cx, argv[5], &arg5))
        return JS_FALSE;
    int32_t arg6;
    if (!JS_ValueToECMAInt32(cx, argv[6], &arg6))
        return JS_FALSE;
    int32_t arg7;
    if (!JS_ValueToECMAInt32(cx, argv[7], &arg7))
        return JS_FALSE;
    int32_t arg8;
    if (!JS_ValueToECMAInt32(cx, argv[8], &arg8))
        return JS_FALSE;
    JSBool arg9;
    JS_ValueToBoolean(cx, argv[9], &arg9);
    JSBool arg10;
    JS_ValueToBoolean(cx, argv[10], &arg10);
    JSBool arg11;
    JS_ValueToBoolean(cx, argv[11], &arg11);
    JSBool arg12;
    JS_ValueToBoolean(cx, argv[12], &arg12);
    uint32_t arg13_u32;
    if (!JS_ValueToECMAUint32(cx, argv[13], &arg13_u32))
        return JS_FALSE;
    uint16_t arg13 = (uint16_t) arg13_u32;
    nsIDOMEventTarget *arg14;
    xpc_qsSelfRef arg14ref;
    rv = xpc_qsUnwrapArg<nsIDOMEventTarget>(cx, argv[14], &arg14, &arg14ref.ptr, &argv[14]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 14);
        return JS_FALSE;
    }
    int32_t arg15;
    if (!JS_ValueToECMAInt32(cx, argv[15], &arg15))
        return JS_FALSE;
    rv = self->InitMouseScrollEvent(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMProgressEvent

static JSBool
nsIDOMProgressEvent_GetLengthComputable(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMProgressEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetLengthComputable(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMProgressEvent_GetLoaded(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMProgressEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint64_t result;
    rv = self->GetLoaded(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc_qsUint64ToJsval(cx, result, vp);
}

static JSBool
nsIDOMProgressEvent_GetTotal(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMProgressEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint64_t result;
    rv = self->GetTotal(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc_qsUint64ToJsval(cx, result, vp);
}

// === interface nsIDOMUIEvent

static JSBool
nsIDOMUIEvent_GetWhich(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMUIEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetWhich(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMUIEvent_GetRangeParent(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMUIEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNode> result;
    rv = self->GetRangeParent(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNode), &interfaces[k_nsIDOMNode], vp);
}

static JSBool
nsIDOMUIEvent_GetRangeOffset(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMUIEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetRangeOffset(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMUIEvent_GetPageX(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMUIEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetPageX(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMUIEvent_GetPageY(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMUIEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetPageY(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMUIEvent_GetIsChar(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMUIEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetIsChar(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

// === interface nsIDOMTouch

static JSBool
nsIDOMTouch_GetIdentifier(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetIdentifier(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMTouch_GetTarget(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMEventTarget> result;
    rv = self->GetTarget(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMEventTarget), &interfaces[k_nsIDOMEventTarget], vp);
}

static JSBool
nsIDOMTouch_GetPageX(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetPageX(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMTouch_GetPageY(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetPageY(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMTouch_GetScreenX(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetScreenX(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMTouch_GetScreenY(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetScreenY(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMTouch_GetClientX(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetClientX(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMTouch_GetClientY(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetClientY(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMTouch_GetRadiusX(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetRadiusX(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMTouch_GetRadiusY(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetRadiusY(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMTouch_GetRotationAngle(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetRotationAngle(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMTouch_GetForce(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouch *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetForce(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

// === interface nsIDOMTouchList

static JSBool
nsIDOMTouchList_GetLength(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouchList *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetLength(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMTouchList_Item(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMTouchList *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMTouch> result;
    rv = self->Item(arg0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMTouch), &interfaces[k_nsIDOMTouch], vp);
}

static JSBool
nsIDOMTouchList_IdentifiedTouch(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMTouchList *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    int32_t arg0;
    if (!JS_ValueToECMAInt32(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMTouch> result;
    rv = self->IdentifiedTouch(arg0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMTouch), &interfaces[k_nsIDOMTouch], vp);
}

// === interface nsIDOMTouchEvent

static JSBool
nsIDOMTouchEvent_GetTouches(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouchEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMTouchList> result;
    rv = self->GetTouches(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMTouchList), &interfaces[k_nsIDOMTouchList], vp);
}

static JSBool
nsIDOMTouchEvent_GetTargetTouches(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouchEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMTouchList> result;
    rv = self->GetTargetTouches(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMTouchList), &interfaces[k_nsIDOMTouchList], vp);
}

static JSBool
nsIDOMTouchEvent_GetChangedTouches(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouchEvent *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMTouchList> result;
    rv = self->GetChangedTouches(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMTouchList), &interfaces[k_nsIDOMTouchList], vp);
}

static JSBool
nsIDOMTouchEvent_GetAltKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouchEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetAltKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMTouchEvent_GetMetaKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouchEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetMetaKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMTouchEvent_GetCtrlKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouchEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetCtrlKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMTouchEvent_GetShiftKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMTouchEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetShiftKey(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMTouchEvent_InitTouchEvent(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMTouchEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 12)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    JSBool arg1;
    JS_ValueToBoolean(cx, argv[1], &arg1);
    JSBool arg2;
    JS_ValueToBoolean(cx, argv[2], &arg2);
    nsresult rv;
    nsIDOMWindow *arg3;
    xpc_qsSelfRef arg3ref;
    rv = xpc_qsUnwrapArg<nsIDOMWindow>(cx, argv[3], &arg3, &arg3ref.ptr, &argv[3]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 3);
        return JS_FALSE;
    }
    int32_t arg4;
    if (!JS_ValueToECMAInt32(cx, argv[4], &arg4))
        return JS_FALSE;
    JSBool arg5;
    JS_ValueToBoolean(cx, argv[5], &arg5);
    JSBool arg6;
    JS_ValueToBoolean(cx, argv[6], &arg6);
    JSBool arg7;
    JS_ValueToBoolean(cx, argv[7], &arg7);
    JSBool arg8;
    JS_ValueToBoolean(cx, argv[8], &arg8);
    nsIDOMTouchList *arg9;
    xpc_qsSelfRef arg9ref;
    rv = xpc_qsUnwrapArg<nsIDOMTouchList>(cx, argv[9], &arg9, &arg9ref.ptr, &argv[9]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 9);
        return JS_FALSE;
    }
    nsIDOMTouchList *arg10;
    xpc_qsSelfRef arg10ref;
    rv = xpc_qsUnwrapArg<nsIDOMTouchList>(cx, argv[10], &arg10, &arg10ref.ptr, &argv[10]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 10);
        return JS_FALSE;
    }
    nsIDOMTouchList *arg11;
    xpc_qsSelfRef arg11ref;
    rv = xpc_qsUnwrapArg<nsIDOMTouchList>(cx, argv[11], &arg11, &arg11ref.ptr, &argv[11]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 11);
        return JS_FALSE;
    }
    rv = self->InitTouchEvent(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMHTMLBaseElement

static JSBool
nsIDOMHTMLBaseElement_GetHref(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLBaseElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetHref(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLBaseElement_SetHref(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLBaseElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetHref(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLBaseElement_GetTarget(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLBaseElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetTarget(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLBaseElement_SetTarget(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLBaseElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetTarget(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLButtonElement

static JSBool
nsIDOMHTMLButtonElement_GetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLButtonElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLButtonElement_SetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLButtonElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetName(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLButtonElement_GetForm(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLButtonElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMHTMLFormElement> result;
    rv = self->GetForm(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMHTMLFormElement), &interfaces[k_nsIDOMHTMLFormElement], vp);
}

static JSBool
nsIDOMHTMLButtonElement_GetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLButtonElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetValue(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLButtonElement_SetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLButtonElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetValue(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLButtonElement_GetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLButtonElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetDisabled(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLButtonElement_SetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLButtonElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetDisabled(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLCommandElement

static JSBool
nsIDOMHTMLCommandElement_GetType(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetType(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLCommandElement_SetType(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetType(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCommandElement_GetLabel(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetLabel(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLCommandElement_SetLabel(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetLabel(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCommandElement_GetIcon(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetIcon(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLCommandElement_SetIcon(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetIcon(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCommandElement_GetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetDisabled(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCommandElement_SetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetDisabled(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCommandElement_GetDefaultChecked(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetDefaultChecked(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCommandElement_SetDefaultChecked(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetDefaultChecked(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCommandElement_GetChecked(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetChecked(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCommandElement_SetChecked(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetChecked(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCommandElement_GetRadiogroup(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetRadiogroup(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLCommandElement_SetRadiogroup(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCommandElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetRadiogroup(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLFormElement

static JSBool
nsIDOMHTMLFormElement_GetElements(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFormElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMHTMLCollection> result;
    rv = self->GetElements(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMHTMLCollection), &interfaces[k_nsIDOMHTMLCollection], vp);
}

static JSBool
nsIDOMHTMLFormElement_GetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFormElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLFormElement_SetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFormElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetName(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLFormElement_Submit(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMHTMLFormElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->Submit();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLFormElement_GetLength(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFormElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetLength(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLFormElement_GetTarget(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFormElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetTarget(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLFormElement_SetTarget(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFormElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetTarget(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLFormElement_GetAction(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFormElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetAction(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLFormElement_SetAction(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFormElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetAction(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLFrameElement

static JSBool
nsIDOMHTMLFrameElement_GetSrc(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFrameElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetSrc(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLFrameElement_SetSrc(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFrameElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSrc(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLFrameElement_GetContentDocument(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFrameElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDocument> result;
    rv = self->GetContentDocument(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDocument), &interfaces[k_nsIDOMDocument], vp);
}

static JSBool
nsIDOMHTMLFrameElement_GetContentWindow(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFrameElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMWindow> result;
    rv = self->GetContentWindow(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMWindow), &interfaces[k_nsIDOMWindow], vp);
}

static JSBool
nsIDOMHTMLFrameElement_GetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFrameElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLFrameElement_SetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLFrameElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetName(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLIFrameElement

static JSBool
nsIDOMHTMLIFrameElement_GetSrc(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLIFrameElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetSrc(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLIFrameElement_SetSrc(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLIFrameElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSrc(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLIFrameElement_GetContentDocument(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLIFrameElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDocument> result;
    rv = self->GetContentDocument(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDocument), &interfaces[k_nsIDOMDocument], vp);
}

static JSBool
nsIDOMHTMLIFrameElement_GetContentWindow(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLIFrameElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMWindow> result;
    rv = self->GetContentWindow(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMWindow), &interfaces[k_nsIDOMWindow], vp);
}

// === interface nsIDOMHTMLInputElement

static JSBool
nsIDOMHTMLInputElement_GetDefaultChecked(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetDefaultChecked(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_SetDefaultChecked(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetDefaultChecked(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_GetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetDisabled(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_SetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetDisabled(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_Select(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->Select();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_GetChecked(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetChecked(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_SetChecked(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetChecked(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_GetType(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetType(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLInputElement_SetType(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetType(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_GetForm(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMHTMLFormElement> result;
    rv = self->GetForm(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMHTMLFormElement), &interfaces[k_nsIDOMHTMLFormElement], vp);
}

static JSBool
nsIDOMHTMLInputElement_GetSrc(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetSrc(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLInputElement_SetSrc(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSrc(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_GetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLInputElement_SetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetName(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_GetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetValue(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLInputElement_SetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetValue(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_GetFiles(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMFileList> result;
    rv = self->GetFiles(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMFileList), &interfaces[k_nsIDOMFileList], vp);
}

static JSBool
nsIDOMHTMLInputElement_GetTextLength(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetTextLength(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_GetSelectionStart(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetSelectionStart(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_SetSelectionStart(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    int32_t arg0;
    if (!JS_ValueToECMAInt32(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSelectionStart(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_GetSelectionEnd(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetSelectionEnd(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_SetSelectionEnd(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    int32_t arg0;
    if (!JS_ValueToECMAInt32(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSelectionEnd(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_GetSelectionDirection(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetSelectionDirection(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLInputElement_SetSelectionDirection(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSelectionDirection(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLInputElement_SetSelectionRange(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMHTMLInputElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    int32_t arg0;
    if (!JS_ValueToECMAInt32(cx, argv[0], &arg0))
        return JS_FALSE;
    int32_t arg1;
    if (!JS_ValueToECMAInt32(cx, argv[1], &arg1))
        return JS_FALSE;
    xpc_qsDOMString arg2(cx, (2 < argc ? argv[2] : JSVAL_NULL), (2 < argc ? &argv[2] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg2.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSelectionRange(arg0, arg1, arg2);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMHTMLLinkElement

static JSBool
nsIDOMHTMLLinkElement_GetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLLinkElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetDisabled(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLLinkElement_SetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLLinkElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetDisabled(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLMeterElement

static JSBool
nsIDOMHTMLMeterElement_GetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    double result;
    rv = self->GetValue(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp =  JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMeterElement_SetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    double arg0;
    if (!JS_ValueToNumber(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetValue(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMeterElement_GetMin(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    double result;
    rv = self->GetMin(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp =  JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMeterElement_SetMin(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    double arg0;
    if (!JS_ValueToNumber(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetMin(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMeterElement_GetMax(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    double result;
    rv = self->GetMax(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp =  JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMeterElement_SetMax(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    double arg0;
    if (!JS_ValueToNumber(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetMax(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMeterElement_GetLow(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    double result;
    rv = self->GetLow(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp =  JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMeterElement_SetLow(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    double arg0;
    if (!JS_ValueToNumber(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetLow(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMeterElement_GetHigh(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    double result;
    rv = self->GetHigh(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp =  JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMeterElement_SetHigh(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    double arg0;
    if (!JS_ValueToNumber(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetHigh(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMeterElement_GetOptimum(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    double result;
    rv = self->GetOptimum(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp =  JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMeterElement_SetOptimum(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMeterElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    double arg0;
    if (!JS_ValueToNumber(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetOptimum(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLMenuElement

static JSBool
nsIDOMHTMLMenuElement_GetCompact(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMenuElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetCompact(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMenuElement_SetCompact(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMenuElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetCompact(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMenuElement_GetType(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMenuElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetType(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLMenuElement_SetType(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMenuElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetType(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLMenuElement_GetLabel(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMenuElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetLabel(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLMenuElement_SetLabel(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLMenuElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetLabel(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLMenuItemElement

// === interface nsIDOMHTMLOptionElement

static JSBool
nsIDOMHTMLOptionElement_GetIndex(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetIndex(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLOptionElement_GetSelected(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetSelected(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLOptionElement_SetSelected(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetSelected(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLOptionElement_GetForm(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMHTMLFormElement> result;
    rv = self->GetForm(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMHTMLFormElement), &interfaces[k_nsIDOMHTMLFormElement], vp);
}

static JSBool
nsIDOMHTMLOptionElement_GetText(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetText(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLOptionElement_SetText(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetText(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLOptionElement_GetDefaultSelected(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetDefaultSelected(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLOptionElement_SetDefaultSelected(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetDefaultSelected(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLOptionElement_GetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetValue(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLOptionElement_SetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetValue(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLOptionElement_GetLabel(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetLabel(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLOptionElement_SetLabel(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetLabel(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLOptionElement_GetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetDisabled(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLOptionElement_SetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLOptionElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetDisabled(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLProgressElement

static JSBool
nsIDOMHTMLProgressElement_GetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLProgressElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    double result;
    rv = self->GetValue(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp =  JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLProgressElement_SetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLProgressElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    double arg0;
    if (!JS_ValueToNumber(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetValue(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLProgressElement_GetMax(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLProgressElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    double result;
    rv = self->GetMax(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp =  JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLProgressElement_SetMax(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLProgressElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    double arg0;
    if (!JS_ValueToNumber(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetMax(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLProgressElement_GetPosition(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLProgressElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    double result;
    rv = self->GetPosition(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp =  JS_NumberValue(result);
    return JS_TRUE;
}

// === interface nsIDOMHTMLSelectElement

static JSBool
nsIDOMHTMLSelectElement_GetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLSelectElement_SetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetName(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLSelectElement_GetForm(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMHTMLFormElement> result;
    rv = self->GetForm(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMHTMLFormElement), &interfaces[k_nsIDOMHTMLFormElement], vp);
}

static JSBool
nsIDOMHTMLSelectElement_Add(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMHTMLElement *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMHTMLElement>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    nsCOMPtr<nsIVariant> arg1(already_AddRefed<nsIVariant>(XPCVariant::newVariant(cx, (1 < argc ? argv[1] : JSVAL_NULL))));
    if (!arg1) {
        xpc_qsThrowBadArg(cx, NS_ERROR_INVALID_ARG, vp, 1);
        return JS_FALSE;
    }    rv = self->Add(arg0, arg1);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLSelectElement_GetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetValue(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLSelectElement_SetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetValue(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLSelectElement_GetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetDisabled(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLSelectElement_SetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetDisabled(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLSelectElement_GetLength(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetLength(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLSelectElement_SetLength(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetLength(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLSelectElement_Remove(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    int32_t arg0;
    if (!JS_ValueToECMAInt32(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->Remove(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLSelectElement_GetSelectedIndex(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetSelectedIndex(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLSelectElement_SetSelectedIndex(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    int32_t arg0;
    if (!JS_ValueToECMAInt32(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSelectedIndex(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLSelectElement_Item(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNode> result;
    rv = self->Item(arg0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNode), &interfaces[k_nsIDOMNode], vp);
}

static JSBool
nsIDOMHTMLSelectElement_GetType(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetType(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLSelectElement_GetOptions(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMHTMLOptionsCollection> result;
    rv = self->GetOptions(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMHTMLOptionsCollection), &interfaces[k_nsIDOMHTMLOptionsCollection], vp);
}

static JSBool
nsIDOMHTMLSelectElement_GetSize(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetSize(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLSelectElement_SetSize(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLSelectElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSize(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLStyleElement

static JSBool
nsIDOMHTMLStyleElement_GetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLStyleElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetDisabled(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLStyleElement_SetDisabled(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLStyleElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetDisabled(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLTextAreaElement

static JSBool
nsIDOMHTMLTextAreaElement_GetRows(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetRows(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_SetRows(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetRows(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_GetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLTextAreaElement_SetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetName(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_GetForm(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMHTMLFormElement> result;
    rv = self->GetForm(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMHTMLFormElement), &interfaces[k_nsIDOMHTMLFormElement], vp);
}

static JSBool
nsIDOMHTMLTextAreaElement_GetDefaultValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetDefaultValue(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLTextAreaElement_SetDefaultValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetDefaultValue(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_GetCols(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetCols(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_SetCols(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetCols(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_GetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetValue(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLTextAreaElement_SetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetValue(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_GetType(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetType(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLTextAreaElement_Select(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->Select();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_SetSelectionRange(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    int32_t arg0;
    if (!JS_ValueToECMAInt32(cx, argv[0], &arg0))
        return JS_FALSE;
    int32_t arg1;
    if (!JS_ValueToECMAInt32(cx, argv[1], &arg1))
        return JS_FALSE;
    xpc_qsDOMString arg2(cx, (2 < argc ? argv[2] : JSVAL_NULL), (2 < argc ? &argv[2] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg2.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSelectionRange(arg0, arg1, arg2);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_GetSelectionStart(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetSelectionStart(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_SetSelectionStart(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    int32_t arg0;
    if (!JS_ValueToECMAInt32(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSelectionStart(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_GetSelectionEnd(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetSelectionEnd(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_SetSelectionEnd(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    int32_t arg0;
    if (!JS_ValueToECMAInt32(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSelectionEnd(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_GetSelectionDirection(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetSelectionDirection(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLTextAreaElement_SetSelectionDirection(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetSelectionDirection(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_GetTextLength(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetTextLength(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLTextAreaElement_GetWrap(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetWrap(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLTextAreaElement_SetWrap(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTextAreaElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetWrap(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLTitleElement

static JSBool
nsIDOMHTMLTitleElement_GetText(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTitleElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetText(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMHTMLTitleElement_SetText(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLTitleElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetText(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMHTMLCanvasElement

static JSBool
nsIDOMHTMLCanvasElement_GetWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCanvasElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetWidth(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCanvasElement_SetWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCanvasElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetWidth(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCanvasElement_GetHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCanvasElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetHeight(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCanvasElement_SetHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMHTMLCanvasElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, *vp, &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->SetHeight(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMHTMLCanvasElement_GetContext(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMHTMLCanvasElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    jsval arg1 = (1 < argc ? argv[1] : JSVAL_VOID);
    nsresult rv;
    nsCOMPtr<nsISupports> result;
    rv = self->GetContext(arg0, arg1, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsISupports), &interfaces[k_nsISupports], vp);
}

static JSBool
nsIDOMHTMLCanvasElement_ToDataURL(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMHTMLCanvasElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, (0 < argc ? argv[0] : JSVAL_NULL), (0 < argc ? &argv[0] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsCOMPtr<nsIVariant> arg1(already_AddRefed<nsIVariant>(XPCVariant::newVariant(cx, (1 < argc ? argv[1] : JSVAL_NULL))));
    if (!arg1) {
        xpc_qsThrowBadArg(cx, NS_ERROR_INVALID_ARG, vp, 1);
        return JS_FALSE;
    }    nsresult rv;
    nsString result;
    rv = self->ToDataURL(arg0, arg1, NS_MIN<uint32_t>(argc, 2) - 0, result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    return xpc::StringToJsval(cx, result, vp);
}

// === interface nsIDOMRange

static JSBool
nsIDOMRange_GetStartContainer(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNode> result;
    rv = self->GetStartContainer(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNode), &interfaces[k_nsIDOMNode], vp);
}

static JSBool
nsIDOMRange_GetStartOffset(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetStartOffset(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMRange_GetEndContainer(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNode> result;
    rv = self->GetEndContainer(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNode), &interfaces[k_nsIDOMNode], vp);
}

static JSBool
nsIDOMRange_GetEndOffset(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetEndOffset(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMRange_GetCollapsed(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetCollapsed(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMRange_GetCommonAncestorContainer(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNode> result;
    rv = self->GetCommonAncestorContainer(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNode), &interfaces[k_nsIDOMNode], vp);
}

static JSBool
nsIDOMRange_SetStart(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    int32_t arg1;
    if (!JS_ValueToECMAInt32(cx, argv[1], &arg1))
        return JS_FALSE;
    rv = self->SetStart(arg0, arg1);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_SetEnd(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    int32_t arg1;
    if (!JS_ValueToECMAInt32(cx, argv[1], &arg1))
        return JS_FALSE;
    rv = self->SetEnd(arg0, arg1);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_SetStartBefore(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    rv = self->SetStartBefore(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_SetStartAfter(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    rv = self->SetStartAfter(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_SetEndBefore(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    rv = self->SetEndBefore(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_SetEndAfter(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    rv = self->SetEndAfter(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_Collapse(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    JSBool arg0;
    JS_ValueToBoolean(cx, argv[0], &arg0);
    nsresult rv;
    rv = self->Collapse(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_SelectNode(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    rv = self->SelectNode(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_SelectNodeContents(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    rv = self->SelectNodeContents(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_CompareBoundaryPoints(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    uint32_t arg0_u32;
    if (!JS_ValueToECMAUint32(cx, argv[0], &arg0_u32))
        return JS_FALSE;
    uint16_t arg0 = (uint16_t) arg0_u32;
    nsresult rv;
    nsIDOMRange *arg1;
    xpc_qsSelfRef arg1ref;
    rv = xpc_qsUnwrapArg<nsIDOMRange>(cx, argv[1], &arg1, &arg1ref.ptr, &argv[1]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 1);
        return JS_FALSE;
    }
    int16_t result;
    rv = self->CompareBoundaryPoints(arg0, arg1, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = INT_TO_JSVAL((int32_t) result);
    return JS_TRUE;
}

static JSBool
nsIDOMRange_DeleteContents(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->DeleteContents();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_ExtractContents(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDocumentFragment> result;
    rv = self->ExtractContents(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDocumentFragment), &interfaces[k_nsIDOMDocumentFragment], vp);
}

static JSBool
nsIDOMRange_CloneContents(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDocumentFragment> result;
    rv = self->CloneContents(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDocumentFragment), &interfaces[k_nsIDOMDocumentFragment], vp);
}

static JSBool
nsIDOMRange_InsertNode(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    rv = self->InsertNode(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_SurroundContents(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    rv = self->SurroundContents(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_CloneRange(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMRange> result;
    rv = self->CloneRange(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMRange), &interfaces[k_nsIDOMRange], vp);
}

static JSBool
nsIDOMRange_ToString(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->ToString(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMRange_Detach(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->Detach();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMRange_CreateContextualFragment(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDocumentFragment> result;
    rv = self->CreateContextualFragment(arg0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDocumentFragment), &interfaces[k_nsIDOMDocumentFragment], vp);
}

static JSBool
nsIDOMRange_IsPointInRange(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    int32_t arg1;
    if (!JS_ValueToECMAInt32(cx, argv[1], &arg1))
        return JS_FALSE;
    bool result;
    rv = self->IsPointInRange(arg0, arg1, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMRange_ComparePoint(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    int32_t arg1;
    if (!JS_ValueToECMAInt32(cx, argv[1], &arg1))
        return JS_FALSE;
    int16_t result;
    rv = self->ComparePoint(arg0, arg1, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = INT_TO_JSVAL((int32_t) result);
    return JS_TRUE;
}

static JSBool
nsIDOMRange_IntersectsNode(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    bool result;
    rv = self->IntersectsNode(arg0, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMRange_GetClientRects(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMClientRectList> result;
    rv = self->GetClientRects(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMClientRectList), &interfaces[k_nsIDOMClientRectList], vp);
}

static JSBool
nsIDOMRange_GetBoundingClientRect(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMRange *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMClientRect> result;
    rv = self->GetBoundingClientRect(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMClientRect), &interfaces[k_nsIDOMClientRect], vp);
}

// === interface nsIDOMToString

static JSBool
nsIDOMToString_ToString(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMToString *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->ToString(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    return xpc::StringToJsval(cx, result, vp);
}

// === interface nsIDOMStorage

static JSBool
nsIDOMStorage_SetItem(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMStorage *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    xpc_qsDOMString arg1(cx, argv[1], &argv[1],
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetItem(arg0, arg1);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMStorage_GetLength(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMStorage *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetLength(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMStorage_GetItem(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMStorage *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetItem(arg0, result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMStorage_Key(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMStorage *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->Key(arg0, result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMStorage_RemoveItem(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMStorage *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->RemoveItem(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMStorage_Clear(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMStorage *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;

    rv = self->Clear();
    if (NS_SUCCEEDED(rv))
        JS_ClearNonGlobalObject(cx, obj);

    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMStorageItem

static JSBool
nsIDOMStorageItem_GetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMStorageItem *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetValue(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMStorageItem_SetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMStorageItem *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetValue(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMNodeIterator

static JSBool
nsIDOMNodeIterator_NextNode(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMNodeIterator *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNode> result;
    rv = self->NextNode(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNode), &interfaces[k_nsIDOMNode], vp);
}

// === interface nsIDOMXPathExpression

static JSBool
nsIDOMXPathExpression_Evaluate(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMXPathExpression *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 3)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    uint32_t arg1_u32;
    if (!JS_ValueToECMAUint32(cx, argv[1], &arg1_u32))
        return JS_FALSE;
    uint16_t arg1 = (uint16_t) arg1_u32;
    nsISupports *arg2;
    xpc_qsSelfRef arg2ref;
    rv = xpc_qsUnwrapArg<nsISupports>(cx, argv[2], &arg2, &arg2ref.ptr, &argv[2]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 2);
        return JS_FALSE;
    }
    nsCOMPtr<nsISupports> result;
    rv = self->Evaluate(arg0, arg1, arg2, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsISupports), &interfaces[k_nsISupports], vp);
}

// === interface nsIDOMXPathNSResolver

static JSBool
nsIDOMXPathNSResolver_LookupNamespaceURI(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMXPathNSResolver *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->LookupNamespaceURI(arg0, result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    return xpc::StringToJsval(cx, result, vp);
}

// === interface nsIDOMXPathResult

static JSBool
nsIDOMXPathResult_SnapshotItem(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMXPathResult *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    uint32_t arg0;
    if (!JS_ValueToECMAUint32(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNode> result;
    rv = self->SnapshotItem(arg0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNode), &interfaces[k_nsIDOMNode], vp);
}

static JSBool
nsIDOMXPathResult_IterateNext(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMXPathResult *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNode> result;
    rv = self->IterateNext(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNode), &interfaces[k_nsIDOMNode], vp);
}

static JSBool
nsIDOMXPathResult_GetSnapshotLength(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXPathResult *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint32_t result;
    rv = self->GetSnapshotLength(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIDOMXPathResult_GetResultType(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXPathResult *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint16_t result;
    rv = self->GetResultType(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL((int32_t) result);
    return JS_TRUE;
}

static JSBool
nsIDOMXPathResult_GetNumberValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXPathResult *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    double result;
    rv = self->GetNumberValue(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp =  JS_NumberValue(result);
    return JS_TRUE;
}

static JSBool
nsIDOMXPathResult_GetStringValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXPathResult *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetStringValue(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXPathResult_GetBooleanValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXPathResult *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetBooleanValue(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMXPathResult_GetSingleNodeValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXPathResult *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNode> result;
    rv = self->GetSingleNodeValue(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNode), &interfaces[k_nsIDOMNode], vp);
}

// === interface nsIDOMNSXPathExpression

static JSBool
nsIDOMNSXPathExpression_EvaluateWithContext(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMNSXPathExpression *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 5)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMNode *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMNode>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    uint32_t arg1;
    if (!JS_ValueToECMAUint32(cx, argv[1], &arg1))
        return JS_FALSE;
    uint32_t arg2;
    if (!JS_ValueToECMAUint32(cx, argv[2], &arg2))
        return JS_FALSE;
    uint32_t arg3_u32;
    if (!JS_ValueToECMAUint32(cx, argv[3], &arg3_u32))
        return JS_FALSE;
    uint16_t arg3 = (uint16_t) arg3_u32;
    nsISupports *arg4;
    xpc_qsSelfRef arg4ref;
    rv = xpc_qsUnwrapArg<nsISupports>(cx, argv[4], &arg4, &arg4ref.ptr, &argv[4]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 4);
        return JS_FALSE;
    }
    nsCOMPtr<nsISupports> result;
    rv = self->EvaluateWithContext(arg0, arg1, arg2, arg3, arg4, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsISupports), &interfaces[k_nsISupports], vp);
}

// === interface nsIDOMXULElement

static JSBool
nsIDOMXULElement_GetId(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetId(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetId(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetId(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetClassName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetClassName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetClassName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetClassName(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetAlign(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetAlign(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetAlign(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetAlign(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetDir(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetDir(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetDir(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetDir(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetFlex(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetFlex(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetFlex(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetFlex(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetFlexGroup(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetFlexGroup(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetFlexGroup(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetFlexGroup(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetOrdinal(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetOrdinal(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetOrdinal(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetOrdinal(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetOrient(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetOrient(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetOrient(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetOrient(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetPack(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetPack(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetPack(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetPack(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetHidden(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetHidden(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_SetHidden(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetHidden(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetCollapsed(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetCollapsed(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_SetCollapsed(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetCollapsed(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetObserves(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetObserves(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetObserves(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetObserves(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetMenu(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetMenu(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetMenu(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetMenu(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetContextMenu(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetContextMenu(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetContextMenu(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetContextMenu(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetTooltip(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetTooltip(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetTooltip(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetTooltip(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetWidth(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetWidth(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetHeight(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetHeight(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetMinWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetMinWidth(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetMinWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetMinWidth(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetMinHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetMinHeight(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetMinHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetMinHeight(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetMaxWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetMaxWidth(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetMaxWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetMaxWidth(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetMaxHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetMaxHeight(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetMaxHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetMaxHeight(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetPersist(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetPersist(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetPersist(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetPersist(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetLeft(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetLeft(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetLeft(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetLeft(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetTop(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetTop(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetTop(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetTop(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetDatasources(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetDatasources(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetDatasources(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetDatasources(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetRef(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetRef(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetRef(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetRef(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetTooltipText(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetTooltipText(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetTooltipText(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetTooltipText(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetStatusText(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetStatusText(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMXULElement_SetStatusText(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    xpc_qsDOMString arg0(cx, *vp, vp,
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->SetStatusText(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetAllowEvents(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetAllowEvents(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_SetAllowEvents(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    JSBool arg0;
    JS_ValueToBoolean(cx, *vp, &arg0);
    nsresult rv;
    rv = self->SetAllowEvents(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetDatabase(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIRDFCompositeDataSource> result;
    rv = self->GetDatabase(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIRDFCompositeDataSource), &interfaces[k_nsIRDFCompositeDataSource], vp);
}

static JSBool
nsIDOMXULElement_GetBuilder(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIXULTemplateBuilder> result;
    rv = self->GetBuilder(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIXULTemplateBuilder), &interfaces[k_nsIXULTemplateBuilder], vp);
}

static JSBool
nsIDOMXULElement_GetResource(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIRDFResource> result;
    rv = self->GetResource(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIRDFResource), &interfaces[k_nsIRDFResource], vp);
}

static JSBool
nsIDOMXULElement_GetControllers(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIControllers> result;
    rv = self->GetControllers(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIControllers), &interfaces[k_nsIControllers], vp);
}

static JSBool
nsIDOMXULElement_GetBoxObject(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIBoxObject> result;
    rv = self->GetBoxObject(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIBoxObject), &interfaces[k_nsIBoxObject], vp);
}

static JSBool
nsIDOMXULElement_Focus(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->Focus();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_Blur(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->Blur();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_Click(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->Click();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_DoCommand(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->DoCommand();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMXULElement_GetElementsByAttribute(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    xpc_qsDOMString arg1(cx, argv[1], &argv[1],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNodeList> result;
    rv = self->GetElementsByAttribute(arg0, arg1, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNodeList), &interfaces[k_nsIDOMNodeList], vp);
}

static JSBool
nsIDOMXULElement_GetElementsByAttributeNS(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMXULElement *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 3)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    xpc_qsDOMString arg1(cx, argv[1], &argv[1],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    xpc_qsDOMString arg2(cx, argv[2], &argv[2],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg2.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMNodeList> result;
    rv = self->GetElementsByAttributeNS(arg0, arg1, arg2, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMNodeList), &interfaces[k_nsIDOMNodeList], vp);
}

// === interface nsIBoxObject

static JSBool
nsIBoxObject_GetX(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIBoxObject *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetX(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIBoxObject_GetY(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIBoxObject *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetY(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIBoxObject_GetScreenX(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIBoxObject *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetScreenX(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIBoxObject_GetScreenY(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIBoxObject *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetScreenY(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIBoxObject_GetWidth(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIBoxObject *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetWidth(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

static JSBool
nsIBoxObject_GetHeight(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIBoxObject *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    int32_t result;
    rv = self->GetHeight(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL(result);
    return JS_TRUE;
}

// === interface nsIDOMFileReader

static JSBool
nsIDOMFileReader_ReadAsArrayBuffer(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMBlob *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMBlob>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    rv = self->ReadAsArrayBuffer(arg0, cx);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMFileReader_ReadAsBinaryString(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMBlob *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMBlob>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    rv = self->ReadAsBinaryString(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMFileReader_ReadAsText(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMBlob *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMBlob>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    xpc_qsDOMString arg1(cx, (1 < argc ? argv[1] : JSVAL_NULL), (1 < argc ? &argv[1] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    rv = self->ReadAsText(arg0, arg1);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMFileReader_ReadAsDataURL(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIDOMBlob *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIDOMBlob>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    rv = self->ReadAsDataURL(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMFileReader_Abort(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->Abort();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMFileReader_GetReadyState(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint16_t result;
    rv = self->GetReadyState(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = INT_TO_JSVAL((int32_t) result);
    return JS_TRUE;
}

static JSBool
nsIDOMFileReader_GetResult(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetResult(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMFileReader_GetError(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDOMError> result;
    rv = self->GetError(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDOMError), &interfaces[k_nsIDOMDOMError], vp);
}

static JSBool
nsIDOMFileReader_GetOnloadstart(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnloadstart(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMFileReader_SetOnloadstart(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnloadstart(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMFileReader_GetOnprogress(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnprogress(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMFileReader_SetOnprogress(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnprogress(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMFileReader_GetOnload(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnload(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMFileReader_SetOnload(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnload(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMFileReader_GetOnabort(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnabort(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMFileReader_SetOnabort(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnabort(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMFileReader_GetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnerror(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMFileReader_SetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnerror(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMFileReader_GetOnloadend(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnloadend(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMFileReader_SetOnloadend(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileReader *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnloadend(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMNotifyAudioAvailableEvent

static JSBool
nsIDOMNotifyAudioAvailableEvent_GetFrameBuffer(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMNotifyAudioAvailableEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetFrameBuffer(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMNotifyAudioAvailableEvent_GetTime(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMNotifyAudioAvailableEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    float result;
    rv = self->GetTime(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = JS_NumberValue(result);
    return JS_TRUE;
}

// === interface nsIDOMHTMLAudioElement

static JSBool
nsIDOMHTMLAudioElement_MozWriteAudio(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMHTMLAudioElement *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    nsresult rv;
    uint32_t result;
    rv = self->MozWriteAudio(arg0, cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = UINT_TO_JSVAL(result);
    return JS_TRUE;
}

// === interface nsIIDBCursor

static JSBool
nsIIDBCursor_GetDirection(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBCursor *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetDirection(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIIDBCursor_GetSource(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBCursor *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsISupports> result;
    rv = self->GetSource(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsISupports), &interfaces[k_nsISupports], vp);
}

static JSBool
nsIIDBCursor_GetKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBCursor *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetKey(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBCursor_GetPrimaryKey(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBCursor *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetPrimaryKey(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBCursor_Continue(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBCursor *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = (0 < argc ? argv[0] : JSVAL_VOID);
    nsresult rv;
    rv = self->Continue(arg0, cx);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIIDBCursor_Update(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBCursor *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->Update(arg0, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBCursor_Delete(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBCursor *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->Delete(cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBCursor_Advance(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBCursor *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    int64_t arg0;
    if (!JS::ToInt64(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    rv = self->Advance(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIIDBCursorWithValue

static JSBool
nsIIDBCursorWithValue_GetValue(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBCursorWithValue *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetValue(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

// === interface nsIIDBDatabase

static JSBool
nsIIDBDatabase_GetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIIDBDatabase_GetVersion(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint64_t result;
    rv = self->GetVersion(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc_qsUint64ToJsval(cx, result, vp);
}

static JSBool
nsIIDBDatabase_GetObjectStoreNames(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDOMStringList> result;
    rv = self->GetObjectStoreNames(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDOMStringList), &interfaces[k_nsIDOMDOMStringList], vp);
}

static JSBool
nsIIDBDatabase_CreateObjectStore(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    jsval arg1 = (1 < argc ? argv[1] : JSVAL_VOID);
    nsresult rv;
    nsCOMPtr<nsIIDBObjectStore> result;
    rv = self->CreateObjectStore(arg0, arg1, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBObjectStore), &interfaces[k_nsIIDBObjectStore], vp);
}

static JSBool
nsIIDBDatabase_DeleteObjectStore(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->DeleteObjectStore(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIIDBDatabase_Transaction(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    xpc_qsDOMString arg1(cx, (1 < argc ? argv[1] : JSVAL_NULL), (1 < argc ? &argv[1] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBTransaction> result;
    rv = self->Transaction(arg0, arg1, cx, NS_MIN<uint32_t>(argc, 2) - 1, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBTransaction), &interfaces[k_nsIIDBTransaction], vp);
}

static JSBool
nsIIDBDatabase_MozCreateFileHandle(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    xpc_qsDOMString arg1(cx, (1 < argc ? argv[1] : JSVAL_NULL), (1 < argc ? &argv[1] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->MozCreateFileHandle(arg0, arg1, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBDatabase_Close(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->Close();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIIDBDatabase_GetOnabort(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnabort(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBDatabase_SetOnabort(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnabort(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIIDBDatabase_GetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnerror(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBDatabase_SetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnerror(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIIDBDatabase_GetOnversionchange(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnversionchange(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBDatabase_SetOnversionchange(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBDatabase *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnversionchange(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIIDBFactory

static JSBool
nsIIDBFactory_Open(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBFactory *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    int64_t arg1;
    if (!JS::ToInt64(cx, (1 < argc ? argv[1] : JSVAL_NULL), &arg1))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBOpenDBRequest> result;
    rv = self->Open(arg0, arg1, cx, NS_MIN<uint32_t>(argc, 2) - 1, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBOpenDBRequest), &interfaces[k_nsIIDBOpenDBRequest], vp);
}

static JSBool
nsIIDBFactory_DeleteDatabase(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBFactory *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsAString arg0(cx, argv[0], &argv[0]);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBOpenDBRequest> result;
    rv = self->DeleteDatabase(arg0, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBOpenDBRequest), &interfaces[k_nsIIDBOpenDBRequest], vp);
}

static JSBool
nsIIDBFactory_Cmp(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBFactory *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    jsval arg1 = argv[1];
    nsresult rv;
    int16_t result;
    rv = self->Cmp(arg0, arg1, cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = INT_TO_JSVAL((int32_t) result);
    return JS_TRUE;
}

// === interface nsIIDBFileHandle

static JSBool
nsIIDBFileHandle_GetDatabase(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBFileHandle *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBDatabase> result;
    rv = self->GetDatabase(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBDatabase), &interfaces[k_nsIIDBDatabase], vp);
}

// === interface nsIIDBIndex

static JSBool
nsIIDBIndex_GetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIIDBIndex_GetStoreName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetStoreName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIIDBIndex_GetKeyPath(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetKeyPath(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBIndex_GetUnique(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetUnique(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIIDBIndex_GetMultiEntry(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetMultiEntry(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIIDBIndex_GetObjectStore(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBObjectStore> result;
    rv = self->GetObjectStore(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBObjectStore), &interfaces[k_nsIIDBObjectStore], vp);
}

static JSBool
nsIIDBIndex_Get(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->Get(arg0, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBIndex_GetKey(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->GetKey(arg0, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBIndex_GetAll(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = (0 < argc ? argv[0] : JSVAL_VOID);
    uint32_t arg1;
    if (!JS_ValueToECMAUint32(cx, (1 < argc ? argv[1] : JSVAL_NULL), &arg1))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->GetAll(arg0, arg1, cx, NS_MIN<uint32_t>(argc, 2) - 0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBIndex_GetAllKeys(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = (0 < argc ? argv[0] : JSVAL_VOID);
    uint32_t arg1;
    if (!JS_ValueToECMAUint32(cx, (1 < argc ? argv[1] : JSVAL_NULL), &arg1))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->GetAllKeys(arg0, arg1, cx, NS_MIN<uint32_t>(argc, 2) - 0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBIndex_OpenCursor(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = (0 < argc ? argv[0] : JSVAL_VOID);
    xpc_qsDOMString arg1(cx, (1 < argc ? argv[1] : JSVAL_NULL), (1 < argc ? &argv[1] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->OpenCursor(arg0, arg1, cx, NS_MIN<uint32_t>(argc, 2) - 0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBIndex_OpenKeyCursor(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = (0 < argc ? argv[0] : JSVAL_VOID);
    xpc_qsDOMString arg1(cx, (1 < argc ? argv[1] : JSVAL_NULL), (1 < argc ? &argv[1] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->OpenKeyCursor(arg0, arg1, cx, NS_MIN<uint32_t>(argc, 2) - 0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBIndex_Count(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBIndex *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = (0 < argc ? argv[0] : JSVAL_VOID);
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->Count(arg0, cx, NS_MIN<uint32_t>(argc, 1) - 0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

// === interface nsIIDBKeyRange

static JSBool
nsIIDBKeyRange_GetLower(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBKeyRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetLower(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBKeyRange_GetUpper(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBKeyRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetUpper(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBKeyRange_GetLowerOpen(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBKeyRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetLowerOpen(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIIDBKeyRange_GetUpperOpen(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBKeyRange *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetUpperOpen(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

// === interface nsIIDBObjectStore

static JSBool
nsIIDBObjectStore_GetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIIDBObjectStore_GetKeyPath(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetKeyPath(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBObjectStore_GetIndexNames(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDOMStringList> result;
    rv = self->GetIndexNames(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDOMStringList), &interfaces[k_nsIDOMDOMStringList], vp);
}

static JSBool
nsIIDBObjectStore_GetTransaction(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBTransaction> result;
    rv = self->GetTransaction(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBTransaction), &interfaces[k_nsIIDBTransaction], vp);
}

static JSBool
nsIIDBObjectStore_GetAutoIncrement(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetAutoIncrement(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIIDBObjectStore_Get(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->Get(arg0, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBObjectStore_GetAll(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = (0 < argc ? argv[0] : JSVAL_VOID);
    uint32_t arg1;
    if (!JS_ValueToECMAUint32(cx, (1 < argc ? argv[1] : JSVAL_NULL), &arg1))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->GetAll(arg0, arg1, cx, NS_MIN<uint32_t>(argc, 2) - 0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBObjectStore_Add(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    jsval arg1 = (1 < argc ? argv[1] : JSVAL_VOID);
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->Add(arg0, arg1, cx, NS_MIN<uint32_t>(argc, 2) - 1, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBObjectStore_Put(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    jsval arg1 = (1 < argc ? argv[1] : JSVAL_VOID);
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->Put(arg0, arg1, cx, NS_MIN<uint32_t>(argc, 2) - 1, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBObjectStore_Delete(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->Delete(arg0, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBObjectStore_Clear(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->Clear(cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBObjectStore_OpenCursor(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = (0 < argc ? argv[0] : JSVAL_VOID);
    xpc_qsDOMString arg1(cx, (1 < argc ? argv[1] : JSVAL_NULL), (1 < argc ? &argv[1] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->OpenCursor(arg0, arg1, cx, NS_MIN<uint32_t>(argc, 2) - 0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

static JSBool
nsIIDBObjectStore_CreateIndex(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    jsval arg1 = argv[1];
    jsval arg2 = (2 < argc ? argv[2] : JSVAL_VOID);
    nsresult rv;
    nsCOMPtr<nsIIDBIndex> result;
    rv = self->CreateIndex(arg0, arg1, arg2, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBIndex), &interfaces[k_nsIIDBIndex], vp);
}

static JSBool
nsIIDBObjectStore_Index(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBIndex> result;
    rv = self->Index(arg0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBIndex), &interfaces[k_nsIIDBIndex], vp);
}

static JSBool
nsIIDBObjectStore_DeleteIndex(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    rv = self->DeleteIndex(arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIIDBObjectStore_Count(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBObjectStore *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = (0 < argc ? argv[0] : JSVAL_VOID);
    nsresult rv;
    nsCOMPtr<nsIIDBRequest> result;
    rv = self->Count(arg0, cx, NS_MIN<uint32_t>(argc, 1) - 0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBRequest), &interfaces[k_nsIIDBRequest], vp);
}

// === interface nsIIDBRequest

static JSBool
nsIIDBRequest_GetResult(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBRequest *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetResult(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBRequest_GetError(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBRequest *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDOMError> result;
    rv = self->GetError(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDOMError), &interfaces[k_nsIDOMDOMError], vp);
}

static JSBool
nsIIDBRequest_GetSource(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBRequest *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsISupports> result;
    rv = self->GetSource(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsISupports), &interfaces[k_nsISupports], vp);
}

static JSBool
nsIIDBRequest_GetTransaction(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBRequest *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBTransaction> result;
    rv = self->GetTransaction(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBTransaction), &interfaces[k_nsIIDBTransaction], vp);
}

static JSBool
nsIIDBRequest_GetReadyState(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBRequest *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetReadyState(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIIDBRequest_GetOnsuccess(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBRequest *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnsuccess(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBRequest_SetOnsuccess(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBRequest *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnsuccess(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIIDBRequest_GetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBRequest *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnerror(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBRequest_SetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBRequest *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnerror(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIIDBTransaction

static JSBool
nsIIDBTransaction_GetDb(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBDatabase> result;
    rv = self->GetDb(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBDatabase), &interfaces[k_nsIIDBDatabase], vp);
}

static JSBool
nsIIDBTransaction_GetMode(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetMode(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIIDBTransaction_GetError(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDOMError> result;
    rv = self->GetError(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDOMError), &interfaces[k_nsIDOMDOMError], vp);
}

static JSBool
nsIIDBTransaction_GetObjectStoreNames(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDOMStringList> result;
    rv = self->GetObjectStoreNames(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDOMStringList), &interfaces[k_nsIDOMDOMStringList], vp);
}

static JSBool
nsIIDBTransaction_ObjectStore(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, argv[0], &argv[0],
                            xpc_qsDOMString::eStringify,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIIDBObjectStore> result;
    rv = self->ObjectStore(arg0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIIDBObjectStore), &interfaces[k_nsIIDBObjectStore], vp);
}

static JSBool
nsIIDBTransaction_Abort(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->Abort();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIIDBTransaction_GetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnerror(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBTransaction_SetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnerror(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIIDBTransaction_GetOncomplete(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOncomplete(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBTransaction_SetOncomplete(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOncomplete(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIIDBTransaction_GetOnabort(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnabort(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBTransaction_SetOnabort(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBTransaction *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnabort(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIIDBOpenDBRequest

static JSBool
nsIIDBOpenDBRequest_GetOnblocked(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBOpenDBRequest *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnblocked(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBOpenDBRequest_SetOnblocked(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBOpenDBRequest *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnblocked(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIIDBOpenDBRequest_GetOnupgradeneeded(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBOpenDBRequest *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnupgradeneeded(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIIDBOpenDBRequest_SetOnupgradeneeded(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBOpenDBRequest *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnupgradeneeded(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIIDBVersionChangeEvent

static JSBool
nsIIDBVersionChangeEvent_GetOldVersion(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBVersionChangeEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    uint64_t result;
    rv = self->GetOldVersion(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc_qsUint64ToJsval(cx, result, vp);
}

static JSBool
nsIIDBVersionChangeEvent_GetNewVersion(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIIDBVersionChangeEvent *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetNewVersion(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

// === interface nsIIndexedDatabaseUsageCallback

static JSBool
nsIIndexedDatabaseUsageCallback_OnUsageResult(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIndexedDatabaseUsageCallback *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 5)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIURI *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIURI>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    uint64_t arg1;
    if (!JS::ToUint64(cx, argv[1], &arg1))
        return JS_FALSE;
    uint64_t arg2;
    if (!JS::ToUint64(cx, argv[2], &arg2))
        return JS_FALSE;
    uint32_t arg3;
    if (!JS_ValueToECMAUint32(cx, argv[3], &arg3))
        return JS_FALSE;
    JSBool arg4;
    JS_ValueToBoolean(cx, argv[4], &arg4);
    rv = self->OnUsageResult(arg0, arg1, arg2, arg3, arg4);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIIndexedDatabaseManager

static JSBool
nsIIndexedDatabaseManager_GetUsageForURI(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIndexedDatabaseManager *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIURI *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIURI>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    nsIIndexedDatabaseUsageCallback *arg1;
    xpc_qsSelfRef arg1ref;
    rv = xpc_qsUnwrapArg<nsIIndexedDatabaseUsageCallback>(cx, argv[1], &arg1, &arg1ref.ptr, &argv[1]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 1);
        return JS_FALSE;
    }
    uint32_t arg2;
    if (!JS_ValueToECMAUint32(cx, (2 < argc ? argv[2] : JSVAL_NULL), &arg2))
        return JS_FALSE;
    JSBool arg3;
    JS_ValueToBoolean(cx, (3 < argc ? argv[3] : JSVAL_NULL), &arg3);
    rv = self->GetUsageForURI(arg0, arg1, arg2, arg3, NS_MIN<uint32_t>(argc, 4) - 2);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIIndexedDatabaseManager_CancelGetUsageForURI(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIndexedDatabaseManager *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 2)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIURI *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIURI>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    nsIIndexedDatabaseUsageCallback *arg1;
    xpc_qsSelfRef arg1ref;
    rv = xpc_qsUnwrapArg<nsIIndexedDatabaseUsageCallback>(cx, argv[1], &arg1, &arg1ref.ptr, &argv[1]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 1);
        return JS_FALSE;
    }
    uint32_t arg2;
    if (!JS_ValueToECMAUint32(cx, (2 < argc ? argv[2] : JSVAL_NULL), &arg2))
        return JS_FALSE;
    JSBool arg3;
    JS_ValueToBoolean(cx, (3 < argc ? argv[3] : JSVAL_NULL), &arg3);
    rv = self->CancelGetUsageForURI(arg0, arg1, arg2, arg3, NS_MIN<uint32_t>(argc, 4) - 2);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIIndexedDatabaseManager_ClearDatabasesForURI(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIndexedDatabaseManager *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    nsresult rv;
    nsIURI *arg0;
    xpc_qsSelfRef arg0ref;
    rv = xpc_qsUnwrapArg<nsIURI>(cx, argv[0], &arg0, &arg0ref.ptr, &argv[0]);
    if (NS_FAILED(rv)) {
        xpc_qsThrowBadArg(cx, rv, vp, 0);
        return JS_FALSE;
    }
    uint32_t arg1;
    if (!JS_ValueToECMAUint32(cx, (1 < argc ? argv[1] : JSVAL_NULL), &arg1))
        return JS_FALSE;
    JSBool arg2;
    JS_ValueToBoolean(cx, (2 < argc ? argv[2] : JSVAL_NULL), &arg2);
    rv = self->ClearDatabasesForURI(arg0, arg1, arg2, NS_MIN<uint32_t>(argc, 3) - 1);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIIndexedDatabaseManager_InitWindowless(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIIndexedDatabaseManager *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    nsresult rv;
    rv = self->InitWindowless(arg0, cx);
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

// === interface nsIDOMDOMError

static JSBool
nsIDOMDOMError_GetName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMDOMError *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

// === interface nsIDOMFileHandle

static JSBool
nsIDOMFileHandle_GetDOMName(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileHandle *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetDOMName(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMFileHandle_GetDOMType(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileHandle *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetDOMType(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMFileHandle_Open(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMFileHandle *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    xpc_qsDOMString arg0(cx, (0 < argc ? argv[0] : JSVAL_NULL), (0 < argc ? &argv[0] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg0.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMLockedFile> result;
    rv = self->Open(arg0, NS_MIN<uint32_t>(argc, 1) - 0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMLockedFile), &interfaces[k_nsIDOMLockedFile], vp);
}

static JSBool
nsIDOMFileHandle_GetFile(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMFileHandle *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMDOMRequest> result;
    rv = self->GetFile(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMDOMRequest), &interfaces[k_nsIDOMDOMRequest], vp);
}

static JSBool
nsIDOMFileHandle_GetOnabort(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileHandle *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnabort(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMFileHandle_SetOnabort(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileHandle *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnabort(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMFileHandle_GetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileHandle *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnerror(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMFileHandle_SetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileHandle *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnerror(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMFileRequest

static JSBool
nsIDOMFileRequest_GetLockedFile(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileRequest *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMLockedFile> result;
    rv = self->GetLockedFile(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMLockedFile), &interfaces[k_nsIDOMLockedFile], vp);
}

static JSBool
nsIDOMFileRequest_GetOnprogress(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileRequest *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnprogress(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMFileRequest_SetOnprogress(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMFileRequest *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnprogress(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMLockedFile

static JSBool
nsIDOMLockedFile_GetFileHandle(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMFileHandle> result;
    rv = self->GetFileHandle(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMFileHandle), &interfaces[k_nsIDOMFileHandle], vp);
}

static JSBool
nsIDOMLockedFile_GetMode(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    nsString result;
    rv = self->GetMode(result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    return xpc::StringToJsval(cx, result, vp);
}

static JSBool
nsIDOMLockedFile_GetActive(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    bool result;
    rv = self->GetActive(&result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = (result ? JSVAL_TRUE : JSVAL_FALSE);
    return JS_TRUE;
}

static JSBool
nsIDOMLockedFile_GetLocation(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetLocation(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMLockedFile_SetLocation(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetLocation(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMLockedFile_GetMetadata(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = (0 < argc ? argv[0] : JSVAL_VOID);
    nsresult rv;
    nsCOMPtr<nsIDOMFileRequest> result;
    rv = self->GetMetadata(arg0, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMFileRequest), &interfaces[k_nsIDOMFileRequest], vp);
}

static JSBool
nsIDOMLockedFile_ReadAsArrayBuffer(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    uint64_t arg0;
    if (!JS::ToUint64(cx, argv[0], &arg0))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMFileRequest> result;
    rv = self->ReadAsArrayBuffer(arg0, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMFileRequest), &interfaces[k_nsIDOMFileRequest], vp);
}

static JSBool
nsIDOMLockedFile_ReadAsText(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    uint64_t arg0;
    if (!JS::ToUint64(cx, argv[0], &arg0))
        return JS_FALSE;
    xpc_qsDOMString arg1(cx, (1 < argc ? argv[1] : JSVAL_NULL), (1 < argc ? &argv[1] : NULL),
                            xpc_qsDOMString::eDefaultNullBehavior,
                            xpc_qsDOMString::eDefaultUndefinedBehavior);
    if (!arg1.IsValid())
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMFileRequest> result;
    rv = self->ReadAsText(arg0, arg1, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMFileRequest), &interfaces[k_nsIDOMFileRequest], vp);
}

static JSBool
nsIDOMLockedFile_Write(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    nsresult rv;
    nsCOMPtr<nsIDOMFileRequest> result;
    rv = self->Write(arg0, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMFileRequest), &interfaces[k_nsIDOMFileRequest], vp);
}

static JSBool
nsIDOMLockedFile_Append(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    if (argc < 1)
        return xpc_qsThrow(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    jsval *argv = JS_ARGV(cx, vp);
    jsval arg0 = argv[0];
    nsresult rv;
    nsCOMPtr<nsIDOMFileRequest> result;
    rv = self->Append(arg0, cx, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMFileRequest), &interfaces[k_nsIDOMFileRequest], vp);
}

static JSBool
nsIDOMLockedFile_Truncate(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    jsval *argv = JS_ARGV(cx, vp);
    uint64_t arg0;
    if (!JS::ToUint64(cx, (0 < argc ? argv[0] : JSVAL_NULL), &arg0))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMFileRequest> result;
    rv = self->Truncate(arg0, NS_MIN<uint32_t>(argc, 1) - 0, getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMFileRequest), &interfaces[k_nsIDOMFileRequest], vp);
}

static JSBool
nsIDOMLockedFile_Flush(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    XPCLazyCallContext lccx(JS_CALLER, cx, obj);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], &lccx, true))
        return JS_FALSE;
    nsresult rv;
    nsCOMPtr<nsIDOMFileRequest> result;
    rv = self->Flush(getter_AddRefs(result));
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    if (!result) {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }
    nsWrapperCache* cache = xpc_qsGetWrapperCache(result);
    if (xpc_FastGetCachedWrapper(cache, obj, vp)) {
      return JS_TRUE;
    }
    // After this point do not use 'result'!
    qsObjectHelper helper(result, cache);
    return xpc_qsXPCOMObjectToJsval(lccx, helper, &NS_GET_IID(nsIDOMFileRequest), &interfaces[k_nsIDOMFileRequest], vp);
}

static JSBool
nsIDOMLockedFile_Abort(JSContext *cx, unsigned argc, jsval *vp)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    if (!obj)
        return JS_FALSE;
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, &vp[1], nullptr, true))
        return JS_FALSE;
    nsresult rv;
    rv = self->Abort();
    if (NS_FAILED(rv))
        return xpc_qsThrowMethodFailed(cx, rv, vp);
    *vp = JSVAL_VOID;
    return JS_TRUE;
}

static JSBool
nsIDOMLockedFile_GetOncomplete(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOncomplete(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMLockedFile_SetOncomplete(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOncomplete(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMLockedFile_GetOnabort(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnabort(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMLockedFile_SetOnabort(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnabort(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

static JSBool
nsIDOMLockedFile_GetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, vp, nullptr, true))
        return JS_FALSE;
    nsresult rv;
    jsval result;
    rv = self->GetOnerror(cx, &result);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*vp), id);
    *vp = result;
    return JS_WrapValue(cx, vp);
}

static JSBool
nsIDOMLockedFile_SetOnerror(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict, JSMutableHandleValue vp_)
{
    XPC_QS_ASSERT_CONTEXT_OK(cx);
    jsval *vp = vp_.address();
    nsIDOMLockedFile *self;
    xpc_qsSelfRef selfref;
    JS::AutoValueRooter tvr(cx);
    if (!xpc_qsUnwrapThis(cx, obj, &self, &selfref.ptr, tvr.jsval_addr(), nullptr, true))
        return JS_FALSE;
    jsval arg0 = *vp;
    nsresult rv;
    rv = self->SetOnerror(cx, arg0);
    if (NS_FAILED(rv))
        return xpc_qsThrowGetterSetterFailed(cx, rv, JSVAL_TO_OBJECT(*tvr.jsval_addr()), id);
    return JS_TRUE;
}

// === interface nsIDOMNode

// === interface nsIDOMSVGElement

// === interface nsIDOMHTMLDocument

// === interface nsIDOMHTMLElement

// === Definer

static const xpc_qsPropertySpec all_properties[] = {
    // nsIDOMWindow (index 0)
    {0, nsIDOMWindow_GetName, nsIDOMWindow_SetName},
    {5, nsIDOMWindow_GetScriptableParent, xpc_qsGetterOnlyPropertyStub},
    {12, nsIDOMWindow_GetScriptableTop, xpc_qsGetterOnlyPropertyStub},
    {16, nsIDOMWindow_GetSelf, xpc_qsGetterOnlyPropertyStub},
    {65, nsIDOMWindow_GetSessionStorage, xpc_qsGetterOnlyPropertyStub},
    {80, nsIDOMWindow_GetLocalStorage, xpc_qsGetterOnlyPropertyStub},
    {93, nsIDOMWindow_GetOnmouseenter, nsIDOMWindow_SetOnmouseenter},
    {106, nsIDOMWindow_GetOnmouseleave, nsIDOMWindow_SetOnmouseleave},
    // nsIDOMWindowPerformance (index 8)
    {119, nsIDOMWindowPerformance_GetPerformance, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMScreen (index 9)
    {12, nsIDOMScreen_GetTop, xpc_qsGetterOnlyPropertyStub},
    {136, nsIDOMScreen_GetHeight, xpc_qsGetterOnlyPropertyStub},
    {143, nsIDOMScreen_GetWidth, xpc_qsGetterOnlyPropertyStub},
    {149, nsIDOMScreen_GetLeft, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMClientRect (index 13)
    {149, nsIDOMClientRect_GetLeft, xpc_qsGetterOnlyPropertyStub},
    {12, nsIDOMClientRect_GetTop, xpc_qsGetterOnlyPropertyStub},
    {154, nsIDOMClientRect_GetRight, xpc_qsGetterOnlyPropertyStub},
    {160, nsIDOMClientRect_GetBottom, xpc_qsGetterOnlyPropertyStub},
    {143, nsIDOMClientRect_GetWidth, xpc_qsGetterOnlyPropertyStub},
    {136, nsIDOMClientRect_GetHeight, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMPaintRequest (index 19)
    {167, nsIDOMPaintRequest_GetClientRect, xpc_qsGetterOnlyPropertyStub},
    {178, nsIDOMPaintRequest_GetXPCOMReason, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMTextMetrics (index 21)
    {143, nsIDOMTextMetrics_GetWidth, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMCharacterData (index 22)
    {198, nsIDOMCharacterData_GetData, nsIDOMCharacterData_SetData},
    {203, nsIDOMCharacterData_GetLength, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMDocument (index 24)
    {210, nsIDOMDocument_GetOnreadystatechange, nsIDOMDocument_SetOnreadystatechange},
    {93, nsIDOMDocument_GetOnmouseenter, nsIDOMDocument_SetOnmouseenter},
    {106, nsIDOMDocument_GetOnmouseleave, nsIDOMDocument_SetOnmouseleave},
    // nsIDOMElement (index 27)
    {93, nsIDOMElement_GetOnmouseenter, nsIDOMElement_SetOnmouseenter},
    {106, nsIDOMElement_GetOnmouseleave, nsIDOMElement_SetOnmouseleave},
    // nsIDOMNamedNodeMap (index 29)
    {203, nsIDOMNamedNodeMap_GetLength, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMDOMStringList (index 30)
    {203, nsIDOMDOMStringList_GetLength, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMElementCSSInlineStyle (index 31)
    {269, nsIDOMElementCSSInlineStyle_GetStyle, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMRect (index 32)
    {12, nsIDOMRect_GetTop, xpc_qsGetterOnlyPropertyStub},
    {154, nsIDOMRect_GetRight, xpc_qsGetterOnlyPropertyStub},
    {160, nsIDOMRect_GetBottom, xpc_qsGetterOnlyPropertyStub},
    {149, nsIDOMRect_GetLeft, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMEvent (index 36)
    {326, nsIDOMEvent_GetType, xpc_qsGetterOnlyPropertyStub},
    {331, nsIDOMEvent_GetTarget, xpc_qsGetterOnlyPropertyStub},
    {338, nsIDOMEvent_GetCurrentTarget, xpc_qsGetterOnlyPropertyStub},
    {352, nsIDOMEvent_GetEventPhase, xpc_qsGetterOnlyPropertyStub},
    {363, nsIDOMEvent_GetBubbles, xpc_qsGetterOnlyPropertyStub},
    {371, nsIDOMEvent_GetCancelable, xpc_qsGetterOnlyPropertyStub},
    {382, nsIDOMEvent_GetTimeStamp, xpc_qsGetterOnlyPropertyStub},
    {433, nsIDOMEvent_GetDefaultPrevented, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMMouseEvent (index 44)
    {475, nsIDOMMouseEvent_GetScreenX, xpc_qsGetterOnlyPropertyStub},
    {483, nsIDOMMouseEvent_GetScreenY, xpc_qsGetterOnlyPropertyStub},
    {491, nsIDOMMouseEvent_GetMozMovementX, xpc_qsGetterOnlyPropertyStub},
    {504, nsIDOMMouseEvent_GetMozMovementY, xpc_qsGetterOnlyPropertyStub},
    {517, nsIDOMMouseEvent_GetClientX, xpc_qsGetterOnlyPropertyStub},
    {525, nsIDOMMouseEvent_GetClientY, xpc_qsGetterOnlyPropertyStub},
    {533, nsIDOMMouseEvent_GetCtrlKey, xpc_qsGetterOnlyPropertyStub},
    {541, nsIDOMMouseEvent_GetShiftKey, xpc_qsGetterOnlyPropertyStub},
    {550, nsIDOMMouseEvent_GetAltKey, xpc_qsGetterOnlyPropertyStub},
    {557, nsIDOMMouseEvent_GetMetaKey, xpc_qsGetterOnlyPropertyStub},
    {565, nsIDOMMouseEvent_GetButton, xpc_qsGetterOnlyPropertyStub},
    {572, nsIDOMMouseEvent_GetButtons, xpc_qsGetterOnlyPropertyStub},
    {580, nsIDOMMouseEvent_GetRelatedTarget, xpc_qsGetterOnlyPropertyStub},
    {609, nsIDOMMouseEvent_GetMozPressure, xpc_qsGetterOnlyPropertyStub},
    {621, nsIDOMMouseEvent_GetMozInputSource, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMKeyEvent (index 59)
    {670, nsIDOMKeyEvent_GetCharCode, xpc_qsGetterOnlyPropertyStub},
    {679, nsIDOMKeyEvent_GetKeyCode, xpc_qsGetterOnlyPropertyStub},
    {550, nsIDOMKeyEvent_GetAltKey, xpc_qsGetterOnlyPropertyStub},
    {533, nsIDOMKeyEvent_GetCtrlKey, xpc_qsGetterOnlyPropertyStub},
    {541, nsIDOMKeyEvent_GetShiftKey, xpc_qsGetterOnlyPropertyStub},
    {557, nsIDOMKeyEvent_GetMetaKey, xpc_qsGetterOnlyPropertyStub},
    {700, nsIDOMKeyEvent_GetLocation, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMMutationEvent (index 66)
    {709, nsIDOMMutationEvent_GetRelatedNode, xpc_qsGetterOnlyPropertyStub},
    {721, nsIDOMMutationEvent_GetPrevValue, xpc_qsGetterOnlyPropertyStub},
    {731, nsIDOMMutationEvent_GetNewValue, xpc_qsGetterOnlyPropertyStub},
    {740, nsIDOMMutationEvent_GetAttrName, xpc_qsGetterOnlyPropertyStub},
    {749, nsIDOMMutationEvent_GetAttrChange, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMDragEvent (index 71)
    {778, nsIDOMDragEvent_GetDataTransfer, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMScrollAreaEvent (index 72)
    {805, nsIDOMScrollAreaEvent_GetX, xpc_qsGetterOnlyPropertyStub},
    {807, nsIDOMScrollAreaEvent_GetY, xpc_qsGetterOnlyPropertyStub},
    {143, nsIDOMScrollAreaEvent_GetWidth, xpc_qsGetterOnlyPropertyStub},
    {136, nsIDOMScrollAreaEvent_GetHeight, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMNotifyPaintEvent (index 76)
    {829, nsIDOMNotifyPaintEvent_GetClientRects, xpc_qsGetterOnlyPropertyStub},
    {841, nsIDOMNotifyPaintEvent_GetBoundingClientRect, xpc_qsGetterOnlyPropertyStub},
    {860, nsIDOMNotifyPaintEvent_GetPaintRequests, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMMessageEvent (index 79)
    {198, nsIDOMMessageEvent_GetData, xpc_qsGetterOnlyPropertyStub},
    {874, nsIDOMMessageEvent_GetOrigin, xpc_qsGetterOnlyPropertyStub},
    {881, nsIDOMMessageEvent_GetLastEventId, xpc_qsGetterOnlyPropertyStub},
    {893, nsIDOMMessageEvent_GetSource, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMMouseScrollEvent (index 83)
    {917, nsIDOMMouseScrollEvent_GetAxis, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMProgressEvent (index 84)
    {943, nsIDOMProgressEvent_GetLengthComputable, xpc_qsGetterOnlyPropertyStub},
    {960, nsIDOMProgressEvent_GetLoaded, xpc_qsGetterOnlyPropertyStub},
    {967, nsIDOMProgressEvent_GetTotal, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMUIEvent (index 87)
    {973, nsIDOMUIEvent_GetWhich, xpc_qsGetterOnlyPropertyStub},
    {979, nsIDOMUIEvent_GetRangeParent, xpc_qsGetterOnlyPropertyStub},
    {991, nsIDOMUIEvent_GetRangeOffset, xpc_qsGetterOnlyPropertyStub},
    {1003, nsIDOMUIEvent_GetPageX, xpc_qsGetterOnlyPropertyStub},
    {1009, nsIDOMUIEvent_GetPageY, xpc_qsGetterOnlyPropertyStub},
    {1015, nsIDOMUIEvent_GetIsChar, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMTouch (index 93)
    {1022, nsIDOMTouch_GetIdentifier, xpc_qsGetterOnlyPropertyStub},
    {331, nsIDOMTouch_GetTarget, xpc_qsGetterOnlyPropertyStub},
    {1003, nsIDOMTouch_GetPageX, xpc_qsGetterOnlyPropertyStub},
    {1009, nsIDOMTouch_GetPageY, xpc_qsGetterOnlyPropertyStub},
    {475, nsIDOMTouch_GetScreenX, xpc_qsGetterOnlyPropertyStub},
    {483, nsIDOMTouch_GetScreenY, xpc_qsGetterOnlyPropertyStub},
    {517, nsIDOMTouch_GetClientX, xpc_qsGetterOnlyPropertyStub},
    {525, nsIDOMTouch_GetClientY, xpc_qsGetterOnlyPropertyStub},
    {1033, nsIDOMTouch_GetRadiusX, xpc_qsGetterOnlyPropertyStub},
    {1041, nsIDOMTouch_GetRadiusY, xpc_qsGetterOnlyPropertyStub},
    {1049, nsIDOMTouch_GetRotationAngle, xpc_qsGetterOnlyPropertyStub},
    {1063, nsIDOMTouch_GetForce, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMTouchList (index 105)
    {203, nsIDOMTouchList_GetLength, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMTouchEvent (index 106)
    {1085, nsIDOMTouchEvent_GetTouches, xpc_qsGetterOnlyPropertyStub},
    {1093, nsIDOMTouchEvent_GetTargetTouches, xpc_qsGetterOnlyPropertyStub},
    {1107, nsIDOMTouchEvent_GetChangedTouches, xpc_qsGetterOnlyPropertyStub},
    {550, nsIDOMTouchEvent_GetAltKey, xpc_qsGetterOnlyPropertyStub},
    {557, nsIDOMTouchEvent_GetMetaKey, xpc_qsGetterOnlyPropertyStub},
    {533, nsIDOMTouchEvent_GetCtrlKey, xpc_qsGetterOnlyPropertyStub},
    {541, nsIDOMTouchEvent_GetShiftKey, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMHTMLBaseElement (index 113)
    {1137, nsIDOMHTMLBaseElement_GetHref, nsIDOMHTMLBaseElement_SetHref},
    {331, nsIDOMHTMLBaseElement_GetTarget, nsIDOMHTMLBaseElement_SetTarget},
    // nsIDOMHTMLButtonElement (index 115)
    {0, nsIDOMHTMLButtonElement_GetName, nsIDOMHTMLButtonElement_SetName},
    {1142, nsIDOMHTMLButtonElement_GetForm, xpc_qsGetterOnlyPropertyStub},
    {1147, nsIDOMHTMLButtonElement_GetValue, nsIDOMHTMLButtonElement_SetValue},
    {1153, nsIDOMHTMLButtonElement_GetDisabled, nsIDOMHTMLButtonElement_SetDisabled},
    // nsIDOMHTMLCommandElement (index 119)
    {326, nsIDOMHTMLCommandElement_GetType, nsIDOMHTMLCommandElement_SetType},
    {1162, nsIDOMHTMLCommandElement_GetLabel, nsIDOMHTMLCommandElement_SetLabel},
    {1168, nsIDOMHTMLCommandElement_GetIcon, nsIDOMHTMLCommandElement_SetIcon},
    {1153, nsIDOMHTMLCommandElement_GetDisabled, nsIDOMHTMLCommandElement_SetDisabled},
    {1173, nsIDOMHTMLCommandElement_GetDefaultChecked, nsIDOMHTMLCommandElement_SetDefaultChecked},
    {1188, nsIDOMHTMLCommandElement_GetChecked, nsIDOMHTMLCommandElement_SetChecked},
    {1196, nsIDOMHTMLCommandElement_GetRadiogroup, nsIDOMHTMLCommandElement_SetRadiogroup},
    // nsIDOMHTMLFormElement (index 126)
    {1207, nsIDOMHTMLFormElement_GetElements, xpc_qsGetterOnlyPropertyStub},
    {0, nsIDOMHTMLFormElement_GetName, nsIDOMHTMLFormElement_SetName},
    {203, nsIDOMHTMLFormElement_GetLength, xpc_qsGetterOnlyPropertyStub},
    {331, nsIDOMHTMLFormElement_GetTarget, nsIDOMHTMLFormElement_SetTarget},
    {1223, nsIDOMHTMLFormElement_GetAction, nsIDOMHTMLFormElement_SetAction},
    // nsIDOMHTMLFrameElement (index 131)
    {1230, nsIDOMHTMLFrameElement_GetSrc, nsIDOMHTMLFrameElement_SetSrc},
    {1234, nsIDOMHTMLFrameElement_GetContentDocument, xpc_qsGetterOnlyPropertyStub},
    {1250, nsIDOMHTMLFrameElement_GetContentWindow, xpc_qsGetterOnlyPropertyStub},
    {0, nsIDOMHTMLFrameElement_GetName, nsIDOMHTMLFrameElement_SetName},
    // nsIDOMHTMLIFrameElement (index 135)
    {1230, nsIDOMHTMLIFrameElement_GetSrc, nsIDOMHTMLIFrameElement_SetSrc},
    {1234, nsIDOMHTMLIFrameElement_GetContentDocument, xpc_qsGetterOnlyPropertyStub},
    {1250, nsIDOMHTMLIFrameElement_GetContentWindow, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMHTMLInputElement (index 138)
    {1173, nsIDOMHTMLInputElement_GetDefaultChecked, nsIDOMHTMLInputElement_SetDefaultChecked},
    {1153, nsIDOMHTMLInputElement_GetDisabled, nsIDOMHTMLInputElement_SetDisabled},
    {1188, nsIDOMHTMLInputElement_GetChecked, nsIDOMHTMLInputElement_SetChecked},
    {326, nsIDOMHTMLInputElement_GetType, nsIDOMHTMLInputElement_SetType},
    {1142, nsIDOMHTMLInputElement_GetForm, xpc_qsGetterOnlyPropertyStub},
    {1230, nsIDOMHTMLInputElement_GetSrc, nsIDOMHTMLInputElement_SetSrc},
    {0, nsIDOMHTMLInputElement_GetName, nsIDOMHTMLInputElement_SetName},
    {1147, nsIDOMHTMLInputElement_GetValue, nsIDOMHTMLInputElement_SetValue},
    {1271, nsIDOMHTMLInputElement_GetFiles, xpc_qsGetterOnlyPropertyStub},
    {1277, nsIDOMHTMLInputElement_GetTextLength, xpc_qsGetterOnlyPropertyStub},
    {1288, nsIDOMHTMLInputElement_GetSelectionStart, nsIDOMHTMLInputElement_SetSelectionStart},
    {1303, nsIDOMHTMLInputElement_GetSelectionEnd, nsIDOMHTMLInputElement_SetSelectionEnd},
    {1316, nsIDOMHTMLInputElement_GetSelectionDirection, nsIDOMHTMLInputElement_SetSelectionDirection},
    // nsIDOMHTMLLinkElement (index 151)
    {1153, nsIDOMHTMLLinkElement_GetDisabled, nsIDOMHTMLLinkElement_SetDisabled},
    // nsIDOMHTMLMeterElement (index 152)
    {1147, nsIDOMHTMLMeterElement_GetValue, nsIDOMHTMLMeterElement_SetValue},
    {1353, nsIDOMHTMLMeterElement_GetMin, nsIDOMHTMLMeterElement_SetMin},
    {1357, nsIDOMHTMLMeterElement_GetMax, nsIDOMHTMLMeterElement_SetMax},
    {1361, nsIDOMHTMLMeterElement_GetLow, nsIDOMHTMLMeterElement_SetLow},
    {1365, nsIDOMHTMLMeterElement_GetHigh, nsIDOMHTMLMeterElement_SetHigh},
    {1370, nsIDOMHTMLMeterElement_GetOptimum, nsIDOMHTMLMeterElement_SetOptimum},
    // nsIDOMHTMLMenuElement (index 158)
    {1378, nsIDOMHTMLMenuElement_GetCompact, nsIDOMHTMLMenuElement_SetCompact},
    {326, nsIDOMHTMLMenuElement_GetType, nsIDOMHTMLMenuElement_SetType},
    {1162, nsIDOMHTMLMenuElement_GetLabel, nsIDOMHTMLMenuElement_SetLabel},
    // nsIDOMHTMLOptionElement (index 161)
    {1386, nsIDOMHTMLOptionElement_GetIndex, xpc_qsGetterOnlyPropertyStub},
    {1392, nsIDOMHTMLOptionElement_GetSelected, nsIDOMHTMLOptionElement_SetSelected},
    {1142, nsIDOMHTMLOptionElement_GetForm, xpc_qsGetterOnlyPropertyStub},
    {1401, nsIDOMHTMLOptionElement_GetText, nsIDOMHTMLOptionElement_SetText},
    {1406, nsIDOMHTMLOptionElement_GetDefaultSelected, nsIDOMHTMLOptionElement_SetDefaultSelected},
    {1147, nsIDOMHTMLOptionElement_GetValue, nsIDOMHTMLOptionElement_SetValue},
    {1162, nsIDOMHTMLOptionElement_GetLabel, nsIDOMHTMLOptionElement_SetLabel},
    {1153, nsIDOMHTMLOptionElement_GetDisabled, nsIDOMHTMLOptionElement_SetDisabled},
    // nsIDOMHTMLProgressElement (index 169)
    {1147, nsIDOMHTMLProgressElement_GetValue, nsIDOMHTMLProgressElement_SetValue},
    {1357, nsIDOMHTMLProgressElement_GetMax, nsIDOMHTMLProgressElement_SetMax},
    {1422, nsIDOMHTMLProgressElement_GetPosition, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMHTMLSelectElement (index 172)
    {0, nsIDOMHTMLSelectElement_GetName, nsIDOMHTMLSelectElement_SetName},
    {1142, nsIDOMHTMLSelectElement_GetForm, xpc_qsGetterOnlyPropertyStub},
    {1147, nsIDOMHTMLSelectElement_GetValue, nsIDOMHTMLSelectElement_SetValue},
    {1153, nsIDOMHTMLSelectElement_GetDisabled, nsIDOMHTMLSelectElement_SetDisabled},
    {203, nsIDOMHTMLSelectElement_GetLength, nsIDOMHTMLSelectElement_SetLength},
    {1442, nsIDOMHTMLSelectElement_GetSelectedIndex, nsIDOMHTMLSelectElement_SetSelectedIndex},
    {326, nsIDOMHTMLSelectElement_GetType, xpc_qsGetterOnlyPropertyStub},
    {1456, nsIDOMHTMLSelectElement_GetOptions, xpc_qsGetterOnlyPropertyStub},
    {1464, nsIDOMHTMLSelectElement_GetSize, nsIDOMHTMLSelectElement_SetSize},
    // nsIDOMHTMLStyleElement (index 181)
    {1153, nsIDOMHTMLStyleElement_GetDisabled, nsIDOMHTMLStyleElement_SetDisabled},
    // nsIDOMHTMLTextAreaElement (index 182)
    {1469, nsIDOMHTMLTextAreaElement_GetRows, nsIDOMHTMLTextAreaElement_SetRows},
    {0, nsIDOMHTMLTextAreaElement_GetName, nsIDOMHTMLTextAreaElement_SetName},
    {1142, nsIDOMHTMLTextAreaElement_GetForm, xpc_qsGetterOnlyPropertyStub},
    {1474, nsIDOMHTMLTextAreaElement_GetDefaultValue, nsIDOMHTMLTextAreaElement_SetDefaultValue},
    {1487, nsIDOMHTMLTextAreaElement_GetCols, nsIDOMHTMLTextAreaElement_SetCols},
    {1147, nsIDOMHTMLTextAreaElement_GetValue, nsIDOMHTMLTextAreaElement_SetValue},
    {326, nsIDOMHTMLTextAreaElement_GetType, xpc_qsGetterOnlyPropertyStub},
    {1288, nsIDOMHTMLTextAreaElement_GetSelectionStart, nsIDOMHTMLTextAreaElement_SetSelectionStart},
    {1303, nsIDOMHTMLTextAreaElement_GetSelectionEnd, nsIDOMHTMLTextAreaElement_SetSelectionEnd},
    {1316, nsIDOMHTMLTextAreaElement_GetSelectionDirection, nsIDOMHTMLTextAreaElement_SetSelectionDirection},
    {1277, nsIDOMHTMLTextAreaElement_GetTextLength, xpc_qsGetterOnlyPropertyStub},
    {1492, nsIDOMHTMLTextAreaElement_GetWrap, nsIDOMHTMLTextAreaElement_SetWrap},
    // nsIDOMHTMLTitleElement (index 194)
    {1401, nsIDOMHTMLTitleElement_GetText, nsIDOMHTMLTitleElement_SetText},
    // nsIDOMHTMLCanvasElement (index 195)
    {143, nsIDOMHTMLCanvasElement_GetWidth, nsIDOMHTMLCanvasElement_SetWidth},
    {136, nsIDOMHTMLCanvasElement_GetHeight, nsIDOMHTMLCanvasElement_SetHeight},
    // nsIDOMRange (index 197)
    {1518, nsIDOMRange_GetStartContainer, xpc_qsGetterOnlyPropertyStub},
    {1533, nsIDOMRange_GetStartOffset, xpc_qsGetterOnlyPropertyStub},
    {1545, nsIDOMRange_GetEndContainer, xpc_qsGetterOnlyPropertyStub},
    {1558, nsIDOMRange_GetEndOffset, xpc_qsGetterOnlyPropertyStub},
    {1568, nsIDOMRange_GetCollapsed, xpc_qsGetterOnlyPropertyStub},
    {1578, nsIDOMRange_GetCommonAncestorContainer, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMStorage (index 203)
    {203, nsIDOMStorage_GetLength, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMStorageItem (index 204)
    {1147, nsIDOMStorageItem_GetValue, nsIDOMStorageItem_SetValue},
    // nsIDOMXPathResult (index 205)
    {2037, nsIDOMXPathResult_GetSnapshotLength, xpc_qsGetterOnlyPropertyStub},
    {2052, nsIDOMXPathResult_GetResultType, xpc_qsGetterOnlyPropertyStub},
    {2063, nsIDOMXPathResult_GetNumberValue, xpc_qsGetterOnlyPropertyStub},
    {2075, nsIDOMXPathResult_GetStringValue, xpc_qsGetterOnlyPropertyStub},
    {2087, nsIDOMXPathResult_GetBooleanValue, xpc_qsGetterOnlyPropertyStub},
    {2100, nsIDOMXPathResult_GetSingleNodeValue, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMXULElement (index 211)
    {2136, nsIDOMXULElement_GetId, nsIDOMXULElement_SetId},
    {2139, nsIDOMXULElement_GetClassName, nsIDOMXULElement_SetClassName},
    {2149, nsIDOMXULElement_GetAlign, nsIDOMXULElement_SetAlign},
    {2155, nsIDOMXULElement_GetDir, nsIDOMXULElement_SetDir},
    {2159, nsIDOMXULElement_GetFlex, nsIDOMXULElement_SetFlex},
    {2164, nsIDOMXULElement_GetFlexGroup, nsIDOMXULElement_SetFlexGroup},
    {2174, nsIDOMXULElement_GetOrdinal, nsIDOMXULElement_SetOrdinal},
    {2182, nsIDOMXULElement_GetOrient, nsIDOMXULElement_SetOrient},
    {2189, nsIDOMXULElement_GetPack, nsIDOMXULElement_SetPack},
    {2194, nsIDOMXULElement_GetHidden, nsIDOMXULElement_SetHidden},
    {1568, nsIDOMXULElement_GetCollapsed, nsIDOMXULElement_SetCollapsed},
    {2201, nsIDOMXULElement_GetObserves, nsIDOMXULElement_SetObserves},
    {2210, nsIDOMXULElement_GetMenu, nsIDOMXULElement_SetMenu},
    {2215, nsIDOMXULElement_GetContextMenu, nsIDOMXULElement_SetContextMenu},
    {2227, nsIDOMXULElement_GetTooltip, nsIDOMXULElement_SetTooltip},
    {143, nsIDOMXULElement_GetWidth, nsIDOMXULElement_SetWidth},
    {136, nsIDOMXULElement_GetHeight, nsIDOMXULElement_SetHeight},
    {2235, nsIDOMXULElement_GetMinWidth, nsIDOMXULElement_SetMinWidth},
    {2244, nsIDOMXULElement_GetMinHeight, nsIDOMXULElement_SetMinHeight},
    {2254, nsIDOMXULElement_GetMaxWidth, nsIDOMXULElement_SetMaxWidth},
    {2263, nsIDOMXULElement_GetMaxHeight, nsIDOMXULElement_SetMaxHeight},
    {2273, nsIDOMXULElement_GetPersist, nsIDOMXULElement_SetPersist},
    {149, nsIDOMXULElement_GetLeft, nsIDOMXULElement_SetLeft},
    {12, nsIDOMXULElement_GetTop, nsIDOMXULElement_SetTop},
    {2281, nsIDOMXULElement_GetDatasources, nsIDOMXULElement_SetDatasources},
    {2293, nsIDOMXULElement_GetRef, nsIDOMXULElement_SetRef},
    {2297, nsIDOMXULElement_GetTooltipText, nsIDOMXULElement_SetTooltipText},
    {2309, nsIDOMXULElement_GetStatusText, nsIDOMXULElement_SetStatusText},
    {2320, nsIDOMXULElement_GetAllowEvents, nsIDOMXULElement_SetAllowEvents},
    {2332, nsIDOMXULElement_GetDatabase, xpc_qsGetterOnlyPropertyStub},
    {2341, nsIDOMXULElement_GetBuilder, xpc_qsGetterOnlyPropertyStub},
    {2349, nsIDOMXULElement_GetResource, xpc_qsGetterOnlyPropertyStub},
    {2358, nsIDOMXULElement_GetControllers, xpc_qsGetterOnlyPropertyStub},
    {2370, nsIDOMXULElement_GetBoxObject, xpc_qsGetterOnlyPropertyStub},
    // nsIBoxObject (index 245)
    {805, nsIBoxObject_GetX, xpc_qsGetterOnlyPropertyStub},
    {807, nsIBoxObject_GetY, xpc_qsGetterOnlyPropertyStub},
    {475, nsIBoxObject_GetScreenX, xpc_qsGetterOnlyPropertyStub},
    {483, nsIBoxObject_GetScreenY, xpc_qsGetterOnlyPropertyStub},
    {143, nsIBoxObject_GetWidth, xpc_qsGetterOnlyPropertyStub},
    {136, nsIBoxObject_GetHeight, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMFileReader (index 251)
    {2523, nsIDOMFileReader_GetReadyState, xpc_qsGetterOnlyPropertyStub},
    {2534, nsIDOMFileReader_GetResult, xpc_qsGetterOnlyPropertyStub},
    {2541, nsIDOMFileReader_GetError, xpc_qsGetterOnlyPropertyStub},
    {2547, nsIDOMFileReader_GetOnloadstart, nsIDOMFileReader_SetOnloadstart},
    {2559, nsIDOMFileReader_GetOnprogress, nsIDOMFileReader_SetOnprogress},
    {2570, nsIDOMFileReader_GetOnload, nsIDOMFileReader_SetOnload},
    {2577, nsIDOMFileReader_GetOnabort, nsIDOMFileReader_SetOnabort},
    {2585, nsIDOMFileReader_GetOnerror, nsIDOMFileReader_SetOnerror},
    {2593, nsIDOMFileReader_GetOnloadend, nsIDOMFileReader_SetOnloadend},
    // nsIDOMNotifyAudioAvailableEvent (index 260)
    {2603, nsIDOMNotifyAudioAvailableEvent_GetFrameBuffer, xpc_qsGetterOnlyPropertyStub},
    {2615, nsIDOMNotifyAudioAvailableEvent_GetTime, xpc_qsGetterOnlyPropertyStub},
    // nsIIDBCursor (index 262)
    {2634, nsIIDBCursor_GetDirection, xpc_qsGetterOnlyPropertyStub},
    {893, nsIIDBCursor_GetSource, xpc_qsGetterOnlyPropertyStub},
    {1954, nsIIDBCursor_GetKey, xpc_qsGetterOnlyPropertyStub},
    {2644, nsIIDBCursor_GetPrimaryKey, xpc_qsGetterOnlyPropertyStub},
    // nsIIDBCursorWithValue (index 266)
    {1147, nsIIDBCursorWithValue_GetValue, xpc_qsGetterOnlyPropertyStub},
    // nsIIDBDatabase (index 267)
    {0, nsIIDBDatabase_GetName, xpc_qsGetterOnlyPropertyStub},
    {2686, nsIIDBDatabase_GetVersion, xpc_qsGetterOnlyPropertyStub},
    {2694, nsIIDBDatabase_GetObjectStoreNames, xpc_qsGetterOnlyPropertyStub},
    {2577, nsIIDBDatabase_GetOnabort, nsIIDBDatabase_SetOnabort},
    {2585, nsIIDBDatabase_GetOnerror, nsIIDBDatabase_SetOnerror},
    {2785, nsIIDBDatabase_GetOnversionchange, nsIIDBDatabase_SetOnversionchange},
    // nsIIDBFileHandle (index 273)
    {2332, nsIIDBFileHandle_GetDatabase, xpc_qsGetterOnlyPropertyStub},
    // nsIIDBIndex (index 274)
    {0, nsIIDBIndex_GetName, xpc_qsGetterOnlyPropertyStub},
    {2825, nsIIDBIndex_GetStoreName, xpc_qsGetterOnlyPropertyStub},
    {2835, nsIIDBIndex_GetKeyPath, xpc_qsGetterOnlyPropertyStub},
    {2843, nsIIDBIndex_GetUnique, xpc_qsGetterOnlyPropertyStub},
    {2850, nsIIDBIndex_GetMultiEntry, xpc_qsGetterOnlyPropertyStub},
    {2861, nsIIDBIndex_GetObjectStore, xpc_qsGetterOnlyPropertyStub},
    // nsIIDBKeyRange (index 280)
    {2939, nsIIDBKeyRange_GetLower, xpc_qsGetterOnlyPropertyStub},
    {2945, nsIIDBKeyRange_GetUpper, xpc_qsGetterOnlyPropertyStub},
    {2951, nsIIDBKeyRange_GetLowerOpen, xpc_qsGetterOnlyPropertyStub},
    {2961, nsIIDBKeyRange_GetUpperOpen, xpc_qsGetterOnlyPropertyStub},
    // nsIIDBObjectStore (index 284)
    {0, nsIIDBObjectStore_GetName, xpc_qsGetterOnlyPropertyStub},
    {2835, nsIIDBObjectStore_GetKeyPath, xpc_qsGetterOnlyPropertyStub},
    {2971, nsIIDBObjectStore_GetIndexNames, xpc_qsGetterOnlyPropertyStub},
    {2747, nsIIDBObjectStore_GetTransaction, xpc_qsGetterOnlyPropertyStub},
    {2982, nsIIDBObjectStore_GetAutoIncrement, xpc_qsGetterOnlyPropertyStub},
    // nsIIDBRequest (index 289)
    {2534, nsIIDBRequest_GetResult, xpc_qsGetterOnlyPropertyStub},
    {2541, nsIIDBRequest_GetError, xpc_qsGetterOnlyPropertyStub},
    {893, nsIIDBRequest_GetSource, xpc_qsGetterOnlyPropertyStub},
    {2747, nsIIDBRequest_GetTransaction, xpc_qsGetterOnlyPropertyStub},
    {2523, nsIIDBRequest_GetReadyState, xpc_qsGetterOnlyPropertyStub},
    {3024, nsIIDBRequest_GetOnsuccess, nsIIDBRequest_SetOnsuccess},
    {2585, nsIIDBRequest_GetOnerror, nsIIDBRequest_SetOnerror},
    // nsIIDBTransaction (index 296)
    {3034, nsIIDBTransaction_GetDb, xpc_qsGetterOnlyPropertyStub},
    {3037, nsIIDBTransaction_GetMode, xpc_qsGetterOnlyPropertyStub},
    {2541, nsIIDBTransaction_GetError, xpc_qsGetterOnlyPropertyStub},
    {2694, nsIIDBTransaction_GetObjectStoreNames, xpc_qsGetterOnlyPropertyStub},
    {2585, nsIIDBTransaction_GetOnerror, nsIIDBTransaction_SetOnerror},
    {3042, nsIIDBTransaction_GetOncomplete, nsIIDBTransaction_SetOncomplete},
    {2577, nsIIDBTransaction_GetOnabort, nsIIDBTransaction_SetOnabort},
    // nsIIDBOpenDBRequest (index 303)
    {3053, nsIIDBOpenDBRequest_GetOnblocked, nsIIDBOpenDBRequest_SetOnblocked},
    {3063, nsIIDBOpenDBRequest_GetOnupgradeneeded, nsIIDBOpenDBRequest_SetOnupgradeneeded},
    // nsIIDBVersionChangeEvent (index 305)
    {3079, nsIIDBVersionChangeEvent_GetOldVersion, xpc_qsGetterOnlyPropertyStub},
    {3090, nsIIDBVersionChangeEvent_GetNewVersion, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMDOMError (index 307)
    {0, nsIDOMDOMError_GetName, xpc_qsGetterOnlyPropertyStub},
    // nsIDOMFileHandle (index 308)
    {0, nsIDOMFileHandle_GetDOMName, xpc_qsGetterOnlyPropertyStub},
    {326, nsIDOMFileHandle_GetDOMType, xpc_qsGetterOnlyPropertyStub},
    {2577, nsIDOMFileHandle_GetOnabort, nsIDOMFileHandle_SetOnabort},
    {2585, nsIDOMFileHandle_GetOnerror, nsIDOMFileHandle_SetOnerror},
    // nsIDOMFileRequest (index 312)
    {3195, nsIDOMFileRequest_GetLockedFile, xpc_qsGetterOnlyPropertyStub},
    {2559, nsIDOMFileRequest_GetOnprogress, nsIDOMFileRequest_SetOnprogress},
    // nsIDOMLockedFile (index 314)
    {3206, nsIDOMLockedFile_GetFileHandle, xpc_qsGetterOnlyPropertyStub},
    {3037, nsIDOMLockedFile_GetMode, xpc_qsGetterOnlyPropertyStub},
    {3217, nsIDOMLockedFile_GetActive, xpc_qsGetterOnlyPropertyStub},
    {700, nsIDOMLockedFile_GetLocation, nsIDOMLockedFile_SetLocation},
    {3042, nsIDOMLockedFile_GetOncomplete, nsIDOMLockedFile_SetOncomplete},
    {2577, nsIDOMLockedFile_GetOnabort, nsIDOMLockedFile_SetOnabort},
    {2585, nsIDOMLockedFile_GetOnerror, nsIDOMLockedFile_SetOnerror},
};

static const xpc_qsFunctionSpec all_functions[] = {
    // nsIDOMWindow (index 0)
    {21, 0, nsIDOMWindow_GetSelection},
    {34, 1, nsIDOMWindow_ScrollByLines},
    {48, 2, nsIDOMWindow_GetComputedStyle},
    // nsIDOMJSWindow (index 3)
    {131, 1, nsIDOMJSWindow_Dump},
    // nsIDOMCanvasGradient (index 4)
    {185, 2, nsIDOMCanvasGradient_AddColorStop},
    // nsIDOMNamedNodeMap (index 5)
    {229, 1, nsIDOMNamedNodeMap_Item},
    // nsIDOMText (index 6)
    {234, 1, nsIDOMText_SplitText},
    // nsIDOMDOMStringList (index 7)
    {229, 1, nsIDOMDOMStringList_Item},
    {244, 1, nsIDOMDOMStringList_Contains},
    // nsIDOMXULDocument (index 9)
    {253, 1, nsIDOMXULDocument_GetBoxObjectFor},
    // nsIDOMEventTarget (index 10)
    {275, 4, nsIDOMEventTarget_AddEventListener},
    {292, 3, nsIDOMEventTarget_RemoveEventListener},
    {312, 1, nsIDOMEventTarget_DispatchEvent},
    // nsIDOMEvent (index 13)
    {392, 0, nsIDOMEvent_StopPropagation},
    {408, 0, nsIDOMEvent_PreventDefault},
    {423, 3, nsIDOMEvent_InitEvent},
    {450, 0, nsIDOMEvent_StopImmediatePropagation},
    // nsIDOMMouseEvent (index 17)
    {594, 15, nsIDOMMouseEvent_InitMouseEvent},
    {636, 17, nsIDOMMouseEvent_InitNSMouseEvent},
    {653, 1, nsIDOMMouseEvent_GetModifierState},
    // nsIDOMKeyEvent (index 20)
    {687, 10, nsIDOMKeyEvent_InitKeyEvent},
    {653, 1, nsIDOMKeyEvent_GetModifierState},
    // nsIDOMMutationEvent (index 22)
    {760, 8, nsIDOMMutationEvent_InitMutationEvent},
    // nsIDOMDragEvent (index 23)
    {791, 16, nsIDOMDragEvent_InitDragEvent},
    // nsIDOMScrollAreaEvent (index 24)
    {809, 9, nsIDOMScrollAreaEvent_InitScrollAreaEvent},
    // nsIDOMMessageEvent (index 25)
    {900, 7, nsIDOMMessageEvent_InitMessageEvent},
    // nsIDOMMouseScrollEvent (index 26)
    {922, 16, nsIDOMMouseScrollEvent_InitMouseScrollEvent},
    // nsIDOMTouchList (index 27)
    {229, 1, nsIDOMTouchList_Item},
    {1069, 1, nsIDOMTouchList_IdentifiedTouch},
    // nsIDOMTouchEvent (index 29)
    {1122, 12, nsIDOMTouchEvent_InitTouchEvent},
    // nsIDOMHTMLFormElement (index 30)
    {1216, 0, nsIDOMHTMLFormElement_Submit},
    // nsIDOMHTMLInputElement (index 31)
    {1264, 0, nsIDOMHTMLInputElement_Select},
    {1335, 3, nsIDOMHTMLInputElement_SetSelectionRange},
    // nsIDOMHTMLSelectElement (index 33)
    {1431, 2, nsIDOMHTMLSelectElement_Add},
    {1435, 1, nsIDOMHTMLSelectElement_Remove},
    {229, 1, nsIDOMHTMLSelectElement_Item},
    // nsIDOMHTMLTextAreaElement (index 36)
    {1264, 0, nsIDOMHTMLTextAreaElement_Select},
    {1335, 3, nsIDOMHTMLTextAreaElement_SetSelectionRange},
    // nsIDOMHTMLCanvasElement (index 38)
    {1497, 2, nsIDOMHTMLCanvasElement_GetContext},
    {1508, 2, nsIDOMHTMLCanvasElement_ToDataURL},
    // nsIDOMRange (index 40)
    {1602, 2, nsIDOMRange_SetStart},
    {1611, 2, nsIDOMRange_SetEnd},
    {1618, 1, nsIDOMRange_SetStartBefore},
    {1633, 1, nsIDOMRange_SetStartAfter},
    {1647, 1, nsIDOMRange_SetEndBefore},
    {1660, 1, nsIDOMRange_SetEndAfter},
    {1672, 1, nsIDOMRange_Collapse},
    {1681, 1, nsIDOMRange_SelectNode},
    {1692, 1, nsIDOMRange_SelectNodeContents},
    {1711, 2, nsIDOMRange_CompareBoundaryPoints},
    {1733, 0, nsIDOMRange_DeleteContents},
    {1748, 0, nsIDOMRange_ExtractContents},
    {1764, 0, nsIDOMRange_CloneContents},
    {1778, 1, nsIDOMRange_InsertNode},
    {1789, 1, nsIDOMRange_SurroundContents},
    {1806, 0, nsIDOMRange_CloneRange},
    {1817, 0, nsIDOMRange_ToString},
    {1826, 0, nsIDOMRange_Detach},
    {1833, 1, nsIDOMRange_CreateContextualFragment},
    {1858, 2, nsIDOMRange_IsPointInRange},
    {1873, 2, nsIDOMRange_ComparePoint},
    {1886, 1, nsIDOMRange_IntersectsNode},
    {1901, 0, nsIDOMRange_GetClientRects},
    {1916, 0, nsIDOMRange_GetBoundingClientRect},
    // nsIDOMToString (index 64)
    {1817, 0, nsIDOMToString_ToString},
    // nsIDOMStorage (index 65)
    {1938, 2, nsIDOMStorage_SetItem},
    {1946, 1, nsIDOMStorage_GetItem},
    {1954, 1, nsIDOMStorage_Key},
    {1958, 1, nsIDOMStorage_RemoveItem},
    {1969, 0, nsIDOMStorage_Clear},
    // nsIDOMNodeIterator (index 70)
    {1975, 0, nsIDOMNodeIterator_NextNode},
    // nsIDOMXPathExpression (index 71)
    {1984, 3, nsIDOMXPathExpression_Evaluate},
    // nsIDOMXPathNSResolver (index 72)
    {1993, 1, nsIDOMXPathNSResolver_LookupNamespaceURI},
    // nsIDOMXPathResult (index 73)
    {2012, 1, nsIDOMXPathResult_SnapshotItem},
    {2025, 0, nsIDOMXPathResult_IterateNext},
    // nsIDOMNSXPathExpression (index 75)
    {2116, 5, nsIDOMNSXPathExpression_EvaluateWithContext},
    // nsIDOMXULElement (index 76)
    {2380, 0, nsIDOMXULElement_Focus},
    {2386, 0, nsIDOMXULElement_Blur},
    {2391, 0, nsIDOMXULElement_Click},
    {2397, 0, nsIDOMXULElement_DoCommand},
    {2407, 2, nsIDOMXULElement_GetElementsByAttribute},
    {2430, 3, nsIDOMXULElement_GetElementsByAttributeNS},
    // nsIDOMFileReader (index 82)
    {2455, 1, nsIDOMFileReader_ReadAsArrayBuffer},
    {2473, 1, nsIDOMFileReader_ReadAsBinaryString},
    {2492, 2, nsIDOMFileReader_ReadAsText},
    {2503, 1, nsIDOMFileReader_ReadAsDataURL},
    {2517, 0, nsIDOMFileReader_Abort},
    // nsIDOMHTMLAudioElement (index 87)
    {2620, 1, nsIDOMHTMLAudioElement_MozWriteAudio},
    // nsIIDBCursor (index 88)
    {2655, 1, nsIIDBCursor_Continue},
    {2664, 1, nsIIDBCursor_Update},
    {2671, 0, nsIIDBCursor_Delete},
    {2678, 1, nsIIDBCursor_Advance},
    // nsIIDBDatabase (index 92)
    {2711, 2, nsIIDBDatabase_CreateObjectStore},
    {2729, 1, nsIIDBDatabase_DeleteObjectStore},
    {2747, 2, nsIIDBDatabase_Transaction},
    {2759, 2, nsIIDBDatabase_MozCreateFileHandle},
    {2779, 0, nsIIDBDatabase_Close},
    // nsIIDBFactory (index 97)
    {2801, 2, nsIIDBFactory_Open},
    {2806, 1, nsIIDBFactory_DeleteDatabase},
    {2821, 2, nsIIDBFactory_Cmp},
    // nsIIDBIndex (index 100)
    {2873, 1, nsIIDBIndex_Get},
    {2877, 1, nsIIDBIndex_GetKey},
    {2884, 2, nsIIDBIndex_GetAll},
    {2894, 2, nsIIDBIndex_GetAllKeys},
    {2908, 2, nsIIDBIndex_OpenCursor},
    {2919, 2, nsIIDBIndex_OpenKeyCursor},
    {2933, 1, nsIIDBIndex_Count},
    // nsIIDBObjectStore (index 107)
    {2873, 1, nsIIDBObjectStore_Get},
    {2884, 2, nsIIDBObjectStore_GetAll},
    {1431, 2, nsIIDBObjectStore_Add},
    {2996, 2, nsIIDBObjectStore_Put},
    {2671, 1, nsIIDBObjectStore_Delete},
    {1969, 0, nsIIDBObjectStore_Clear},
    {2908, 2, nsIIDBObjectStore_OpenCursor},
    {3000, 3, nsIIDBObjectStore_CreateIndex},
    {1386, 1, nsIIDBObjectStore_Index},
    {3012, 1, nsIIDBObjectStore_DeleteIndex},
    {2933, 1, nsIIDBObjectStore_Count},
    // nsIIDBTransaction (index 118)
    {2861, 1, nsIIDBTransaction_ObjectStore},
    {2517, 0, nsIIDBTransaction_Abort},
    // nsIIndexedDatabaseUsageCallback (index 120)
    {3101, 5, nsIIndexedDatabaseUsageCallback_OnUsageResult},
    // nsIIndexedDatabaseManager (index 121)
    {3115, 4, nsIIndexedDatabaseManager_GetUsageForURI},
    {3130, 4, nsIIndexedDatabaseManager_CancelGetUsageForURI},
    {3151, 3, nsIIndexedDatabaseManager_ClearDatabasesForURI},
    {3172, 1, nsIIndexedDatabaseManager_InitWindowless},
    // nsIDOMFileHandle (index 125)
    {2801, 1, nsIDOMFileHandle_Open},
    {3187, 0, nsIDOMFileHandle_GetFile},
    // nsIDOMLockedFile (index 127)
    {3224, 1, nsIDOMLockedFile_GetMetadata},
    {2455, 1, nsIDOMLockedFile_ReadAsArrayBuffer},
    {2492, 2, nsIDOMLockedFile_ReadAsText},
    {3236, 1, nsIDOMLockedFile_Write},
    {3242, 1, nsIDOMLockedFile_Append},
    {3249, 1, nsIDOMLockedFile_Truncate},
    {3258, 0, nsIDOMLockedFile_Flush},
    {2517, 0, nsIDOMLockedFile_Abort},
};

static const xpc_qsHashEntry tableData[] = {
    /* nsIIDBVersionChangeEvent */ {{0x08a6b8b1, 0x92fa, 0x4f80, {0x98, 0xcc, 0x37, 0x01, 0x43, 0xb1, 0x1f, 0xf3}}, 305, 2, 0, 0, nullptr, 51, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLAudioElement */ {{0xee5df17c, 0x3928, 0x11e2, {0x88, 0x08, 0x10, 0xbf, 0x48, 0xd6, 0x4b, 0xd4}}, 0, 0, 87, 1, nullptr, 90, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMClientRect */ {{0xb2f824c4, 0xd9d3, 0x499b, {0x8d, 0x3b, 0x45, 0xc8, 0x24, 0x54, 0x97, 0xc6}}, 13, 6, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIBoxObject */ {{0xce572460, 0xb0f2, 0x4650, {0xa9, 0xe7, 0xc5, 0x3a, 0x99, 0xd3, 0xb6, 0xad}}, 245, 6, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIIDBRequest */ {{0x006f39d6, 0x342e, 0x4935, {0xa4, 0x38, 0x36, 0x56, 0x11, 0xfd, 0x94, 0x91}}, 289, 7, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMNamedNodeMap */ {{0xa6cf907b, 0x15b3, 0x11d2, {0x93, 0x2e, 0x00, 0x80, 0x5f, 0x8a, 0xdd, 0x32}}, 29, 1, 5, 1, nullptr, XPC_QS_NULL_INDEX, 145},
    /* nsIIndexedDatabaseManager */ {{0xe5168115, 0xbaff, 0x4559, {0x88, 0x7e, 0x7c, 0x04, 0x05, 0xcc, 0x9e, 0x63}}, 0, 0, 121, 4, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIIDBCursorWithValue */ {{0xb6b7e08a, 0x4379, 0x4441, {0xa1, 0x76, 0x44, 0x7c, 0x5c, 0x96, 0xdf, 0x69}}, 266, 1, 0, 0, nullptr, 159, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLSelectElement */ {{0xe85194cf, 0x56e6, 0x44a6, {0x92, 0xd9, 0x00, 0x96, 0xc9, 0xd2, 0x53, 0x6e}}, 172, 9, 33, 3, nullptr, 90, XPC_QS_NULL_INDEX},
    /* nsIDOMMouseScrollEvent */ {{0x2bce5c03, 0x5bed, 0x4c22, {0x8a, 0x6a, 0xa3, 0xac, 0x8f, 0x55, 0x63, 0xd7}}, 83, 1, 26, 1, nullptr, 55, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMEventTarget */ {{0x8e375931, 0x298d, 0x4d0a, {0x9c, 0xb4, 0x56, 0x68, 0xf0, 0xcd, 0xc5, 0xa8}}, 0, 0, 10, 3, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMStorage */ {{0x43e5edad, 0x1e02, 0x42c4, {0x9d, 0x99, 0xc3, 0xd9, 0xde, 0xe2, 0x2a, 0x20}}, 203, 1, 65, 5, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLButtonElement */ {{0x8e40d4d7, 0xc204, 0x4192, {0x80, 0x2a, 0x0b, 0x56, 0x02, 0xe9, 0xc6, 0x69}}, 115, 4, 0, 0, nullptr, 90, 146},
    /* nsIDOMNotifyPaintEvent */ {{0xe3560df8, 0x0926, 0x48da, {0xb1, 0x3a, 0x36, 0xd3, 0x93, 0x8c, 0x95, 0xaf}}, 76, 3, 0, 0, nullptr, 51, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMRect */ {{0x71735f62, 0xac5c, 0x4236, {0x9a, 0x1f, 0x5f, 0xfb, 0x28, 0x0d, 0x53, 0x1c}}, 32, 4, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLFrameElement */ {{0x2aa7855a, 0x0667, 0x47c3, {0xaf, 0x1e, 0x91, 0x01, 0x00, 0x28, 0x16, 0xc1}}, 131, 4, 0, 0, nullptr, 90, XPC_QS_NULL_INDEX},
    /* nsIDOMElementCSSInlineStyle */ {{0x99715845, 0x95fc, 0x4a56, {0xaa, 0x53, 0x21, 0x4b, 0x65, 0xc2, 0x6e, 0x22}}, 31, 1, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMCharacterData */ {{0xcb75c251, 0xafc7, 0x444f, {0xb2, 0xd6, 0xb9, 0x63, 0x55, 0x55, 0xf3, 0xed}}, 22, 2, 0, 0, nullptr, 141, 147},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIIDBObjectStore */ {{0xdd189afd, 0xe1b7, 0x4496, {0xbf, 0x8d, 0x62, 0x9c, 0x58, 0x70, 0x95, 0x95}}, 284, 5, 107, 11, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMText */ {{0x437ed60c, 0xfebd, 0x4bd0, {0x89, 0x2f, 0xcf, 0x35, 0x8a, 0xdc, 0x3c, 0x96}}, 0, 0, 6, 1, nullptr, 35, 148},
    /* nsIDOMPaintRequest */ {{0x9eb5268f, 0x73a4, 0x41da, {0x97, 0x90, 0xd2, 0x1f, 0xce, 0xfd, 0x5f, 0xfa}}, 19, 2, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLStyleElement */ {{0x830d9170, 0xf8eb, 0x4749, {0xb7, 0x21, 0x16, 0xd6, 0x0d, 0x6b, 0x0f, 0x1b}}, 181, 1, 0, 0, nullptr, 90, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMTextMetrics */ {{0x2d01715c, 0xec7d, 0x424a, {0xab, 0x85, 0xe0, 0xfd, 0x70, 0xc8, 0x66, 0x5c}}, 21, 1, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLMeterElement */ {{0xd4466510, 0x8143, 0x11e0, {0xb2, 0x78, 0x08, 0x00, 0x20, 0x0c, 0x9a, 0x66}}, 152, 6, 0, 0, nullptr, 90, XPC_QS_NULL_INDEX},
    /* nsIDOMXULElement */ {{0x3a07dead, 0x39e5, 0x4dad, {0xbc, 0x68, 0x6e, 0xf3, 0x69, 0x99, 0x41, 0x26}}, 211, 34, 76, 6, nullptr, 113, XPC_QS_NULL_INDEX},
    /* nsIDOMEvent */ {{0xc939eab8, 0x1345, 0x4344, {0x87, 0x5b, 0xe0, 0xf2, 0xd8, 0xd8, 0x91, 0x71}}, 36, 8, 13, 4, nullptr, XPC_QS_NULL_INDEX, 149},
    /* nsIDOMToString */ {{0x2a72e20f, 0xe337, 0x4822, {0x89, 0x94, 0x2e, 0x35, 0xb5, 0x55, 0x0d, 0x03}}, 0, 0, 64, 1, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMFileHandle */ {{0x47438729, 0x7f3f, 0x4a66, {0xb6, 0xd4, 0xd1, 0x29, 0x7c, 0x59, 0x3d, 0x46}}, 308, 4, 125, 2, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMMouseEvent */ {{0xafb2e57b, 0x2822, 0x4969, {0xb2, 0xa9, 0x0c, 0xad, 0xa6, 0x85, 0x95, 0x34}}, 44, 15, 17, 3, nullptr, 86, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMLockedFile */ {{0x589e0d26, 0x20b5, 0x4355, {0xac, 0x1e, 0x9c, 0x6f, 0xd0, 0xdd, 0x83, 0xf2}}, 314, 7, 127, 8, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMXPathExpression */ {{0x75506f82, 0xb504, 0x11d5, {0xa7, 0xf2, 0xca, 0x10, 0x8a, 0xb8, 0xb6, 0xfc}}, 0, 0, 71, 1, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMProgressEvent */ {{0xe0682338, 0x4c3f, 0x4d3a, {0x94, 0x87, 0xd7, 0x49, 0x2e, 0xa7, 0x63, 0x35}}, 84, 3, 0, 0, nullptr, 51, 150},
    /* nsIDOMXPathResult */ {{0x75506f84, 0xb504, 0x11d5, {0xa7, 0xf2, 0xca, 0x10, 0x8a, 0xb8, 0xb6, 0xfc}}, 205, 6, 73, 2, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMTouchList */ {{0x60706eb7, 0xd50d, 0x4379, {0xb0, 0x1c, 0xe7, 0x8e, 0x6a, 0xf8, 0x42, 0x13}}, 105, 1, 27, 2, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMXULDocument */ {{0x9230f88f, 0xa61f, 0x4fc2, {0xb0, 0xa3, 0x79, 0xe6, 0x5d, 0x58, 0xf9, 0x4f}}, 0, 0, 9, 1, nullptr, 68, XPC_QS_NULL_INDEX},
    /* nsIDOMRange */ {{0x1f94055c, 0x42e7, 0x4a30, {0x96, 0xa1, 0x6a, 0x80, 0x4f, 0x1c, 0x2d, 0x1e}}, 197, 6, 40, 24, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMDocument */ {{0x9b93f82b, 0x9691, 0x4021, {0x8f, 0x45, 0x1b, 0xf5, 0x05, 0xdb, 0x77, 0xba}}, 24, 3, 0, 0, mozilla::dom::DocumentBinding::sNativePropertyHooks.mNativeProperties.regular, 141, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLBaseElement */ {{0xcc18f6d7, 0x560f, 0x485e, {0xbc, 0x37, 0x23, 0x35, 0x4b, 0x23, 0x84, 0xf4}}, 113, 2, 0, 0, nullptr, 90, 152},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMFileRequest */ {{0x6733d649, 0x0acb, 0x487d, {0x8a, 0x7d, 0xf1, 0x02, 0xac, 0x44, 0x19, 0xe9}}, 312, 2, 0, 0, nullptr, 20, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMCanvasPattern */ {{0x21dea65c, 0x5c08, 0x4eb1, {0xac, 0x82, 0x81, 0xfe, 0x95, 0xbe, 0x77, 0xb8}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLProgressElement */ {{0x275851c9, 0xc3e2, 0x4427, {0xa7, 0x70, 0x3d, 0x2a, 0xaa, 0xd6, 0xc5, 0x46}}, 169, 3, 0, 0, nullptr, 90, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLInputElement */ {{0x83984fd0, 0xb0b2, 0x11e1, {0xaf, 0xa6, 0x08, 0x00, 0x20, 0x0c, 0x9a, 0x66}}, 138, 13, 31, 2, nullptr, 90, XPC_QS_NULL_INDEX},
    /* nsIDOMUIEvent */ {{0xd73852f8, 0x7bd6, 0x477d, {0x82, 0x33, 0x11, 0x7d, 0xbf, 0x83, 0x86, 0x0b}}, 87, 6, 0, 0, nullptr, 51, XPC_QS_NULL_INDEX},
    /* nsIDOMWindow */ {{0x8d86d6b2, 0xfc2c, 0x416a, {0x80, 0x85, 0xf6, 0x70, 0xd5, 0xa3, 0x58, 0x32}}, 0, 8, 0, 3, nullptr, XPC_QS_NULL_INDEX, 154},
    /* nsIDOMMessageEvent */ {{0xbb869a03, 0x5fc0, 0x4a1b, {0x83, 0x8a, 0x34, 0x2e, 0x50, 0x25, 0xfc, 0x05}}, 79, 4, 25, 1, nullptr, 51, XPC_QS_NULL_INDEX},
    /* nsIDOMTouchEvent */ {{0x9a043d55, 0xf59e, 0x4790, {0x8f, 0xc7, 0x1f, 0xab, 0x1c, 0x72, 0x77, 0x32}}, 106, 7, 29, 1, nullptr, 86, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLElement */ {{0x9a677a5b, 0xe6f7, 0x4e2e, {0x9e, 0xf9, 0x22, 0xc2, 0xac, 0x99, 0x67, 0xb3}}, 0, 0, 0, 0, mozilla::dom::HTMLElementBinding::sNativePropertyHooks.mNativeProperties.regular, 113, XPC_QS_NULL_INDEX},
    /* nsIDOMStorageItem */ {{0x0cc37c78, 0x4c5f, 0x48e1, {0xad, 0xfc, 0x74, 0x80, 0xb8, 0xfe, 0x9d, 0xc4}}, 204, 1, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMNotifyAudioAvailableEvent */ {{0x2345d43d, 0x197a, 0x4589, {0xa4, 0xb7, 0x98, 0x3b, 0x41, 0xb7, 0x6c, 0x25}}, 260, 2, 0, 0, nullptr, 51, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLFormElement */ {{0x59c0dc07, 0xd784, 0x410b, {0x8b, 0x5e, 0xc2, 0x6b, 0xaf, 0x7c, 0xb8, 0xa6}}, 126, 5, 30, 1, nullptr, 90, 155},
    /* nsIDOMScrollAreaEvent */ {{0x49ab3d1d, 0xf549, 0x4cdb, {0x90, 0x4c, 0xf6, 0xb6, 0xd3, 0xa0, 0xec, 0x9e}}, 72, 4, 24, 1, nullptr, 86, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIIndexedDatabaseUsageCallback */ {{0x38f15cc7, 0x2df0, 0x4a90, {0x8b, 0x7f, 0x16, 0x06, 0xb2, 0x24, 0x35, 0x22}}, 0, 0, 120, 1, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMMutationEvent */ {{0x982d9800, 0x1402, 0x46e5, {0x8a, 0xd2, 0x56, 0xfb, 0x0f, 0x49, 0x05, 0xef}}, 66, 5, 22, 1, nullptr, 51, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLTitleElement */ {{0xdb0440cc, 0xfb98, 0x4fb0, {0x84, 0xe8, 0x6a, 0xdd, 0x47, 0x64, 0xa4, 0x8f}}, 194, 1, 0, 0, nullptr, 90, 156},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMTouch */ {{0x98bc0f7d, 0x5bff, 0x4387, {0x9c, 0x42, 0x58, 0xaf, 0x54, 0xb4, 0x8d, 0xd5}}, 93, 12, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIIDBDatabase */ {{0x89299bf8, 0xe078, 0x4ebc, {0xab, 0xda, 0xd9, 0x7f, 0xe5, 0x61, 0x86, 0x02}}, 267, 6, 92, 5, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMDragEvent */ {{0x4d0fe952, 0x7ca7, 0x4730, {0xa1, 0x63, 0x44, 0x54, 0xe3, 0x9e, 0xd1, 0x87}}, 71, 1, 23, 1, nullptr, 55, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLIFrameElement */ {{0xa7bd1e34, 0x3969, 0x47ae, {0x8c, 0x1d, 0x29, 0x70, 0x13, 0x2b, 0xa9, 0x25}}, 135, 3, 0, 0, nullptr, 90, XPC_QS_NULL_INDEX},
    /* nsIDOMScreen */ {{0x01e8587b, 0x35a9, 0x4a59, {0x83, 0x49, 0xc7, 0xee, 0x93, 0x84, 0x6f, 0xb2}}, 9, 4, 0, 0, nullptr, 20, 157},
    /* nsIDOMHTMLTextAreaElement */ {{0x2a395065, 0x2d92, 0x48c1, {0xac, 0x00, 0x64, 0x3d, 0xe9, 0xca, 0x68, 0x1b}}, 182, 12, 36, 2, nullptr, 90, 158},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMElement */ {{0xf1465e67, 0x577f, 0x4546, {0xa7, 0xa3, 0xbb, 0x12, 0x93, 0xc0, 0xdd, 0x15}}, 27, 2, 0, 0, mozilla::dom::ElementBinding::sNativePropertyHooks.mNativeProperties.regular, 141, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLMenuElement */ {{0x8a3975c9, 0x729a, 0x45a5, {0xab, 0x20, 0xdd, 0x2b, 0x47, 0xee, 0x95, 0x08}}, 158, 3, 0, 0, nullptr, 90, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIIDBFileHandle */ {{0x7b05f6bb, 0x26b0, 0x4c12, {0xa9, 0xa1, 0xe3, 0x1d, 0xd9, 0x33, 0xde, 0xb8}}, 273, 1, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLCanvasElement */ {{0xa7062fca, 0x41c6, 0x4520, {0xb7, 0x77, 0x3b, 0xb3, 0x0f, 0xd7, 0x72, 0x73}}, 195, 2, 38, 2, nullptr, 90, 159},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIIDBOpenDBRequest */ {{0x2d6c5ef4, 0xb84a, 0x45ae, {0x90, 0x30, 0xeb, 0x6c, 0xfc, 0x65, 0xbb, 0x26}}, 303, 2, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMDOMStringList */ {{0x0bbae65c, 0x1dde, 0x11d9, {0x8c, 0x46, 0x00, 0x0a, 0x95, 0xdc, 0x23, 0x4c}}, 30, 1, 7, 2, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMJSWindow */ {{0x6652c4d2, 0x6b49, 0x424b, {0xaa, 0xf9, 0x91, 0xf9, 0x10, 0x06, 0xfa, 0xb7}}, 0, 0, 3, 1, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMNSXPathExpression */ {{0xce600ca8, 0xe98a, 0x4419, {0xad, 0x61, 0x2f, 0x6d, 0x0c, 0xb0, 0xec, 0xc8}}, 0, 0, 75, 1, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMWindowPerformance */ {{0x2146c906, 0x57f7, 0x486c, {0xa1, 0xb4, 0x8c, 0xdb, 0x57, 0xef, 0x57, 0x7f}}, 8, 1, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMDOMError */ {{0xe4e28307, 0xd409, 0x4cf7, {0x93, 0xcd, 0x6e, 0xa8, 0xe8, 0x89, 0xf8, 0x7a}}, 307, 1, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMNode */ {{0x5e9bcec9, 0x5928, 0x4f77, {0x8a, 0x9c, 0x42, 0x4e, 0xf0, 0x1c, 0x20, 0xe1}}, 0, 0, 0, 0, mozilla::dom::NodeBinding::sNativePropertyHooks.mNativeProperties.regular, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    {{0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}, 0, 0, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLLinkElement */ {{0x5b639ece, 0x7b49, 0x4507, {0x9d, 0x38, 0x55, 0x0b, 0xeb, 0x71, 0x95, 0x5b}}, 151, 1, 0, 0, nullptr, 90, XPC_QS_NULL_INDEX},
    /* nsIDOMKeyEvent */ {{0xffbe684c, 0xca90, 0x4b58, {0xaa, 0x8c, 0x97, 0x27, 0xf9, 0x97, 0xf8, 0x6d}}, 59, 7, 20, 2, nullptr, 86, XPC_QS_NULL_INDEX},
    /* nsIIDBKeyRange */ {{0x8aeb8660, 0x76b3, 0x4651, {0xb8, 0xc2, 0x98, 0x94, 0xae, 0x6d, 0xfe, 0x68}}, 280, 4, 0, 0, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLMenuItemElement */ {{0x685e02ff, 0x8148, 0x4414, {0xa0, 0xd6, 0x31, 0x9e, 0x81, 0x7f, 0x3b, 0x56}}, 0, 0, 0, 0, nullptr, 152, XPC_QS_NULL_INDEX},
    /* nsIDOMSVGElement */ {{0x7ccf8faf, 0x29b4, 0x4113, {0xbb, 0x23, 0xbc, 0x18, 0x7b, 0xac, 0x27, 0xcf}}, 0, 0, 0, 0, mozilla::dom::SVGElementBinding::sNativePropertyHooks.mNativeProperties.regular, 113, XPC_QS_NULL_INDEX},
    /* nsIDOMNodeIterator */ {{0x5af83f50, 0xc8d5, 0x4824, {0xbe, 0x29, 0x1a, 0xa9, 0xd6, 0x40, 0xba, 0xcb}}, 0, 0, 70, 1, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMXPathNSResolver */ {{0x75506f83, 0xb504, 0x11d5, {0xa7, 0xf2, 0xca, 0x10, 0x8a, 0xb8, 0xb6, 0xfc}}, 0, 0, 72, 1, nullptr, XPC_QS_NULL_INDEX, 151},
    /* nsIIDBFactory */ {{0x3c763a8f, 0xdf53, 0x491d, {0x96, 0x35, 0xe1, 0xd9, 0x59, 0xe4, 0x3c, 0x0c}}, 0, 0, 97, 3, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLCommandElement */ {{0xa6963c8f, 0x6475, 0x4631, {0xb7, 0xe0, 0x41, 0xdd, 0x7d, 0xc8, 0xf3, 0x88}}, 119, 7, 0, 0, nullptr, 90, 153},
    /* nsIDOMFileReader */ {{0x62a1628e, 0xc856, 0x4aee, {0x82, 0x73, 0xd0, 0xc6, 0x24, 0x88, 0xe2, 0xca}}, 251, 9, 82, 5, nullptr, 20, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLOptionElement */ {{0x68a5d794, 0x39bf, 0x4b00, {0xae, 0xfe, 0x75, 0x4b, 0x9e, 0x8f, 0x7e, 0xc6}}, 161, 8, 0, 0, nullptr, 90, XPC_QS_NULL_INDEX},
    /* nsIDOMHTMLDocument */ {{0x3f8666a9, 0x76f0, 0x4733, {0xae, 0x11, 0x4a, 0xea, 0x87, 0x53, 0x06, 0x2d}}, 0, 0, 0, 0, mozilla::dom::HTMLDocumentBinding::sNativePropertyHooks.mNativeProperties.regular, 68, XPC_QS_NULL_INDEX},
    /* nsIIDBTransaction */ {{0x3197172b, 0x2f56, 0x4837, {0x94, 0x27, 0x5e, 0x5d, 0x4b, 0x20, 0xa3, 0x63}}, 296, 7, 118, 2, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIDOMCanvasGradient */ {{0xbbb20a59, 0x524e, 0x4662, {0x98, 0x1e, 0x5e, 0x14, 0x28, 0x14, 0xb2, 0x0c}}, 0, 0, 4, 1, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIIDBIndex */ {{0xa859747a, 0x0f05, 0x4dfb, {0x8f, 0x42, 0x05, 0xc6, 0x14, 0x15, 0xd4, 0xe4}}, 274, 6, 100, 7, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX},
    /* nsIIDBCursor */ {{0x148579a3, 0x6b28, 0x4b2a, {0x92, 0xc3, 0xff, 0x57, 0x19, 0xe8, 0xe0, 0x3e}}, 262, 4, 88, 4, nullptr, XPC_QS_NULL_INDEX, XPC_QS_NULL_INDEX}
    };

// Make sure our table indices aren't overflowed
PR_STATIC_ASSERT((sizeof(tableData) / sizeof(tableData[0])) < (1 << (8 * sizeof(tableData[0].parentInterface))));
PR_STATIC_ASSERT((sizeof(tableData) / sizeof(tableData[0])) < (1 << (8 * sizeof(tableData[0].chain))));

static const char stringtab[] = {
  /*     0 */ 'n', 'a', 'm', 'e', '\0',
  /*     5 */ 'p', 'a', 'r', 'e', 'n', 't', '\0',
  /*    12 */ 't', 'o', 'p', '\0',
  /*    16 */ 's', 'e', 'l', 'f', '\0',
  /*    21 */ 'g', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', '\0',
  /*    34 */ 's', 'c', 'r', 'o', 'l', 'l', 'B', 'y', 'L', 'i', 'n', 'e', 's', '\0',
  /*    48 */ 'g', 'e', 't', 'C', 'o', 'm', 'p', 'u', 't', 'e', 'd', 'S', 't', 'y', 'l', 'e', '\0',
  /*    65 */ 's', 'e', 's', 's', 'i', 'o', 'n', 'S', 't', 'o', 'r', 'a', 'g', 'e', '\0',
  /*    80 */ 'l', 'o', 'c', 'a', 'l', 'S', 't', 'o', 'r', 'a', 'g', 'e', '\0',
  /*    93 */ 'o', 'n', 'm', 'o', 'u', 's', 'e', 'e', 'n', 't', 'e', 'r', '\0',
  /*   106 */ 'o', 'n', 'm', 'o', 'u', 's', 'e', 'l', 'e', 'a', 'v', 'e', '\0',
  /*   119 */ 'p', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', '\0',
  /*   131 */ 'd', 'u', 'm', 'p', '\0',
  /*   136 */ 'h', 'e', 'i', 'g', 'h', 't', '\0',
  /*   143 */ 'w', 'i', 'd', 't', 'h', '\0',
  /*   149 */ 'l', 'e', 'f', 't', '\0',
  /*   154 */ 'r', 'i', 'g', 'h', 't', '\0',
  /*   160 */ 'b', 'o', 't', 't', 'o', 'm', '\0',
  /*   167 */ 'c', 'l', 'i', 'e', 'n', 't', 'R', 'e', 'c', 't', '\0',
  /*   178 */ 'r', 'e', 'a', 's', 'o', 'n', '\0',
  /*   185 */ 'a', 'd', 'd', 'C', 'o', 'l', 'o', 'r', 'S', 't', 'o', 'p', '\0',
  /*   198 */ 'd', 'a', 't', 'a', '\0',
  /*   203 */ 'l', 'e', 'n', 'g', 't', 'h', '\0',
  /*   210 */ 'o', 'n', 'r', 'e', 'a', 'd', 'y', 's', 't', 'a', 't', 'e', 'c', 'h', 'a', 'n', 'g', 'e', '\0',
  /*   229 */ 'i', 't', 'e', 'm', '\0',
  /*   234 */ 's', 'p', 'l', 'i', 't', 'T', 'e', 'x', 't', '\0',
  /*   244 */ 'c', 'o', 'n', 't', 'a', 'i', 'n', 's', '\0',
  /*   253 */ 'g', 'e', 't', 'B', 'o', 'x', 'O', 'b', 'j', 'e', 'c', 't', 'F', 'o', 'r', '\0',
  /*   269 */ 's', 't', 'y', 'l', 'e', '\0',
  /*   275 */ 'a', 'd', 'd', 'E', 'v', 'e', 'n', 't', 'L', 'i', 's', 't', 'e', 'n', 'e', 'r', '\0',
  /*   292 */ 'r', 'e', 'm', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 'L', 'i', 's', 't', 'e', 'n', 'e', 'r', '\0',
  /*   312 */ 'd', 'i', 's', 'p', 'a', 't', 'c', 'h', 'E', 'v', 'e', 'n', 't', '\0',
  /*   326 */ 't', 'y', 'p', 'e', '\0',
  /*   331 */ 't', 'a', 'r', 'g', 'e', 't', '\0',
  /*   338 */ 'c', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'a', 'r', 'g', 'e', 't', '\0',
  /*   352 */ 'e', 'v', 'e', 'n', 't', 'P', 'h', 'a', 's', 'e', '\0',
  /*   363 */ 'b', 'u', 'b', 'b', 'l', 'e', 's', '\0',
  /*   371 */ 'c', 'a', 'n', 'c', 'e', 'l', 'a', 'b', 'l', 'e', '\0',
  /*   382 */ 't', 'i', 'm', 'e', 'S', 't', 'a', 'm', 'p', '\0',
  /*   392 */ 's', 't', 'o', 'p', 'P', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'i', 'o', 'n', '\0',
  /*   408 */ 'p', 'r', 'e', 'v', 'e', 'n', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', '\0',
  /*   423 */ 'i', 'n', 'i', 't', 'E', 'v', 'e', 'n', 't', '\0',
  /*   433 */ 'd', 'e', 'f', 'a', 'u', 'l', 't', 'P', 'r', 'e', 'v', 'e', 'n', 't', 'e', 'd', '\0',
  /*   450 */ 's', 't', 'o', 'p', 'I', 'm', 'm', 'e', 'd', 'i', 'a', 't', 'e', 'P', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'i', 'o', 'n', '\0',
  /*   475 */ 's', 'c', 'r', 'e', 'e', 'n', 'X', '\0',
  /*   483 */ 's', 'c', 'r', 'e', 'e', 'n', 'Y', '\0',
  /*   491 */ 'm', 'o', 'z', 'M', 'o', 'v', 'e', 'm', 'e', 'n', 't', 'X', '\0',
  /*   504 */ 'm', 'o', 'z', 'M', 'o', 'v', 'e', 'm', 'e', 'n', 't', 'Y', '\0',
  /*   517 */ 'c', 'l', 'i', 'e', 'n', 't', 'X', '\0',
  /*   525 */ 'c', 'l', 'i', 'e', 'n', 't', 'Y', '\0',
  /*   533 */ 'c', 't', 'r', 'l', 'K', 'e', 'y', '\0',
  /*   541 */ 's', 'h', 'i', 'f', 't', 'K', 'e', 'y', '\0',
  /*   550 */ 'a', 'l', 't', 'K', 'e', 'y', '\0',
  /*   557 */ 'm', 'e', 't', 'a', 'K', 'e', 'y', '\0',
  /*   565 */ 'b', 'u', 't', 't', 'o', 'n', '\0',
  /*   572 */ 'b', 'u', 't', 't', 'o', 'n', 's', '\0',
  /*   580 */ 'r', 'e', 'l', 'a', 't', 'e', 'd', 'T', 'a', 'r', 'g', 'e', 't', '\0',
  /*   594 */ 'i', 'n', 'i', 't', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', '\0',
  /*   609 */ 'm', 'o', 'z', 'P', 'r', 'e', 's', 's', 'u', 'r', 'e', '\0',
  /*   621 */ 'm', 'o', 'z', 'I', 'n', 'p', 'u', 't', 'S', 'o', 'u', 'r', 'c', 'e', '\0',
  /*   636 */ 'i', 'n', 'i', 't', 'N', 'S', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', '\0',
  /*   653 */ 'g', 'e', 't', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 'S', 't', 'a', 't', 'e', '\0',
  /*   670 */ 'c', 'h', 'a', 'r', 'C', 'o', 'd', 'e', '\0',
  /*   679 */ 'k', 'e', 'y', 'C', 'o', 'd', 'e', '\0',
  /*   687 */ 'i', 'n', 'i', 't', 'K', 'e', 'y', 'E', 'v', 'e', 'n', 't', '\0',
  /*   700 */ 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', '\0',
  /*   709 */ 'r', 'e', 'l', 'a', 't', 'e', 'd', 'N', 'o', 'd', 'e', '\0',
  /*   721 */ 'p', 'r', 'e', 'v', 'V', 'a', 'l', 'u', 'e', '\0',
  /*   731 */ 'n', 'e', 'w', 'V', 'a', 'l', 'u', 'e', '\0',
  /*   740 */ 'a', 't', 't', 'r', 'N', 'a', 'm', 'e', '\0',
  /*   749 */ 'a', 't', 't', 'r', 'C', 'h', 'a', 'n', 'g', 'e', '\0',
  /*   760 */ 'i', 'n', 'i', 't', 'M', 'u', 't', 'a', 't', 'i', 'o', 'n', 'E', 'v', 'e', 'n', 't', '\0',
  /*   778 */ 'd', 'a', 't', 'a', 'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', '\0',
  /*   791 */ 'i', 'n', 'i', 't', 'D', 'r', 'a', 'g', 'E', 'v', 'e', 'n', 't', '\0',
  /*   805 */ 'x', '\0',
  /*   807 */ 'y', '\0',
  /*   809 */ 'i', 'n', 'i', 't', 'S', 'c', 'r', 'o', 'l', 'l', 'A', 'r', 'e', 'a', 'E', 'v', 'e', 'n', 't', '\0',
  /*   829 */ 'c', 'l', 'i', 'e', 'n', 't', 'R', 'e', 'c', 't', 's', '\0',
  /*   841 */ 'b', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'C', 'l', 'i', 'e', 'n', 't', 'R', 'e', 'c', 't', '\0',
  /*   860 */ 'p', 'a', 'i', 'n', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', 's', '\0',
  /*   874 */ 'o', 'r', 'i', 'g', 'i', 'n', '\0',
  /*   881 */ 'l', 'a', 's', 't', 'E', 'v', 'e', 'n', 't', 'I', 'd', '\0',
  /*   893 */ 's', 'o', 'u', 'r', 'c', 'e', '\0',
  /*   900 */ 'i', 'n', 'i', 't', 'M', 'e', 's', 's', 'a', 'g', 'e', 'E', 'v', 'e', 'n', 't', '\0',
  /*   917 */ 'a', 'x', 'i', 's', '\0',
  /*   922 */ 'i', 'n', 'i', 't', 'M', 'o', 'u', 's', 'e', 'S', 'c', 'r', 'o', 'l', 'l', 'E', 'v', 'e', 'n', 't', '\0',
  /*   943 */ 'l', 'e', 'n', 'g', 't', 'h', 'C', 'o', 'm', 'p', 'u', 't', 'a', 'b', 'l', 'e', '\0',
  /*   960 */ 'l', 'o', 'a', 'd', 'e', 'd', '\0',
  /*   967 */ 't', 'o', 't', 'a', 'l', '\0',
  /*   973 */ 'w', 'h', 'i', 'c', 'h', '\0',
  /*   979 */ 'r', 'a', 'n', 'g', 'e', 'P', 'a', 'r', 'e', 'n', 't', '\0',
  /*   991 */ 'r', 'a', 'n', 'g', 'e', 'O', 'f', 'f', 's', 'e', 't', '\0',
  /*  1003 */ 'p', 'a', 'g', 'e', 'X', '\0',
  /*  1009 */ 'p', 'a', 'g', 'e', 'Y', '\0',
  /*  1015 */ 'i', 's', 'C', 'h', 'a', 'r', '\0',
  /*  1022 */ 'i', 'd', 'e', 'n', 't', 'i', 'f', 'i', 'e', 'r', '\0',
  /*  1033 */ 'r', 'a', 'd', 'i', 'u', 's', 'X', '\0',
  /*  1041 */ 'r', 'a', 'd', 'i', 'u', 's', 'Y', '\0',
  /*  1049 */ 'r', 'o', 't', 'a', 't', 'i', 'o', 'n', 'A', 'n', 'g', 'l', 'e', '\0',
  /*  1063 */ 'f', 'o', 'r', 'c', 'e', '\0',
  /*  1069 */ 'i', 'd', 'e', 'n', 't', 'i', 'f', 'i', 'e', 'd', 'T', 'o', 'u', 'c', 'h', '\0',
  /*  1085 */ 't', 'o', 'u', 'c', 'h', 'e', 's', '\0',
  /*  1093 */ 't', 'a', 'r', 'g', 'e', 't', 'T', 'o', 'u', 'c', 'h', 'e', 's', '\0',
  /*  1107 */ 'c', 'h', 'a', 'n', 'g', 'e', 'd', 'T', 'o', 'u', 'c', 'h', 'e', 's', '\0',
  /*  1122 */ 'i', 'n', 'i', 't', 'T', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', '\0',
  /*  1137 */ 'h', 'r', 'e', 'f', '\0',
  /*  1142 */ 'f', 'o', 'r', 'm', '\0',
  /*  1147 */ 'v', 'a', 'l', 'u', 'e', '\0',
  /*  1153 */ 'd', 'i', 's', 'a', 'b', 'l', 'e', 'd', '\0',
  /*  1162 */ 'l', 'a', 'b', 'e', 'l', '\0',
  /*  1168 */ 'i', 'c', 'o', 'n', '\0',
  /*  1173 */ 'd', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'h', 'e', 'c', 'k', 'e', 'd', '\0',
  /*  1188 */ 'c', 'h', 'e', 'c', 'k', 'e', 'd', '\0',
  /*  1196 */ 'r', 'a', 'd', 'i', 'o', 'g', 'r', 'o', 'u', 'p', '\0',
  /*  1207 */ 'e', 'l', 'e', 'm', 'e', 'n', 't', 's', '\0',
  /*  1216 */ 's', 'u', 'b', 'm', 'i', 't', '\0',
  /*  1223 */ 'a', 'c', 't', 'i', 'o', 'n', '\0',
  /*  1230 */ 's', 'r', 'c', '\0',
  /*  1234 */ 'c', 'o', 'n', 't', 'e', 'n', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', '\0',
  /*  1250 */ 'c', 'o', 'n', 't', 'e', 'n', 't', 'W', 'i', 'n', 'd', 'o', 'w', '\0',
  /*  1264 */ 's', 'e', 'l', 'e', 'c', 't', '\0',
  /*  1271 */ 'f', 'i', 'l', 'e', 's', '\0',
  /*  1277 */ 't', 'e', 'x', 't', 'L', 'e', 'n', 'g', 't', 'h', '\0',
  /*  1288 */ 's', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'S', 't', 'a', 'r', 't', '\0',
  /*  1303 */ 's', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'E', 'n', 'd', '\0',
  /*  1316 */ 's', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '\0',
  /*  1335 */ 's', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'R', 'a', 'n', 'g', 'e', '\0',
  /*  1353 */ 'm', 'i', 'n', '\0',
  /*  1357 */ 'm', 'a', 'x', '\0',
  /*  1361 */ 'l', 'o', 'w', '\0',
  /*  1365 */ 'h', 'i', 'g', 'h', '\0',
  /*  1370 */ 'o', 'p', 't', 'i', 'm', 'u', 'm', '\0',
  /*  1378 */ 'c', 'o', 'm', 'p', 'a', 'c', 't', '\0',
  /*  1386 */ 'i', 'n', 'd', 'e', 'x', '\0',
  /*  1392 */ 's', 'e', 'l', 'e', 'c', 't', 'e', 'd', '\0',
  /*  1401 */ 't', 'e', 'x', 't', '\0',
  /*  1406 */ 'd', 'e', 'f', 'a', 'u', 'l', 't', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', '\0',
  /*  1422 */ 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', '\0',
  /*  1431 */ 'a', 'd', 'd', '\0',
  /*  1435 */ 'r', 'e', 'm', 'o', 'v', 'e', '\0',
  /*  1442 */ 's', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'I', 'n', 'd', 'e', 'x', '\0',
  /*  1456 */ 'o', 'p', 't', 'i', 'o', 'n', 's', '\0',
  /*  1464 */ 's', 'i', 'z', 'e', '\0',
  /*  1469 */ 'r', 'o', 'w', 's', '\0',
  /*  1474 */ 'd', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'e', '\0',
  /*  1487 */ 'c', 'o', 'l', 's', '\0',
  /*  1492 */ 'w', 'r', 'a', 'p', '\0',
  /*  1497 */ 'g', 'e', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', '\0',
  /*  1508 */ 't', 'o', 'D', 'a', 't', 'a', 'U', 'R', 'L', '\0',
  /*  1518 */ 's', 't', 'a', 'r', 't', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', '\0',
  /*  1533 */ 's', 't', 'a', 'r', 't', 'O', 'f', 'f', 's', 'e', 't', '\0',
  /*  1545 */ 'e', 'n', 'd', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', '\0',
  /*  1558 */ 'e', 'n', 'd', 'O', 'f', 'f', 's', 'e', 't', '\0',
  /*  1568 */ 'c', 'o', 'l', 'l', 'a', 'p', 's', 'e', 'd', '\0',
  /*  1578 */ 'c', 'o', 'm', 'm', 'o', 'n', 'A', 'n', 'c', 'e', 's', 't', 'o', 'r', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', '\0',
  /*  1602 */ 's', 'e', 't', 'S', 't', 'a', 'r', 't', '\0',
  /*  1611 */ 's', 'e', 't', 'E', 'n', 'd', '\0',
  /*  1618 */ 's', 'e', 't', 'S', 't', 'a', 'r', 't', 'B', 'e', 'f', 'o', 'r', 'e', '\0',
  /*  1633 */ 's', 'e', 't', 'S', 't', 'a', 'r', 't', 'A', 'f', 't', 'e', 'r', '\0',
  /*  1647 */ 's', 'e', 't', 'E', 'n', 'd', 'B', 'e', 'f', 'o', 'r', 'e', '\0',
  /*  1660 */ 's', 'e', 't', 'E', 'n', 'd', 'A', 'f', 't', 'e', 'r', '\0',
  /*  1672 */ 'c', 'o', 'l', 'l', 'a', 'p', 's', 'e', '\0',
  /*  1681 */ 's', 'e', 'l', 'e', 'c', 't', 'N', 'o', 'd', 'e', '\0',
  /*  1692 */ 's', 'e', 'l', 'e', 'c', 't', 'N', 'o', 'd', 'e', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', '\0',
  /*  1711 */ 'c', 'o', 'm', 'p', 'a', 'r', 'e', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'P', 'o', 'i', 'n', 't', 's', '\0',
  /*  1733 */ 'd', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', '\0',
  /*  1748 */ 'e', 'x', 't', 'r', 'a', 'c', 't', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', '\0',
  /*  1764 */ 'c', 'l', 'o', 'n', 'e', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', '\0',
  /*  1778 */ 'i', 'n', 's', 'e', 'r', 't', 'N', 'o', 'd', 'e', '\0',
  /*  1789 */ 's', 'u', 'r', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', '\0',
  /*  1806 */ 'c', 'l', 'o', 'n', 'e', 'R', 'a', 'n', 'g', 'e', '\0',
  /*  1817 */ 't', 'o', 'S', 't', 'r', 'i', 'n', 'g', '\0',
  /*  1826 */ 'd', 'e', 't', 'a', 'c', 'h', '\0',
  /*  1833 */ 'c', 'r', 'e', 'a', 't', 'e', 'C', 'o', 'n', 't', 'e', 'x', 't', 'u', 'a', 'l', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', '\0',
  /*  1858 */ 'i', 's', 'P', 'o', 'i', 'n', 't', 'I', 'n', 'R', 'a', 'n', 'g', 'e', '\0',
  /*  1873 */ 'c', 'o', 'm', 'p', 'a', 'r', 'e', 'P', 'o', 'i', 'n', 't', '\0',
  /*  1886 */ 'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 's', 'N', 'o', 'd', 'e', '\0',
  /*  1901 */ 'g', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'R', 'e', 'c', 't', 's', '\0',
  /*  1916 */ 'g', 'e', 't', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'C', 'l', 'i', 'e', 'n', 't', 'R', 'e', 'c', 't', '\0',
  /*  1938 */ 's', 'e', 't', 'I', 't', 'e', 'm', '\0',
  /*  1946 */ 'g', 'e', 't', 'I', 't', 'e', 'm', '\0',
  /*  1954 */ 'k', 'e', 'y', '\0',
  /*  1958 */ 'r', 'e', 'm', 'o', 'v', 'e', 'I', 't', 'e', 'm', '\0',
  /*  1969 */ 'c', 'l', 'e', 'a', 'r', '\0',
  /*  1975 */ 'n', 'e', 'x', 't', 'N', 'o', 'd', 'e', '\0',
  /*  1984 */ 'e', 'v', 'a', 'l', 'u', 'a', 't', 'e', '\0',
  /*  1993 */ 'l', 'o', 'o', 'k', 'u', 'p', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'U', 'R', 'I', '\0',
  /*  2012 */ 's', 'n', 'a', 'p', 's', 'h', 'o', 't', 'I', 't', 'e', 'm', '\0',
  /*  2025 */ 'i', 't', 'e', 'r', 'a', 't', 'e', 'N', 'e', 'x', 't', '\0',
  /*  2037 */ 's', 'n', 'a', 'p', 's', 'h', 'o', 't', 'L', 'e', 'n', 'g', 't', 'h', '\0',
  /*  2052 */ 'r', 'e', 's', 'u', 'l', 't', 'T', 'y', 'p', 'e', '\0',
  /*  2063 */ 'n', 'u', 'm', 'b', 'e', 'r', 'V', 'a', 'l', 'u', 'e', '\0',
  /*  2075 */ 's', 't', 'r', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', '\0',
  /*  2087 */ 'b', 'o', 'o', 'l', 'e', 'a', 'n', 'V', 'a', 'l', 'u', 'e', '\0',
  /*  2100 */ 's', 'i', 'n', 'g', 'l', 'e', 'N', 'o', 'd', 'e', 'V', 'a', 'l', 'u', 'e', '\0',
  /*  2116 */ 'e', 'v', 'a', 'l', 'u', 'a', 't', 'e', 'W', 'i', 't', 'h', 'C', 'o', 'n', 't', 'e', 'x', 't', '\0',
  /*  2136 */ 'i', 'd', '\0',
  /*  2139 */ 'c', 'l', 'a', 's', 's', 'N', 'a', 'm', 'e', '\0',
  /*  2149 */ 'a', 'l', 'i', 'g', 'n', '\0',
  /*  2155 */ 'd', 'i', 'r', '\0',
  /*  2159 */ 'f', 'l', 'e', 'x', '\0',
  /*  2164 */ 'f', 'l', 'e', 'x', 'G', 'r', 'o', 'u', 'p', '\0',
  /*  2174 */ 'o', 'r', 'd', 'i', 'n', 'a', 'l', '\0',
  /*  2182 */ 'o', 'r', 'i', 'e', 'n', 't', '\0',
  /*  2189 */ 'p', 'a', 'c', 'k', '\0',
  /*  2194 */ 'h', 'i', 'd', 'd', 'e', 'n', '\0',
  /*  2201 */ 'o', 'b', 's', 'e', 'r', 'v', 'e', 's', '\0',
  /*  2210 */ 'm', 'e', 'n', 'u', '\0',
  /*  2215 */ 'c', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', '\0',
  /*  2227 */ 't', 'o', 'o', 'l', 't', 'i', 'p', '\0',
  /*  2235 */ 'm', 'i', 'n', 'W', 'i', 'd', 't', 'h', '\0',
  /*  2244 */ 'm', 'i', 'n', 'H', 'e', 'i', 'g', 'h', 't', '\0',
  /*  2254 */ 'm', 'a', 'x', 'W', 'i', 'd', 't', 'h', '\0',
  /*  2263 */ 'm', 'a', 'x', 'H', 'e', 'i', 'g', 'h', 't', '\0',
  /*  2273 */ 'p', 'e', 'r', 's', 'i', 's', 't', '\0',
  /*  2281 */ 'd', 'a', 't', 'a', 's', 'o', 'u', 'r', 'c', 'e', 's', '\0',
  /*  2293 */ 'r', 'e', 'f', '\0',
  /*  2297 */ 't', 'o', 'o', 'l', 't', 'i', 'p', 'T', 'e', 'x', 't', '\0',
  /*  2309 */ 's', 't', 'a', 't', 'u', 's', 'T', 'e', 'x', 't', '\0',
  /*  2320 */ 'a', 'l', 'l', 'o', 'w', 'E', 'v', 'e', 'n', 't', 's', '\0',
  /*  2332 */ 'd', 'a', 't', 'a', 'b', 'a', 's', 'e', '\0',
  /*  2341 */ 'b', 'u', 'i', 'l', 'd', 'e', 'r', '\0',
  /*  2349 */ 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e', '\0',
  /*  2358 */ 'c', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', 's', '\0',
  /*  2370 */ 'b', 'o', 'x', 'O', 'b', 'j', 'e', 'c', 't', '\0',
  /*  2380 */ 'f', 'o', 'c', 'u', 's', '\0',
  /*  2386 */ 'b', 'l', 'u', 'r', '\0',
  /*  2391 */ 'c', 'l', 'i', 'c', 'k', '\0',
  /*  2397 */ 'd', 'o', 'C', 'o', 'm', 'm', 'a', 'n', 'd', '\0',
  /*  2407 */ 'g', 'e', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 's', 'B', 'y', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', '\0',
  /*  2430 */ 'g', 'e', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 's', 'B', 'y', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'N', 'S', '\0',
  /*  2455 */ 'r', 'e', 'a', 'd', 'A', 's', 'A', 'r', 'r', 'a', 'y', 'B', 'u', 'f', 'f', 'e', 'r', '\0',
  /*  2473 */ 'r', 'e', 'a', 'd', 'A', 's', 'B', 'i', 'n', 'a', 'r', 'y', 'S', 't', 'r', 'i', 'n', 'g', '\0',
  /*  2492 */ 'r', 'e', 'a', 'd', 'A', 's', 'T', 'e', 'x', 't', '\0',
  /*  2503 */ 'r', 'e', 'a', 'd', 'A', 's', 'D', 'a', 't', 'a', 'U', 'R', 'L', '\0',
  /*  2517 */ 'a', 'b', 'o', 'r', 't', '\0',
  /*  2523 */ 'r', 'e', 'a', 'd', 'y', 'S', 't', 'a', 't', 'e', '\0',
  /*  2534 */ 'r', 'e', 's', 'u', 'l', 't', '\0',
  /*  2541 */ 'e', 'r', 'r', 'o', 'r', '\0',
  /*  2547 */ 'o', 'n', 'l', 'o', 'a', 'd', 's', 't', 'a', 'r', 't', '\0',
  /*  2559 */ 'o', 'n', 'p', 'r', 'o', 'g', 'r', 'e', 's', 's', '\0',
  /*  2570 */ 'o', 'n', 'l', 'o', 'a', 'd', '\0',
  /*  2577 */ 'o', 'n', 'a', 'b', 'o', 'r', 't', '\0',
  /*  2585 */ 'o', 'n', 'e', 'r', 'r', 'o', 'r', '\0',
  /*  2593 */ 'o', 'n', 'l', 'o', 'a', 'd', 'e', 'n', 'd', '\0',
  /*  2603 */ 'f', 'r', 'a', 'm', 'e', 'B', 'u', 'f', 'f', 'e', 'r', '\0',
  /*  2615 */ 't', 'i', 'm', 'e', '\0',
  /*  2620 */ 'm', 'o', 'z', 'W', 'r', 'i', 't', 'e', 'A', 'u', 'd', 'i', 'o', '\0',
  /*  2634 */ 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '\0',
  /*  2644 */ 'p', 'r', 'i', 'm', 'a', 'r', 'y', 'K', 'e', 'y', '\0',
  /*  2655 */ 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\0',
  /*  2664 */ 'u', 'p', 'd', 'a', 't', 'e', '\0',
  /*  2671 */ 'd', 'e', 'l', 'e', 't', 'e', '\0',
  /*  2678 */ 'a', 'd', 'v', 'a', 'n', 'c', 'e', '\0',
  /*  2686 */ 'v', 'e', 'r', 's', 'i', 'o', 'n', '\0',
  /*  2694 */ 'o', 'b', 'j', 'e', 'c', 't', 'S', 't', 'o', 'r', 'e', 'N', 'a', 'm', 'e', 's', '\0',
  /*  2711 */ 'c', 'r', 'e', 'a', 't', 'e', 'O', 'b', 'j', 'e', 'c', 't', 'S', 't', 'o', 'r', 'e', '\0',
  /*  2729 */ 'd', 'e', 'l', 'e', 't', 'e', 'O', 'b', 'j', 'e', 'c', 't', 'S', 't', 'o', 'r', 'e', '\0',
  /*  2747 */ 't', 'r', 'a', 'n', 's', 'a', 'c', 't', 'i', 'o', 'n', '\0',
  /*  2759 */ 'm', 'o', 'z', 'C', 'r', 'e', 'a', 't', 'e', 'F', 'i', 'l', 'e', 'H', 'a', 'n', 'd', 'l', 'e', '\0',
  /*  2779 */ 'c', 'l', 'o', 's', 'e', '\0',
  /*  2785 */ 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 'c', 'h', 'a', 'n', 'g', 'e', '\0',
  /*  2801 */ 'o', 'p', 'e', 'n', '\0',
  /*  2806 */ 'd', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 'b', 'a', 's', 'e', '\0',
  /*  2821 */ 'c', 'm', 'p', '\0',
  /*  2825 */ 's', 't', 'o', 'r', 'e', 'N', 'a', 'm', 'e', '\0',
  /*  2835 */ 'k', 'e', 'y', 'P', 'a', 't', 'h', '\0',
  /*  2843 */ 'u', 'n', 'i', 'q', 'u', 'e', '\0',
  /*  2850 */ 'm', 'u', 'l', 't', 'i', 'E', 'n', 't', 'r', 'y', '\0',
  /*  2861 */ 'o', 'b', 'j', 'e', 'c', 't', 'S', 't', 'o', 'r', 'e', '\0',
  /*  2873 */ 'g', 'e', 't', '\0',
  /*  2877 */ 'g', 'e', 't', 'K', 'e', 'y', '\0',
  /*  2884 */ 'm', 'o', 'z', 'G', 'e', 't', 'A', 'l', 'l', '\0',
  /*  2894 */ 'm', 'o', 'z', 'G', 'e', 't', 'A', 'l', 'l', 'K', 'e', 'y', 's', '\0',
  /*  2908 */ 'o', 'p', 'e', 'n', 'C', 'u', 'r', 's', 'o', 'r', '\0',
  /*  2919 */ 'o', 'p', 'e', 'n', 'K', 'e', 'y', 'C', 'u', 'r', 's', 'o', 'r', '\0',
  /*  2933 */ 'c', 'o', 'u', 'n', 't', '\0',
  /*  2939 */ 'l', 'o', 'w', 'e', 'r', '\0',
  /*  2945 */ 'u', 'p', 'p', 'e', 'r', '\0',
  /*  2951 */ 'l', 'o', 'w', 'e', 'r', 'O', 'p', 'e', 'n', '\0',
  /*  2961 */ 'u', 'p', 'p', 'e', 'r', 'O', 'p', 'e', 'n', '\0',
  /*  2971 */ 'i', 'n', 'd', 'e', 'x', 'N', 'a', 'm', 'e', 's', '\0',
  /*  2982 */ 'a', 'u', 't', 'o', 'I', 'n', 'c', 'r', 'e', 'm', 'e', 'n', 't', '\0',
  /*  2996 */ 'p', 'u', 't', '\0',
  /*  3000 */ 'c', 'r', 'e', 'a', 't', 'e', 'I', 'n', 'd', 'e', 'x', '\0',
  /*  3012 */ 'd', 'e', 'l', 'e', 't', 'e', 'I', 'n', 'd', 'e', 'x', '\0',
  /*  3024 */ 'o', 'n', 's', 'u', 'c', 'c', 'e', 's', 's', '\0',
  /*  3034 */ 'd', 'b', '\0',
  /*  3037 */ 'm', 'o', 'd', 'e', '\0',
  /*  3042 */ 'o', 'n', 'c', 'o', 'm', 'p', 'l', 'e', 't', 'e', '\0',
  /*  3053 */ 'o', 'n', 'b', 'l', 'o', 'c', 'k', 'e', 'd', '\0',
  /*  3063 */ 'o', 'n', 'u', 'p', 'g', 'r', 'a', 'd', 'e', 'n', 'e', 'e', 'd', 'e', 'd', '\0',
  /*  3079 */ 'o', 'l', 'd', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\0',
  /*  3090 */ 'n', 'e', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\0',
  /*  3101 */ 'o', 'n', 'U', 's', 'a', 'g', 'e', 'R', 'e', 's', 'u', 'l', 't', '\0',
  /*  3115 */ 'g', 'e', 't', 'U', 's', 'a', 'g', 'e', 'F', 'o', 'r', 'U', 'R', 'I', '\0',
  /*  3130 */ 'c', 'a', 'n', 'c', 'e', 'l', 'G', 'e', 't', 'U', 's', 'a', 'g', 'e', 'F', 'o', 'r', 'U', 'R', 'I', '\0',
  /*  3151 */ 'c', 'l', 'e', 'a', 'r', 'D', 'a', 't', 'a', 'b', 'a', 's', 'e', 's', 'F', 'o', 'r', 'U', 'R', 'I', '\0',
  /*  3172 */ 'i', 'n', 'i', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'l', 'e', 's', 's', '\0',
  /*  3187 */ 'g', 'e', 't', 'F', 'i', 'l', 'e', '\0',
  /*  3195 */ 'l', 'o', 'c', 'k', 'e', 'd', 'F', 'i', 'l', 'e', '\0',
  /*  3206 */ 'f', 'i', 'l', 'e', 'H', 'a', 'n', 'd', 'l', 'e', '\0',
  /*  3217 */ 'a', 'c', 't', 'i', 'v', 'e', '\0',
  /*  3224 */ 'g', 'e', 't', 'M', 'e', 't', 'a', 'd', 'a', 't', 'a', '\0',
  /*  3236 */ 'w', 'r', 'i', 't', 'e', '\0',
  /*  3242 */ 'a', 'p', 'p', 'e', 'n', 'd', '\0',
  /*  3249 */ 't', 'r', 'u', 'n', 'c', 'a', 't', 'e', '\0',
  /*  3258 */ 'f', 'l', 'u', 's', 'h', '\0' };

PR_STATIC_ASSERT(sizeof(stringtab) < (1 << (8 * sizeof(all_properties[0].name_index))));
PR_STATIC_ASSERT(sizeof(stringtab) < (1 << (8 * sizeof(all_functions[0].name_index))));

namespace xpc {
bool DOM_DefineQuickStubs(JSContext *cx, JSObject *proto, unsigned flags, uint32_t count, const nsID **iids)
{
    return !!xpc_qsDefineQuickStubs(cx, proto, flags, count, iids, 145, tableData, all_properties, all_functions, stringtab);
}
} // namespace xpc


