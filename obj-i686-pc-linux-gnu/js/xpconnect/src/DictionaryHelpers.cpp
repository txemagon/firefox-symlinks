/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "DictionaryHelpers.h"
#include "nsContentUtils.h"
#include "XPCQuickStubs.h"
#include "nsIDOMApplicationRegistry.h"
#include "nsIDOMEvent.h"
#include "nsIDOMUIEvent.h"
#include "nsIDOMMouseEvent.h"
#include "nsIDOMWheelEvent.h"
#include "nsIIDBDatabase.h"
#include "nsIIDBObjectStore.h"
#include "nsIDOMGeoGeolocation.h"
#include "nsIDOMLockedFile.h"
#include "nsIXMLHttpRequest.h"
#include "nsIDOMDeviceStorage.h"
#include "nsIDOMCameraManager.h"
#include "nsIDOMCameraManager.h"
#include "nsIDOMCameraManager.h"
#include "nsIDOMCameraManager.h"
#include "nsIDOMCameraManager.h"
#include "nsIDOMCameraManager.h"
#include "nsIDOMArchiveReader.h"
#include "nsISmsRequest.h"
#include "nsIDOMProgressEvent.h"
#include "nsIDOMStorageEvent.h"
#include "nsIDOMDeviceProximityEvent.h"
#include "nsIDOMMozSettingsEvent.h"
#include "nsIDOMUserProximityEvent.h"
#include "nsIDOMCustomEvent.h"
#include "nsIDOMPageTransitionEvent.h"
#include "nsIDOMDOMTransactionEvent.h"
#include "nsIDOMPopStateEvent.h"
#include "nsIDOMHashChangeEvent.h"
#include "nsIDOMCloseEvent.h"
#include "nsIDOMMozContactChangeEvent.h"
#include "nsIDOMDeviceOrientationEvent.h"
#include "nsIDOMDeviceLightEvent.h"
#include "nsIDOMMozApplicationEvent.h"
#include "nsIDOMDeviceStorageChangeEvent.h"
#include "nsIDOMPopupBlockedEvent.h"
#include "nsIDOMWindow.h"
#include "nsIDOMEventTarget.h"
#include "nsIDOMStorage.h"
#include "nsIVariant.h"
#include "nsIURI.h"

using namespace mozilla::dom;

static jsid gDictionary_id_bubbles = JSID_VOID;
static jsid gDictionary_id_cancelable = JSID_VOID;
static jsid gDictionary_id_detail = JSID_VOID;
static jsid gDictionary_id_view = JSID_VOID;
static jsid gDictionary_id_altKey = JSID_VOID;
static jsid gDictionary_id_button = JSID_VOID;
static jsid gDictionary_id_buttons = JSID_VOID;
static jsid gDictionary_id_clientX = JSID_VOID;
static jsid gDictionary_id_clientY = JSID_VOID;
static jsid gDictionary_id_ctrlKey = JSID_VOID;
static jsid gDictionary_id_metaKey = JSID_VOID;
static jsid gDictionary_id_relatedTarget = JSID_VOID;
static jsid gDictionary_id_screenX = JSID_VOID;
static jsid gDictionary_id_screenY = JSID_VOID;
static jsid gDictionary_id_shiftKey = JSID_VOID;
static jsid gDictionary_id_deltaMode = JSID_VOID;
static jsid gDictionary_id_deltaX = JSID_VOID;
static jsid gDictionary_id_deltaY = JSID_VOID;
static jsid gDictionary_id_deltaZ = JSID_VOID;
static jsid gDictionary_id_autoIncrement = JSID_VOID;
static jsid gDictionary_id_keyPath = JSID_VOID;
static jsid gDictionary_id_multiEntry = JSID_VOID;
static jsid gDictionary_id_unique = JSID_VOID;
static jsid gDictionary_id_enableHighAccuracy = JSID_VOID;
static jsid gDictionary_id_maximumAge = JSID_VOID;
static jsid gDictionary_id_timeout = JSID_VOID;
static jsid gDictionary_id_lastModified = JSID_VOID;
static jsid gDictionary_id_size = JSID_VOID;
static jsid gDictionary_id_mozAnon = JSID_VOID;
static jsid gDictionary_id_mozSystem = JSID_VOID;
static jsid gDictionary_id_since = JSID_VOID;
static jsid gDictionary_id_height = JSID_VOID;
static jsid gDictionary_id_width = JSID_VOID;
static jsid gDictionary_id_bottom = JSID_VOID;
static jsid gDictionary_id_left = JSID_VOID;
static jsid gDictionary_id_right = JSID_VOID;
static jsid gDictionary_id_top = JSID_VOID;
static jsid gDictionary_id_weight = JSID_VOID;
static jsid gDictionary_id_altitude = JSID_VOID;
static jsid gDictionary_id_latitude = JSID_VOID;
static jsid gDictionary_id_longitude = JSID_VOID;
static jsid gDictionary_id_timestamp = JSID_VOID;
static jsid gDictionary_id_camera = JSID_VOID;
static jsid gDictionary_id_fileFormat = JSID_VOID;
static jsid gDictionary_id_pictureSize = JSID_VOID;
static jsid gDictionary_id_position = JSID_VOID;
static jsid gDictionary_id_rotation = JSID_VOID;
static jsid gDictionary_id_profile = JSID_VOID;
static jsid gDictionary_id_maxFileSizeBytes = JSID_VOID;
static jsid gDictionary_id_maxVideoLengthMs = JSID_VOID;
static jsid gDictionary_id_encoding = JSID_VOID;
static jsid gDictionary_id_body = JSID_VOID;
static jsid gDictionary_id_senderOrReceiver = JSID_VOID;
static jsid gDictionary_id_unreadCount = JSID_VOID;
static jsid gDictionary_id_lengthComputable = JSID_VOID;
static jsid gDictionary_id_loaded = JSID_VOID;
static jsid gDictionary_id_total = JSID_VOID;
static jsid gDictionary_id_key = JSID_VOID;
static jsid gDictionary_id_newValue = JSID_VOID;
static jsid gDictionary_id_oldValue = JSID_VOID;
static jsid gDictionary_id_storageArea = JSID_VOID;
static jsid gDictionary_id_url = JSID_VOID;
static jsid gDictionary_id_max = JSID_VOID;
static jsid gDictionary_id_min = JSID_VOID;
static jsid gDictionary_id_value = JSID_VOID;
static jsid gDictionary_id_settingName = JSID_VOID;
static jsid gDictionary_id_settingValue = JSID_VOID;
static jsid gDictionary_id_near = JSID_VOID;
static jsid gDictionary_id_persisted = JSID_VOID;
static jsid gDictionary_id_transactions = JSID_VOID;
static jsid gDictionary_id_state = JSID_VOID;
static jsid gDictionary_id_newURL = JSID_VOID;
static jsid gDictionary_id_oldURL = JSID_VOID;
static jsid gDictionary_id_code = JSID_VOID;
static jsid gDictionary_id_reason = JSID_VOID;
static jsid gDictionary_id_wasClean = JSID_VOID;
static jsid gDictionary_id_contactID = JSID_VOID;
static jsid gDictionary_id_absolute = JSID_VOID;
static jsid gDictionary_id_alpha = JSID_VOID;
static jsid gDictionary_id_beta = JSID_VOID;
static jsid gDictionary_id_gamma = JSID_VOID;
static jsid gDictionary_id_application = JSID_VOID;
static jsid gDictionary_id_path = JSID_VOID;
static jsid gDictionary_id_popupWindowFeatures = JSID_VOID;
static jsid gDictionary_id_popupWindowName = JSID_VOID;
static jsid gDictionary_id_popupWindowURI = JSID_VOID;
static jsid gDictionary_id_requestingWindow = JSID_VOID;

static bool
InternStaticJSVal(JSContext* aCx, jsid &id, const char* aString)
{
  if (JSString* str = JS_InternString(aCx, aString)) {
    id = INTERNED_STRING_TO_JSID(aCx, str);
    return true;
  }
  return false;
}

bool
InternStaticDictionaryJSVals(JSContext* aCx)
{
  JSAutoRequest ar(aCx);
  return
    InternStaticJSVal(aCx, gDictionary_id_bubbles, "bubbles") &&
    InternStaticJSVal(aCx, gDictionary_id_cancelable, "cancelable") &&
    InternStaticJSVal(aCx, gDictionary_id_detail, "detail") &&
    InternStaticJSVal(aCx, gDictionary_id_view, "view") &&
    InternStaticJSVal(aCx, gDictionary_id_altKey, "altKey") &&
    InternStaticJSVal(aCx, gDictionary_id_button, "button") &&
    InternStaticJSVal(aCx, gDictionary_id_buttons, "buttons") &&
    InternStaticJSVal(aCx, gDictionary_id_clientX, "clientX") &&
    InternStaticJSVal(aCx, gDictionary_id_clientY, "clientY") &&
    InternStaticJSVal(aCx, gDictionary_id_ctrlKey, "ctrlKey") &&
    InternStaticJSVal(aCx, gDictionary_id_metaKey, "metaKey") &&
    InternStaticJSVal(aCx, gDictionary_id_relatedTarget, "relatedTarget") &&
    InternStaticJSVal(aCx, gDictionary_id_screenX, "screenX") &&
    InternStaticJSVal(aCx, gDictionary_id_screenY, "screenY") &&
    InternStaticJSVal(aCx, gDictionary_id_shiftKey, "shiftKey") &&
    InternStaticJSVal(aCx, gDictionary_id_deltaMode, "deltaMode") &&
    InternStaticJSVal(aCx, gDictionary_id_deltaX, "deltaX") &&
    InternStaticJSVal(aCx, gDictionary_id_deltaY, "deltaY") &&
    InternStaticJSVal(aCx, gDictionary_id_deltaZ, "deltaZ") &&
    InternStaticJSVal(aCx, gDictionary_id_autoIncrement, "autoIncrement") &&
    InternStaticJSVal(aCx, gDictionary_id_keyPath, "keyPath") &&
    InternStaticJSVal(aCx, gDictionary_id_multiEntry, "multiEntry") &&
    InternStaticJSVal(aCx, gDictionary_id_unique, "unique") &&
    InternStaticJSVal(aCx, gDictionary_id_enableHighAccuracy, "enableHighAccuracy") &&
    InternStaticJSVal(aCx, gDictionary_id_maximumAge, "maximumAge") &&
    InternStaticJSVal(aCx, gDictionary_id_timeout, "timeout") &&
    InternStaticJSVal(aCx, gDictionary_id_lastModified, "lastModified") &&
    InternStaticJSVal(aCx, gDictionary_id_size, "size") &&
    InternStaticJSVal(aCx, gDictionary_id_mozAnon, "mozAnon") &&
    InternStaticJSVal(aCx, gDictionary_id_mozSystem, "mozSystem") &&
    InternStaticJSVal(aCx, gDictionary_id_since, "since") &&
    InternStaticJSVal(aCx, gDictionary_id_height, "height") &&
    InternStaticJSVal(aCx, gDictionary_id_width, "width") &&
    InternStaticJSVal(aCx, gDictionary_id_bottom, "bottom") &&
    InternStaticJSVal(aCx, gDictionary_id_left, "left") &&
    InternStaticJSVal(aCx, gDictionary_id_right, "right") &&
    InternStaticJSVal(aCx, gDictionary_id_top, "top") &&
    InternStaticJSVal(aCx, gDictionary_id_weight, "weight") &&
    InternStaticJSVal(aCx, gDictionary_id_altitude, "altitude") &&
    InternStaticJSVal(aCx, gDictionary_id_latitude, "latitude") &&
    InternStaticJSVal(aCx, gDictionary_id_longitude, "longitude") &&
    InternStaticJSVal(aCx, gDictionary_id_timestamp, "timestamp") &&
    InternStaticJSVal(aCx, gDictionary_id_camera, "camera") &&
    InternStaticJSVal(aCx, gDictionary_id_fileFormat, "fileFormat") &&
    InternStaticJSVal(aCx, gDictionary_id_pictureSize, "pictureSize") &&
    InternStaticJSVal(aCx, gDictionary_id_position, "position") &&
    InternStaticJSVal(aCx, gDictionary_id_rotation, "rotation") &&
    InternStaticJSVal(aCx, gDictionary_id_profile, "profile") &&
    InternStaticJSVal(aCx, gDictionary_id_maxFileSizeBytes, "maxFileSizeBytes") &&
    InternStaticJSVal(aCx, gDictionary_id_maxVideoLengthMs, "maxVideoLengthMs") &&
    InternStaticJSVal(aCx, gDictionary_id_encoding, "encoding") &&
    InternStaticJSVal(aCx, gDictionary_id_body, "body") &&
    InternStaticJSVal(aCx, gDictionary_id_senderOrReceiver, "senderOrReceiver") &&
    InternStaticJSVal(aCx, gDictionary_id_unreadCount, "unreadCount") &&
    InternStaticJSVal(aCx, gDictionary_id_lengthComputable, "lengthComputable") &&
    InternStaticJSVal(aCx, gDictionary_id_loaded, "loaded") &&
    InternStaticJSVal(aCx, gDictionary_id_total, "total") &&
    InternStaticJSVal(aCx, gDictionary_id_key, "key") &&
    InternStaticJSVal(aCx, gDictionary_id_newValue, "newValue") &&
    InternStaticJSVal(aCx, gDictionary_id_oldValue, "oldValue") &&
    InternStaticJSVal(aCx, gDictionary_id_storageArea, "storageArea") &&
    InternStaticJSVal(aCx, gDictionary_id_url, "url") &&
    InternStaticJSVal(aCx, gDictionary_id_max, "max") &&
    InternStaticJSVal(aCx, gDictionary_id_min, "min") &&
    InternStaticJSVal(aCx, gDictionary_id_value, "value") &&
    InternStaticJSVal(aCx, gDictionary_id_settingName, "settingName") &&
    InternStaticJSVal(aCx, gDictionary_id_settingValue, "settingValue") &&
    InternStaticJSVal(aCx, gDictionary_id_near, "near") &&
    InternStaticJSVal(aCx, gDictionary_id_persisted, "persisted") &&
    InternStaticJSVal(aCx, gDictionary_id_transactions, "transactions") &&
    InternStaticJSVal(aCx, gDictionary_id_state, "state") &&
    InternStaticJSVal(aCx, gDictionary_id_newURL, "newURL") &&
    InternStaticJSVal(aCx, gDictionary_id_oldURL, "oldURL") &&
    InternStaticJSVal(aCx, gDictionary_id_code, "code") &&
    InternStaticJSVal(aCx, gDictionary_id_reason, "reason") &&
    InternStaticJSVal(aCx, gDictionary_id_wasClean, "wasClean") &&
    InternStaticJSVal(aCx, gDictionary_id_contactID, "contactID") &&
    InternStaticJSVal(aCx, gDictionary_id_absolute, "absolute") &&
    InternStaticJSVal(aCx, gDictionary_id_alpha, "alpha") &&
    InternStaticJSVal(aCx, gDictionary_id_beta, "beta") &&
    InternStaticJSVal(aCx, gDictionary_id_gamma, "gamma") &&
    InternStaticJSVal(aCx, gDictionary_id_application, "application") &&
    InternStaticJSVal(aCx, gDictionary_id_path, "path") &&
    InternStaticJSVal(aCx, gDictionary_id_popupWindowFeatures, "popupWindowFeatures") &&
    InternStaticJSVal(aCx, gDictionary_id_popupWindowName, "popupWindowName") &&
    InternStaticJSVal(aCx, gDictionary_id_popupWindowURI, "popupWindowURI") &&
    InternStaticJSVal(aCx, gDictionary_id_requestingWindow, "requestingWindow") &&
    true;
}

EventInit::EventInit() :
  bubbles(false),
  cancelable(false)
{}

EventInit::~EventInit() {}

static nsresult
EventInit_InitInternal(EventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_bubbles, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_bubbles, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.bubbles = b;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_cancelable, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_cancelable, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.cancelable = b;
  }
  return NS_OK;
}

nsresult
EventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return EventInit_InitInternal(*this, aCx, obj);
}

UIEventInit::UIEventInit() :
  EventInit(),
  detail(0),
  view(nullptr)
{}

UIEventInit::~UIEventInit() {}

static nsresult
UIEventInit_InitInternal(UIEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_detail, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_detail, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.detail));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_view, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_view, &v));
    nsIDOMWindow * d;
    xpc_qsSelfRef ref;
    nsresult rv = xpc_qsUnwrapArg<nsIDOMWindow>(aCx, v, &d, &ref.ptr, &v);
    NS_ENSURE_SUCCESS(rv, rv);
    aDict.view = d;
  }
  return NS_OK;
}

nsresult
UIEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return UIEventInit_InitInternal(*this, aCx, obj);
}

MouseEventInit::MouseEventInit() :
  UIEventInit(),
  altKey(false),
  button(0),
  buttons(0),
  clientX(0),
  clientY(0),
  ctrlKey(false),
  metaKey(false),
  relatedTarget(nullptr),
  screenX(0),
  screenY(0),
  shiftKey(false)
{}

MouseEventInit::~MouseEventInit() {}

static nsresult
MouseEventInit_InitInternal(MouseEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = UIEventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_altKey, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_altKey, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.altKey = b;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_button, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_button, &v));
    uint32_t u;
    NS_ENSURE_STATE(JS_ValueToECMAUint32(aCx, v, &u));
    aDict.button = u;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_buttons, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_buttons, &v));
    uint32_t u;
    NS_ENSURE_STATE(JS_ValueToECMAUint32(aCx, v, &u));
    aDict.buttons = u;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_clientX, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_clientX, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.clientX));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_clientY, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_clientY, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.clientY));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_ctrlKey, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_ctrlKey, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.ctrlKey = b;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_metaKey, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_metaKey, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.metaKey = b;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_relatedTarget, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_relatedTarget, &v));
    nsIDOMEventTarget * d;
    xpc_qsSelfRef ref;
    nsresult rv = xpc_qsUnwrapArg<nsIDOMEventTarget>(aCx, v, &d, &ref.ptr, &v);
    NS_ENSURE_SUCCESS(rv, rv);
    aDict.relatedTarget = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_screenX, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_screenX, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.screenX));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_screenY, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_screenY, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.screenY));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_shiftKey, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_shiftKey, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.shiftKey = b;
  }
  return NS_OK;
}

nsresult
MouseEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return MouseEventInit_InitInternal(*this, aCx, obj);
}

WheelEventInit::WheelEventInit() :
  MouseEventInit(),
  deltaMode(0),
  deltaX(0),
  deltaY(0),
  deltaZ(0)
{}

WheelEventInit::~WheelEventInit() {}

static nsresult
WheelEventInit_InitInternal(WheelEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = MouseEventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_deltaMode, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_deltaMode, &v));
    NS_ENSURE_STATE(JS_ValueToECMAUint32(aCx, v, &aDict.deltaMode));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_deltaX, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_deltaX, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.deltaX));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_deltaY, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_deltaY, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.deltaY));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_deltaZ, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_deltaZ, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.deltaZ));
  }
  return NS_OK;
}

nsresult
WheelEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return WheelEventInit_InitInternal(*this, aCx, obj);
}

IDBObjectStoreParameters::IDBObjectStoreParameters() :
  autoIncrement(false),
  keyPath(JSVAL_VOID)
{}

IDBObjectStoreParameters::~IDBObjectStoreParameters() {}

static nsresult
IDBObjectStoreParameters_InitInternal(IDBObjectStoreParameters& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_autoIncrement, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_autoIncrement, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.autoIncrement = b;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_keyPath, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_keyPath, &aDict.keyPath));
  }
  return NS_OK;
}

nsresult
IDBObjectStoreParameters::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return IDBObjectStoreParameters_InitInternal(*this, aCx, obj);
}

IDBIndexParameters::IDBIndexParameters() :
  multiEntry(false),
  unique(false)
{}

IDBIndexParameters::~IDBIndexParameters() {}

static nsresult
IDBIndexParameters_InitInternal(IDBIndexParameters& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_multiEntry, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_multiEntry, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.multiEntry = b;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_unique, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_unique, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.unique = b;
  }
  return NS_OK;
}

nsresult
IDBIndexParameters::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return IDBIndexParameters_InitInternal(*this, aCx, obj);
}

GeoPositionOptions::GeoPositionOptions() :
  enableHighAccuracy(false),
  maximumAge(0),
  timeout(0)
{}

GeoPositionOptions::~GeoPositionOptions() {}

static nsresult
GeoPositionOptions_InitInternal(GeoPositionOptions& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_enableHighAccuracy, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_enableHighAccuracy, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.enableHighAccuracy = b;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_maximumAge, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_maximumAge, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.maximumAge));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_timeout, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_timeout, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.timeout));
  }
  return NS_OK;
}

nsresult
GeoPositionOptions::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return GeoPositionOptions_InitInternal(*this, aCx, obj);
}

DOMFileMetadataParameters::DOMFileMetadataParameters() :
  lastModified(false),
  size(false)
{}

DOMFileMetadataParameters::~DOMFileMetadataParameters() {}

static nsresult
DOMFileMetadataParameters_InitInternal(DOMFileMetadataParameters& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_lastModified, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_lastModified, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.lastModified = b;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_size, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_size, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.size = b;
  }
  return NS_OK;
}

nsresult
DOMFileMetadataParameters::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return DOMFileMetadataParameters_InitInternal(*this, aCx, obj);
}

XMLHttpRequestParameters::XMLHttpRequestParameters() :
  mozAnon(false),
  mozSystem(false)
{}

XMLHttpRequestParameters::~XMLHttpRequestParameters() {}

static nsresult
XMLHttpRequestParameters_InitInternal(XMLHttpRequestParameters& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_mozAnon, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_mozAnon, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.mozAnon = b;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_mozSystem, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_mozSystem, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.mozSystem = b;
  }
  return NS_OK;
}

nsresult
XMLHttpRequestParameters::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return XMLHttpRequestParameters_InitInternal(*this, aCx, obj);
}

DeviceStorageEnumerationParameters::DeviceStorageEnumerationParameters() :
  since(JSVAL_VOID)
{}

DeviceStorageEnumerationParameters::~DeviceStorageEnumerationParameters() {}

static nsresult
DeviceStorageEnumerationParameters_InitInternal(DeviceStorageEnumerationParameters& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_since, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_since, &aDict.since));
  }
  return NS_OK;
}

nsresult
DeviceStorageEnumerationParameters::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return DeviceStorageEnumerationParameters_InitInternal(*this, aCx, obj);
}

CameraSize::CameraSize() :
  height(0),
  width(0)
{}

CameraSize::~CameraSize() {}

static nsresult
CameraSize_InitInternal(CameraSize& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_height, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_height, &v));
    NS_ENSURE_STATE(JS_ValueToECMAUint32(aCx, v, &aDict.height));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_width, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_width, &v));
    NS_ENSURE_STATE(JS_ValueToECMAUint32(aCx, v, &aDict.width));
  }
  return NS_OK;
}

nsresult
CameraSize::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return CameraSize_InitInternal(*this, aCx, obj);
}

CameraRegion::CameraRegion() :
  bottom(0),
  left(0),
  right(0),
  top(0),
  weight(0)
{}

CameraRegion::~CameraRegion() {}

static nsresult
CameraRegion_InitInternal(CameraRegion& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_bottom, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_bottom, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.bottom));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_left, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_left, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.left));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_right, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_right, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.right));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_top, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_top, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.top));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_weight, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_weight, &v));
    NS_ENSURE_STATE(JS_ValueToECMAUint32(aCx, v, &aDict.weight));
  }
  return NS_OK;
}

nsresult
CameraRegion::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return CameraRegion_InitInternal(*this, aCx, obj);
}

CameraPosition::CameraPosition() :
  altitude(0),
  latitude(0),
  longitude(0),
  timestamp(0)
{}

CameraPosition::~CameraPosition() {}

static nsresult
CameraPosition_InitInternal(CameraPosition& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_altitude, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_altitude, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.altitude));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_latitude, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_latitude, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.latitude));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_longitude, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_longitude, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.longitude));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_timestamp, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_timestamp, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.timestamp));
  }
  return NS_OK;
}

nsresult
CameraPosition::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return CameraPosition_InitInternal(*this, aCx, obj);
}

CameraSelector::CameraSelector() :
  camera(NS_LITERAL_STRING("back"))
{}

CameraSelector::~CameraSelector() {}

static nsresult
CameraSelector_InitInternal(CameraSelector& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_camera, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_camera, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.camera = d;
  }
  return NS_OK;
}

nsresult
CameraSelector::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return CameraSelector_InitInternal(*this, aCx, obj);
}

CameraPictureOptions::CameraPictureOptions() :
  fileFormat(),
  pictureSize(JSVAL_VOID),
  position(JSVAL_VOID),
  rotation(0)
{}

CameraPictureOptions::~CameraPictureOptions() {}

static nsresult
CameraPictureOptions_InitInternal(CameraPictureOptions& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_fileFormat, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_fileFormat, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.fileFormat = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_pictureSize, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_pictureSize, &aDict.pictureSize));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_position, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_position, &aDict.position));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_rotation, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_rotation, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.rotation));
  }
  return NS_OK;
}

nsresult
CameraPictureOptions::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return CameraPictureOptions_InitInternal(*this, aCx, obj);
}

CameraRecorderOptions::CameraRecorderOptions() :
  profile(),
  rotation(0)
{}

CameraRecorderOptions::~CameraRecorderOptions() {}

static nsresult
CameraRecorderOptions_InitInternal(CameraRecorderOptions& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_profile, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_profile, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.profile = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_rotation, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_rotation, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.rotation));
  }
  return NS_OK;
}

nsresult
CameraRecorderOptions::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return CameraRecorderOptions_InitInternal(*this, aCx, obj);
}

CameraStartRecordingOptions::CameraStartRecordingOptions() :
  maxFileSizeBytes(0),
  maxVideoLengthMs(0),
  rotation(0)
{}

CameraStartRecordingOptions::~CameraStartRecordingOptions() {}

static nsresult
CameraStartRecordingOptions_InitInternal(CameraStartRecordingOptions& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_maxFileSizeBytes, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_maxFileSizeBytes, &v));
    NS_ENSURE_STATE(JS::ToInt64(aCx, v, &aDict.maxFileSizeBytes));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_maxVideoLengthMs, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_maxVideoLengthMs, &v));
    NS_ENSURE_STATE(JS::ToInt64(aCx, v, &aDict.maxVideoLengthMs));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_rotation, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_rotation, &v));
    NS_ENSURE_STATE(JS_ValueToECMAInt32(aCx, v, &aDict.rotation));
  }
  return NS_OK;
}

nsresult
CameraStartRecordingOptions::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return CameraStartRecordingOptions_InitInternal(*this, aCx, obj);
}

ArchiveReaderOptions::ArchiveReaderOptions() :
  encoding(NS_LITERAL_STRING("windows-1252"))
{}

ArchiveReaderOptions::~ArchiveReaderOptions() {}

static nsresult
ArchiveReaderOptions_InitInternal(ArchiveReaderOptions& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_encoding, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_encoding, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.encoding = d;
  }
  return NS_OK;
}

nsresult
ArchiveReaderOptions::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return ArchiveReaderOptions_InitInternal(*this, aCx, obj);
}

SmsThreadListItem::SmsThreadListItem() :
  body(),
  senderOrReceiver(),
  timestamp(0),
  unreadCount(0)
{}

SmsThreadListItem::~SmsThreadListItem() {}

static nsresult
SmsThreadListItem_InitInternal(SmsThreadListItem& aDict, JSContext* aCx, JSObject* aObj)
{
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_body, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_body, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.body = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_senderOrReceiver, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_senderOrReceiver, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.senderOrReceiver = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_timestamp, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_timestamp, &v));
    NS_ENSURE_STATE(JS::ToUint64(aCx, v, &aDict.timestamp));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_unreadCount, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_unreadCount, &v));
    NS_ENSURE_STATE(JS::ToUint64(aCx, v, &aDict.unreadCount));
  }
  return NS_OK;
}

nsresult
SmsThreadListItem::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return SmsThreadListItem_InitInternal(*this, aCx, obj);
}

ProgressEventInit::ProgressEventInit() :
  EventInit(),
  lengthComputable(false),
  loaded(0),
  total(0)
{}

ProgressEventInit::~ProgressEventInit() {}

static nsresult
ProgressEventInit_InitInternal(ProgressEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_lengthComputable, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_lengthComputable, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.lengthComputable = b;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_loaded, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_loaded, &v));
    NS_ENSURE_STATE(JS::ToUint64(aCx, v, &aDict.loaded));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_total, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_total, &v));
    NS_ENSURE_STATE(JS::ToUint64(aCx, v, &aDict.total));
  }
  return NS_OK;
}

nsresult
ProgressEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return ProgressEventInit_InitInternal(*this, aCx, obj);
}

StorageEventInit::StorageEventInit() :
  EventInit(),
  key(),
  newValue(),
  oldValue(),
  storageArea(nullptr),
  url()
{
  key.SetIsVoid(true);
  newValue.SetIsVoid(true);
  oldValue.SetIsVoid(true);
}

StorageEventInit::~StorageEventInit() {}

static nsresult
StorageEventInit_InitInternal(StorageEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_key, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_key, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eNull, xpc_qsDOMString::eNull);
    NS_ENSURE_STATE(d.IsValid());
    aDict.key = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_newValue, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_newValue, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eNull, xpc_qsDOMString::eNull);
    NS_ENSURE_STATE(d.IsValid());
    aDict.newValue = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_oldValue, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_oldValue, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eNull, xpc_qsDOMString::eNull);
    NS_ENSURE_STATE(d.IsValid());
    aDict.oldValue = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_storageArea, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_storageArea, &v));
    nsIDOMStorage * d;
    xpc_qsSelfRef ref;
    nsresult rv = xpc_qsUnwrapArg<nsIDOMStorage>(aCx, v, &d, &ref.ptr, &v);
    NS_ENSURE_SUCCESS(rv, rv);
    aDict.storageArea = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_url, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_url, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.url = d;
  }
  return NS_OK;
}

nsresult
StorageEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return StorageEventInit_InitInternal(*this, aCx, obj);
}

DeviceProximityEventInit::DeviceProximityEventInit() :
  EventInit(),
  max(0),
  min(0),
  value(0)
{}

DeviceProximityEventInit::~DeviceProximityEventInit() {}

static nsresult
DeviceProximityEventInit_InitInternal(DeviceProximityEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_max, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_max, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.max));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_min, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_min, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.min));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_value, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_value, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.value));
  }
  return NS_OK;
}

nsresult
DeviceProximityEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return DeviceProximityEventInit_InitInternal(*this, aCx, obj);
}

MozSettingsEventInit::MozSettingsEventInit() :
  EventInit(),
  settingName(),
  settingValue(nullptr)
{}

MozSettingsEventInit::~MozSettingsEventInit() {}

static nsresult
MozSettingsEventInit_InitInternal(MozSettingsEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  XPCCallContext ccx(NATIVE_CALLER, aCx);
  NS_ENSURE_STATE(ccx.IsValid());
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_settingName, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_settingName, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.settingName = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_settingValue, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_settingValue, &v));
    nsCOMPtr<nsIVariant> d(already_AddRefed<nsIVariant>(XPCVariant::newVariant(ccx, v)));
    NS_ENSURE_STATE(d);
    aDict.settingValue = d;
  }
  return NS_OK;
}

nsresult
MozSettingsEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return MozSettingsEventInit_InitInternal(*this, aCx, obj);
}

UserProximityEventInit::UserProximityEventInit() :
  EventInit(),
  near(false)
{}

UserProximityEventInit::~UserProximityEventInit() {}

static nsresult
UserProximityEventInit_InitInternal(UserProximityEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_near, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_near, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.near = b;
  }
  return NS_OK;
}

nsresult
UserProximityEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return UserProximityEventInit_InitInternal(*this, aCx, obj);
}

CustomEventInit::CustomEventInit() :
  EventInit(),
  detail(nullptr)
{}

CustomEventInit::~CustomEventInit() {}

static nsresult
CustomEventInit_InitInternal(CustomEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  XPCCallContext ccx(NATIVE_CALLER, aCx);
  NS_ENSURE_STATE(ccx.IsValid());
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_detail, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_detail, &v));
    nsCOMPtr<nsIVariant> d(already_AddRefed<nsIVariant>(XPCVariant::newVariant(ccx, v)));
    NS_ENSURE_STATE(d);
    aDict.detail = d;
  }
  return NS_OK;
}

nsresult
CustomEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return CustomEventInit_InitInternal(*this, aCx, obj);
}

PageTransitionEventInit::PageTransitionEventInit() :
  EventInit(),
  persisted(false)
{}

PageTransitionEventInit::~PageTransitionEventInit() {}

static nsresult
PageTransitionEventInit_InitInternal(PageTransitionEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_persisted, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_persisted, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.persisted = b;
  }
  return NS_OK;
}

nsresult
PageTransitionEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return PageTransitionEventInit_InitInternal(*this, aCx, obj);
}

DOMTransactionEventInit::DOMTransactionEventInit() :
  EventInit(),
  transactions(nullptr)
{}

DOMTransactionEventInit::~DOMTransactionEventInit() {}

static nsresult
DOMTransactionEventInit_InitInternal(DOMTransactionEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  XPCCallContext ccx(NATIVE_CALLER, aCx);
  NS_ENSURE_STATE(ccx.IsValid());
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_transactions, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_transactions, &v));
    nsCOMPtr<nsIVariant> d(already_AddRefed<nsIVariant>(XPCVariant::newVariant(ccx, v)));
    NS_ENSURE_STATE(d);
    aDict.transactions = d;
  }
  return NS_OK;
}

nsresult
DOMTransactionEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return DOMTransactionEventInit_InitInternal(*this, aCx, obj);
}

PopStateEventInit::PopStateEventInit() :
  EventInit(),
  state(nullptr)
{}

PopStateEventInit::~PopStateEventInit() {}

static nsresult
PopStateEventInit_InitInternal(PopStateEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  XPCCallContext ccx(NATIVE_CALLER, aCx);
  NS_ENSURE_STATE(ccx.IsValid());
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_state, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_state, &v));
    nsCOMPtr<nsIVariant> d(already_AddRefed<nsIVariant>(XPCVariant::newVariant(ccx, v)));
    NS_ENSURE_STATE(d);
    aDict.state = d;
  }
  return NS_OK;
}

nsresult
PopStateEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return PopStateEventInit_InitInternal(*this, aCx, obj);
}

HashChangeEventInit::HashChangeEventInit() :
  EventInit(),
  newURL(),
  oldURL()
{}

HashChangeEventInit::~HashChangeEventInit() {}

static nsresult
HashChangeEventInit_InitInternal(HashChangeEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_newURL, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_newURL, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.newURL = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_oldURL, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_oldURL, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.oldURL = d;
  }
  return NS_OK;
}

nsresult
HashChangeEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return HashChangeEventInit_InitInternal(*this, aCx, obj);
}

CloseEventInit::CloseEventInit() :
  EventInit(),
  code(0),
  reason(),
  wasClean(false)
{}

CloseEventInit::~CloseEventInit() {}

static nsresult
CloseEventInit_InitInternal(CloseEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_code, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_code, &v));
    uint32_t u;
    NS_ENSURE_STATE(JS_ValueToECMAUint32(aCx, v, &u));
    aDict.code = u;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_reason, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_reason, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.reason = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_wasClean, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_wasClean, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.wasClean = b;
  }
  return NS_OK;
}

nsresult
CloseEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return CloseEventInit_InitInternal(*this, aCx, obj);
}

MozContactChangeEventInit::MozContactChangeEventInit() :
  EventInit(),
  contactID(),
  reason()
{}

MozContactChangeEventInit::~MozContactChangeEventInit() {}

static nsresult
MozContactChangeEventInit_InitInternal(MozContactChangeEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_contactID, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_contactID, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.contactID = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_reason, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_reason, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.reason = d;
  }
  return NS_OK;
}

nsresult
MozContactChangeEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return MozContactChangeEventInit_InitInternal(*this, aCx, obj);
}

DeviceOrientationEventInit::DeviceOrientationEventInit() :
  EventInit(),
  absolute(false),
  alpha(0),
  beta(0),
  gamma(0)
{}

DeviceOrientationEventInit::~DeviceOrientationEventInit() {}

static nsresult
DeviceOrientationEventInit_InitInternal(DeviceOrientationEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_absolute, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_absolute, &v));
    JSBool b;
    MOZ_ALWAYS_TRUE(JS_ValueToBoolean(aCx, v, &b));
    aDict.absolute = b;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_alpha, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_alpha, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.alpha));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_beta, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_beta, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.beta));
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_gamma, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_gamma, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.gamma));
  }
  return NS_OK;
}

nsresult
DeviceOrientationEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return DeviceOrientationEventInit_InitInternal(*this, aCx, obj);
}

DeviceLightEventInit::DeviceLightEventInit() :
  EventInit(),
  value(0)
{}

DeviceLightEventInit::~DeviceLightEventInit() {}

static nsresult
DeviceLightEventInit_InitInternal(DeviceLightEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_value, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_value, &v));
    NS_ENSURE_STATE(JS_ValueToNumber(aCx, v, &aDict.value));
  }
  return NS_OK;
}

nsresult
DeviceLightEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return DeviceLightEventInit_InitInternal(*this, aCx, obj);
}

MozApplicationEventInit::MozApplicationEventInit() :
  EventInit(),
  application(nullptr)
{}

MozApplicationEventInit::~MozApplicationEventInit() {}

static nsresult
MozApplicationEventInit_InitInternal(MozApplicationEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_application, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_application, &v));
    mozIDOMApplication * d;
    xpc_qsSelfRef ref;
    nsresult rv = xpc_qsUnwrapArg<mozIDOMApplication>(aCx, v, &d, &ref.ptr, &v);
    NS_ENSURE_SUCCESS(rv, rv);
    aDict.application = d;
  }
  return NS_OK;
}

nsresult
MozApplicationEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return MozApplicationEventInit_InitInternal(*this, aCx, obj);
}

DeviceStorageChangeEventInit::DeviceStorageChangeEventInit() :
  EventInit(),
  path(),
  reason()
{}

DeviceStorageChangeEventInit::~DeviceStorageChangeEventInit() {}

static nsresult
DeviceStorageChangeEventInit_InitInternal(DeviceStorageChangeEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_path, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_path, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.path = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_reason, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_reason, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.reason = d;
  }
  return NS_OK;
}

nsresult
DeviceStorageChangeEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return DeviceStorageChangeEventInit_InitInternal(*this, aCx, obj);
}

PopupBlockedEventInit::PopupBlockedEventInit() :
  EventInit(),
  popupWindowFeatures(),
  popupWindowName(),
  popupWindowURI(nullptr),
  requestingWindow(nullptr)
{}

PopupBlockedEventInit::~PopupBlockedEventInit() {}

static nsresult
PopupBlockedEventInit_InitInternal(PopupBlockedEventInit& aDict, JSContext* aCx, JSObject* aObj)
{
  nsresult rv = EventInit_InitInternal(aDict, aCx, aObj);
  NS_ENSURE_SUCCESS(rv, rv);
  JSBool found = PR_FALSE;
  jsval v = JSVAL_VOID;
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_popupWindowFeatures, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_popupWindowFeatures, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.popupWindowFeatures = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_popupWindowName, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_popupWindowName, &v));
    xpc_qsDOMString d(aCx, v, &v, xpc_qsDOMString::eStringify, xpc_qsDOMString::eStringify);
    NS_ENSURE_STATE(d.IsValid());
    aDict.popupWindowName = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_popupWindowURI, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_popupWindowURI, &v));
    nsIURI * d;
    xpc_qsSelfRef ref;
    nsresult rv = xpc_qsUnwrapArg<nsIURI>(aCx, v, &d, &ref.ptr, &v);
    NS_ENSURE_SUCCESS(rv, rv);
    aDict.popupWindowURI = d;
  }
  NS_ENSURE_STATE(JS_HasPropertyById(aCx, aObj, gDictionary_id_requestingWindow, &found));
  if (found) {
    NS_ENSURE_STATE(JS_GetPropertyById(aCx, aObj, gDictionary_id_requestingWindow, &v));
    nsIDOMWindow * d;
    xpc_qsSelfRef ref;
    nsresult rv = xpc_qsUnwrapArg<nsIDOMWindow>(aCx, v, &d, &ref.ptr, &v);
    NS_ENSURE_SUCCESS(rv, rv);
    aDict.requestingWindow = d;
  }
  return NS_OK;
}

nsresult
PopupBlockedEventInit::Init(JSContext* aCx, const jsval* aVal)
{
  MOZ_ASSERT(NS_IsMainThread());
  if (!aCx || !aVal) {
    return NS_OK;
  }
  if (!aVal->isObject()) {
    return aVal->isNullOrUndefined() ? NS_OK : NS_ERROR_TYPE_ERR;
  }

  JSObject* obj = &aVal->toObject();
  nsCxPusher pusher;
  NS_ENSURE_STATE(pusher.Push(aCx, false));
  JSAutoRequest ar(aCx);
  JSAutoCompartment ac(aCx, obj);
  return PopupBlockedEventInit_InitInternal(*this, aCx, obj);
}

