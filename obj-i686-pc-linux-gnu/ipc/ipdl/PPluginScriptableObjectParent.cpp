//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PPluginScriptableObjectParent.h"

#include "mozilla/plugins/PPluginInstanceParent.h"
#include "mozilla/plugins/PPluginIdentifierParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::plugins::Variant Variant;
typedef mozilla::null_t null_t;
typedef mozilla::void_t void_t;
using mozilla::plugins::PPluginInstanceParent;
using mozilla::plugins::PPluginIdentifierParent;

namespace mozilla {
namespace plugins {


bool
PPluginScriptableObjectParent::Recv__delete__()
{
    return true;
}

void
PPluginScriptableObjectParent::ActorDestroy(ActorDestroyReason why)
{
}

PPluginScriptableObjectParent::PPluginScriptableObjectParent() :
    mId(0),
    mState(PPluginScriptableObject::__Dead)
{
    MOZ_COUNT_CTOR(PPluginScriptableObjectParent);
}

PPluginScriptableObjectParent::~PPluginScriptableObjectParent()
{
    MOZ_COUNT_DTOR(PPluginScriptableObjectParent);
}

PPluginInstanceParent*
PPluginScriptableObjectParent::Manager() const
{
    return static_cast<PPluginInstanceParent*>(mManager);
}

PPluginScriptableObject::State
PPluginScriptableObjectParent::state()
{
    return mState;
}

bool
PPluginScriptableObjectParent::Send__delete__(PPluginScriptableObjectParent* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PPluginScriptableObject::Msg___delete__* __msg = new PPluginScriptableObject::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition((actor)->mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PPluginScriptableObjectMsgStart, actor);
    return __sendok;
}

bool
PPluginScriptableObjectParent::CallInvalidate()
{
    PPluginScriptableObject::Msg_Invalidate* __msg = new PPluginScriptableObject::Msg_Invalidate();


    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_Invalidate__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PPluginScriptableObject::Reply_Invalidate*>((&(__reply))))->Log("[PPluginScriptableObjectParent] Received reply ", stderr);
    }

    return true;
}

bool
PPluginScriptableObjectParent::CallHasMethod(
        PPluginIdentifierParent* aId,
        bool* aHasMethod)
{
    PPluginScriptableObject::Msg_HasMethod* __msg = new PPluginScriptableObject::Msg_HasMethod();

    Write(aId, __msg, false);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_HasMethod__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PPluginScriptableObject::Reply_HasMethod*>((&(__reply))))->Log("[PPluginScriptableObjectParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(aHasMethod, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PPluginScriptableObjectParent::CallInvoke(
        PPluginIdentifierParent* aId,
        const InfallibleTArray<Variant>& aArgs,
        Variant* aResult,
        bool* aSuccess)
{
    PPluginScriptableObject::Msg_Invoke* __msg = new PPluginScriptableObject::Msg_Invoke();

    Write(aId, __msg, false);
    Write(aArgs, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_Invoke__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PPluginScriptableObject::Reply_Invoke*>((&(__reply))))->Log("[PPluginScriptableObjectParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(aResult, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(aSuccess, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PPluginScriptableObjectParent::CallInvokeDefault(
        const InfallibleTArray<Variant>& aArgs,
        Variant* aResult,
        bool* aSuccess)
{
    PPluginScriptableObject::Msg_InvokeDefault* __msg = new PPluginScriptableObject::Msg_InvokeDefault();

    Write(aArgs, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_InvokeDefault__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PPluginScriptableObject::Reply_InvokeDefault*>((&(__reply))))->Log("[PPluginScriptableObjectParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(aResult, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(aSuccess, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PPluginScriptableObjectParent::CallHasProperty(
        PPluginIdentifierParent* aId,
        bool* aHasProperty)
{
    PPluginScriptableObject::Msg_HasProperty* __msg = new PPluginScriptableObject::Msg_HasProperty();

    Write(aId, __msg, false);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_HasProperty__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PPluginScriptableObject::Reply_HasProperty*>((&(__reply))))->Log("[PPluginScriptableObjectParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(aHasProperty, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PPluginScriptableObjectParent::CallSetProperty(
        PPluginIdentifierParent* aId,
        const Variant& aValue,
        bool* aSuccess)
{
    PPluginScriptableObject::Msg_SetProperty* __msg = new PPluginScriptableObject::Msg_SetProperty();

    Write(aId, __msg, false);
    Write(aValue, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_SetProperty__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PPluginScriptableObject::Reply_SetProperty*>((&(__reply))))->Log("[PPluginScriptableObjectParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(aSuccess, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PPluginScriptableObjectParent::CallRemoveProperty(
        PPluginIdentifierParent* aId,
        bool* aSuccess)
{
    PPluginScriptableObject::Msg_RemoveProperty* __msg = new PPluginScriptableObject::Msg_RemoveProperty();

    Write(aId, __msg, false);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_RemoveProperty__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PPluginScriptableObject::Reply_RemoveProperty*>((&(__reply))))->Log("[PPluginScriptableObjectParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(aSuccess, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PPluginScriptableObjectParent::CallEnumerate(
        InfallibleTArray<PPluginIdentifierParent*>* aProperties,
        bool* aSuccess)
{
    PPluginScriptableObject::Msg_Enumerate* __msg = new PPluginScriptableObject::Msg_Enumerate();


    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_Enumerate__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PPluginScriptableObject::Reply_Enumerate*>((&(__reply))))->Log("[PPluginScriptableObjectParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(aProperties, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(aSuccess, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PPluginScriptableObjectParent::CallConstruct(
        const InfallibleTArray<Variant>& aArgs,
        Variant* aResult,
        bool* aSuccess)
{
    PPluginScriptableObject::Msg_Construct* __msg = new PPluginScriptableObject::Msg_Construct();

    Write(aArgs, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_Construct__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PPluginScriptableObject::Reply_Construct*>((&(__reply))))->Log("[PPluginScriptableObjectParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(aResult, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(aSuccess, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PPluginScriptableObjectParent::SendProtect()
{
    PPluginScriptableObject::Msg_Protect* __msg = new PPluginScriptableObject::Msg_Protect();


    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_Protect__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PPluginScriptableObjectParent::SendUnprotect()
{
    PPluginScriptableObject::Msg_Unprotect* __msg = new PPluginScriptableObject::Msg_Unprotect();


    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_Unprotect__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PPluginScriptableObjectParent::CallGetChildProperty(
        PPluginIdentifierParent* aId,
        bool* aHasProperty,
        bool* aHasMethod,
        Variant* aResult,
        bool* aSuccess)
{
    PPluginScriptableObject::Msg_GetChildProperty* __msg = new PPluginScriptableObject::Msg_GetChildProperty();

    Write(aId, __msg, false);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PPluginScriptableObjectParent] Sending ", stderr);
    }
    if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Send, PPluginScriptableObject::Msg_GetChildProperty__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PPluginScriptableObject::Reply_GetChildProperty*>((&(__reply))))->Log("[PPluginScriptableObjectParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(aHasProperty, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(aHasMethod, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(aResult, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(aSuccess, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

int32_t
PPluginScriptableObjectParent::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PPluginScriptableObjectParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PPluginScriptableObjectParent::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PPluginScriptableObjectParent::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PPluginScriptableObjectParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    NS_RUNTIMEABORT("unreached");
    return;
}

Shmem::SharedMemory*
PPluginScriptableObjectParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PPluginScriptableObjectParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PPluginScriptableObjectParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PPluginScriptableObjectParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PPluginScriptableObjectParent::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PPluginScriptableObjectParent::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PPluginScriptableObjectParent::GetIPCChannel()
{
    return mChannel;
}

PPluginScriptableObjectParent::Result
PPluginScriptableObjectParent::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PPluginScriptableObject::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg___delete__*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            void* __iter = 0;
            PPluginScriptableObjectParent* actor;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PPluginScriptableObjectMsgStart, actor);


            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_Protect__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_Protect");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_Protect*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_Protect__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvProtect()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Protect returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_Unprotect__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_Unprotect");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_Unprotect*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_Unprotect__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvUnprotect()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Unprotect returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PPluginScriptableObjectParent::Result
PPluginScriptableObjectParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PPluginScriptableObjectParent::Result
PPluginScriptableObjectParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    switch ((__msg).type()) {
    case PPluginScriptableObject::Msg_NPN_Evaluate__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_NPN_Evaluate");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_NPN_Evaluate*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            void* __iter = 0;
            nsCString aScript;

            if ((!(Read((&(aScript)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_NPN_Evaluate__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            Variant aResult;
            bool aSuccess;
            int32_t __id = mId;
            if ((!(AnswerNPN_Evaluate(aScript, (&(aResult)), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NPN_Evaluate returned error code");
                return MsgProcessingError;
            }

            __reply = new PPluginScriptableObject::Reply_NPN_Evaluate();

            Write(aResult, __reply);
            Write(aSuccess, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Reply_NPN_Evaluate*>(__reply))->Log("[PPluginScriptableObjectParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_HasMethod__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_HasMethod");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_HasMethod*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            void* __iter = 0;
            PPluginIdentifierParent* aId;

            if ((!(Read((&(aId)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_HasMethod__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            bool aHasMethod;
            int32_t __id = mId;
            if ((!(AnswerHasMethod(aId, (&(aHasMethod)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for HasMethod returned error code");
                return MsgProcessingError;
            }

            __reply = new PPluginScriptableObject::Reply_HasMethod();

            Write(aHasMethod, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Reply_HasMethod*>(__reply))->Log("[PPluginScriptableObjectParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_Invoke__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_Invoke");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_Invoke*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            void* __iter = 0;
            PPluginIdentifierParent* aId;
            InfallibleTArray<Variant> aArgs;

            if ((!(Read((&(aId)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(aArgs)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_Invoke__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            Variant aResult;
            bool aSuccess;
            int32_t __id = mId;
            if ((!(AnswerInvoke(aId, aArgs, (&(aResult)), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Invoke returned error code");
                return MsgProcessingError;
            }

            __reply = new PPluginScriptableObject::Reply_Invoke();

            Write(aResult, __reply);
            Write(aSuccess, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Reply_Invoke*>(__reply))->Log("[PPluginScriptableObjectParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_InvokeDefault__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_InvokeDefault");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_InvokeDefault*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            void* __iter = 0;
            InfallibleTArray<Variant> aArgs;

            if ((!(Read((&(aArgs)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_InvokeDefault__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            Variant aResult;
            bool aSuccess;
            int32_t __id = mId;
            if ((!(AnswerInvokeDefault(aArgs, (&(aResult)), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for InvokeDefault returned error code");
                return MsgProcessingError;
            }

            __reply = new PPluginScriptableObject::Reply_InvokeDefault();

            Write(aResult, __reply);
            Write(aSuccess, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Reply_InvokeDefault*>(__reply))->Log("[PPluginScriptableObjectParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_HasProperty__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_HasProperty");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_HasProperty*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            void* __iter = 0;
            PPluginIdentifierParent* aId;

            if ((!(Read((&(aId)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_HasProperty__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            bool aHasProperty;
            int32_t __id = mId;
            if ((!(AnswerHasProperty(aId, (&(aHasProperty)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for HasProperty returned error code");
                return MsgProcessingError;
            }

            __reply = new PPluginScriptableObject::Reply_HasProperty();

            Write(aHasProperty, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Reply_HasProperty*>(__reply))->Log("[PPluginScriptableObjectParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_SetProperty__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_SetProperty");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_SetProperty*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            void* __iter = 0;
            PPluginIdentifierParent* aId;
            Variant aValue;

            if ((!(Read((&(aId)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(aValue)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_SetProperty__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            bool aSuccess;
            int32_t __id = mId;
            if ((!(AnswerSetProperty(aId, aValue, (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for SetProperty returned error code");
                return MsgProcessingError;
            }

            __reply = new PPluginScriptableObject::Reply_SetProperty();

            Write(aSuccess, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Reply_SetProperty*>(__reply))->Log("[PPluginScriptableObjectParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_RemoveProperty__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_RemoveProperty");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_RemoveProperty*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            void* __iter = 0;
            PPluginIdentifierParent* aId;

            if ((!(Read((&(aId)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_RemoveProperty__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            bool aSuccess;
            int32_t __id = mId;
            if ((!(AnswerRemoveProperty(aId, (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for RemoveProperty returned error code");
                return MsgProcessingError;
            }

            __reply = new PPluginScriptableObject::Reply_RemoveProperty();

            Write(aSuccess, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Reply_RemoveProperty*>(__reply))->Log("[PPluginScriptableObjectParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_Enumerate__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_Enumerate");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_Enumerate*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_Enumerate__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            InfallibleTArray<PPluginIdentifierParent*> aProperties;
            bool aSuccess;
            int32_t __id = mId;
            if ((!(AnswerEnumerate((&(aProperties)), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Enumerate returned error code");
                return MsgProcessingError;
            }

            __reply = new PPluginScriptableObject::Reply_Enumerate();

            Write(aProperties, __reply);
            Write(aSuccess, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Reply_Enumerate*>(__reply))->Log("[PPluginScriptableObjectParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_Construct__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_Construct");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_Construct*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            void* __iter = 0;
            InfallibleTArray<Variant> aArgs;

            if ((!(Read((&(aArgs)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_Construct__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            Variant aResult;
            bool aSuccess;
            int32_t __id = mId;
            if ((!(AnswerConstruct(aArgs, (&(aResult)), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Construct returned error code");
                return MsgProcessingError;
            }

            __reply = new PPluginScriptableObject::Reply_Construct();

            Write(aResult, __reply);
            Write(aSuccess, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Reply_Construct*>(__reply))->Log("[PPluginScriptableObjectParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_GetParentProperty__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PPluginScriptableObject::Msg_GetParentProperty");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Msg_GetParentProperty*>((&(__msg))))->Log("[PPluginScriptableObjectParent] Received ", stderr);
            }

            void* __iter = 0;
            PPluginIdentifierParent* aId;

            if ((!(Read((&(aId)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PPluginScriptableObject::Transition(mState, Trigger(Trigger::Recv, PPluginScriptableObject::Msg_GetParentProperty__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            Variant aResult;
            bool aSuccess;
            int32_t __id = mId;
            if ((!(AnswerGetParentProperty(aId, (&(aResult)), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for GetParentProperty returned error code");
                return MsgProcessingError;
            }

            __reply = new PPluginScriptableObject::Reply_GetParentProperty();

            Write(aResult, __reply);
            Write(aSuccess, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PPluginScriptableObject::Reply_GetParentProperty*>(__reply))->Log("[PPluginScriptableObjectParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

void
PPluginScriptableObjectParent::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PPluginScriptableObjectParent::GetProtocolTypeId()
{
    return PPluginScriptableObjectMsgStart;
}

bool
PPluginScriptableObjectParent::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PPluginScriptableObjectParent::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PPluginScriptableObjectParent::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PPluginScriptableObjectParent::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PPluginScriptableObjectParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PPluginScriptableObjectParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PPluginScriptableObjectParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PPluginScriptableObjectParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PPluginScriptableObjectParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PPluginScriptableObjectParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PPluginScriptableObjectParent::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PPluginScriptableObjectParent::DeallocSubtree()
{
}

void
PPluginScriptableObjectParent::Write(
        const InfallibleTArray<Variant>& __v,
        Message* __msg)
{
    uint32_t length = (__v).Length();
    Write(length, __msg);

    for (uint32_t i = 0; (i) < (length); (++(i))) {
        Write(__v[i], __msg);
    }
}

bool
PPluginScriptableObjectParent::Read(
        InfallibleTArray<Variant>* __v,
        const Message* __msg,
        void** __iter)
{
    InfallibleTArray<Variant>& a = (*(__v));
    uint32_t length;
    if ((!(Read((&(length)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    (__v)->SetLength(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(a[i])), __msg, __iter)))) {
            mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
            return false;
        }
    }
    return true;
}

void
PPluginScriptableObjectParent::Write(
        PPluginScriptableObjectParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PPluginScriptableObjectParent::Read(
        PPluginScriptableObjectParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PPluginScriptableObject");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PPluginScriptableObject");
        return false;
    }

    if ((PPluginScriptableObjectMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PPluginScriptableObject has different type");
        return false;
    }

    (*(__v)) = static_cast<PPluginScriptableObjectParent*>(listener);
    return true;
}

void
PPluginScriptableObjectParent::Write(
        const InfallibleTArray<PPluginIdentifierParent*>& __v,
        Message* __msg)
{
    uint32_t length = (__v).Length();
    Write(length, __msg);

    for (uint32_t i = 0; (i) < (length); (++(i))) {
        Write(__v[i], __msg, false);
    }
}

bool
PPluginScriptableObjectParent::Read(
        InfallibleTArray<PPluginIdentifierParent*>* __v,
        const Message* __msg,
        void** __iter)
{
    InfallibleTArray<PPluginIdentifierParent*>& a = (*(__v));
    uint32_t length;
    if ((!(Read((&(length)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    (__v)->SetLength(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(a[i])), __msg, __iter, false)))) {
            mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
            return false;
        }
    }
    return true;
}

void
PPluginScriptableObjectParent::Write(
        const Variant& __v,
        Message* __msg)
{
    typedef Variant __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::Tvoid_t:
        {
            Write((__v).get_void_t(), __msg);
            return;
        }
    case __type::Tnull_t:
        {
            Write((__v).get_null_t(), __msg);
            return;
        }
    case __type::Tbool:
        {
            Write((__v).get_bool(), __msg);
            return;
        }
    case __type::Tint:
        {
            Write((__v).get_int(), __msg);
            return;
        }
    case __type::Tdouble:
        {
            Write((__v).get_double(), __msg);
            return;
        }
    case __type::TnsCString:
        {
            Write((__v).get_nsCString(), __msg);
            return;
        }
    case __type::TPPluginScriptableObjectParent:
        {
            Write((__v).get_PPluginScriptableObjectParent(), __msg, true);
            return;
        }
    case __type::TPPluginScriptableObjectChild:
        {
            NS_RUNTIMEABORT("wrong side!");
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PPluginScriptableObjectParent::Read(
        Variant* __v,
        const Message* __msg,
        void** __iter)
{
    typedef Variant __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::Tvoid_t:
        {
            void_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_void_t())), __msg, __iter);
        }
    case __type::Tnull_t:
        {
            null_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_null_t())), __msg, __iter);
        }
    case __type::Tbool:
        {
            bool tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_bool())), __msg, __iter);
        }
    case __type::Tint:
        {
            int tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_int())), __msg, __iter);
        }
    case __type::Tdouble:
        {
            double tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_double())), __msg, __iter);
        }
    case __type::TnsCString:
        {
            nsCString tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_nsCString())), __msg, __iter);
        }
    case __type::TPPluginScriptableObjectParent:
        {
            return false;
        }
    case __type::TPPluginScriptableObjectChild:
        {
            PPluginScriptableObjectParent* tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_PPluginScriptableObjectParent())), __msg, __iter, true);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PPluginScriptableObjectParent::Write(
        PPluginIdentifierParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PPluginScriptableObjectParent::Read(
        PPluginIdentifierParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PPluginScriptableObject");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PPluginIdentifier");
        return false;
    }

    if ((PPluginIdentifierMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PPluginIdentifier has different type");
        return false;
    }

    (*(__v)) = static_cast<PPluginIdentifierParent*>(listener);
    return true;
}



} // namespace plugins
} // namespace mozilla
