//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/bluetooth/PBluetoothChild.h"

#include "mozilla/dom/PBlobChild.h"
#include "mozilla/dom/bluetooth/PBluetoothRequestChild.h"
#include "mozilla/dom/PContentChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
typedef mozilla::dom::bluetooth::PairRequest PairRequest;
typedef mozilla::dom::bluetooth::Request Request;
typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;
using mozilla::dom::PBlobChild;
using mozilla::dom::bluetooth::PBluetoothRequestChild;
using mozilla::dom::PContentChild;

namespace mozilla {
namespace dom {
namespace bluetooth {


void
PBluetoothChild::ActorDestroy(ActorDestroyReason why)
{
}

PBluetoothChild::PBluetoothChild() :
    mId(0),
    mState(PBluetooth::__Dead)
{
    MOZ_COUNT_CTOR(PBluetoothChild);
}

PBluetoothChild::~PBluetoothChild()
{
    MOZ_COUNT_DTOR(PBluetoothChild);
}

PContentChild*
PBluetoothChild::Manager() const
{
    return static_cast<PContentChild*>(mManager);
}

void
PBluetoothChild::ManagedPBluetoothRequestChild(InfallibleTArray<PBluetoothRequestChild*>& aArr) const
{
    aArr = mManagedPBluetoothRequestChild;
}

const InfallibleTArray<PBluetoothRequestChild*>&
PBluetoothChild::ManagedPBluetoothRequestChild() const
{
    return mManagedPBluetoothRequestChild;
}

PBluetooth::State
PBluetoothChild::state()
{
    return mState;
}

bool
PBluetoothChild::Send__delete__(PBluetoothChild* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PBluetooth::Msg___delete__* __msg = new PBluetooth::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PBluetoothChild] Sending ", stderr);
    }
    if ((!(PBluetooth::Transition((actor)->mState, Trigger(Trigger::Recv, PBluetooth::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PBluetoothMsgStart, actor);
    return __sendok;
}

bool
PBluetoothChild::SendRegisterSignalHandler(const nsString& node)
{
    PBluetooth::Msg_RegisterSignalHandler* __msg = new PBluetooth::Msg_RegisterSignalHandler();

    Write(node, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PBluetoothChild] Sending ", stderr);
    }
    if ((!(PBluetooth::Transition(mState, Trigger(Trigger::Recv, PBluetooth::Msg_RegisterSignalHandler__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PBluetoothChild::SendUnregisterSignalHandler(const nsString& node)
{
    PBluetooth::Msg_UnregisterSignalHandler* __msg = new PBluetooth::Msg_UnregisterSignalHandler();

    Write(node, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PBluetoothChild] Sending ", stderr);
    }
    if ((!(PBluetooth::Transition(mState, Trigger(Trigger::Recv, PBluetooth::Msg_UnregisterSignalHandler__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PBluetoothChild::SendStopNotifying()
{
    PBluetooth::Msg_StopNotifying* __msg = new PBluetooth::Msg_StopNotifying();


    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PBluetoothChild] Sending ", stderr);
    }
    if ((!(PBluetooth::Transition(mState, Trigger(Trigger::Recv, PBluetooth::Msg_StopNotifying__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

PBluetoothRequestChild*
PBluetoothChild::SendPBluetoothRequestConstructor(const Request& request)
{
    return SendPBluetoothRequestConstructor(AllocPBluetoothRequest(request), request);
}

PBluetoothRequestChild*
PBluetoothChild::SendPBluetoothRequestConstructor(
        PBluetoothRequestChild* actor,
        const Request& request)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPBluetoothRequestChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::dom::bluetooth::PBluetoothRequest::__Start;

    PBluetooth::Msg_PBluetoothRequestConstructor* __msg = new PBluetooth::Msg_PBluetoothRequestConstructor();

    Write(actor, __msg, false);
    Write(request, __msg);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PBluetoothChild] Sending ", stderr);
    }
    if ((!(PBluetooth::Transition(mState, Trigger(Trigger::Recv, PBluetooth::Msg_PBluetoothRequestConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PBluetoothRequestMsgStart, actor);
        return 0;
    }
    return actor;
}

int32_t
PBluetoothChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PBluetoothChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PBluetoothChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PBluetoothChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PBluetoothChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PBluetoothRequestMsgStart:
        {
            PBluetoothRequestChild* actor = static_cast<PBluetoothRequestChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPBluetoothRequestChild).NoIndex) != ((mManagedPBluetoothRequestChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPBluetoothRequestChild).RemoveElementSorted(actor);
            DeallocPBluetoothRequest(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PBluetoothChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PBluetoothChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PBluetoothChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PBluetoothChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PBluetoothChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PBluetoothChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PBluetoothChild::GetIPCChannel()
{
    return mChannel;
}

PBluetoothChild::Result
PBluetoothChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PBluetooth::Msg_Enabled__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PBluetooth::Msg_Enabled");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PBluetooth::Msg_Enabled*>((&(__msg))))->Log("[PBluetoothChild] Received ", stderr);
            }

            void* __iter = 0;
            bool enabled;

            if ((!(Read((&(enabled)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PBluetooth::Transition(mState, Trigger(Trigger::Send, PBluetooth::Msg_Enabled__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvEnabled(enabled)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Enabled returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBluetooth::Msg_Notify__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PBluetooth::Msg_Notify");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PBluetooth::Msg_Notify*>((&(__msg))))->Log("[PBluetoothChild] Received ", stderr);
            }

            void* __iter = 0;
            BluetoothSignal signal;

            if ((!(Read((&(signal)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PBluetooth::Transition(mState, Trigger(Trigger::Send, PBluetooth::Msg_Notify__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvNotify(signal)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Notify returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBluetooth::Msg_BeginShutdown__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PBluetooth::Msg_BeginShutdown");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PBluetooth::Msg_BeginShutdown*>((&(__msg))))->Log("[PBluetoothChild] Received ", stderr);
            }

            if ((!(PBluetooth::Transition(mState, Trigger(Trigger::Send, PBluetooth::Msg_BeginShutdown__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvBeginShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for BeginShutdown returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBluetooth::Msg_NotificationsStopped__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PBluetooth::Msg_NotificationsStopped");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PBluetooth::Msg_NotificationsStopped*>((&(__msg))))->Log("[PBluetoothChild] Received ", stderr);
            }

            if ((!(PBluetooth::Transition(mState, Trigger(Trigger::Send, PBluetooth::Msg_NotificationsStopped__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvNotificationsStopped()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NotificationsStopped returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBluetooth::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PBluetooth::Reply_PBluetoothRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PBluetoothChild::Result
PBluetoothChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PBluetoothChild::Result
PBluetoothChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PBluetoothChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PBluetoothChild::GetProtocolTypeId()
{
    return PBluetoothMsgStart;
}

bool
PBluetoothChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PBluetoothChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PBluetoothChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PBluetoothChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PBluetoothChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PBluetoothChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PBluetoothChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PBluetoothChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PBluetoothChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PBluetoothChild] abort()ing as a result");
}

void
PBluetoothChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PBluetoothRequest kids
        InfallibleTArray<PBluetoothRequestChild*> kids(mManagedPBluetoothRequestChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PBluetoothChild::DeallocSubtree()
{
    {
        // Recursively deleting PBluetoothRequest kids
        InfallibleTArray<PBluetoothRequestChild*>& kids = mManagedPBluetoothRequestChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPBluetoothRequest(kids[i]);
        }
        (mManagedPBluetoothRequestChild).Clear();
    }
}

void
PBluetoothChild::Write(
        const DefaultAdapterPathRequest& __v,
        Message* __msg)
{
}

bool
PBluetoothChild::Read(
        DefaultAdapterPathRequest* __v,
        const Message* __msg,
        void** __iter)
{
    return true;
}

void
PBluetoothChild::Write(
        const ConfirmReceivingFileRequest& __v,
        Message* __msg)
{
    Write((__v).devicePath(), __msg);
}

bool
PBluetoothChild::Read(
        ConfirmReceivingFileRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->devicePath())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const ConfirmAuthorizationRequest& __v,
        Message* __msg)
{
    Write((__v).path(), __msg);
}

bool
PBluetoothChild::Read(
        ConfirmAuthorizationRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const PairRequest& __v,
        Message* __msg)
{
    Write((__v).path(), __msg);
    Write((__v).address(), __msg);
    Write((__v).timeoutMS(), __msg);
}

bool
PBluetoothChild::Read(
        PairRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->address())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->timeoutMS())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        PBlobChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PBluetoothChild::Read(
        PBlobChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PBluetooth");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PBlob");
        return false;
    }

    if ((PBlobMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PBlob has different type");
        return false;
    }

    (*(__v)) = static_cast<PBlobChild*>(listener);
    return true;
}

void
PBluetoothChild::Write(
        const UnpairRequest& __v,
        Message* __msg)
{
    Write((__v).path(), __msg);
    Write((__v).address(), __msg);
}

bool
PBluetoothChild::Read(
        UnpairRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->address())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const ConnectRequest& __v,
        Message* __msg)
{
    Write((__v).address(), __msg);
    Write((__v).adapterPath(), __msg);
    Write((__v).profileId(), __msg);
}

bool
PBluetoothChild::Read(
        ConnectRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->address())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->adapterPath())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->profileId())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const BluetoothNamedValue& __v,
        Message* __msg)
{
    Write((__v).name(), __msg);
    Write((__v).value(), __msg);
}

bool
PBluetoothChild::Read(
        BluetoothNamedValue* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->name())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->value())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const DisconnectRequest& __v,
        Message* __msg)
{
    Write((__v).profileId(), __msg);
}

bool
PBluetoothChild::Read(
        DisconnectRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->profileId())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const SetPasskeyRequest& __v,
        Message* __msg)
{
    Write((__v).path(), __msg);
    Write((__v).passkey(), __msg);
}

bool
PBluetoothChild::Read(
        SetPasskeyRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->passkey())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        PBluetoothRequestChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PBluetoothChild::Read(
        PBluetoothRequestChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PBluetooth");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PBluetoothRequest");
        return false;
    }

    if ((PBluetoothRequestMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PBluetoothRequest has different type");
        return false;
    }

    (*(__v)) = static_cast<PBluetoothRequestChild*>(listener);
    return true;
}

void
PBluetoothChild::Write(
        const GetPropertyRequest& __v,
        Message* __msg)
{
    Write((__v).type(), __msg);
    Write((__v).path(), __msg);
}

bool
PBluetoothChild::Read(
        GetPropertyRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->type())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const SetPinCodeRequest& __v,
        Message* __msg)
{
    Write((__v).path(), __msg);
    Write((__v).pincode(), __msg);
}

bool
PBluetoothChild::Read(
        SetPinCodeRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->pincode())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const DenyAuthorizationRequest& __v,
        Message* __msg)
{
    Write((__v).path(), __msg);
}

bool
PBluetoothChild::Read(
        DenyAuthorizationRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const DenyPairingConfirmationRequest& __v,
        Message* __msg)
{
    Write((__v).path(), __msg);
}

bool
PBluetoothChild::Read(
        DenyPairingConfirmationRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const SendFileRequest& __v,
        Message* __msg)
{
    Write((__v).devicePath(), __msg);
    // skipping actor field that's meaningless on this side
    Write((__v).blobChild(), __msg, false);
}

bool
PBluetoothChild::Read(
        SendFileRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->devicePath())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    // skipping actor field that's meaningless on this side
    if ((!(Read((&((__v)->blobChild())), __msg, __iter, false)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const DevicePropertiesRequest& __v,
        Message* __msg)
{
    Write((__v).addresses(), __msg);
}

bool
PBluetoothChild::Read(
        DevicePropertiesRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->addresses())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        PBluetoothChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PBluetoothChild::Read(
        PBluetoothChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PBluetooth");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PBluetooth");
        return false;
    }

    if ((PBluetoothMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PBluetooth has different type");
        return false;
    }

    (*(__v)) = static_cast<PBluetoothChild*>(listener);
    return true;
}

void
PBluetoothChild::Write(
        const InfallibleTArray<BluetoothNamedValue>& __v,
        Message* __msg)
{
    uint32_t length = (__v).Length();
    Write(length, __msg);

    for (uint32_t i = 0; (i) < (length); (++(i))) {
        Write(__v[i], __msg);
    }
}

bool
PBluetoothChild::Read(
        InfallibleTArray<BluetoothNamedValue>* __v,
        const Message* __msg,
        void** __iter)
{
    InfallibleTArray<BluetoothNamedValue>& a = (*(__v));
    uint32_t length;
    if ((!(Read((&(length)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    (__v)->SetLength(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(a[i])), __msg, __iter)))) {
            mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
            return false;
        }
    }
    return true;
}

void
PBluetoothChild::Write(
        const StopSendingFileRequest& __v,
        Message* __msg)
{
    Write((__v).devicePath(), __msg);
}

bool
PBluetoothChild::Read(
        StopSendingFileRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->devicePath())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const ConfirmPairingConfirmationRequest& __v,
        Message* __msg)
{
    Write((__v).path(), __msg);
}

bool
PBluetoothChild::Read(
        ConfirmPairingConfirmationRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const DenyReceivingFileRequest& __v,
        Message* __msg)
{
    Write((__v).devicePath(), __msg);
}

bool
PBluetoothChild::Read(
        DenyReceivingFileRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->devicePath())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const StartDiscoveryRequest& __v,
        Message* __msg)
{
    Write((__v).path(), __msg);
}

bool
PBluetoothChild::Read(
        StartDiscoveryRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const Request& __v,
        Message* __msg)
{
    typedef Request __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TDefaultAdapterPathRequest:
        {
            Write((__v).get_DefaultAdapterPathRequest(), __msg);
            return;
        }
    case __type::TSetPropertyRequest:
        {
            Write((__v).get_SetPropertyRequest(), __msg);
            return;
        }
    case __type::TGetPropertyRequest:
        {
            Write((__v).get_GetPropertyRequest(), __msg);
            return;
        }
    case __type::TStartDiscoveryRequest:
        {
            Write((__v).get_StartDiscoveryRequest(), __msg);
            return;
        }
    case __type::TStopDiscoveryRequest:
        {
            Write((__v).get_StopDiscoveryRequest(), __msg);
            return;
        }
    case __type::TPairRequest:
        {
            Write((__v).get_PairRequest(), __msg);
            return;
        }
    case __type::TUnpairRequest:
        {
            Write((__v).get_UnpairRequest(), __msg);
            return;
        }
    case __type::TSetPinCodeRequest:
        {
            Write((__v).get_SetPinCodeRequest(), __msg);
            return;
        }
    case __type::TSetPasskeyRequest:
        {
            Write((__v).get_SetPasskeyRequest(), __msg);
            return;
        }
    case __type::TConfirmPairingConfirmationRequest:
        {
            Write((__v).get_ConfirmPairingConfirmationRequest(), __msg);
            return;
        }
    case __type::TDenyPairingConfirmationRequest:
        {
            Write((__v).get_DenyPairingConfirmationRequest(), __msg);
            return;
        }
    case __type::TConfirmAuthorizationRequest:
        {
            Write((__v).get_ConfirmAuthorizationRequest(), __msg);
            return;
        }
    case __type::TDenyAuthorizationRequest:
        {
            Write((__v).get_DenyAuthorizationRequest(), __msg);
            return;
        }
    case __type::TDevicePropertiesRequest:
        {
            Write((__v).get_DevicePropertiesRequest(), __msg);
            return;
        }
    case __type::TConnectRequest:
        {
            Write((__v).get_ConnectRequest(), __msg);
            return;
        }
    case __type::TDisconnectRequest:
        {
            Write((__v).get_DisconnectRequest(), __msg);
            return;
        }
    case __type::TSendFileRequest:
        {
            Write((__v).get_SendFileRequest(), __msg);
            return;
        }
    case __type::TStopSendingFileRequest:
        {
            Write((__v).get_StopSendingFileRequest(), __msg);
            return;
        }
    case __type::TConfirmReceivingFileRequest:
        {
            Write((__v).get_ConfirmReceivingFileRequest(), __msg);
            return;
        }
    case __type::TDenyReceivingFileRequest:
        {
            Write((__v).get_DenyReceivingFileRequest(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PBluetoothChild::Read(
        Request* __v,
        const Message* __msg,
        void** __iter)
{
    typedef Request __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TDefaultAdapterPathRequest:
        {
            DefaultAdapterPathRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_DefaultAdapterPathRequest())), __msg, __iter);
        }
    case __type::TSetPropertyRequest:
        {
            SetPropertyRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SetPropertyRequest())), __msg, __iter);
        }
    case __type::TGetPropertyRequest:
        {
            GetPropertyRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GetPropertyRequest())), __msg, __iter);
        }
    case __type::TStartDiscoveryRequest:
        {
            StartDiscoveryRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_StartDiscoveryRequest())), __msg, __iter);
        }
    case __type::TStopDiscoveryRequest:
        {
            StopDiscoveryRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_StopDiscoveryRequest())), __msg, __iter);
        }
    case __type::TPairRequest:
        {
            PairRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_PairRequest())), __msg, __iter);
        }
    case __type::TUnpairRequest:
        {
            UnpairRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_UnpairRequest())), __msg, __iter);
        }
    case __type::TSetPinCodeRequest:
        {
            SetPinCodeRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SetPinCodeRequest())), __msg, __iter);
        }
    case __type::TSetPasskeyRequest:
        {
            SetPasskeyRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SetPasskeyRequest())), __msg, __iter);
        }
    case __type::TConfirmPairingConfirmationRequest:
        {
            ConfirmPairingConfirmationRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ConfirmPairingConfirmationRequest())), __msg, __iter);
        }
    case __type::TDenyPairingConfirmationRequest:
        {
            DenyPairingConfirmationRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_DenyPairingConfirmationRequest())), __msg, __iter);
        }
    case __type::TConfirmAuthorizationRequest:
        {
            ConfirmAuthorizationRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ConfirmAuthorizationRequest())), __msg, __iter);
        }
    case __type::TDenyAuthorizationRequest:
        {
            DenyAuthorizationRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_DenyAuthorizationRequest())), __msg, __iter);
        }
    case __type::TDevicePropertiesRequest:
        {
            DevicePropertiesRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_DevicePropertiesRequest())), __msg, __iter);
        }
    case __type::TConnectRequest:
        {
            ConnectRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ConnectRequest())), __msg, __iter);
        }
    case __type::TDisconnectRequest:
        {
            DisconnectRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_DisconnectRequest())), __msg, __iter);
        }
    case __type::TSendFileRequest:
        {
            SendFileRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SendFileRequest())), __msg, __iter);
        }
    case __type::TStopSendingFileRequest:
        {
            StopSendingFileRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_StopSendingFileRequest())), __msg, __iter);
        }
    case __type::TConfirmReceivingFileRequest:
        {
            ConfirmReceivingFileRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ConfirmReceivingFileRequest())), __msg, __iter);
        }
    case __type::TDenyReceivingFileRequest:
        {
            DenyReceivingFileRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_DenyReceivingFileRequest())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PBluetoothChild::Write(
        const BluetoothSignal& __v,
        Message* __msg)
{
    Write((__v).name(), __msg);
    Write((__v).path(), __msg);
    Write((__v).value(), __msg);
}

bool
PBluetoothChild::Read(
        BluetoothSignal* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->name())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->value())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const StopDiscoveryRequest& __v,
        Message* __msg)
{
    Write((__v).path(), __msg);
}

bool
PBluetoothChild::Read(
        StopDiscoveryRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBluetoothChild::Write(
        const BluetoothValue& __v,
        Message* __msg)
{
    typedef BluetoothValue __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::Tuint32_t:
        {
            Write((__v).get_uint32_t(), __msg);
            return;
        }
    case __type::TnsString:
        {
            Write((__v).get_nsString(), __msg);
            return;
        }
    case __type::Tbool:
        {
            Write((__v).get_bool(), __msg);
            return;
        }
    case __type::TArrayOfnsString:
        {
            Write((__v).get_ArrayOfnsString(), __msg);
            return;
        }
    case __type::TArrayOfuint8_t:
        {
            Write((__v).get_ArrayOfuint8_t(), __msg);
            return;
        }
    case __type::TArrayOfBluetoothNamedValue:
        {
            Write((__v).get_ArrayOfBluetoothNamedValue(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PBluetoothChild::Read(
        BluetoothValue* __v,
        const Message* __msg,
        void** __iter)
{
    typedef BluetoothValue __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::Tuint32_t:
        {
            uint32_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_uint32_t())), __msg, __iter);
        }
    case __type::TnsString:
        {
            nsString tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_nsString())), __msg, __iter);
        }
    case __type::Tbool:
        {
            bool tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_bool())), __msg, __iter);
        }
    case __type::TArrayOfnsString:
        {
            InfallibleTArray<nsString> tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ArrayOfnsString())), __msg, __iter);
        }
    case __type::TArrayOfuint8_t:
        {
            InfallibleTArray<uint8_t> tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ArrayOfuint8_t())), __msg, __iter);
        }
    case __type::TArrayOfBluetoothNamedValue:
        {
            InfallibleTArray<BluetoothNamedValue> tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ArrayOfBluetoothNamedValue())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PBluetoothChild::Write(
        const SetPropertyRequest& __v,
        Message* __msg)
{
    Write((__v).type(), __msg);
    Write((__v).path(), __msg);
    Write((__v).value(), __msg);
}

bool
PBluetoothChild::Read(
        SetPropertyRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->type())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->value())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}



} // namespace bluetooth
} // namespace dom
} // namespace mozilla
