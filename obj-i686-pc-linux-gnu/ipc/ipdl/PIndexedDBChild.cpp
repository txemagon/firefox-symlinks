//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PIndexedDBChild.h"

#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/dom/indexedDB/PIndexedDBDatabaseChild.h"
#include "mozilla/dom/indexedDB/PIndexedDBDeleteDatabaseRequestChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::ipc::Shmem Shmem;
using mozilla::dom::PBrowserChild;
using mozilla::dom::PContentChild;
using mozilla::dom::indexedDB::PIndexedDBDatabaseChild;
using mozilla::dom::indexedDB::PIndexedDBDeleteDatabaseRequestChild;

namespace mozilla {
namespace dom {
namespace indexedDB {


void
PIndexedDBChild::ActorDestroy(ActorDestroyReason why)
{
}

PIndexedDBChild::PIndexedDBChild() :
    mId(0),
    mState(PIndexedDB::__Dead)
{
    MOZ_COUNT_CTOR(PIndexedDBChild);
}

PIndexedDBChild::~PIndexedDBChild()
{
    MOZ_COUNT_DTOR(PIndexedDBChild);
}

void
PIndexedDBChild::ManagedPIndexedDBDatabaseChild(InfallibleTArray<PIndexedDBDatabaseChild*>& aArr) const
{
    aArr = mManagedPIndexedDBDatabaseChild;
}

const InfallibleTArray<PIndexedDBDatabaseChild*>&
PIndexedDBChild::ManagedPIndexedDBDatabaseChild() const
{
    return mManagedPIndexedDBDatabaseChild;
}

void
PIndexedDBChild::ManagedPIndexedDBDeleteDatabaseRequestChild(InfallibleTArray<PIndexedDBDeleteDatabaseRequestChild*>& aArr) const
{
    aArr = mManagedPIndexedDBDeleteDatabaseRequestChild;
}

const InfallibleTArray<PIndexedDBDeleteDatabaseRequestChild*>&
PIndexedDBChild::ManagedPIndexedDBDeleteDatabaseRequestChild() const
{
    return mManagedPIndexedDBDeleteDatabaseRequestChild;
}

PIndexedDB::State
PIndexedDBChild::state()
{
    return mState;
}

bool
PIndexedDBChild::Send__delete__(PIndexedDBChild* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PIndexedDB::Msg___delete__* __msg = new PIndexedDB::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PIndexedDBChild] Sending ", stderr);
    }
    if ((!(PIndexedDB::Transition((actor)->mState, Trigger(Trigger::Recv, PIndexedDB::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PIndexedDBMsgStart, actor);
    return __sendok;
}

PIndexedDBDatabaseChild*
PIndexedDBChild::SendPIndexedDBDatabaseConstructor(
        const nsString& name,
        const uint64_t& version)
{
    return SendPIndexedDBDatabaseConstructor(AllocPIndexedDBDatabase(name, version), name, version);
}

PIndexedDBDatabaseChild*
PIndexedDBChild::SendPIndexedDBDatabaseConstructor(
        PIndexedDBDatabaseChild* actor,
        const nsString& name,
        const uint64_t& version)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPIndexedDBDatabaseChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::dom::indexedDB::PIndexedDBDatabase::__Start;

    PIndexedDB::Msg_PIndexedDBDatabaseConstructor* __msg = new PIndexedDB::Msg_PIndexedDBDatabaseConstructor();

    Write(actor, __msg, false);
    Write(name, __msg);
    Write(version, __msg);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PIndexedDBChild] Sending ", stderr);
    }
    if ((!(PIndexedDB::Transition(mState, Trigger(Trigger::Recv, PIndexedDB::Msg_PIndexedDBDatabaseConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PIndexedDBDatabaseMsgStart, actor);
        return 0;
    }
    return actor;
}

PIndexedDBDeleteDatabaseRequestChild*
PIndexedDBChild::SendPIndexedDBDeleteDatabaseRequestConstructor(const nsString& name)
{
    return SendPIndexedDBDeleteDatabaseRequestConstructor(AllocPIndexedDBDeleteDatabaseRequest(name), name);
}

PIndexedDBDeleteDatabaseRequestChild*
PIndexedDBChild::SendPIndexedDBDeleteDatabaseRequestConstructor(
        PIndexedDBDeleteDatabaseRequestChild* actor,
        const nsString& name)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPIndexedDBDeleteDatabaseRequestChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::dom::indexedDB::PIndexedDBDeleteDatabaseRequest::__Start;

    PIndexedDB::Msg_PIndexedDBDeleteDatabaseRequestConstructor* __msg = new PIndexedDB::Msg_PIndexedDBDeleteDatabaseRequestConstructor();

    Write(actor, __msg, false);
    Write(name, __msg);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PIndexedDBChild] Sending ", stderr);
    }
    if ((!(PIndexedDB::Transition(mState, Trigger(Trigger::Recv, PIndexedDB::Msg_PIndexedDBDeleteDatabaseRequestConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PIndexedDBDeleteDatabaseRequestMsgStart, actor);
        return 0;
    }
    return actor;
}

int32_t
PIndexedDBChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PIndexedDBChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PIndexedDBChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PIndexedDBChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PIndexedDBChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PIndexedDBDatabaseMsgStart:
        {
            PIndexedDBDatabaseChild* actor = static_cast<PIndexedDBDatabaseChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPIndexedDBDatabaseChild).NoIndex) != ((mManagedPIndexedDBDatabaseChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPIndexedDBDatabaseChild).RemoveElementSorted(actor);
            DeallocPIndexedDBDatabase(actor);
            return;
        }
    case PIndexedDBDeleteDatabaseRequestMsgStart:
        {
            PIndexedDBDeleteDatabaseRequestChild* actor = static_cast<PIndexedDBDeleteDatabaseRequestChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPIndexedDBDeleteDatabaseRequestChild).NoIndex) != ((mManagedPIndexedDBDeleteDatabaseRequestChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPIndexedDBDeleteDatabaseRequestChild).RemoveElementSorted(actor);
            DeallocPIndexedDBDeleteDatabaseRequest(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PIndexedDBChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PIndexedDBChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PIndexedDBChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PIndexedDBChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PIndexedDBChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PIndexedDBChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PIndexedDBChild::GetIPCChannel()
{
    return mChannel;
}

PIndexedDBChild::Result
PIndexedDBChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PIndexedDB::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PIndexedDB::Reply_PIndexedDBDatabaseConstructor__ID:
        {
            return MsgProcessed;
        }
    case PIndexedDB::Reply_PIndexedDBDeleteDatabaseRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PIndexedDBChild::Result
PIndexedDBChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PIndexedDBChild::Result
PIndexedDBChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PIndexedDBChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PIndexedDBChild::GetProtocolTypeId()
{
    return PIndexedDBMsgStart;
}

bool
PIndexedDBChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PIndexedDBChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PIndexedDBChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PIndexedDBChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PIndexedDBChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PIndexedDBChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PIndexedDBChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PIndexedDBChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PIndexedDBChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PIndexedDBChild] abort()ing as a result");
}

void
PIndexedDBChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PIndexedDBDatabase kids
        InfallibleTArray<PIndexedDBDatabaseChild*> kids(mManagedPIndexedDBDatabaseChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PIndexedDBDeleteDatabaseRequest kids
        InfallibleTArray<PIndexedDBDeleteDatabaseRequestChild*> kids(mManagedPIndexedDBDeleteDatabaseRequestChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PIndexedDBChild::DeallocSubtree()
{
    {
        // Recursively deleting PIndexedDBDatabase kids
        InfallibleTArray<PIndexedDBDatabaseChild*>& kids = mManagedPIndexedDBDatabaseChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPIndexedDBDatabase(kids[i]);
        }
        (mManagedPIndexedDBDatabaseChild).Clear();
    }
    {
        // Recursively deleting PIndexedDBDeleteDatabaseRequest kids
        InfallibleTArray<PIndexedDBDeleteDatabaseRequestChild*>& kids = mManagedPIndexedDBDeleteDatabaseRequestChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPIndexedDBDeleteDatabaseRequest(kids[i]);
        }
        (mManagedPIndexedDBDeleteDatabaseRequestChild).Clear();
    }
}

void
PIndexedDBChild::Write(
        PIndexedDBDatabaseChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBChild::Read(
        PIndexedDBDatabaseChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDB");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PIndexedDBDatabase");
        return false;
    }

    if ((PIndexedDBDatabaseMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PIndexedDBDatabase has different type");
        return false;
    }

    (*(__v)) = static_cast<PIndexedDBDatabaseChild*>(listener);
    return true;
}

void
PIndexedDBChild::Write(
        PIndexedDBDeleteDatabaseRequestChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBChild::Read(
        PIndexedDBDeleteDatabaseRequestChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDB");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PIndexedDBDeleteDatabaseRequest");
        return false;
    }

    if ((PIndexedDBDeleteDatabaseRequestMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PIndexedDBDeleteDatabaseRequest has different type");
        return false;
    }

    (*(__v)) = static_cast<PIndexedDBDeleteDatabaseRequestChild*>(listener);
    return true;
}

void
PIndexedDBChild::Write(
        PIndexedDBChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBChild::Read(
        PIndexedDBChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDB");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PIndexedDB");
        return false;
    }

    if ((PIndexedDBMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PIndexedDB has different type");
        return false;
    }

    (*(__v)) = static_cast<PIndexedDBChild*>(listener);
    return true;
}



} // namespace indexedDB
} // namespace dom
} // namespace mozilla
