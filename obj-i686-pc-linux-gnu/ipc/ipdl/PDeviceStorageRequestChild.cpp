//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/devicestorage/PDeviceStorageRequestChild.h"

#include "mozilla/dom/PBlobChild.h"
#include "mozilla/dom/PContentChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::dom::devicestorage::BlobResponse BlobResponse;
typedef mozilla::dom::devicestorage::DeviceStorageFileValue DeviceStorageFileValue;
typedef mozilla::dom::devicestorage::DeviceStorageResponseValue DeviceStorageResponseValue;
typedef mozilla::dom::devicestorage::EnumerationResponse EnumerationResponse;
typedef mozilla::dom::devicestorage::ErrorResponse ErrorResponse;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::dom::devicestorage::StatStorageResponse StatStorageResponse;
typedef mozilla::dom::devicestorage::SuccessResponse SuccessResponse;
using mozilla::dom::PBlobChild;
using mozilla::dom::PContentChild;

namespace mozilla {
namespace dom {
namespace devicestorage {


bool
PDeviceStorageRequestChild::Recv__delete__(const DeviceStorageResponseValue& response)
{
    return true;
}

void
PDeviceStorageRequestChild::ActorDestroy(ActorDestroyReason why)
{
}

PDeviceStorageRequestChild::PDeviceStorageRequestChild() :
    mId(0),
    mState(PDeviceStorageRequest::__Dead)
{
    MOZ_COUNT_CTOR(PDeviceStorageRequestChild);
}

PDeviceStorageRequestChild::~PDeviceStorageRequestChild()
{
    MOZ_COUNT_DTOR(PDeviceStorageRequestChild);
}

PContentChild*
PDeviceStorageRequestChild::Manager() const
{
    return static_cast<PContentChild*>(mManager);
}

PDeviceStorageRequest::State
PDeviceStorageRequestChild::state()
{
    return mState;
}

int32_t
PDeviceStorageRequestChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PDeviceStorageRequestChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PDeviceStorageRequestChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PDeviceStorageRequestChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PDeviceStorageRequestChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    NS_RUNTIMEABORT("unreached");
    return;
}

Shmem::SharedMemory*
PDeviceStorageRequestChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PDeviceStorageRequestChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PDeviceStorageRequestChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PDeviceStorageRequestChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PDeviceStorageRequestChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PDeviceStorageRequestChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PDeviceStorageRequestChild::GetIPCChannel()
{
    return mChannel;
}

PDeviceStorageRequestChild::Result
PDeviceStorageRequestChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PDeviceStorageRequest::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PDeviceStorageRequest::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PDeviceStorageRequest::Msg___delete__*>((&(__msg))))->Log("[PDeviceStorageRequestChild] Received ", stderr);
            }

            void* __iter = 0;
            PDeviceStorageRequestChild* actor;
            DeviceStorageResponseValue response;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(response)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PDeviceStorageRequest::Transition(mState, Trigger(Trigger::Send, PDeviceStorageRequest::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__(response)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PDeviceStorageRequestMsgStart, actor);


            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PDeviceStorageRequestChild::Result
PDeviceStorageRequestChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PDeviceStorageRequestChild::Result
PDeviceStorageRequestChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PDeviceStorageRequestChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PDeviceStorageRequestChild::GetProtocolTypeId()
{
    return PDeviceStorageRequestMsgStart;
}

bool
PDeviceStorageRequestChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PDeviceStorageRequestChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PDeviceStorageRequestChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PDeviceStorageRequestChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PDeviceStorageRequestChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PDeviceStorageRequestChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PDeviceStorageRequestChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PDeviceStorageRequestChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PDeviceStorageRequestChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PDeviceStorageRequestChild] abort()ing as a result");
}

void
PDeviceStorageRequestChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PDeviceStorageRequestChild::DeallocSubtree()
{
}

void
PDeviceStorageRequestChild::Write(
        const DeviceStorageFileValue& __v,
        Message* __msg)
{
    Write((__v).type(), __msg);
    Write((__v).name(), __msg);
    Write((__v).fullpath(), __msg);
}

bool
PDeviceStorageRequestChild::Read(
        DeviceStorageFileValue* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->type())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->name())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->fullpath())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PDeviceStorageRequestChild::Write(
        const SuccessResponse& __v,
        Message* __msg)
{
}

bool
PDeviceStorageRequestChild::Read(
        SuccessResponse* __v,
        const Message* __msg,
        void** __iter)
{
    return true;
}

void
PDeviceStorageRequestChild::Write(
        const EnumerationResponse& __v,
        Message* __msg)
{
    Write((__v).paths(), __msg);
}

bool
PDeviceStorageRequestChild::Read(
        EnumerationResponse* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->paths())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PDeviceStorageRequestChild::Write(
        PDeviceStorageRequestChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PDeviceStorageRequestChild::Read(
        PDeviceStorageRequestChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PDeviceStorageRequest");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PDeviceStorageRequest");
        return false;
    }

    if ((PDeviceStorageRequestMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PDeviceStorageRequest has different type");
        return false;
    }

    (*(__v)) = static_cast<PDeviceStorageRequestChild*>(listener);
    return true;
}

void
PDeviceStorageRequestChild::Write(
        const DeviceStorageResponseValue& __v,
        Message* __msg)
{
    typedef DeviceStorageResponseValue __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TErrorResponse:
        {
            Write((__v).get_ErrorResponse(), __msg);
            return;
        }
    case __type::TSuccessResponse:
        {
            Write((__v).get_SuccessResponse(), __msg);
            return;
        }
    case __type::TBlobResponse:
        {
            Write((__v).get_BlobResponse(), __msg);
            return;
        }
    case __type::TEnumerationResponse:
        {
            Write((__v).get_EnumerationResponse(), __msg);
            return;
        }
    case __type::TStatStorageResponse:
        {
            Write((__v).get_StatStorageResponse(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PDeviceStorageRequestChild::Read(
        DeviceStorageResponseValue* __v,
        const Message* __msg,
        void** __iter)
{
    typedef DeviceStorageResponseValue __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TErrorResponse:
        {
            ErrorResponse tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ErrorResponse())), __msg, __iter);
        }
    case __type::TSuccessResponse:
        {
            SuccessResponse tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SuccessResponse())), __msg, __iter);
        }
    case __type::TBlobResponse:
        {
            BlobResponse tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_BlobResponse())), __msg, __iter);
        }
    case __type::TEnumerationResponse:
        {
            EnumerationResponse tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_EnumerationResponse())), __msg, __iter);
        }
    case __type::TStatStorageResponse:
        {
            StatStorageResponse tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_StatStorageResponse())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PDeviceStorageRequestChild::Write(
        const InfallibleTArray<DeviceStorageFileValue>& __v,
        Message* __msg)
{
    uint32_t length = (__v).Length();
    Write(length, __msg);

    for (uint32_t i = 0; (i) < (length); (++(i))) {
        Write(__v[i], __msg);
    }
}

bool
PDeviceStorageRequestChild::Read(
        InfallibleTArray<DeviceStorageFileValue>* __v,
        const Message* __msg,
        void** __iter)
{
    InfallibleTArray<DeviceStorageFileValue>& a = (*(__v));
    uint32_t length;
    if ((!(Read((&(length)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    (__v)->SetLength(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(a[i])), __msg, __iter)))) {
            mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
            return false;
        }
    }
    return true;
}

void
PDeviceStorageRequestChild::Write(
        const ErrorResponse& __v,
        Message* __msg)
{
    Write((__v).error(), __msg);
}

bool
PDeviceStorageRequestChild::Read(
        ErrorResponse* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->error())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PDeviceStorageRequestChild::Write(
        PBlobChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PDeviceStorageRequestChild::Read(
        PBlobChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PDeviceStorageRequest");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PBlob");
        return false;
    }

    if ((PBlobMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PBlob has different type");
        return false;
    }

    (*(__v)) = static_cast<PBlobChild*>(listener);
    return true;
}

void
PDeviceStorageRequestChild::Write(
        const StatStorageResponse& __v,
        Message* __msg)
{
    Write((__v).freeBytes(), __msg);
    Write((__v).totalBytes(), __msg);
    Write((__v).mountState(), __msg);
}

bool
PDeviceStorageRequestChild::Read(
        StatStorageResponse* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->freeBytes())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->totalBytes())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->mountState())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PDeviceStorageRequestChild::Write(
        const BlobResponse& __v,
        Message* __msg)
{
    // skipping actor field that's meaningless on this side
    Write((__v).blobChild(), __msg, false);
}

bool
PDeviceStorageRequestChild::Read(
        BlobResponse* __v,
        const Message* __msg,
        void** __iter)
{
    // skipping actor field that's meaningless on this side
    if ((!(Read((&((__v)->blobChild())), __msg, __iter, false)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}



} // namespace devicestorage
} // namespace dom
} // namespace mozilla
