//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PPluginScriptableObject.h"

namespace mozilla {
namespace plugins {
namespace PPluginScriptableObject {

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next)
{
    switch (from) {
    case __Null:
    case __Error:
        if ((Msg___delete____ID) == ((trigger).mMsg)) {
            (*(next)) = __Dead;
            return true;
        }
        return (__Null) == (from);
    case __Dead:
        NS_RUNTIMEABORT("__delete__()d actor");
        return false;
    case __Dying:
        NS_RUNTIMEABORT("__delete__()d (and unexpectedly dying) actor");
        return false;
    default:
        NS_RUNTIMEABORT("corrupted actor state");
        return false;
    }
    (*(next)) = __Error;
    return false;
}

} // namespace PPluginScriptableObject
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union Variant|
//
namespace mozilla {
namespace plugins {
bool
Variant::MaybeDestroy(Type aNewType)
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tvoid_t:
        {
            (ptr_void_t())->~void_t__tdef();
            break;
        }
    case Tnull_t:
        {
            (ptr_null_t())->~null_t__tdef();
            break;
        }
    case Tbool:
        {
            (ptr_bool())->~bool__tdef();
            break;
        }
    case Tint:
        {
            (ptr_int())->~int__tdef();
            break;
        }
    case Tdouble:
        {
            (ptr_double())->~double__tdef();
            break;
        }
    case TnsCString:
        {
            (ptr_nsCString())->~nsCString__tdef();
            break;
        }
    case TPPluginScriptableObjectParent:
        {
            (ptr_PPluginScriptableObjectParent())->~PPluginScriptableObjectParent__tdef();
            break;
        }
    case TPPluginScriptableObjectChild:
        {
            (ptr_PPluginScriptableObjectChild())->~PPluginScriptableObjectChild__tdef();
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("not reached");
            break;
        }
    }
    return true;
}

Variant::Variant(const void_t& aOther)
{
    new (ptr_void_t()) void_t(aOther);
    mType = Tvoid_t;
}

Variant::Variant(const null_t& aOther)
{
    new (ptr_null_t()) null_t(aOther);
    mType = Tnull_t;
}

Variant::Variant(const bool& aOther)
{
    new (ptr_bool()) bool(aOther);
    mType = Tbool;
}

Variant::Variant(const int& aOther)
{
    new (ptr_int()) int(aOther);
    mType = Tint;
}

Variant::Variant(const double& aOther)
{
    new (ptr_double()) double(aOther);
    mType = Tdouble;
}

Variant::Variant(const nsCString& aOther)
{
    new (ptr_nsCString()) nsCString(aOther);
    mType = TnsCString;
}

Variant::Variant(PPluginScriptableObjectParent* aOther)
{
    new (ptr_PPluginScriptableObjectParent()) PPluginScriptableObjectParent*(const_cast<PPluginScriptableObjectParent*>(aOther));
    mType = TPPluginScriptableObjectParent;
}

Variant::Variant(PPluginScriptableObjectChild* aOther)
{
    new (ptr_PPluginScriptableObjectChild()) PPluginScriptableObjectChild*(const_cast<PPluginScriptableObjectChild*>(aOther));
    mType = TPPluginScriptableObjectChild;
}

Variant::Variant(const Variant& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tvoid_t:
        {
            new (ptr_void_t()) void_t((aOther).get_void_t());
            break;
        }
    case Tnull_t:
        {
            new (ptr_null_t()) null_t((aOther).get_null_t());
            break;
        }
    case Tbool:
        {
            new (ptr_bool()) bool((aOther).get_bool());
            break;
        }
    case Tint:
        {
            new (ptr_int()) int((aOther).get_int());
            break;
        }
    case Tdouble:
        {
            new (ptr_double()) double((aOther).get_double());
            break;
        }
    case TnsCString:
        {
            new (ptr_nsCString()) nsCString((aOther).get_nsCString());
            break;
        }
    case TPPluginScriptableObjectParent:
        {
            new (ptr_PPluginScriptableObjectParent()) PPluginScriptableObjectParent*(const_cast<PPluginScriptableObjectParent*>((aOther).get_PPluginScriptableObjectParent()));
            break;
        }
    case TPPluginScriptableObjectChild:
        {
            new (ptr_PPluginScriptableObjectChild()) PPluginScriptableObjectChild*(const_cast<PPluginScriptableObjectChild*>((aOther).get_PPluginScriptableObjectChild()));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

Variant::~Variant()
{
    MaybeDestroy(T__None);
}

Variant&
Variant::operator=(const void_t& aRhs)
{
    if (MaybeDestroy(Tvoid_t)) {
        new (ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = aRhs;
    mType = Tvoid_t;
    return (*(this));
}

Variant&
Variant::operator=(const null_t& aRhs)
{
    if (MaybeDestroy(Tnull_t)) {
        new (ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = aRhs;
    mType = Tnull_t;
    return (*(this));
}

Variant&
Variant::operator=(const bool& aRhs)
{
    if (MaybeDestroy(Tbool)) {
        new (ptr_bool()) bool;
    }
    (*(ptr_bool())) = aRhs;
    mType = Tbool;
    return (*(this));
}

Variant&
Variant::operator=(const int& aRhs)
{
    if (MaybeDestroy(Tint)) {
        new (ptr_int()) int;
    }
    (*(ptr_int())) = aRhs;
    mType = Tint;
    return (*(this));
}

Variant&
Variant::operator=(const double& aRhs)
{
    if (MaybeDestroy(Tdouble)) {
        new (ptr_double()) double;
    }
    (*(ptr_double())) = aRhs;
    mType = Tdouble;
    return (*(this));
}

Variant&
Variant::operator=(const nsCString& aRhs)
{
    if (MaybeDestroy(TnsCString)) {
        new (ptr_nsCString()) nsCString;
    }
    (*(ptr_nsCString())) = aRhs;
    mType = TnsCString;
    return (*(this));
}

Variant&
Variant::operator=(PPluginScriptableObjectParent* aRhs)
{
    if (MaybeDestroy(TPPluginScriptableObjectParent)) {
        new (ptr_PPluginScriptableObjectParent()) PPluginScriptableObjectParent*;
    }
    (*(ptr_PPluginScriptableObjectParent())) = const_cast<PPluginScriptableObjectParent*>(aRhs);
    mType = TPPluginScriptableObjectParent;
    return (*(this));
}

Variant&
Variant::operator=(PPluginScriptableObjectChild* aRhs)
{
    if (MaybeDestroy(TPPluginScriptableObjectChild)) {
        new (ptr_PPluginScriptableObjectChild()) PPluginScriptableObjectChild*;
    }
    (*(ptr_PPluginScriptableObjectChild())) = const_cast<PPluginScriptableObjectChild*>(aRhs);
    mType = TPPluginScriptableObjectChild;
    return (*(this));
}

Variant&
Variant::operator=(const Variant& aRhs)
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = (aRhs).get_void_t();
            break;
        }
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = (aRhs).get_null_t();
            break;
        }
    case Tbool:
        {
            if (MaybeDestroy(t)) {
                new (ptr_bool()) bool;
            }
            (*(ptr_bool())) = (aRhs).get_bool();
            break;
        }
    case Tint:
        {
            if (MaybeDestroy(t)) {
                new (ptr_int()) int;
            }
            (*(ptr_int())) = (aRhs).get_int();
            break;
        }
    case Tdouble:
        {
            if (MaybeDestroy(t)) {
                new (ptr_double()) double;
            }
            (*(ptr_double())) = (aRhs).get_double();
            break;
        }
    case TnsCString:
        {
            if (MaybeDestroy(t)) {
                new (ptr_nsCString()) nsCString;
            }
            (*(ptr_nsCString())) = (aRhs).get_nsCString();
            break;
        }
    case TPPluginScriptableObjectParent:
        {
            if (MaybeDestroy(t)) {
                new (ptr_PPluginScriptableObjectParent()) PPluginScriptableObjectParent*;
            }
            (*(ptr_PPluginScriptableObjectParent())) = const_cast<PPluginScriptableObjectParent*>((aRhs).get_PPluginScriptableObjectParent());
            break;
        }
    case TPPluginScriptableObjectChild:
        {
            if (MaybeDestroy(t)) {
                new (ptr_PPluginScriptableObjectChild()) PPluginScriptableObjectChild*;
            }
            (*(ptr_PPluginScriptableObjectChild())) = const_cast<PPluginScriptableObjectChild*>((aRhs).get_PPluginScriptableObjectChild());
            break;
        }
    case T__None:
        {
            MaybeDestroy(t);
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

bool
Variant::operator==(const void_t& aRhs) const
{
    return (get_void_t()) == (aRhs);
}

bool
Variant::operator==(const null_t& aRhs) const
{
    return (get_null_t()) == (aRhs);
}

bool
Variant::operator==(const bool& aRhs) const
{
    return (get_bool()) == (aRhs);
}

bool
Variant::operator==(const int& aRhs) const
{
    return (get_int()) == (aRhs);
}

bool
Variant::operator==(const double& aRhs) const
{
    return (get_double()) == (aRhs);
}

bool
Variant::operator==(const nsCString& aRhs) const
{
    return (get_nsCString()) == (aRhs);
}

bool
Variant::operator==(PPluginScriptableObjectParent* aRhs) const
{
    return (get_PPluginScriptableObjectParent()) == (aRhs);
}

bool
Variant::operator==(PPluginScriptableObjectChild* aRhs) const
{
    return (get_PPluginScriptableObjectChild()) == (aRhs);
}

bool
Variant::operator==(const Variant& aRhs) const
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case Tvoid_t:
        {
            return (get_void_t()) == ((aRhs).get_void_t());
        }
    case Tnull_t:
        {
            return (get_null_t()) == ((aRhs).get_null_t());
        }
    case Tbool:
        {
            return (get_bool()) == ((aRhs).get_bool());
        }
    case Tint:
        {
            return (get_int()) == ((aRhs).get_int());
        }
    case Tdouble:
        {
            return (get_double()) == ((aRhs).get_double());
        }
    case TnsCString:
        {
            return (get_nsCString()) == ((aRhs).get_nsCString());
        }
    case TPPluginScriptableObjectParent:
        {
            return (get_PPluginScriptableObjectParent()) == ((aRhs).get_PPluginScriptableObjectParent());
        }
    case TPPluginScriptableObjectChild:
        {
            return (get_PPluginScriptableObjectChild()) == ((aRhs).get_PPluginScriptableObjectChild());
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return false;
        }
    }
}

} // namespace plugins
} // namespace mozilla
