//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PNeckoChild.h"

#include "mozilla/dom/PContentChild.h"
#include "mozilla/net/PHttpChannelChild.h"
#include "mozilla/net/PCookieServiceChild.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/net/PWyciwygChannelChild.h"
#include "mozilla/net/PFTPChannelChild.h"
#include "mozilla/net/PWebSocketChild.h"
#include "mozilla/net/PTCPSocketChild.h"
#include "mozilla/net/PRemoteOpenFileChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::ipc::GenericURIParams GenericURIParams;
typedef mozilla::ipc::JARURIParams JARURIParams;
typedef mozilla::ipc::OptionalURIParams OptionalURIParams;
typedef IPC::SerializedLoadContext SerializedLoadContext;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
typedef mozilla::ipc::StandardURLParams StandardURLParams;
typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
typedef mozilla::ipc::URIParams URIParams;
typedef mozilla::void_t void_t;
using mozilla::dom::PContentChild;
using mozilla::net::PHttpChannelChild;
using mozilla::net::PCookieServiceChild;
using mozilla::dom::PBrowserChild;
using mozilla::net::PWyciwygChannelChild;
using mozilla::net::PFTPChannelChild;
using mozilla::net::PWebSocketChild;
using mozilla::net::PTCPSocketChild;
using mozilla::net::PRemoteOpenFileChild;

namespace mozilla {
namespace net {


void
PNeckoChild::ActorDestroy(ActorDestroyReason why)
{
}

PNeckoChild::PNeckoChild() :
    mId(0),
    mState(PNecko::__Dead)
{
    MOZ_COUNT_CTOR(PNeckoChild);
}

PNeckoChild::~PNeckoChild()
{
    MOZ_COUNT_DTOR(PNeckoChild);
}

PContentChild*
PNeckoChild::Manager() const
{
    return static_cast<PContentChild*>(mManager);
}

void
PNeckoChild::ManagedPHttpChannelChild(InfallibleTArray<PHttpChannelChild*>& aArr) const
{
    aArr = mManagedPHttpChannelChild;
}

const InfallibleTArray<PHttpChannelChild*>&
PNeckoChild::ManagedPHttpChannelChild() const
{
    return mManagedPHttpChannelChild;
}

void
PNeckoChild::ManagedPCookieServiceChild(InfallibleTArray<PCookieServiceChild*>& aArr) const
{
    aArr = mManagedPCookieServiceChild;
}

const InfallibleTArray<PCookieServiceChild*>&
PNeckoChild::ManagedPCookieServiceChild() const
{
    return mManagedPCookieServiceChild;
}

void
PNeckoChild::ManagedPWyciwygChannelChild(InfallibleTArray<PWyciwygChannelChild*>& aArr) const
{
    aArr = mManagedPWyciwygChannelChild;
}

const InfallibleTArray<PWyciwygChannelChild*>&
PNeckoChild::ManagedPWyciwygChannelChild() const
{
    return mManagedPWyciwygChannelChild;
}

void
PNeckoChild::ManagedPFTPChannelChild(InfallibleTArray<PFTPChannelChild*>& aArr) const
{
    aArr = mManagedPFTPChannelChild;
}

const InfallibleTArray<PFTPChannelChild*>&
PNeckoChild::ManagedPFTPChannelChild() const
{
    return mManagedPFTPChannelChild;
}

void
PNeckoChild::ManagedPWebSocketChild(InfallibleTArray<PWebSocketChild*>& aArr) const
{
    aArr = mManagedPWebSocketChild;
}

const InfallibleTArray<PWebSocketChild*>&
PNeckoChild::ManagedPWebSocketChild() const
{
    return mManagedPWebSocketChild;
}

void
PNeckoChild::ManagedPTCPSocketChild(InfallibleTArray<PTCPSocketChild*>& aArr) const
{
    aArr = mManagedPTCPSocketChild;
}

const InfallibleTArray<PTCPSocketChild*>&
PNeckoChild::ManagedPTCPSocketChild() const
{
    return mManagedPTCPSocketChild;
}

void
PNeckoChild::ManagedPRemoteOpenFileChild(InfallibleTArray<PRemoteOpenFileChild*>& aArr) const
{
    aArr = mManagedPRemoteOpenFileChild;
}

const InfallibleTArray<PRemoteOpenFileChild*>&
PNeckoChild::ManagedPRemoteOpenFileChild() const
{
    return mManagedPRemoteOpenFileChild;
}

PNecko::State
PNeckoChild::state()
{
    return mState;
}

bool
PNeckoChild::Send__delete__(PNeckoChild* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PNecko::Msg___delete__* __msg = new PNecko::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PNeckoChild] Sending ", stderr);
    }
    if ((!(PNecko::Transition((actor)->mState, Trigger(Trigger::Recv, PNecko::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PNeckoMsgStart, actor);
    return __sendok;
}

PCookieServiceChild*
PNeckoChild::SendPCookieServiceConstructor()
{
    return SendPCookieServiceConstructor(AllocPCookieService());
}

PCookieServiceChild*
PNeckoChild::SendPCookieServiceConstructor(PCookieServiceChild* actor)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPCookieServiceChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::net::PCookieService::__Start;

    PNecko::Msg_PCookieServiceConstructor* __msg = new PNecko::Msg_PCookieServiceConstructor();

    Write(actor, __msg, false);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PNeckoChild] Sending ", stderr);
    }
    if ((!(PNecko::Transition(mState, Trigger(Trigger::Recv, PNecko::Msg_PCookieServiceConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PCookieServiceMsgStart, actor);
        return 0;
    }
    return actor;
}

PHttpChannelChild*
PNeckoChild::SendPHttpChannelConstructor(
        PBrowserChild* browser,
        const SerializedLoadContext& loadContext)
{
    return SendPHttpChannelConstructor(AllocPHttpChannel(browser, loadContext), browser, loadContext);
}

PHttpChannelChild*
PNeckoChild::SendPHttpChannelConstructor(
        PHttpChannelChild* actor,
        PBrowserChild* browser,
        const SerializedLoadContext& loadContext)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPHttpChannelChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::net::PHttpChannel::__Start;

    PNecko::Msg_PHttpChannelConstructor* __msg = new PNecko::Msg_PHttpChannelConstructor();

    Write(actor, __msg, false);
    Write(browser, __msg, true);
    Write(loadContext, __msg);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PNeckoChild] Sending ", stderr);
    }
    if ((!(PNecko::Transition(mState, Trigger(Trigger::Recv, PNecko::Msg_PHttpChannelConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PHttpChannelMsgStart, actor);
        return 0;
    }
    return actor;
}

PWyciwygChannelChild*
PNeckoChild::SendPWyciwygChannelConstructor()
{
    return SendPWyciwygChannelConstructor(AllocPWyciwygChannel());
}

PWyciwygChannelChild*
PNeckoChild::SendPWyciwygChannelConstructor(PWyciwygChannelChild* actor)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPWyciwygChannelChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::net::PWyciwygChannel::__Start;

    PNecko::Msg_PWyciwygChannelConstructor* __msg = new PNecko::Msg_PWyciwygChannelConstructor();

    Write(actor, __msg, false);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PNeckoChild] Sending ", stderr);
    }
    if ((!(PNecko::Transition(mState, Trigger(Trigger::Recv, PNecko::Msg_PWyciwygChannelConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PWyciwygChannelMsgStart, actor);
        return 0;
    }
    return actor;
}

PFTPChannelChild*
PNeckoChild::SendPFTPChannelConstructor(
        PBrowserChild* browser,
        const SerializedLoadContext& loadContext)
{
    return SendPFTPChannelConstructor(AllocPFTPChannel(browser, loadContext), browser, loadContext);
}

PFTPChannelChild*
PNeckoChild::SendPFTPChannelConstructor(
        PFTPChannelChild* actor,
        PBrowserChild* browser,
        const SerializedLoadContext& loadContext)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPFTPChannelChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::net::PFTPChannel::__Start;

    PNecko::Msg_PFTPChannelConstructor* __msg = new PNecko::Msg_PFTPChannelConstructor();

    Write(actor, __msg, false);
    Write(browser, __msg, false);
    Write(loadContext, __msg);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PNeckoChild] Sending ", stderr);
    }
    if ((!(PNecko::Transition(mState, Trigger(Trigger::Recv, PNecko::Msg_PFTPChannelConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PFTPChannelMsgStart, actor);
        return 0;
    }
    return actor;
}

PWebSocketChild*
PNeckoChild::SendPWebSocketConstructor(
        PBrowserChild* browser,
        const SerializedLoadContext& loadContext)
{
    return SendPWebSocketConstructor(AllocPWebSocket(browser, loadContext), browser, loadContext);
}

PWebSocketChild*
PNeckoChild::SendPWebSocketConstructor(
        PWebSocketChild* actor,
        PBrowserChild* browser,
        const SerializedLoadContext& loadContext)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPWebSocketChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::net::PWebSocket::__Start;

    PNecko::Msg_PWebSocketConstructor* __msg = new PNecko::Msg_PWebSocketConstructor();

    Write(actor, __msg, false);
    Write(browser, __msg, false);
    Write(loadContext, __msg);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PNeckoChild] Sending ", stderr);
    }
    if ((!(PNecko::Transition(mState, Trigger(Trigger::Recv, PNecko::Msg_PWebSocketConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PWebSocketMsgStart, actor);
        return 0;
    }
    return actor;
}

PTCPSocketChild*
PNeckoChild::SendPTCPSocketConstructor(
        const nsString& host,
        const uint16_t& port,
        const bool& useSSL,
        const nsString& binaryType,
        PBrowserChild* browser)
{
    return SendPTCPSocketConstructor(AllocPTCPSocket(host, port, useSSL, binaryType, browser), host, port, useSSL, binaryType, browser);
}

PTCPSocketChild*
PNeckoChild::SendPTCPSocketConstructor(
        PTCPSocketChild* actor,
        const nsString& host,
        const uint16_t& port,
        const bool& useSSL,
        const nsString& binaryType,
        PBrowserChild* browser)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPTCPSocketChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::net::PTCPSocket::__Start;

    PNecko::Msg_PTCPSocketConstructor* __msg = new PNecko::Msg_PTCPSocketConstructor();

    Write(actor, __msg, false);
    Write(host, __msg);
    Write(port, __msg);
    Write(useSSL, __msg);
    Write(binaryType, __msg);
    Write(browser, __msg, true);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PNeckoChild] Sending ", stderr);
    }
    if ((!(PNecko::Transition(mState, Trigger(Trigger::Recv, PNecko::Msg_PTCPSocketConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PTCPSocketMsgStart, actor);
        return 0;
    }
    return actor;
}

PRemoteOpenFileChild*
PNeckoChild::SendPRemoteOpenFileConstructor(
        const URIParams& fileuri,
        PBrowserChild* browser)
{
    return SendPRemoteOpenFileConstructor(AllocPRemoteOpenFile(fileuri, browser), fileuri, browser);
}

PRemoteOpenFileChild*
PNeckoChild::SendPRemoteOpenFileConstructor(
        PRemoteOpenFileChild* actor,
        const URIParams& fileuri,
        PBrowserChild* browser)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPRemoteOpenFileChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::net::PRemoteOpenFile::__Start;

    PNecko::Msg_PRemoteOpenFileConstructor* __msg = new PNecko::Msg_PRemoteOpenFileConstructor();

    Write(actor, __msg, false);
    Write(fileuri, __msg);
    Write(browser, __msg, true);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PNeckoChild] Sending ", stderr);
    }
    if ((!(PNecko::Transition(mState, Trigger(Trigger::Recv, PNecko::Msg_PRemoteOpenFileConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PRemoteOpenFileMsgStart, actor);
        return 0;
    }
    return actor;
}

bool
PNeckoChild::SendHTMLDNSPrefetch(
        const nsString& hostname,
        const uint16_t& flags)
{
    PNecko::Msg_HTMLDNSPrefetch* __msg = new PNecko::Msg_HTMLDNSPrefetch();

    Write(hostname, __msg);
    Write(flags, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PNeckoChild] Sending ", stderr);
    }
    if ((!(PNecko::Transition(mState, Trigger(Trigger::Recv, PNecko::Msg_HTMLDNSPrefetch__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PNeckoChild::SendCancelHTMLDNSPrefetch(
        const nsString& hostname,
        const uint16_t& flags,
        const nsresult& reason)
{
    PNecko::Msg_CancelHTMLDNSPrefetch* __msg = new PNecko::Msg_CancelHTMLDNSPrefetch();

    Write(hostname, __msg);
    Write(flags, __msg);
    Write(reason, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PNeckoChild] Sending ", stderr);
    }
    if ((!(PNecko::Transition(mState, Trigger(Trigger::Recv, PNecko::Msg_CancelHTMLDNSPrefetch__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

int32_t
PNeckoChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PNeckoChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PNeckoChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PNeckoChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PNeckoChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PHttpChannelMsgStart:
        {
            PHttpChannelChild* actor = static_cast<PHttpChannelChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPHttpChannelChild).NoIndex) != ((mManagedPHttpChannelChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPHttpChannelChild).RemoveElementSorted(actor);
            DeallocPHttpChannel(actor);
            return;
        }
    case PCookieServiceMsgStart:
        {
            PCookieServiceChild* actor = static_cast<PCookieServiceChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPCookieServiceChild).NoIndex) != ((mManagedPCookieServiceChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPCookieServiceChild).RemoveElementSorted(actor);
            DeallocPCookieService(actor);
            return;
        }
    case PWyciwygChannelMsgStart:
        {
            PWyciwygChannelChild* actor = static_cast<PWyciwygChannelChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPWyciwygChannelChild).NoIndex) != ((mManagedPWyciwygChannelChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPWyciwygChannelChild).RemoveElementSorted(actor);
            DeallocPWyciwygChannel(actor);
            return;
        }
    case PFTPChannelMsgStart:
        {
            PFTPChannelChild* actor = static_cast<PFTPChannelChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPFTPChannelChild).NoIndex) != ((mManagedPFTPChannelChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPFTPChannelChild).RemoveElementSorted(actor);
            DeallocPFTPChannel(actor);
            return;
        }
    case PWebSocketMsgStart:
        {
            PWebSocketChild* actor = static_cast<PWebSocketChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPWebSocketChild).NoIndex) != ((mManagedPWebSocketChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPWebSocketChild).RemoveElementSorted(actor);
            DeallocPWebSocket(actor);
            return;
        }
    case PTCPSocketMsgStart:
        {
            PTCPSocketChild* actor = static_cast<PTCPSocketChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPTCPSocketChild).NoIndex) != ((mManagedPTCPSocketChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPTCPSocketChild).RemoveElementSorted(actor);
            DeallocPTCPSocket(actor);
            return;
        }
    case PRemoteOpenFileMsgStart:
        {
            PRemoteOpenFileChild* actor = static_cast<PRemoteOpenFileChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPRemoteOpenFileChild).NoIndex) != ((mManagedPRemoteOpenFileChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPRemoteOpenFileChild).RemoveElementSorted(actor);
            DeallocPRemoteOpenFile(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PNeckoChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PNeckoChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PNeckoChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PNeckoChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PNeckoChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PNeckoChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PNeckoChild::GetIPCChannel()
{
    return mChannel;
}

PNeckoChild::Result
PNeckoChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PNecko::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PNecko::Reply_PCookieServiceConstructor__ID:
        {
            return MsgProcessed;
        }
    case PNecko::Reply_PHttpChannelConstructor__ID:
        {
            return MsgProcessed;
        }
    case PNecko::Reply_PWyciwygChannelConstructor__ID:
        {
            return MsgProcessed;
        }
    case PNecko::Reply_PFTPChannelConstructor__ID:
        {
            return MsgProcessed;
        }
    case PNecko::Reply_PWebSocketConstructor__ID:
        {
            return MsgProcessed;
        }
    case PNecko::Reply_PTCPSocketConstructor__ID:
        {
            return MsgProcessed;
        }
    case PNecko::Reply_PRemoteOpenFileConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PNeckoChild::Result
PNeckoChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PNeckoChild::Result
PNeckoChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PNeckoChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PNeckoChild::GetProtocolTypeId()
{
    return PNeckoMsgStart;
}

bool
PNeckoChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PNeckoChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PNeckoChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PNeckoChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PNeckoChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PNeckoChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PNeckoChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PNeckoChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PNeckoChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PNeckoChild] abort()ing as a result");
}

void
PNeckoChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PHttpChannel kids
        InfallibleTArray<PHttpChannelChild*> kids(mManagedPHttpChannelChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PCookieService kids
        InfallibleTArray<PCookieServiceChild*> kids(mManagedPCookieServiceChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PWyciwygChannel kids
        InfallibleTArray<PWyciwygChannelChild*> kids(mManagedPWyciwygChannelChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PFTPChannel kids
        InfallibleTArray<PFTPChannelChild*> kids(mManagedPFTPChannelChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PWebSocket kids
        InfallibleTArray<PWebSocketChild*> kids(mManagedPWebSocketChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PTCPSocket kids
        InfallibleTArray<PTCPSocketChild*> kids(mManagedPTCPSocketChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PRemoteOpenFile kids
        InfallibleTArray<PRemoteOpenFileChild*> kids(mManagedPRemoteOpenFileChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PNeckoChild::DeallocSubtree()
{
    {
        // Recursively deleting PHttpChannel kids
        InfallibleTArray<PHttpChannelChild*>& kids = mManagedPHttpChannelChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPHttpChannel(kids[i]);
        }
        (mManagedPHttpChannelChild).Clear();
    }
    {
        // Recursively deleting PCookieService kids
        InfallibleTArray<PCookieServiceChild*>& kids = mManagedPCookieServiceChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPCookieService(kids[i]);
        }
        (mManagedPCookieServiceChild).Clear();
    }
    {
        // Recursively deleting PWyciwygChannel kids
        InfallibleTArray<PWyciwygChannelChild*>& kids = mManagedPWyciwygChannelChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPWyciwygChannel(kids[i]);
        }
        (mManagedPWyciwygChannelChild).Clear();
    }
    {
        // Recursively deleting PFTPChannel kids
        InfallibleTArray<PFTPChannelChild*>& kids = mManagedPFTPChannelChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPFTPChannel(kids[i]);
        }
        (mManagedPFTPChannelChild).Clear();
    }
    {
        // Recursively deleting PWebSocket kids
        InfallibleTArray<PWebSocketChild*>& kids = mManagedPWebSocketChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPWebSocket(kids[i]);
        }
        (mManagedPWebSocketChild).Clear();
    }
    {
        // Recursively deleting PTCPSocket kids
        InfallibleTArray<PTCPSocketChild*>& kids = mManagedPTCPSocketChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPTCPSocket(kids[i]);
        }
        (mManagedPTCPSocketChild).Clear();
    }
    {
        // Recursively deleting PRemoteOpenFile kids
        InfallibleTArray<PRemoteOpenFileChild*>& kids = mManagedPRemoteOpenFileChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPRemoteOpenFile(kids[i]);
        }
        (mManagedPRemoteOpenFileChild).Clear();
    }
}

void
PNeckoChild::Write(
        PHttpChannelChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PNeckoChild::Read(
        PHttpChannelChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PNecko");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PHttpChannel");
        return false;
    }

    if ((PHttpChannelMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PHttpChannel has different type");
        return false;
    }

    (*(__v)) = static_cast<PHttpChannelChild*>(listener);
    return true;
}

void
PNeckoChild::Write(
        PWyciwygChannelChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PNeckoChild::Read(
        PWyciwygChannelChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PNecko");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PWyciwygChannel");
        return false;
    }

    if ((PWyciwygChannelMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PWyciwygChannel has different type");
        return false;
    }

    (*(__v)) = static_cast<PWyciwygChannelChild*>(listener);
    return true;
}

void
PNeckoChild::Write(
        PBrowserChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PNeckoChild::Read(
        PBrowserChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PNecko");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PBrowser");
        return false;
    }

    if ((PBrowserMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PBrowser has different type");
        return false;
    }

    (*(__v)) = static_cast<PBrowserChild*>(listener);
    return true;
}

void
PNeckoChild::Write(
        PTCPSocketChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PNeckoChild::Read(
        PTCPSocketChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PNecko");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PTCPSocket");
        return false;
    }

    if ((PTCPSocketMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PTCPSocket has different type");
        return false;
    }

    (*(__v)) = static_cast<PTCPSocketChild*>(listener);
    return true;
}

void
PNeckoChild::Write(
        PRemoteOpenFileChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PNeckoChild::Read(
        PRemoteOpenFileChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PNecko");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PRemoteOpenFile");
        return false;
    }

    if ((PRemoteOpenFileMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PRemoteOpenFile has different type");
        return false;
    }

    (*(__v)) = static_cast<PRemoteOpenFileChild*>(listener);
    return true;
}

void
PNeckoChild::Write(
        const StandardURLSegment& __v,
        Message* __msg)
{
    Write((__v).position(), __msg);
    Write((__v).length(), __msg);
}

bool
PNeckoChild::Read(
        StandardURLSegment* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->position())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->length())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PNeckoChild::Write(
        const StandardURLParams& __v,
        Message* __msg)
{
    Write((__v).urlType(), __msg);
    Write((__v).port(), __msg);
    Write((__v).defaultPort(), __msg);
    Write((__v).spec(), __msg);
    Write((__v).scheme(), __msg);
    Write((__v).authority(), __msg);
    Write((__v).username(), __msg);
    Write((__v).password(), __msg);
    Write((__v).host(), __msg);
    Write((__v).path(), __msg);
    Write((__v).filePath(), __msg);
    Write((__v).directory(), __msg);
    Write((__v).baseName(), __msg);
    Write((__v).extension(), __msg);
    Write((__v).query(), __msg);
    Write((__v).ref(), __msg);
    Write((__v).originCharset(), __msg);
    Write((__v).isMutable(), __msg);
    Write((__v).supportsFileURL(), __msg);
    Write((__v).hostEncoding(), __msg);
}

bool
PNeckoChild::Read(
        StandardURLParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->urlType())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->port())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->defaultPort())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->spec())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->scheme())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->authority())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->username())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->password())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->host())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->filePath())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->directory())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->baseName())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->extension())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->query())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->ref())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->originCharset())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->isMutable())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->supportsFileURL())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->hostEncoding())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PNeckoChild::Write(
        PNeckoChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PNeckoChild::Read(
        PNeckoChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PNecko");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PNecko");
        return false;
    }

    if ((PNeckoMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PNecko has different type");
        return false;
    }

    (*(__v)) = static_cast<PNeckoChild*>(listener);
    return true;
}

void
PNeckoChild::Write(
        const JARURIParams& __v,
        Message* __msg)
{
    Write((__v).jarFile(), __msg);
    Write((__v).jarEntry(), __msg);
    Write((__v).charset(), __msg);
}

bool
PNeckoChild::Read(
        JARURIParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->jarFile())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->jarEntry())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->charset())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PNeckoChild::Write(
        const URIParams& __v,
        Message* __msg)
{
    typedef URIParams __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TSimpleURIParams:
        {
            Write((__v).get_SimpleURIParams(), __msg);
            return;
        }
    case __type::TStandardURLParams:
        {
            Write((__v).get_StandardURLParams(), __msg);
            return;
        }
    case __type::TJARURIParams:
        {
            Write((__v).get_JARURIParams(), __msg);
            return;
        }
    case __type::TGenericURIParams:
        {
            Write((__v).get_GenericURIParams(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PNeckoChild::Read(
        URIParams* __v,
        const Message* __msg,
        void** __iter)
{
    typedef URIParams __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TSimpleURIParams:
        {
            SimpleURIParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SimpleURIParams())), __msg, __iter);
        }
    case __type::TStandardURLParams:
        {
            StandardURLParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_StandardURLParams())), __msg, __iter);
        }
    case __type::TJARURIParams:
        {
            JARURIParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_JARURIParams())), __msg, __iter);
        }
    case __type::TGenericURIParams:
        {
            GenericURIParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GenericURIParams())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PNeckoChild::Write(
        PFTPChannelChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PNeckoChild::Read(
        PFTPChannelChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PNecko");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PFTPChannel");
        return false;
    }

    if ((PFTPChannelMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PFTPChannel has different type");
        return false;
    }

    (*(__v)) = static_cast<PFTPChannelChild*>(listener);
    return true;
}

void
PNeckoChild::Write(
        PWebSocketChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PNeckoChild::Read(
        PWebSocketChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PNecko");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PWebSocket");
        return false;
    }

    if ((PWebSocketMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PWebSocket has different type");
        return false;
    }

    (*(__v)) = static_cast<PWebSocketChild*>(listener);
    return true;
}

void
PNeckoChild::Write(
        const SimpleURIParams& __v,
        Message* __msg)
{
    Write((__v).scheme(), __msg);
    Write((__v).path(), __msg);
    Write((__v).ref(), __msg);
    Write((__v).isMutable(), __msg);
}

bool
PNeckoChild::Read(
        SimpleURIParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->scheme())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->ref())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->isMutable())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PNeckoChild::Write(
        PCookieServiceChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PNeckoChild::Read(
        PCookieServiceChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PNecko");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PCookieService");
        return false;
    }

    if ((PCookieServiceMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PCookieService has different type");
        return false;
    }

    (*(__v)) = static_cast<PCookieServiceChild*>(listener);
    return true;
}

void
PNeckoChild::Write(
        const GenericURIParams& __v,
        Message* __msg)
{
    Write((__v).spec(), __msg);
    Write((__v).charset(), __msg);
}

bool
PNeckoChild::Read(
        GenericURIParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->spec())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->charset())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}



} // namespace net
} // namespace mozilla
