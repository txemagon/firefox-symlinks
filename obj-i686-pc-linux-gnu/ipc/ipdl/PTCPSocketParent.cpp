//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PTCPSocketParent.h"

#include "mozilla/net/PNeckoParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::void_t void_t;
using mozilla::net::PNeckoParent;

namespace mozilla {
namespace net {


void
PTCPSocketParent::ActorDestroy(ActorDestroyReason why)
{
}

PTCPSocketParent::PTCPSocketParent() :
    mId(0),
    mState(PTCPSocket::__Dead)
{
    MOZ_COUNT_CTOR(PTCPSocketParent);
}

PTCPSocketParent::~PTCPSocketParent()
{
    MOZ_COUNT_DTOR(PTCPSocketParent);
}

PNeckoParent*
PTCPSocketParent::Manager() const
{
    return static_cast<PNeckoParent*>(mManager);
}

PTCPSocket::State
PTCPSocketParent::state()
{
    return mState;
}

bool
PTCPSocketParent::SendCallback(
        const nsString& type,
        const CallbackData& data,
        const nsString& readyState,
        const uint32_t& bufferedAmount)
{
    PTCPSocket::Msg_Callback* __msg = new PTCPSocket::Msg_Callback();

    Write(type, __msg);
    Write(data, __msg);
    Write(readyState, __msg);
    Write(bufferedAmount, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PTCPSocketParent] Sending ", stderr);
    }
    if ((!(PTCPSocket::Transition(mState, Trigger(Trigger::Send, PTCPSocket::Msg_Callback__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PTCPSocketParent::Send__delete__(PTCPSocketParent* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PTCPSocket::Msg___delete__* __msg = new PTCPSocket::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PTCPSocketParent] Sending ", stderr);
    }
    if ((!(PTCPSocket::Transition((actor)->mState, Trigger(Trigger::Send, PTCPSocket::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PTCPSocketMsgStart, actor);
    return __sendok;
}

int32_t
PTCPSocketParent::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PTCPSocketParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PTCPSocketParent::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PTCPSocketParent::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PTCPSocketParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    NS_RUNTIMEABORT("unreached");
    return;
}

Shmem::SharedMemory*
PTCPSocketParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PTCPSocketParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PTCPSocketParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PTCPSocketParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PTCPSocketParent::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PTCPSocketParent::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PTCPSocketParent::GetIPCChannel()
{
    return mChannel;
}

PTCPSocketParent::Result
PTCPSocketParent::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PTCPSocket::Msg_Data__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PTCPSocket::Msg_Data");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PTCPSocket::Msg_Data*>((&(__msg))))->Log("[PTCPSocketParent] Received ", stderr);
            }

            void* __iter = 0;
            SendableData data;

            if ((!(Read((&(data)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PTCPSocket::Transition(mState, Trigger(Trigger::Recv, PTCPSocket::Msg_Data__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvData(data)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Data returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_Suspend__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PTCPSocket::Msg_Suspend");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PTCPSocket::Msg_Suspend*>((&(__msg))))->Log("[PTCPSocketParent] Received ", stderr);
            }

            if ((!(PTCPSocket::Transition(mState, Trigger(Trigger::Recv, PTCPSocket::Msg_Suspend__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvSuspend()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Suspend returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_Resume__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PTCPSocket::Msg_Resume");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PTCPSocket::Msg_Resume*>((&(__msg))))->Log("[PTCPSocketParent] Received ", stderr);
            }

            if ((!(PTCPSocket::Transition(mState, Trigger(Trigger::Recv, PTCPSocket::Msg_Resume__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvResume()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Resume returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_Close__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PTCPSocket::Msg_Close");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PTCPSocket::Msg_Close*>((&(__msg))))->Log("[PTCPSocketParent] Received ", stderr);
            }

            if ((!(PTCPSocket::Transition(mState, Trigger(Trigger::Recv, PTCPSocket::Msg_Close__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvClose()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Close returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_RequestDelete__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PTCPSocket::Msg_RequestDelete");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PTCPSocket::Msg_RequestDelete*>((&(__msg))))->Log("[PTCPSocketParent] Received ", stderr);
            }

            if ((!(PTCPSocket::Transition(mState, Trigger(Trigger::Recv, PTCPSocket::Msg_RequestDelete__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvRequestDelete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for RequestDelete returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PTCPSocketParent::Result
PTCPSocketParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PTCPSocketParent::Result
PTCPSocketParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PTCPSocketParent::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PTCPSocketParent::GetProtocolTypeId()
{
    return PTCPSocketMsgStart;
}

bool
PTCPSocketParent::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PTCPSocketParent::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PTCPSocketParent::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PTCPSocketParent::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PTCPSocketParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PTCPSocketParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PTCPSocketParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PTCPSocketParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PTCPSocketParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PTCPSocketParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PTCPSocketParent::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PTCPSocketParent::DeallocSubtree()
{
}

void
PTCPSocketParent::Write(
        const SendableData& __v,
        Message* __msg)
{
    typedef SendableData __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TArrayOfuint8_t:
        {
            Write((__v).get_ArrayOfuint8_t(), __msg);
            return;
        }
    case __type::TnsString:
        {
            Write((__v).get_nsString(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PTCPSocketParent::Read(
        SendableData* __v,
        const Message* __msg,
        void** __iter)
{
    typedef SendableData __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TArrayOfuint8_t:
        {
            InfallibleTArray<uint8_t> tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ArrayOfuint8_t())), __msg, __iter);
        }
    case __type::TnsString:
        {
            nsString tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_nsString())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PTCPSocketParent::Write(
        PTCPSocketParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PTCPSocketParent::Read(
        PTCPSocketParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PTCPSocket");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PTCPSocket");
        return false;
    }

    if ((PTCPSocketMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PTCPSocket has different type");
        return false;
    }

    (*(__v)) = static_cast<PTCPSocketParent*>(listener);
    return true;
}

void
PTCPSocketParent::Write(
        const CallbackData& __v,
        Message* __msg)
{
    typedef CallbackData __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::Tvoid_t:
        {
            Write((__v).get_void_t(), __msg);
            return;
        }
    case __type::TSendableData:
        {
            Write((__v).get_SendableData(), __msg);
            return;
        }
    case __type::TJSError:
        {
            Write((__v).get_JSError(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PTCPSocketParent::Read(
        CallbackData* __v,
        const Message* __msg,
        void** __iter)
{
    typedef CallbackData __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::Tvoid_t:
        {
            void_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_void_t())), __msg, __iter);
        }
    case __type::TSendableData:
        {
            SendableData tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SendableData())), __msg, __iter);
        }
    case __type::TJSError:
        {
            JSError tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_JSError())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PTCPSocketParent::Write(
        const JSError& __v,
        Message* __msg)
{
    Write((__v).message(), __msg);
    Write((__v).filename(), __msg);
    Write((__v).lineNumber(), __msg);
    Write((__v).columnNumber(), __msg);
}

bool
PTCPSocketParent::Read(
        JSError* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->message())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->filename())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->lineNumber())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->columnNumber())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}



} // namespace net
} // namespace mozilla
