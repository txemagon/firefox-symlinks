//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layout/PRenderFrame.h"

namespace mozilla {
namespace layout {
namespace PRenderFrame {

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next)
{
    const int32_t __Recv = mozilla::ipc::Trigger::Recv;

    switch (from) {
    case EMPTY_OR_DIRECT_COMPOSITOR:
        switch ((trigger).mMsg) {
        case Msg_NotifyCompositorTransaction__ID:
            if ((__Recv) == ((trigger).mAction)) {
                (*(next)) = EMPTY_OR_DIRECT_COMPOSITOR;
                return true;
            }
            break;
        case Msg___delete____ID:
            if ((__Recv) == ((trigger).mAction)) {
                (*(next)) = __Dead;
                return true;
            }
            break;
        case Msg_PLayersConstructor__ID:
            if ((__Recv) == ((trigger).mAction)) {
                (*(next)) = HAVE_CONTENT;
                return true;
            }
            break;
        }
        break;
    case HAVE_CONTENT:
        switch ((trigger).mMsg) {
        case Msg_NotifyCompositorTransaction__ID:
            if ((__Recv) == ((trigger).mAction)) {
                (*(next)) = HAVE_CONTENT;
                return true;
            }
            break;
        case Msg___delete____ID:
            if ((__Recv) == ((trigger).mAction)) {
                (*(next)) = __Dead;
                return true;
            }
            break;
        }
        break;
    case __Null:
    case __Error:
        if ((Msg___delete____ID) == ((trigger).mMsg)) {
            (*(next)) = __Dead;
            return true;
        }
        return (__Null) == (from);
    case __Dead:
        NS_RUNTIMEABORT("__delete__()d actor");
        return false;
    case __Dying:
        NS_RUNTIMEABORT("__delete__()d (and unexpectedly dying) actor");
        return false;
    default:
        NS_RUNTIMEABORT("corrupted actor state");
        return false;
    }
    (*(next)) = __Error;
    return false;
}

} // namespace PRenderFrame
} // namespace layout
} // namespace mozilla
