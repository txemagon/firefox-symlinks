//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/sms/PSmsChild.h"

#include "mozilla/dom/PContentChild.h"
#include "mozilla/dom/sms/PSmsRequestChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;
using mozilla::dom::PContentChild;
using mozilla::dom::sms::PSmsRequestChild;

namespace mozilla {
namespace dom {
namespace sms {


void
PSmsChild::ActorDestroy(ActorDestroyReason why)
{
}

PSmsChild::PSmsChild() :
    mId(0),
    mState(PSms::__Dead)
{
    MOZ_COUNT_CTOR(PSmsChild);
}

PSmsChild::~PSmsChild()
{
    MOZ_COUNT_DTOR(PSmsChild);
}

PContentChild*
PSmsChild::Manager() const
{
    return static_cast<PContentChild*>(mManager);
}

void
PSmsChild::ManagedPSmsRequestChild(InfallibleTArray<PSmsRequestChild*>& aArr) const
{
    aArr = mManagedPSmsRequestChild;
}

const InfallibleTArray<PSmsRequestChild*>&
PSmsChild::ManagedPSmsRequestChild() const
{
    return mManagedPSmsRequestChild;
}

PSms::State
PSmsChild::state()
{
    return mState;
}

bool
PSmsChild::Send__delete__(PSmsChild* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PSms::Msg___delete__* __msg = new PSms::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PSmsChild] Sending ", stderr);
    }
    if ((!(PSms::Transition((actor)->mState, Trigger(Trigger::Recv, PSms::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PSmsMsgStart, actor);
    return __sendok;
}

PSmsRequestChild*
PSmsChild::SendPSmsRequestConstructor(const IPCSmsRequest& request)
{
    return SendPSmsRequestConstructor(AllocPSmsRequest(request), request);
}

PSmsRequestChild*
PSmsChild::SendPSmsRequestConstructor(
        PSmsRequestChild* actor,
        const IPCSmsRequest& request)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPSmsRequestChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::dom::sms::PSmsRequest::__Start;

    PSms::Msg_PSmsRequestConstructor* __msg = new PSms::Msg_PSmsRequestConstructor();

    Write(actor, __msg, false);
    Write(request, __msg);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PSmsChild] Sending ", stderr);
    }
    if ((!(PSms::Transition(mState, Trigger(Trigger::Recv, PSms::Msg_PSmsRequestConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PSmsRequestMsgStart, actor);
        return 0;
    }
    return actor;
}

bool
PSmsChild::SendHasSupport(bool* aHasSupport)
{
    PSms::Msg_HasSupport* __msg = new PSms::Msg_HasSupport();


    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PSmsChild] Sending ", stderr);
    }
    if ((!(PSms::Transition(mState, Trigger(Trigger::Recv, PSms::Msg_HasSupport__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PSms::Reply_HasSupport*>((&(__reply))))->Log("[PSmsChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(aHasSupport, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PSmsChild::SendGetSegmentInfoForText(
        const nsString& aText,
        SmsSegmentInfoData* aResult)
{
    PSms::Msg_GetSegmentInfoForText* __msg = new PSms::Msg_GetSegmentInfoForText();

    Write(aText, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PSmsChild] Sending ", stderr);
    }
    if ((!(PSms::Transition(mState, Trigger(Trigger::Recv, PSms::Msg_GetSegmentInfoForText__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PSms::Reply_GetSegmentInfoForText*>((&(__reply))))->Log("[PSmsChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(aResult, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PSmsChild::SendClearMessageList(const int32_t& aListId)
{
    PSms::Msg_ClearMessageList* __msg = new PSms::Msg_ClearMessageList();

    Write(aListId, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PSmsChild] Sending ", stderr);
    }
    if ((!(PSms::Transition(mState, Trigger(Trigger::Recv, PSms::Msg_ClearMessageList__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

int32_t
PSmsChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PSmsChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PSmsChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PSmsChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PSmsChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PSmsRequestMsgStart:
        {
            PSmsRequestChild* actor = static_cast<PSmsRequestChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPSmsRequestChild).NoIndex) != ((mManagedPSmsRequestChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPSmsRequestChild).RemoveElementSorted(actor);
            DeallocPSmsRequest(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PSmsChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PSmsChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PSmsChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PSmsChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PSmsChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PSmsChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PSmsChild::GetIPCChannel()
{
    return mChannel;
}

PSmsChild::Result
PSmsChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PSms::Msg_NotifyReceivedMessage__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSms::Msg_NotifyReceivedMessage");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Msg_NotifyReceivedMessage*>((&(__msg))))->Log("[PSmsChild] Received ", stderr);
            }

            void* __iter = 0;
            SmsMessageData aMessageData;

            if ((!(Read((&(aMessageData)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifyReceivedMessage__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvNotifyReceivedMessage(aMessageData)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NotifyReceivedMessage returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSms::Msg_NotifySendingMessage__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSms::Msg_NotifySendingMessage");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Msg_NotifySendingMessage*>((&(__msg))))->Log("[PSmsChild] Received ", stderr);
            }

            void* __iter = 0;
            SmsMessageData aMessageData;

            if ((!(Read((&(aMessageData)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifySendingMessage__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvNotifySendingMessage(aMessageData)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NotifySendingMessage returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSms::Msg_NotifySentMessage__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSms::Msg_NotifySentMessage");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Msg_NotifySentMessage*>((&(__msg))))->Log("[PSmsChild] Received ", stderr);
            }

            void* __iter = 0;
            SmsMessageData aMessageData;

            if ((!(Read((&(aMessageData)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifySentMessage__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvNotifySentMessage(aMessageData)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NotifySentMessage returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSms::Msg_NotifyFailedMessage__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSms::Msg_NotifyFailedMessage");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Msg_NotifyFailedMessage*>((&(__msg))))->Log("[PSmsChild] Received ", stderr);
            }

            void* __iter = 0;
            SmsMessageData aMessageData;

            if ((!(Read((&(aMessageData)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifyFailedMessage__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvNotifyFailedMessage(aMessageData)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NotifyFailedMessage returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSms::Msg_NotifyDeliverySuccessMessage__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSms::Msg_NotifyDeliverySuccessMessage");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Msg_NotifyDeliverySuccessMessage*>((&(__msg))))->Log("[PSmsChild] Received ", stderr);
            }

            void* __iter = 0;
            SmsMessageData aMessageData;

            if ((!(Read((&(aMessageData)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifyDeliverySuccessMessage__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvNotifyDeliverySuccessMessage(aMessageData)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NotifyDeliverySuccessMessage returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSms::Msg_NotifyDeliveryErrorMessage__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSms::Msg_NotifyDeliveryErrorMessage");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Msg_NotifyDeliveryErrorMessage*>((&(__msg))))->Log("[PSmsChild] Received ", stderr);
            }

            void* __iter = 0;
            SmsMessageData aMessageData;

            if ((!(Read((&(aMessageData)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifyDeliveryErrorMessage__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvNotifyDeliveryErrorMessage(aMessageData)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NotifyDeliveryErrorMessage returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSms::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PSms::Reply_PSmsRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PSmsChild::Result
PSmsChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PSmsChild::Result
PSmsChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PSmsChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PSmsChild::GetProtocolTypeId()
{
    return PSmsMsgStart;
}

bool
PSmsChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PSmsChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PSmsChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PSmsChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PSmsChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PSmsChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PSmsChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PSmsChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PSmsChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PSmsChild] abort()ing as a result");
}

void
PSmsChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PSmsRequest kids
        InfallibleTArray<PSmsRequestChild*> kids(mManagedPSmsRequestChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PSmsChild::DeallocSubtree()
{
    {
        // Recursively deleting PSmsRequest kids
        InfallibleTArray<PSmsRequestChild*>& kids = mManagedPSmsRequestChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPSmsRequest(kids[i]);
        }
        (mManagedPSmsRequestChild).Clear();
    }
}

void
PSmsChild::Write(
        const SendMessageRequest& __v,
        Message* __msg)
{
    Write((__v).number(), __msg);
    Write((__v).message(), __msg);
}

bool
PSmsChild::Read(
        SendMessageRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->number())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->message())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsChild::Write(
        const DeleteMessageRequest& __v,
        Message* __msg)
{
    Write((__v).messageId(), __msg);
}

bool
PSmsChild::Read(
        DeleteMessageRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->messageId())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsChild::Write(
        const SmsSegmentInfoData& __v,
        Message* __msg)
{
    Write((__v).segments(), __msg);
    Write((__v).charsPerSegment(), __msg);
    Write((__v).charsAvailableInLastSegment(), __msg);
}

bool
PSmsChild::Read(
        SmsSegmentInfoData* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->segments())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->charsPerSegment())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->charsAvailableInLastSegment())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsChild::Write(
        const MarkMessageReadRequest& __v,
        Message* __msg)
{
    Write((__v).messageId(), __msg);
    Write((__v).value(), __msg);
}

bool
PSmsChild::Read(
        MarkMessageReadRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->messageId())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->value())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsChild::Write(
        PSmsRequestChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PSmsChild::Read(
        PSmsRequestChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PSms");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PSmsRequest");
        return false;
    }

    if ((PSmsRequestMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PSmsRequest has different type");
        return false;
    }

    (*(__v)) = static_cast<PSmsRequestChild*>(listener);
    return true;
}

void
PSmsChild::Write(
        const GetNextMessageInListRequest& __v,
        Message* __msg)
{
    Write((__v).aListId(), __msg);
}

bool
PSmsChild::Read(
        GetNextMessageInListRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->aListId())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsChild::Write(
        const CreateMessageListRequest& __v,
        Message* __msg)
{
    Write((__v).filter(), __msg);
    Write((__v).reverse(), __msg);
}

bool
PSmsChild::Read(
        CreateMessageListRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->filter())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->reverse())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsChild::Write(
        const IPCSmsRequest& __v,
        Message* __msg)
{
    typedef IPCSmsRequest __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TSendMessageRequest:
        {
            Write((__v).get_SendMessageRequest(), __msg);
            return;
        }
    case __type::TGetMessageRequest:
        {
            Write((__v).get_GetMessageRequest(), __msg);
            return;
        }
    case __type::TDeleteMessageRequest:
        {
            Write((__v).get_DeleteMessageRequest(), __msg);
            return;
        }
    case __type::TCreateMessageListRequest:
        {
            Write((__v).get_CreateMessageListRequest(), __msg);
            return;
        }
    case __type::TGetNextMessageInListRequest:
        {
            Write((__v).get_GetNextMessageInListRequest(), __msg);
            return;
        }
    case __type::TMarkMessageReadRequest:
        {
            Write((__v).get_MarkMessageReadRequest(), __msg);
            return;
        }
    case __type::TGetThreadListRequest:
        {
            Write((__v).get_GetThreadListRequest(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PSmsChild::Read(
        IPCSmsRequest* __v,
        const Message* __msg,
        void** __iter)
{
    typedef IPCSmsRequest __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TSendMessageRequest:
        {
            SendMessageRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SendMessageRequest())), __msg, __iter);
        }
    case __type::TGetMessageRequest:
        {
            GetMessageRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GetMessageRequest())), __msg, __iter);
        }
    case __type::TDeleteMessageRequest:
        {
            DeleteMessageRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_DeleteMessageRequest())), __msg, __iter);
        }
    case __type::TCreateMessageListRequest:
        {
            CreateMessageListRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_CreateMessageListRequest())), __msg, __iter);
        }
    case __type::TGetNextMessageInListRequest:
        {
            GetNextMessageInListRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GetNextMessageInListRequest())), __msg, __iter);
        }
    case __type::TMarkMessageReadRequest:
        {
            MarkMessageReadRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_MarkMessageReadRequest())), __msg, __iter);
        }
    case __type::TGetThreadListRequest:
        {
            GetThreadListRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GetThreadListRequest())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PSmsChild::Write(
        const GetThreadListRequest& __v,
        Message* __msg)
{
}

bool
PSmsChild::Read(
        GetThreadListRequest* __v,
        const Message* __msg,
        void** __iter)
{
    return true;
}

void
PSmsChild::Write(
        const SmsFilterData& __v,
        Message* __msg)
{
    Write((__v).startDate(), __msg);
    Write((__v).endDate(), __msg);
    Write((__v).numbers(), __msg);
    Write((__v).delivery(), __msg);
    Write((__v).read(), __msg);
}

bool
PSmsChild::Read(
        SmsFilterData* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->startDate())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->endDate())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->numbers())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->delivery())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->read())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsChild::Write(
        const SmsMessageData& __v,
        Message* __msg)
{
    Write((__v).id(), __msg);
    Write((__v).delivery(), __msg);
    Write((__v).deliveryStatus(), __msg);
    Write((__v).sender(), __msg);
    Write((__v).receiver(), __msg);
    Write((__v).body(), __msg);
    Write((__v).messageClass(), __msg);
    Write((__v).timestamp(), __msg);
    Write((__v).read(), __msg);
}

bool
PSmsChild::Read(
        SmsMessageData* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->id())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->delivery())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->deliveryStatus())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->sender())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->receiver())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->body())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->messageClass())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->timestamp())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->read())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsChild::Write(
        const GetMessageRequest& __v,
        Message* __msg)
{
    Write((__v).messageId(), __msg);
}

bool
PSmsChild::Read(
        GetMessageRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->messageId())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsChild::Write(
        PSmsChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PSmsChild::Read(
        PSmsChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PSms");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PSms");
        return false;
    }

    if ((PSmsMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PSms has different type");
        return false;
    }

    (*(__v)) = static_cast<PSmsChild*>(listener);
    return true;
}



} // namespace sms
} // namespace dom
} // namespace mozilla
