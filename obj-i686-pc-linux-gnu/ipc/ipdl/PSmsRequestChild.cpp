//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/sms/PSmsRequestChild.h"

#include "mozilla/dom/sms/PSmsChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::dom::sms::MessageReply MessageReply;
typedef mozilla::dom::sms::ReplyCreateMessageList ReplyCreateMessageList;
typedef mozilla::dom::sms::ReplyCreateMessageListFail ReplyCreateMessageListFail;
typedef mozilla::dom::sms::ReplyGetMessage ReplyGetMessage;
typedef mozilla::dom::sms::ReplyGetMessageFail ReplyGetMessageFail;
typedef mozilla::dom::sms::ReplyGetNextMessage ReplyGetNextMessage;
typedef mozilla::dom::sms::ReplyMarkeMessageRead ReplyMarkeMessageRead;
typedef mozilla::dom::sms::ReplyMarkeMessageReadFail ReplyMarkeMessageReadFail;
typedef mozilla::dom::sms::ReplyMessageDelete ReplyMessageDelete;
typedef mozilla::dom::sms::ReplyMessageDeleteFail ReplyMessageDeleteFail;
typedef mozilla::dom::sms::ReplyMessageSend ReplyMessageSend;
typedef mozilla::dom::sms::ReplyMessageSendFail ReplyMessageSendFail;
typedef mozilla::dom::sms::ReplyNoMessageInList ReplyNoMessageInList;
typedef mozilla::dom::sms::ReplyThreadList ReplyThreadList;
typedef mozilla::dom::sms::ReplyThreadListFail ReplyThreadListFail;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;
typedef mozilla::dom::sms::ThreadListItem ThreadListItem;
using mozilla::dom::sms::PSmsChild;

namespace mozilla {
namespace dom {
namespace sms {


bool
PSmsRequestChild::Recv__delete__(const MessageReply& response)
{
    return true;
}

void
PSmsRequestChild::ActorDestroy(ActorDestroyReason why)
{
}

PSmsRequestChild::PSmsRequestChild() :
    mId(0),
    mState(PSmsRequest::__Dead)
{
    MOZ_COUNT_CTOR(PSmsRequestChild);
}

PSmsRequestChild::~PSmsRequestChild()
{
    MOZ_COUNT_DTOR(PSmsRequestChild);
}

PSmsChild*
PSmsRequestChild::Manager() const
{
    return static_cast<PSmsChild*>(mManager);
}

PSmsRequest::State
PSmsRequestChild::state()
{
    return mState;
}

int32_t
PSmsRequestChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PSmsRequestChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PSmsRequestChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PSmsRequestChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PSmsRequestChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    NS_RUNTIMEABORT("unreached");
    return;
}

Shmem::SharedMemory*
PSmsRequestChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PSmsRequestChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PSmsRequestChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PSmsRequestChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PSmsRequestChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PSmsRequestChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PSmsRequestChild::GetIPCChannel()
{
    return mChannel;
}

PSmsRequestChild::Result
PSmsRequestChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PSmsRequest::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSmsRequest::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSmsRequest::Msg___delete__*>((&(__msg))))->Log("[PSmsRequestChild] Received ", stderr);
            }

            void* __iter = 0;
            PSmsRequestChild* actor;
            MessageReply response;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(response)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PSmsRequest::Transition(mState, Trigger(Trigger::Send, PSmsRequest::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__(response)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PSmsRequestMsgStart, actor);


            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PSmsRequestChild::Result
PSmsRequestChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PSmsRequestChild::Result
PSmsRequestChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PSmsRequestChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PSmsRequestChild::GetProtocolTypeId()
{
    return PSmsRequestMsgStart;
}

bool
PSmsRequestChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PSmsRequestChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PSmsRequestChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PSmsRequestChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PSmsRequestChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PSmsRequestChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PSmsRequestChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PSmsRequestChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PSmsRequestChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PSmsRequestChild] abort()ing as a result");
}

void
PSmsRequestChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PSmsRequestChild::DeallocSubtree()
{
}

void
PSmsRequestChild::Write(
        const ReplyMarkeMessageRead& __v,
        Message* __msg)
{
    Write((__v).read(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyMarkeMessageRead* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->read())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const InfallibleTArray<ThreadListItem>& __v,
        Message* __msg)
{
    uint32_t length = (__v).Length();
    Write(length, __msg);

    for (uint32_t i = 0; (i) < (length); (++(i))) {
        Write(__v[i], __msg);
    }
}

bool
PSmsRequestChild::Read(
        InfallibleTArray<ThreadListItem>* __v,
        const Message* __msg,
        void** __iter)
{
    InfallibleTArray<ThreadListItem>& a = (*(__v));
    uint32_t length;
    if ((!(Read((&(length)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    (__v)->SetLength(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(a[i])), __msg, __iter)))) {
            mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
            return false;
        }
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyGetMessageFail& __v,
        Message* __msg)
{
    Write((__v).error(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyGetMessageFail* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->error())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyCreateMessageListFail& __v,
        Message* __msg)
{
    Write((__v).error(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyCreateMessageListFail* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->error())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyMessageSendFail& __v,
        Message* __msg)
{
    Write((__v).error(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyMessageSendFail* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->error())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyMarkeMessageReadFail& __v,
        Message* __msg)
{
    Write((__v).error(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyMarkeMessageReadFail* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->error())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyMessageDeleteFail& __v,
        Message* __msg)
{
    Write((__v).error(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyMessageDeleteFail* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->error())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyGetMessage& __v,
        Message* __msg)
{
    Write((__v).messageData(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyGetMessage* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->messageData())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyNoMessageInList& __v,
        Message* __msg)
{
}

bool
PSmsRequestChild::Read(
        ReplyNoMessageInList* __v,
        const Message* __msg,
        void** __iter)
{
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyThreadListFail& __v,
        Message* __msg)
{
    Write((__v).error(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyThreadListFail* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->error())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyThreadList& __v,
        Message* __msg)
{
    Write((__v).items(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyThreadList* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->items())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyMessageDelete& __v,
        Message* __msg)
{
    Write((__v).deleted(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyMessageDelete* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->deleted())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyCreateMessageList& __v,
        Message* __msg)
{
    Write((__v).listId(), __msg);
    Write((__v).messageData(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyCreateMessageList* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->listId())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->messageData())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ThreadListItem& __v,
        Message* __msg)
{
    Write((__v).senderOrReceiver(), __msg);
    Write((__v).timestamp(), __msg);
    Write((__v).body(), __msg);
    Write((__v).unreadCount(), __msg);
}

bool
PSmsRequestChild::Read(
        ThreadListItem* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->senderOrReceiver())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->timestamp())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->body())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->unreadCount())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyMessageSend& __v,
        Message* __msg)
{
    Write((__v).messageData(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyMessageSend* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->messageData())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const SmsMessageData& __v,
        Message* __msg)
{
    Write((__v).id(), __msg);
    Write((__v).delivery(), __msg);
    Write((__v).deliveryStatus(), __msg);
    Write((__v).sender(), __msg);
    Write((__v).receiver(), __msg);
    Write((__v).body(), __msg);
    Write((__v).messageClass(), __msg);
    Write((__v).timestamp(), __msg);
    Write((__v).read(), __msg);
}

bool
PSmsRequestChild::Read(
        SmsMessageData* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->id())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->delivery())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->deliveryStatus())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->sender())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->receiver())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->body())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->messageClass())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->timestamp())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->read())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        const ReplyGetNextMessage& __v,
        Message* __msg)
{
    Write((__v).messageData(), __msg);
}

bool
PSmsRequestChild::Read(
        ReplyGetNextMessage* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->messageData())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsRequestChild::Write(
        PSmsRequestChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PSmsRequestChild::Read(
        PSmsRequestChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PSmsRequest");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PSmsRequest");
        return false;
    }

    if ((PSmsRequestMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PSmsRequest has different type");
        return false;
    }

    (*(__v)) = static_cast<PSmsRequestChild*>(listener);
    return true;
}

void
PSmsRequestChild::Write(
        const MessageReply& __v,
        Message* __msg)
{
    typedef MessageReply __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TReplyMessageSend:
        {
            Write((__v).get_ReplyMessageSend(), __msg);
            return;
        }
    case __type::TReplyMessageSendFail:
        {
            Write((__v).get_ReplyMessageSendFail(), __msg);
            return;
        }
    case __type::TReplyGetMessage:
        {
            Write((__v).get_ReplyGetMessage(), __msg);
            return;
        }
    case __type::TReplyGetMessageFail:
        {
            Write((__v).get_ReplyGetMessageFail(), __msg);
            return;
        }
    case __type::TReplyMessageDelete:
        {
            Write((__v).get_ReplyMessageDelete(), __msg);
            return;
        }
    case __type::TReplyMessageDeleteFail:
        {
            Write((__v).get_ReplyMessageDeleteFail(), __msg);
            return;
        }
    case __type::TReplyNoMessageInList:
        {
            Write((__v).get_ReplyNoMessageInList(), __msg);
            return;
        }
    case __type::TReplyCreateMessageList:
        {
            Write((__v).get_ReplyCreateMessageList(), __msg);
            return;
        }
    case __type::TReplyCreateMessageListFail:
        {
            Write((__v).get_ReplyCreateMessageListFail(), __msg);
            return;
        }
    case __type::TReplyGetNextMessage:
        {
            Write((__v).get_ReplyGetNextMessage(), __msg);
            return;
        }
    case __type::TReplyMarkeMessageRead:
        {
            Write((__v).get_ReplyMarkeMessageRead(), __msg);
            return;
        }
    case __type::TReplyMarkeMessageReadFail:
        {
            Write((__v).get_ReplyMarkeMessageReadFail(), __msg);
            return;
        }
    case __type::TReplyThreadList:
        {
            Write((__v).get_ReplyThreadList(), __msg);
            return;
        }
    case __type::TReplyThreadListFail:
        {
            Write((__v).get_ReplyThreadListFail(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PSmsRequestChild::Read(
        MessageReply* __v,
        const Message* __msg,
        void** __iter)
{
    typedef MessageReply __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TReplyMessageSend:
        {
            ReplyMessageSend tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyMessageSend())), __msg, __iter);
        }
    case __type::TReplyMessageSendFail:
        {
            ReplyMessageSendFail tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyMessageSendFail())), __msg, __iter);
        }
    case __type::TReplyGetMessage:
        {
            ReplyGetMessage tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyGetMessage())), __msg, __iter);
        }
    case __type::TReplyGetMessageFail:
        {
            ReplyGetMessageFail tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyGetMessageFail())), __msg, __iter);
        }
    case __type::TReplyMessageDelete:
        {
            ReplyMessageDelete tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyMessageDelete())), __msg, __iter);
        }
    case __type::TReplyMessageDeleteFail:
        {
            ReplyMessageDeleteFail tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyMessageDeleteFail())), __msg, __iter);
        }
    case __type::TReplyNoMessageInList:
        {
            ReplyNoMessageInList tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyNoMessageInList())), __msg, __iter);
        }
    case __type::TReplyCreateMessageList:
        {
            ReplyCreateMessageList tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyCreateMessageList())), __msg, __iter);
        }
    case __type::TReplyCreateMessageListFail:
        {
            ReplyCreateMessageListFail tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyCreateMessageListFail())), __msg, __iter);
        }
    case __type::TReplyGetNextMessage:
        {
            ReplyGetNextMessage tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyGetNextMessage())), __msg, __iter);
        }
    case __type::TReplyMarkeMessageRead:
        {
            ReplyMarkeMessageRead tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyMarkeMessageRead())), __msg, __iter);
        }
    case __type::TReplyMarkeMessageReadFail:
        {
            ReplyMarkeMessageReadFail tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyMarkeMessageReadFail())), __msg, __iter);
        }
    case __type::TReplyThreadList:
        {
            ReplyThreadList tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyThreadList())), __msg, __iter);
        }
    case __type::TReplyThreadListFail:
        {
            ReplyThreadListFail tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ReplyThreadListFail())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}



} // namespace sms
} // namespace dom
} // namespace mozilla
