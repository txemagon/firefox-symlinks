//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PTestShellParent.h"

#include "mozilla/dom/PContentParent.h"
#include "mozilla/ipc/PTestShellCommandParent.h"
#include "mozilla/jsipc/PContextWrapperParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::ipc::Shmem Shmem;
using mozilla::dom::PContentParent;
using mozilla::ipc::PTestShellCommandParent;
using mozilla::jsipc::PContextWrapperParent;

namespace mozilla {
namespace ipc {


bool
PTestShellParent::RecvPContextWrapperConstructor(PContextWrapperParent* actor)
{
    return true;
}

void
PTestShellParent::ActorDestroy(ActorDestroyReason why)
{
}

PTestShellParent::PTestShellParent() :
    mId(0),
    mState(PTestShell::__Dead)
{
    MOZ_COUNT_CTOR(PTestShellParent);
}

PTestShellParent::~PTestShellParent()
{
    MOZ_COUNT_DTOR(PTestShellParent);
}

PContentParent*
PTestShellParent::Manager() const
{
    return static_cast<PContentParent*>(mManager);
}

void
PTestShellParent::ManagedPTestShellCommandParent(InfallibleTArray<PTestShellCommandParent*>& aArr) const
{
    aArr = mManagedPTestShellCommandParent;
}

const InfallibleTArray<PTestShellCommandParent*>&
PTestShellParent::ManagedPTestShellCommandParent() const
{
    return mManagedPTestShellCommandParent;
}

void
PTestShellParent::ManagedPContextWrapperParent(InfallibleTArray<PContextWrapperParent*>& aArr) const
{
    aArr = mManagedPContextWrapperParent;
}

const InfallibleTArray<PContextWrapperParent*>&
PTestShellParent::ManagedPContextWrapperParent() const
{
    return mManagedPContextWrapperParent;
}

PTestShell::State
PTestShellParent::state()
{
    return mState;
}

bool
PTestShellParent::Send__delete__(PTestShellParent* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PTestShell::Msg___delete__* __msg = new PTestShell::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PTestShellParent] Sending ", stderr);
    }
    if ((!(PTestShell::Transition((actor)->mState, Trigger(Trigger::Send, PTestShell::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PTestShellMsgStart, actor);
    return __sendok;
}

bool
PTestShellParent::SendExecuteCommand(const nsString& aCommand)
{
    PTestShell::Msg_ExecuteCommand* __msg = new PTestShell::Msg_ExecuteCommand();

    Write(aCommand, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PTestShellParent] Sending ", stderr);
    }
    if ((!(PTestShell::Transition(mState, Trigger(Trigger::Send, PTestShell::Msg_ExecuteCommand__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

PTestShellCommandParent*
PTestShellParent::SendPTestShellCommandConstructor(const nsString& aCommand)
{
    return SendPTestShellCommandConstructor(AllocPTestShellCommand(aCommand), aCommand);
}

PTestShellCommandParent*
PTestShellParent::SendPTestShellCommandConstructor(
        PTestShellCommandParent* actor,
        const nsString& aCommand)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPTestShellCommandParent).InsertElementSorted(actor);
    (actor)->mState = mozilla::ipc::PTestShellCommand::__Start;

    PTestShell::Msg_PTestShellCommandConstructor* __msg = new PTestShell::Msg_PTestShellCommandConstructor();

    Write(actor, __msg, false);
    Write(aCommand, __msg);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PTestShellParent] Sending ", stderr);
    }
    if ((!(PTestShell::Transition(mState, Trigger(Trigger::Send, PTestShell::Msg_PTestShellCommandConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PTestShellCommandMsgStart, actor);
        return 0;
    }
    return actor;
}

int32_t
PTestShellParent::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PTestShellParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PTestShellParent::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PTestShellParent::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PTestShellParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PTestShellCommandMsgStart:
        {
            PTestShellCommandParent* actor = static_cast<PTestShellCommandParent*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPTestShellCommandParent).NoIndex) != ((mManagedPTestShellCommandParent).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPTestShellCommandParent).RemoveElementSorted(actor);
            DeallocPTestShellCommand(actor);
            return;
        }
    case PContextWrapperMsgStart:
        {
            PContextWrapperParent* actor = static_cast<PContextWrapperParent*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPContextWrapperParent).NoIndex) != ((mManagedPContextWrapperParent).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPContextWrapperParent).RemoveElementSorted(actor);
            DeallocPContextWrapper(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PTestShellParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PTestShellParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PTestShellParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PTestShellParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PTestShellParent::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PTestShellParent::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PTestShellParent::GetIPCChannel()
{
    return mChannel;
}

PTestShellParent::Result
PTestShellParent::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PTestShell::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PTestShell::Reply_PTestShellCommandConstructor__ID:
        {
            return MsgProcessed;
        }
    case PTestShell::Msg_PContextWrapperConstructor__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PTestShell::Msg_PContextWrapperConstructor");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PTestShell::Msg_PContextWrapperConstructor*>((&(__msg))))->Log("[PTestShellParent] Received ", stderr);
            }

            void* __iter = 0;
            ActorHandle __handle;
            PContextWrapperParent* actor;

            if ((!(Read((&(__handle)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PTestShell::Transition(mState, Trigger(Trigger::Recv, PTestShell::Msg_PContextWrapperConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            actor = AllocPContextWrapper();
            if ((!(actor))) {
                return MsgValueError;
            }
            (actor)->mId = RegisterID(actor, (__handle).mId);
            (actor)->mManager = this;
            (actor)->mChannel = mChannel;
            (mManagedPContextWrapperParent).InsertElementSorted(actor);
            (actor)->mState = mozilla::jsipc::PContextWrapper::__Start;

            if ((!(RecvPContextWrapperConstructor(actor)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PContextWrapper returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PTestShellParent::Result
PTestShellParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PTestShellParent::Result
PTestShellParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PTestShellParent::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PTestShellParent::GetProtocolTypeId()
{
    return PTestShellMsgStart;
}

bool
PTestShellParent::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PTestShellParent::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PTestShellParent::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PTestShellParent::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PTestShellParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PTestShellParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PTestShellParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PTestShellParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PTestShellParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PTestShellParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PTestShellParent::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PTestShellCommand kids
        InfallibleTArray<PTestShellCommandParent*> kids(mManagedPTestShellCommandParent);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PContextWrapper kids
        InfallibleTArray<PContextWrapperParent*> kids(mManagedPContextWrapperParent);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PTestShellParent::DeallocSubtree()
{
    {
        // Recursively deleting PTestShellCommand kids
        InfallibleTArray<PTestShellCommandParent*>& kids = mManagedPTestShellCommandParent;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPTestShellCommand(kids[i]);
        }
        (mManagedPTestShellCommandParent).Clear();
    }
    {
        // Recursively deleting PContextWrapper kids
        InfallibleTArray<PContextWrapperParent*>& kids = mManagedPContextWrapperParent;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPContextWrapper(kids[i]);
        }
        (mManagedPContextWrapperParent).Clear();
    }
}

void
PTestShellParent::Write(
        PTestShellParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PTestShellParent::Read(
        PTestShellParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PTestShell");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PTestShell");
        return false;
    }

    if ((PTestShellMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PTestShell has different type");
        return false;
    }

    (*(__v)) = static_cast<PTestShellParent*>(listener);
    return true;
}

void
PTestShellParent::Write(
        PContextWrapperParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PTestShellParent::Read(
        PContextWrapperParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PTestShell");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PContextWrapper");
        return false;
    }

    if ((PContextWrapperMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PContextWrapper has different type");
        return false;
    }

    (*(__v)) = static_cast<PContextWrapperParent*>(listener);
    return true;
}

void
PTestShellParent::Write(
        PTestShellCommandParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PTestShellParent::Read(
        PTestShellCommandParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PTestShell");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PTestShellCommand");
        return false;
    }

    if ((PTestShellCommandMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PTestShellCommand has different type");
        return false;
    }

    (*(__v)) = static_cast<PTestShellCommandParent*>(listener);
    return true;
}



} // namespace ipc
} // namespace mozilla
