//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PTestShellChild.h"

#include "mozilla/dom/PContentChild.h"
#include "mozilla/ipc/PTestShellCommandChild.h"
#include "mozilla/jsipc/PContextWrapperChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::ipc::Shmem Shmem;
using mozilla::dom::PContentChild;
using mozilla::ipc::PTestShellCommandChild;
using mozilla::jsipc::PContextWrapperChild;

namespace mozilla {
namespace ipc {


bool
PTestShellChild::Recv__delete__()
{
    return true;
}

bool
PTestShellChild::RecvPTestShellCommandConstructor(
        PTestShellCommandChild* actor,
        const nsString& aCommand)
{
    return true;
}

void
PTestShellChild::ActorDestroy(ActorDestroyReason why)
{
}

PTestShellChild::PTestShellChild() :
    mId(0),
    mState(PTestShell::__Dead)
{
    MOZ_COUNT_CTOR(PTestShellChild);
}

PTestShellChild::~PTestShellChild()
{
    MOZ_COUNT_DTOR(PTestShellChild);
}

PContentChild*
PTestShellChild::Manager() const
{
    return static_cast<PContentChild*>(mManager);
}

void
PTestShellChild::ManagedPTestShellCommandChild(InfallibleTArray<PTestShellCommandChild*>& aArr) const
{
    aArr = mManagedPTestShellCommandChild;
}

const InfallibleTArray<PTestShellCommandChild*>&
PTestShellChild::ManagedPTestShellCommandChild() const
{
    return mManagedPTestShellCommandChild;
}

void
PTestShellChild::ManagedPContextWrapperChild(InfallibleTArray<PContextWrapperChild*>& aArr) const
{
    aArr = mManagedPContextWrapperChild;
}

const InfallibleTArray<PContextWrapperChild*>&
PTestShellChild::ManagedPContextWrapperChild() const
{
    return mManagedPContextWrapperChild;
}

PTestShell::State
PTestShellChild::state()
{
    return mState;
}

PContextWrapperChild*
PTestShellChild::SendPContextWrapperConstructor()
{
    return SendPContextWrapperConstructor(AllocPContextWrapper());
}

PContextWrapperChild*
PTestShellChild::SendPContextWrapperConstructor(PContextWrapperChild* actor)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPContextWrapperChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::jsipc::PContextWrapper::__Start;

    PTestShell::Msg_PContextWrapperConstructor* __msg = new PTestShell::Msg_PContextWrapperConstructor();

    Write(actor, __msg, false);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PTestShellChild] Sending ", stderr);
    }
    if ((!(PTestShell::Transition(mState, Trigger(Trigger::Recv, PTestShell::Msg_PContextWrapperConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PContextWrapperMsgStart, actor);
        return 0;
    }
    return actor;
}

int32_t
PTestShellChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PTestShellChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PTestShellChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PTestShellChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PTestShellChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PTestShellCommandMsgStart:
        {
            PTestShellCommandChild* actor = static_cast<PTestShellCommandChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPTestShellCommandChild).NoIndex) != ((mManagedPTestShellCommandChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPTestShellCommandChild).RemoveElementSorted(actor);
            DeallocPTestShellCommand(actor);
            return;
        }
    case PContextWrapperMsgStart:
        {
            PContextWrapperChild* actor = static_cast<PContextWrapperChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPContextWrapperChild).NoIndex) != ((mManagedPContextWrapperChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPContextWrapperChild).RemoveElementSorted(actor);
            DeallocPContextWrapper(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PTestShellChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PTestShellChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PTestShellChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PTestShellChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PTestShellChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PTestShellChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PTestShellChild::GetIPCChannel()
{
    return mChannel;
}

PTestShellChild::Result
PTestShellChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PTestShell::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PTestShell::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PTestShell::Msg___delete__*>((&(__msg))))->Log("[PTestShellChild] Received ", stderr);
            }

            void* __iter = 0;
            PTestShellChild* actor;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PTestShell::Transition(mState, Trigger(Trigger::Send, PTestShell::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PTestShellMsgStart, actor);


            return MsgProcessed;
        }
    case PTestShell::Msg_ExecuteCommand__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PTestShell::Msg_ExecuteCommand");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PTestShell::Msg_ExecuteCommand*>((&(__msg))))->Log("[PTestShellChild] Received ", stderr);
            }

            void* __iter = 0;
            nsString aCommand;

            if ((!(Read((&(aCommand)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PTestShell::Transition(mState, Trigger(Trigger::Send, PTestShell::Msg_ExecuteCommand__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvExecuteCommand(aCommand)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for ExecuteCommand returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTestShell::Msg_PTestShellCommandConstructor__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PTestShell::Msg_PTestShellCommandConstructor");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PTestShell::Msg_PTestShellCommandConstructor*>((&(__msg))))->Log("[PTestShellChild] Received ", stderr);
            }

            void* __iter = 0;
            ActorHandle __handle;
            PTestShellCommandChild* actor;
            nsString aCommand;

            if ((!(Read((&(__handle)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(aCommand)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PTestShell::Transition(mState, Trigger(Trigger::Send, PTestShell::Msg_PTestShellCommandConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            actor = AllocPTestShellCommand(aCommand);
            if ((!(actor))) {
                return MsgValueError;
            }
            (actor)->mId = RegisterID(actor, (__handle).mId);
            (actor)->mManager = this;
            (actor)->mChannel = mChannel;
            (mManagedPTestShellCommandChild).InsertElementSorted(actor);
            (actor)->mState = mozilla::ipc::PTestShellCommand::__Start;

            if ((!(RecvPTestShellCommandConstructor(actor, aCommand)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PTestShellCommand returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTestShell::Reply_PContextWrapperConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PTestShellChild::Result
PTestShellChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PTestShellChild::Result
PTestShellChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PTestShellChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PTestShellChild::GetProtocolTypeId()
{
    return PTestShellMsgStart;
}

bool
PTestShellChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PTestShellChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PTestShellChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PTestShellChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PTestShellChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PTestShellChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PTestShellChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PTestShellChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PTestShellChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PTestShellChild] abort()ing as a result");
}

void
PTestShellChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PTestShellCommand kids
        InfallibleTArray<PTestShellCommandChild*> kids(mManagedPTestShellCommandChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PContextWrapper kids
        InfallibleTArray<PContextWrapperChild*> kids(mManagedPContextWrapperChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PTestShellChild::DeallocSubtree()
{
    {
        // Recursively deleting PTestShellCommand kids
        InfallibleTArray<PTestShellCommandChild*>& kids = mManagedPTestShellCommandChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPTestShellCommand(kids[i]);
        }
        (mManagedPTestShellCommandChild).Clear();
    }
    {
        // Recursively deleting PContextWrapper kids
        InfallibleTArray<PContextWrapperChild*>& kids = mManagedPContextWrapperChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPContextWrapper(kids[i]);
        }
        (mManagedPContextWrapperChild).Clear();
    }
}

void
PTestShellChild::Write(
        PTestShellChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PTestShellChild::Read(
        PTestShellChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PTestShell");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PTestShell");
        return false;
    }

    if ((PTestShellMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PTestShell has different type");
        return false;
    }

    (*(__v)) = static_cast<PTestShellChild*>(listener);
    return true;
}

void
PTestShellChild::Write(
        PContextWrapperChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PTestShellChild::Read(
        PContextWrapperChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PTestShell");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PContextWrapper");
        return false;
    }

    if ((PContextWrapperMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PContextWrapper has different type");
        return false;
    }

    (*(__v)) = static_cast<PContextWrapperChild*>(listener);
    return true;
}

void
PTestShellChild::Write(
        PTestShellCommandChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PTestShellChild::Read(
        PTestShellCommandChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PTestShell");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PTestShellCommand");
        return false;
    }

    if ((PTestShellCommandMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PTestShellCommand has different type");
        return false;
    }

    (*(__v)) = static_cast<PTestShellCommandChild*>(listener);
    return true;
}



} // namespace ipc
} // namespace mozilla
