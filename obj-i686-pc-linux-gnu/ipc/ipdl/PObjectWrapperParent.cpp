//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/jsipc/PObjectWrapperParent.h"

#include "mozilla/jsipc/PContextWrapperParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::jsipc::JSVariant JSVariant;
typedef mozilla::jsipc::OperationStatus OperationStatus;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::void_t void_t;
using mozilla::jsipc::PContextWrapperParent;

namespace mozilla {
namespace jsipc {


void
PObjectWrapperParent::ActorDestroy(ActorDestroyReason why)
{
}

PObjectWrapperParent::PObjectWrapperParent() :
    mId(0),
    mState(PObjectWrapper::__Dead)
{
    MOZ_COUNT_CTOR(PObjectWrapperParent);
}

PObjectWrapperParent::~PObjectWrapperParent()
{
    MOZ_COUNT_DTOR(PObjectWrapperParent);
}

PContextWrapperParent*
PObjectWrapperParent::Manager() const
{
    return static_cast<PContextWrapperParent*>(mManager);
}

PObjectWrapper::State
PObjectWrapperParent::state()
{
    return mState;
}

bool
PObjectWrapperParent::Send__delete__(PObjectWrapperParent* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PObjectWrapper::Msg___delete__* __msg = new PObjectWrapper::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition((actor)->mState, Trigger(Trigger::Send, PObjectWrapper::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PObjectWrapperMsgStart, actor);
    return __sendok;
}

bool
PObjectWrapperParent::CallAddProperty(
        const nsString& id,
        OperationStatus* status)
{
    PObjectWrapper::Msg_AddProperty* __msg = new PObjectWrapper::Msg_AddProperty();

    Write(id, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_AddProperty__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PObjectWrapper::Reply_AddProperty*>((&(__reply))))->Log("[PObjectWrapperParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(status, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PObjectWrapperParent::CallGetProperty(
        const nsString& id,
        OperationStatus* status,
        JSVariant* vp)
{
    PObjectWrapper::Msg_GetProperty* __msg = new PObjectWrapper::Msg_GetProperty();

    Write(id, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_GetProperty__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PObjectWrapper::Reply_GetProperty*>((&(__reply))))->Log("[PObjectWrapperParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(status, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(vp, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PObjectWrapperParent::CallSetProperty(
        const nsString& id,
        const JSVariant& v,
        OperationStatus* status,
        JSVariant* vp)
{
    PObjectWrapper::Msg_SetProperty* __msg = new PObjectWrapper::Msg_SetProperty();

    Write(id, __msg);
    Write(v, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_SetProperty__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PObjectWrapper::Reply_SetProperty*>((&(__reply))))->Log("[PObjectWrapperParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(status, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(vp, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PObjectWrapperParent::CallDelProperty(
        const nsString& id,
        OperationStatus* status,
        JSVariant* vp)
{
    PObjectWrapper::Msg_DelProperty* __msg = new PObjectWrapper::Msg_DelProperty();

    Write(id, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_DelProperty__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PObjectWrapper::Reply_DelProperty*>((&(__reply))))->Log("[PObjectWrapperParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(status, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(vp, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PObjectWrapperParent::CallNewEnumerateInit(
        OperationStatus* status,
        JSVariant* statep,
        int* idp)
{
    PObjectWrapper::Msg_NewEnumerateInit* __msg = new PObjectWrapper::Msg_NewEnumerateInit();


    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_NewEnumerateInit__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PObjectWrapper::Reply_NewEnumerateInit*>((&(__reply))))->Log("[PObjectWrapperParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(status, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(statep, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(idp, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PObjectWrapperParent::CallNewEnumerateNext(
        const JSVariant& in_state,
        OperationStatus* status,
        JSVariant* statep,
        nsString* idp)
{
    PObjectWrapper::Msg_NewEnumerateNext* __msg = new PObjectWrapper::Msg_NewEnumerateNext();

    Write(in_state, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_NewEnumerateNext__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PObjectWrapper::Reply_NewEnumerateNext*>((&(__reply))))->Log("[PObjectWrapperParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(status, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(statep, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(idp, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PObjectWrapperParent::SendNewEnumerateDestroy(const JSVariant& in_state)
{
    PObjectWrapper::Msg_NewEnumerateDestroy* __msg = new PObjectWrapper::Msg_NewEnumerateDestroy();

    Write(in_state, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_NewEnumerateDestroy__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PObjectWrapperParent::CallNewResolve(
        const nsString& id,
        const int& flags,
        OperationStatus* status,
        PObjectWrapperParent** obj2)
{
    PObjectWrapper::Msg_NewResolve* __msg = new PObjectWrapper::Msg_NewResolve();

    Write(id, __msg);
    Write(flags, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_NewResolve__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PObjectWrapper::Reply_NewResolve*>((&(__reply))))->Log("[PObjectWrapperParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(status, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(obj2, (&(__reply)), (&(__iter)), true)))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PObjectWrapperParent::CallConvert(
        const JSType& type,
        OperationStatus* status,
        JSVariant* vp)
{
    PObjectWrapper::Msg_Convert* __msg = new PObjectWrapper::Msg_Convert();

    Write(type, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_Convert__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PObjectWrapper::Reply_Convert*>((&(__reply))))->Log("[PObjectWrapperParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(status, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(vp, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PObjectWrapperParent::CallCall(
        PObjectWrapperParent* receiver,
        const InfallibleTArray<JSVariant>& argv,
        OperationStatus* status,
        JSVariant* rval)
{
    PObjectWrapper::Msg_Call* __msg = new PObjectWrapper::Msg_Call();

    Write(receiver, __msg, false);
    Write(argv, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_Call__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PObjectWrapper::Reply_Call*>((&(__reply))))->Log("[PObjectWrapperParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(status, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(rval, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PObjectWrapperParent::CallConstruct(
        const InfallibleTArray<JSVariant>& argv,
        OperationStatus* status,
        PObjectWrapperParent** rval)
{
    PObjectWrapper::Msg_Construct* __msg = new PObjectWrapper::Msg_Construct();

    Write(argv, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_Construct__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PObjectWrapper::Reply_Construct*>((&(__reply))))->Log("[PObjectWrapperParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(status, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(rval, (&(__reply)), (&(__iter)), true)))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PObjectWrapperParent::CallHasInstance(
        const JSVariant& v,
        OperationStatus* status,
        JSBool* bp)
{
    PObjectWrapper::Msg_HasInstance* __msg = new PObjectWrapper::Msg_HasInstance();

    Write(v, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_rpc();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PObjectWrapperParent] Sending ", stderr);
    }
    if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_HasInstance__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Call(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PObjectWrapper::Reply_HasInstance*>((&(__reply))))->Log("[PObjectWrapperParent] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(status, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(bp, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

int32_t
PObjectWrapperParent::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PObjectWrapperParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PObjectWrapperParent::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PObjectWrapperParent::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PObjectWrapperParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    NS_RUNTIMEABORT("unreached");
    return;
}

Shmem::SharedMemory*
PObjectWrapperParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PObjectWrapperParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PObjectWrapperParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PObjectWrapperParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PObjectWrapperParent::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PObjectWrapperParent::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PObjectWrapperParent::GetIPCChannel()
{
    return mChannel;
}

PObjectWrapperParent::Result
PObjectWrapperParent::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PObjectWrapper::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PObjectWrapperParent::Result
PObjectWrapperParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PObjectWrapperParent::Result
PObjectWrapperParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PObjectWrapperParent::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PObjectWrapperParent::GetProtocolTypeId()
{
    return PObjectWrapperMsgStart;
}

bool
PObjectWrapperParent::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PObjectWrapperParent::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PObjectWrapperParent::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PObjectWrapperParent::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PObjectWrapperParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PObjectWrapperParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PObjectWrapperParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PObjectWrapperParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PObjectWrapperParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PObjectWrapperParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PObjectWrapperParent::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PObjectWrapperParent::DeallocSubtree()
{
}

void
PObjectWrapperParent::Write(
        PObjectWrapperParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PObjectWrapperParent::Read(
        PObjectWrapperParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PObjectWrapper");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PObjectWrapper");
        return false;
    }

    if ((PObjectWrapperMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PObjectWrapper has different type");
        return false;
    }

    (*(__v)) = static_cast<PObjectWrapperParent*>(listener);
    return true;
}

void
PObjectWrapperParent::Write(
        const InfallibleTArray<JSVariant>& __v,
        Message* __msg)
{
    uint32_t length = (__v).Length();
    Write(length, __msg);

    for (uint32_t i = 0; (i) < (length); (++(i))) {
        Write(__v[i], __msg);
    }
}

bool
PObjectWrapperParent::Read(
        InfallibleTArray<JSVariant>* __v,
        const Message* __msg,
        void** __iter)
{
    InfallibleTArray<JSVariant>& a = (*(__v));
    uint32_t length;
    if ((!(Read((&(length)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    (__v)->SetLength(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(a[i])), __msg, __iter)))) {
            mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
            return false;
        }
    }
    return true;
}

void
PObjectWrapperParent::Write(
        const OperationStatus& __v,
        Message* __msg)
{
    typedef OperationStatus __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TJSBool:
        {
            Write((__v).get_JSBool(), __msg);
            return;
        }
    case __type::TJSVariant:
        {
            Write((__v).get_JSVariant(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PObjectWrapperParent::Read(
        OperationStatus* __v,
        const Message* __msg,
        void** __iter)
{
    typedef OperationStatus __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TJSBool:
        {
            JSBool tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_JSBool())), __msg, __iter);
        }
    case __type::TJSVariant:
        {
            JSVariant tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_JSVariant())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PObjectWrapperParent::Write(
        const JSVariant& __v,
        Message* __msg)
{
    typedef JSVariant __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::Tvoid_t:
        {
            Write((__v).get_void_t(), __msg);
            return;
        }
    case __type::TPObjectWrapperParent:
        {
            Write((__v).get_PObjectWrapperParent(), __msg, true);
            return;
        }
    case __type::TPObjectWrapperChild:
        {
            NS_RUNTIMEABORT("wrong side!");
            return;
        }
    case __type::TnsString:
        {
            Write((__v).get_nsString(), __msg);
            return;
        }
    case __type::Tint:
        {
            Write((__v).get_int(), __msg);
            return;
        }
    case __type::Tdouble:
        {
            Write((__v).get_double(), __msg);
            return;
        }
    case __type::Tbool:
        {
            Write((__v).get_bool(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PObjectWrapperParent::Read(
        JSVariant* __v,
        const Message* __msg,
        void** __iter)
{
    typedef JSVariant __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::Tvoid_t:
        {
            void_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_void_t())), __msg, __iter);
        }
    case __type::TPObjectWrapperParent:
        {
            return false;
        }
    case __type::TPObjectWrapperChild:
        {
            PObjectWrapperParent* tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_PObjectWrapperParent())), __msg, __iter, true);
        }
    case __type::TnsString:
        {
            nsString tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_nsString())), __msg, __iter);
        }
    case __type::Tint:
        {
            int tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_int())), __msg, __iter);
        }
    case __type::Tdouble:
        {
            double tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_double())), __msg, __iter);
        }
    case __type::Tbool:
        {
            bool tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_bool())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}



} // namespace jsipc
} // namespace mozilla
