//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PMemoryReportRequest.h"

namespace mozilla {
namespace dom {
namespace PMemoryReportRequest {

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next)
{
    switch (from) {
    case __Null:
    case __Error:
        if ((Msg___delete____ID) == ((trigger).mMsg)) {
            (*(next)) = __Dead;
            return true;
        }
        return (__Null) == (from);
    case __Dead:
        NS_RUNTIMEABORT("__delete__()d actor");
        return false;
    case __Dying:
        NS_RUNTIMEABORT("__delete__()d (and unexpectedly dying) actor");
        return false;
    default:
        NS_RUNTIMEABORT("corrupted actor state");
        return false;
    }
    (*(next)) = __Error;
    return false;
}

} // namespace PMemoryReportRequest
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MemoryReport|
//
namespace mozilla {
namespace dom {
MemoryReport::MemoryReport()
{
    Init();
}

MemoryReport::~MemoryReport()
{
}

bool
MemoryReport::operator==(const MemoryReport& _o) const
{
    if ((!((process()) == ((_o).process())))) {
        return false;
    }
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    if ((!((kind()) == ((_o).kind())))) {
        return false;
    }
    if ((!((units()) == ((_o).units())))) {
        return false;
    }
    if ((!((amount()) == ((_o).amount())))) {
        return false;
    }
    if ((!((desc()) == ((_o).desc())))) {
        return false;
    }
    return true;
}

void
MemoryReport::Init()
{
}

void
MemoryReport::Assign(
        const nsCString& _process,
        const nsCString& _path,
        const int32_t& _kind,
        const int32_t& _units,
        const int64_t& _amount,
        const nsCString& _desc)
{
    process_ = _process;
    path_ = _path;
    kind_ = _kind;
    units_ = _units;
    amount_ = _amount;
    desc_ = _desc;
}

} // namespace dom
} // namespace mozilla
