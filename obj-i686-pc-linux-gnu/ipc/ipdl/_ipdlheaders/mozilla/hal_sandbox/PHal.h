//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PHal_h
#define PHal_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "prtime.h"
#include "mozilla/HalSensor.h"
#include "mozilla/HalTypes.h"
#include "mozilla/dom/ScreenOrientation.h"
#include "nsRect.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct BatteryInformation|
//
namespace mozilla {
namespace hal {
class BatteryInformation MOZ_FINAL
{
private:

public:
    BatteryInformation();

    BatteryInformation(
            const double& _level,
            const bool& _charging,
            const double& _remainingTime)
    {
        Init();
        Assign(_level, _charging, _remainingTime);
    }

    BatteryInformation(const BatteryInformation& _o)
    {
        Init();
        Assign((_o).level(), (_o).charging(), (_o).remainingTime());
    }

    ~BatteryInformation();

    void
    operator=(const BatteryInformation& _o)
    {
        Assign((_o).level(), (_o).charging(), (_o).remainingTime());
    }

    bool
    operator==(const BatteryInformation& _o) const;

    double&
    level()
    {
        return level_;
    }
    const double&
    level() const
    {
        return level_;
    }

    bool&
    charging()
    {
        return charging_;
    }
    const bool&
    charging() const
    {
        return charging_;
    }

    double&
    remainingTime()
    {
        return remainingTime_;
    }
    const double&
    remainingTime() const
    {
        return remainingTime_;
    }

private:
    void
    Init();

    void
    Assign(
            const double& _level,
            const bool& _charging,
            const double& _remainingTime);

    double level_;
    bool charging_;
    double remainingTime_;
};
} // namespace hal
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LightConfiguration|
//
namespace mozilla {
namespace hal {
class LightConfiguration MOZ_FINAL
{
private:
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::FlashMode FlashMode;

public:
    LightConfiguration();

    LightConfiguration(
            const LightType& _light,
            const LightMode& _mode,
            const FlashMode& _flash,
            const uint32_t& _flashOnMS,
            const uint32_t& _flashOffMS,
            const uint32_t& _color)
    {
        Init();
        Assign(_light, _mode, _flash, _flashOnMS, _flashOffMS, _color);
    }

    LightConfiguration(const LightConfiguration& _o)
    {
        Init();
        Assign((_o).light(), (_o).mode(), (_o).flash(), (_o).flashOnMS(), (_o).flashOffMS(), (_o).color());
    }

    ~LightConfiguration();

    void
    operator=(const LightConfiguration& _o)
    {
        Assign((_o).light(), (_o).mode(), (_o).flash(), (_o).flashOnMS(), (_o).flashOffMS(), (_o).color());
    }

    bool
    operator==(const LightConfiguration& _o) const;

    LightType&
    light()
    {
        return light_;
    }
    const LightType&
    light() const
    {
        return light_;
    }

    LightMode&
    mode()
    {
        return mode_;
    }
    const LightMode&
    mode() const
    {
        return mode_;
    }

    FlashMode&
    flash()
    {
        return flash_;
    }
    const FlashMode&
    flash() const
    {
        return flash_;
    }

    uint32_t&
    flashOnMS()
    {
        return flashOnMS_;
    }
    const uint32_t&
    flashOnMS() const
    {
        return flashOnMS_;
    }

    uint32_t&
    flashOffMS()
    {
        return flashOffMS_;
    }
    const uint32_t&
    flashOffMS() const
    {
        return flashOffMS_;
    }

    uint32_t&
    color()
    {
        return color_;
    }
    const uint32_t&
    color() const
    {
        return color_;
    }

private:
    void
    Init();

    void
    Assign(
            const LightType& _light,
            const LightMode& _mode,
            const FlashMode& _flash,
            const uint32_t& _flashOnMS,
            const uint32_t& _flashOffMS,
            const uint32_t& _color);

    LightType light_;
    LightMode mode_;
    FlashMode flash_;
    uint32_t flashOnMS_;
    uint32_t flashOffMS_;
    uint32_t color_;
};
} // namespace hal
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SensorData|
//
namespace mozilla {
namespace hal {
class SensorData MOZ_FINAL
{
private:
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;

public:
    SensorData();

    SensorData(
            const SensorType& _sensor,
            const PRTime& _timestamp,
            const InfallibleTArray<float>& _values,
            const SensorAccuracyType& _accuracy)
    {
        Init();
        Assign(_sensor, _timestamp, _values, _accuracy);
    }

    SensorData(const SensorData& _o)
    {
        Init();
        Assign((_o).sensor(), (_o).timestamp(), (_o).values(), (_o).accuracy());
    }

    ~SensorData();

    void
    operator=(const SensorData& _o)
    {
        Assign((_o).sensor(), (_o).timestamp(), (_o).values(), (_o).accuracy());
    }

    bool
    operator==(const SensorData& _o) const;

    SensorType&
    sensor()
    {
        return sensor_;
    }
    const SensorType&
    sensor() const
    {
        return sensor_;
    }

    PRTime&
    timestamp()
    {
        return timestamp_;
    }
    const PRTime&
    timestamp() const
    {
        return timestamp_;
    }

    InfallibleTArray<float>&
    values()
    {
        return values_;
    }
    const InfallibleTArray<float>&
    values() const
    {
        return values_;
    }

    SensorAccuracyType&
    accuracy()
    {
        return accuracy_;
    }
    const SensorAccuracyType&
    accuracy() const
    {
        return accuracy_;
    }

private:
    void
    Init();

    void
    Assign(
            const SensorType& _sensor,
            const PRTime& _timestamp,
            const InfallibleTArray<float>& _values,
            const SensorAccuracyType& _accuracy);

    SensorType sensor_;
    PRTime timestamp_;
    InfallibleTArray<float> values_;
    SensorAccuracyType accuracy_;
};
} // namespace hal
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct NetworkInformation|
//
namespace mozilla {
namespace hal {
class NetworkInformation MOZ_FINAL
{
private:

public:
    NetworkInformation();

    NetworkInformation(
            const double& _bandwidth,
            const bool& _canBeMetered)
    {
        Init();
        Assign(_bandwidth, _canBeMetered);
    }

    NetworkInformation(const NetworkInformation& _o)
    {
        Init();
        Assign((_o).bandwidth(), (_o).canBeMetered());
    }

    ~NetworkInformation();

    void
    operator=(const NetworkInformation& _o)
    {
        Assign((_o).bandwidth(), (_o).canBeMetered());
    }

    bool
    operator==(const NetworkInformation& _o) const;

    double&
    bandwidth()
    {
        return bandwidth_;
    }
    const double&
    bandwidth() const
    {
        return bandwidth_;
    }

    bool&
    canBeMetered()
    {
        return canBeMetered_;
    }
    const bool&
    canBeMetered() const
    {
        return canBeMetered_;
    }

private:
    void
    Init();

    void
    Assign(
            const double& _bandwidth,
            const bool& _canBeMetered);

    double bandwidth_;
    bool canBeMetered_;
};
} // namespace hal
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SwitchEvent|
//
namespace mozilla {
namespace hal {
class SwitchEvent MOZ_FINAL
{
private:
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchState SwitchState;

public:
    SwitchEvent();

    SwitchEvent(
            const SwitchDevice& _device,
            const SwitchState& _status)
    {
        Init();
        Assign(_device, _status);
    }

    SwitchEvent(const SwitchEvent& _o)
    {
        Init();
        Assign((_o).device(), (_o).status());
    }

    ~SwitchEvent();

    void
    operator=(const SwitchEvent& _o)
    {
        Assign((_o).device(), (_o).status());
    }

    bool
    operator==(const SwitchEvent& _o) const;

    SwitchDevice&
    device()
    {
        return device_;
    }
    const SwitchDevice&
    device() const
    {
        return device_;
    }

    SwitchState&
    status()
    {
        return status_;
    }
    const SwitchState&
    status() const
    {
        return status_;
    }

private:
    void
    Init();

    void
    Assign(
            const SwitchDevice& _device,
            const SwitchState& _status);

    SwitchDevice device_;
    SwitchState status_;
};
} // namespace hal
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WakeLockInformation|
//
namespace mozilla {
namespace hal {
class WakeLockInformation MOZ_FINAL
{
private:

public:
    WakeLockInformation();

    WakeLockInformation(
            const uint32_t& _numLocks,
            const uint32_t& _numHidden,
            const nsString& _topic)
    {
        Init();
        Assign(_numLocks, _numHidden, _topic);
    }

    WakeLockInformation(const WakeLockInformation& _o)
    {
        Init();
        Assign((_o).numLocks(), (_o).numHidden(), (_o).topic());
    }

    ~WakeLockInformation();

    void
    operator=(const WakeLockInformation& _o)
    {
        Assign((_o).numLocks(), (_o).numHidden(), (_o).topic());
    }

    bool
    operator==(const WakeLockInformation& _o) const;

    uint32_t&
    numLocks()
    {
        return numLocks_;
    }
    const uint32_t&
    numLocks() const
    {
        return numLocks_;
    }

    uint32_t&
    numHidden()
    {
        return numHidden_;
    }
    const uint32_t&
    numHidden() const
    {
        return numHidden_;
    }

    nsString&
    topic()
    {
        return topic_;
    }
    const nsString&
    topic() const
    {
        return topic_;
    }

private:
    void
    Init();

    void
    Assign(
            const uint32_t& _numLocks,
            const uint32_t& _numHidden,
            const nsString& _topic);

    uint32_t numLocks_;
    uint32_t numHidden_;
    nsString topic_;
};
} // namespace hal
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ScreenConfiguration|
//
namespace mozilla {
namespace hal {
class ScreenConfiguration MOZ_FINAL
{
private:
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;

public:
    ScreenConfiguration();

    ScreenConfiguration(
            const nsIntRect& _rect,
            const ScreenOrientation& _orientation,
            const uint32_t& _colorDepth,
            const uint32_t& _pixelDepth)
    {
        Init();
        Assign(_rect, _orientation, _colorDepth, _pixelDepth);
    }

    ScreenConfiguration(const ScreenConfiguration& _o)
    {
        Init();
        Assign((_o).rect(), (_o).orientation(), (_o).colorDepth(), (_o).pixelDepth());
    }

    ~ScreenConfiguration();

    void
    operator=(const ScreenConfiguration& _o)
    {
        Assign((_o).rect(), (_o).orientation(), (_o).colorDepth(), (_o).pixelDepth());
    }

    bool
    operator==(const ScreenConfiguration& _o) const;

    nsIntRect&
    rect()
    {
        return rect_;
    }
    const nsIntRect&
    rect() const
    {
        return rect_;
    }

    ScreenOrientation&
    orientation()
    {
        return orientation_;
    }
    const ScreenOrientation&
    orientation() const
    {
        return orientation_;
    }

    uint32_t&
    colorDepth()
    {
        return colorDepth_;
    }
    const uint32_t&
    colorDepth() const
    {
        return colorDepth_;
    }

    uint32_t&
    pixelDepth()
    {
        return pixelDepth_;
    }
    const uint32_t&
    pixelDepth() const
    {
        return pixelDepth_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsIntRect& _rect,
            const ScreenOrientation& _orientation,
            const uint32_t& _colorDepth,
            const uint32_t& _pixelDepth);

    nsIntRect rect_;
    ScreenOrientation orientation_;
    uint32_t colorDepth_;
    uint32_t pixelDepth_;
};
} // namespace hal
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FMRadioOperationInformation|
//
namespace mozilla {
namespace hal {
class FMRadioOperationInformation MOZ_FINAL
{
private:
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;

public:
    FMRadioOperationInformation();

    FMRadioOperationInformation(
            const FMRadioOperation& _operation,
            const FMRadioOperationStatus& _status,
            const uint32_t& _frequency)
    {
        Init();
        Assign(_operation, _status, _frequency);
    }

    FMRadioOperationInformation(const FMRadioOperationInformation& _o)
    {
        Init();
        Assign((_o).operation(), (_o).status(), (_o).frequency());
    }

    ~FMRadioOperationInformation();

    void
    operator=(const FMRadioOperationInformation& _o)
    {
        Assign((_o).operation(), (_o).status(), (_o).frequency());
    }

    bool
    operator==(const FMRadioOperationInformation& _o) const;

    FMRadioOperation&
    operation()
    {
        return operation_;
    }
    const FMRadioOperation&
    operation() const
    {
        return operation_;
    }

    FMRadioOperationStatus&
    status()
    {
        return status_;
    }
    const FMRadioOperationStatus&
    status() const
    {
        return status_;
    }

    uint32_t&
    frequency()
    {
        return frequency_;
    }
    const uint32_t&
    frequency() const
    {
        return frequency_;
    }

private:
    void
    Init();

    void
    Assign(
            const FMRadioOperation& _operation,
            const FMRadioOperationStatus& _status,
            const uint32_t& _frequency);

    FMRadioOperation operation_;
    FMRadioOperationStatus status_;
    uint32_t frequency_;
};
} // namespace hal
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FMRadioSettings|
//
namespace mozilla {
namespace hal {
class FMRadioSettings MOZ_FINAL
{
private:
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;

public:
    FMRadioSettings();

    FMRadioSettings(
            const FMRadioCountry& _country,
            const uint32_t& _upperLimit,
            const uint32_t& _lowerLimit,
            const uint32_t& _spaceType,
            const uint32_t& _preEmphasis)
    {
        Init();
        Assign(_country, _upperLimit, _lowerLimit, _spaceType, _preEmphasis);
    }

    FMRadioSettings(const FMRadioSettings& _o)
    {
        Init();
        Assign((_o).country(), (_o).upperLimit(), (_o).lowerLimit(), (_o).spaceType(), (_o).preEmphasis());
    }

    ~FMRadioSettings();

    void
    operator=(const FMRadioSettings& _o)
    {
        Assign((_o).country(), (_o).upperLimit(), (_o).lowerLimit(), (_o).spaceType(), (_o).preEmphasis());
    }

    bool
    operator==(const FMRadioSettings& _o) const;

    FMRadioCountry&
    country()
    {
        return country_;
    }
    const FMRadioCountry&
    country() const
    {
        return country_;
    }

    uint32_t&
    upperLimit()
    {
        return upperLimit_;
    }
    const uint32_t&
    upperLimit() const
    {
        return upperLimit_;
    }

    uint32_t&
    lowerLimit()
    {
        return lowerLimit_;
    }
    const uint32_t&
    lowerLimit() const
    {
        return lowerLimit_;
    }

    uint32_t&
    spaceType()
    {
        return spaceType_;
    }
    const uint32_t&
    spaceType() const
    {
        return spaceType_;
    }

    uint32_t&
    preEmphasis()
    {
        return preEmphasis_;
    }
    const uint32_t&
    preEmphasis() const
    {
        return preEmphasis_;
    }

private:
    void
    Init();

    void
    Assign(
            const FMRadioCountry& _country,
            const uint32_t& _upperLimit,
            const uint32_t& _lowerLimit,
            const uint32_t& _spaceType,
            const uint32_t& _preEmphasis);

    FMRadioCountry country_;
    uint32_t upperLimit_;
    uint32_t lowerLimit_;
    uint32_t spaceType_;
    uint32_t preEmphasis_;
};
} // namespace hal
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SystemTimezoneChangeInformation|
//
namespace mozilla {
namespace hal {
class SystemTimezoneChangeInformation MOZ_FINAL
{
private:

public:
    SystemTimezoneChangeInformation();

    SystemTimezoneChangeInformation(
            const int32_t& _oldTimezoneOffsetMinutes,
            const int32_t& _newTimezoneOffsetMinutes)
    {
        Init();
        Assign(_oldTimezoneOffsetMinutes, _newTimezoneOffsetMinutes);
    }

    SystemTimezoneChangeInformation(const SystemTimezoneChangeInformation& _o)
    {
        Init();
        Assign((_o).oldTimezoneOffsetMinutes(), (_o).newTimezoneOffsetMinutes());
    }

    ~SystemTimezoneChangeInformation();

    void
    operator=(const SystemTimezoneChangeInformation& _o)
    {
        Assign((_o).oldTimezoneOffsetMinutes(), (_o).newTimezoneOffsetMinutes());
    }

    bool
    operator==(const SystemTimezoneChangeInformation& _o) const;

    int32_t&
    oldTimezoneOffsetMinutes()
    {
        return oldTimezoneOffsetMinutes_;
    }
    const int32_t&
    oldTimezoneOffsetMinutes() const
    {
        return oldTimezoneOffsetMinutes_;
    }

    int32_t&
    newTimezoneOffsetMinutes()
    {
        return newTimezoneOffsetMinutes_;
    }
    const int32_t&
    newTimezoneOffsetMinutes() const
    {
        return newTimezoneOffsetMinutes_;
    }

private:
    void
    Init();

    void
    Assign(
            const int32_t& _oldTimezoneOffsetMinutes,
            const int32_t& _newTimezoneOffsetMinutes);

    int32_t oldTimezoneOffsetMinutes_;
    int32_t newTimezoneOffsetMinutes_;
};
} // namespace hal
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PHalChild and PHalParent
//
namespace mozilla {
namespace hal_sandbox {
namespace PHal {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PHalStart = PHalMsgStart << 16,
    PHalPreStart = (PHalMsgStart << 16) - 1,
    Msg_NotifyBatteryChange__ID,
    Msg_NotifyNetworkChange__ID,
    Msg_NotifyWakeLockChange__ID,
    Msg_NotifyScreenConfigurationChange__ID,
    Msg_NotifySwitchChange__ID,
    Msg_NotifySystemClockChange__ID,
    Msg_NotifySystemTimezoneChange__ID,
    Msg_Vibrate__ID,
    Msg_CancelVibrate__ID,
    Msg_EnableBatteryNotifications__ID,
    Msg_DisableBatteryNotifications__ID,
    Msg_GetCurrentBatteryInformation__ID,
    Reply_GetCurrentBatteryInformation__ID,
    Msg_EnableNetworkNotifications__ID,
    Msg_DisableNetworkNotifications__ID,
    Msg_GetCurrentNetworkInformation__ID,
    Reply_GetCurrentNetworkInformation__ID,
    Msg_GetScreenEnabled__ID,
    Reply_GetScreenEnabled__ID,
    Msg_SetScreenEnabled__ID,
    Msg_GetCpuSleepAllowed__ID,
    Reply_GetCpuSleepAllowed__ID,
    Msg_SetCpuSleepAllowed__ID,
    Msg_GetScreenBrightness__ID,
    Reply_GetScreenBrightness__ID,
    Msg_SetScreenBrightness__ID,
    Msg_AdjustSystemClock__ID,
    Msg_SetTimezone__ID,
    Msg_GetTimezone__ID,
    Reply_GetTimezone__ID,
    Msg_EnableSystemClockChangeNotifications__ID,
    Msg_DisableSystemClockChangeNotifications__ID,
    Msg_EnableSystemTimezoneChangeNotifications__ID,
    Msg_DisableSystemTimezoneChangeNotifications__ID,
    Msg_SetLight__ID,
    Reply_SetLight__ID,
    Msg_GetLight__ID,
    Reply_GetLight__ID,
    Msg_ModifyWakeLock__ID,
    Msg_EnableWakeLockNotifications__ID,
    Msg_DisableWakeLockNotifications__ID,
    Msg_GetWakeLockInfo__ID,
    Reply_GetWakeLockInfo__ID,
    Msg_EnableScreenConfigurationNotifications__ID,
    Msg_DisableScreenConfigurationNotifications__ID,
    Msg_GetCurrentScreenConfiguration__ID,
    Reply_GetCurrentScreenConfiguration__ID,
    Msg_LockScreenOrientation__ID,
    Reply_LockScreenOrientation__ID,
    Msg_UnlockScreenOrientation__ID,
    Msg_EnableSwitchNotifications__ID,
    Msg_DisableSwitchNotifications__ID,
    Msg_GetCurrentSwitchState__ID,
    Reply_GetCurrentSwitchState__ID,
    Msg_SetProcessPriority__ID,
    Msg_FactoryReset__ID,
    Msg_NotifySensorChange__ID,
    Msg_EnableSensorNotifications__ID,
    Msg_DisableSensorNotifications__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PHalEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg_NotifyBatteryChange :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_NotifyBatteryChange__ID
    };
    Msg_NotifyBatteryChange() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_NotifyBatteryChange")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifyBatteryChange(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifyNetworkChange :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_NotifyNetworkChange__ID
    };
    Msg_NotifyNetworkChange() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_NotifyNetworkChange")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifyNetworkChange(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifyWakeLockChange :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_NotifyWakeLockChange__ID
    };
    Msg_NotifyWakeLockChange() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_NotifyWakeLockChange")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifyWakeLockChange(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifyScreenConfigurationChange :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_NotifyScreenConfigurationChange__ID
    };
    Msg_NotifyScreenConfigurationChange() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_NotifyScreenConfigurationChange")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifyScreenConfigurationChange(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifySwitchChange :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_NotifySwitchChange__ID
    };
    Msg_NotifySwitchChange() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_NotifySwitchChange")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifySwitchChange(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifySystemClockChange :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_NotifySystemClockChange__ID
    };
    Msg_NotifySystemClockChange() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_NotifySystemClockChange")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifySystemClockChange(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifySystemTimezoneChange :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_NotifySystemTimezoneChange__ID
    };
    Msg_NotifySystemTimezoneChange() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_NotifySystemTimezoneChange")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifySystemTimezoneChange(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Vibrate :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_Vibrate__ID
    };
    Msg_Vibrate() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_Vibrate")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Vibrate(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_CancelVibrate :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_CancelVibrate__ID
    };
    Msg_CancelVibrate() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_CancelVibrate")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_CancelVibrate(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_EnableBatteryNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_EnableBatteryNotifications__ID
    };
    Msg_EnableBatteryNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_EnableBatteryNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_EnableBatteryNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_DisableBatteryNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_DisableBatteryNotifications__ID
    };
    Msg_DisableBatteryNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_DisableBatteryNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_DisableBatteryNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetCurrentBatteryInformation :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_GetCurrentBatteryInformation__ID
    };
    Msg_GetCurrentBatteryInformation() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_GetCurrentBatteryInformation")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetCurrentBatteryInformation(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetCurrentBatteryInformation :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_GetCurrentBatteryInformation__ID
    };
    Reply_GetCurrentBatteryInformation() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_GetCurrentBatteryInformation")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetCurrentBatteryInformation(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_EnableNetworkNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_EnableNetworkNotifications__ID
    };
    Msg_EnableNetworkNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_EnableNetworkNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_EnableNetworkNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_DisableNetworkNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_DisableNetworkNotifications__ID
    };
    Msg_DisableNetworkNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_DisableNetworkNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_DisableNetworkNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetCurrentNetworkInformation :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_GetCurrentNetworkInformation__ID
    };
    Msg_GetCurrentNetworkInformation() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_GetCurrentNetworkInformation")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetCurrentNetworkInformation(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetCurrentNetworkInformation :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_GetCurrentNetworkInformation__ID
    };
    Reply_GetCurrentNetworkInformation() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_GetCurrentNetworkInformation")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetCurrentNetworkInformation(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetScreenEnabled :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_GetScreenEnabled__ID
    };
    Msg_GetScreenEnabled() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_GetScreenEnabled")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetScreenEnabled(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetScreenEnabled :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_GetScreenEnabled__ID
    };
    Reply_GetScreenEnabled() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_GetScreenEnabled")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetScreenEnabled(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetScreenEnabled :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_SetScreenEnabled__ID
    };
    Msg_SetScreenEnabled() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_SetScreenEnabled")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetScreenEnabled(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetCpuSleepAllowed :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_GetCpuSleepAllowed__ID
    };
    Msg_GetCpuSleepAllowed() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_GetCpuSleepAllowed")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetCpuSleepAllowed(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetCpuSleepAllowed :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_GetCpuSleepAllowed__ID
    };
    Reply_GetCpuSleepAllowed() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_GetCpuSleepAllowed")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetCpuSleepAllowed(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetCpuSleepAllowed :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_SetCpuSleepAllowed__ID
    };
    Msg_SetCpuSleepAllowed() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_SetCpuSleepAllowed")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetCpuSleepAllowed(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetScreenBrightness :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_GetScreenBrightness__ID
    };
    Msg_GetScreenBrightness() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_GetScreenBrightness")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetScreenBrightness(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetScreenBrightness :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_GetScreenBrightness__ID
    };
    Reply_GetScreenBrightness() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_GetScreenBrightness")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetScreenBrightness(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetScreenBrightness :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_SetScreenBrightness__ID
    };
    Msg_SetScreenBrightness() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_SetScreenBrightness")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetScreenBrightness(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_AdjustSystemClock :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_AdjustSystemClock__ID
    };
    Msg_AdjustSystemClock() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_AdjustSystemClock")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_AdjustSystemClock(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetTimezone :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_SetTimezone__ID
    };
    Msg_SetTimezone() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_SetTimezone")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetTimezone(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetTimezone :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_GetTimezone__ID
    };
    Msg_GetTimezone() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_GetTimezone")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetTimezone(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetTimezone :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_GetTimezone__ID
    };
    Reply_GetTimezone() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_GetTimezone")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetTimezone(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_EnableSystemClockChangeNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_EnableSystemClockChangeNotifications__ID
    };
    Msg_EnableSystemClockChangeNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_EnableSystemClockChangeNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_EnableSystemClockChangeNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_DisableSystemClockChangeNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_DisableSystemClockChangeNotifications__ID
    };
    Msg_DisableSystemClockChangeNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_DisableSystemClockChangeNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_DisableSystemClockChangeNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_EnableSystemTimezoneChangeNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_EnableSystemTimezoneChangeNotifications__ID
    };
    Msg_EnableSystemTimezoneChangeNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_EnableSystemTimezoneChangeNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_EnableSystemTimezoneChangeNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_DisableSystemTimezoneChangeNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_DisableSystemTimezoneChangeNotifications__ID
    };
    Msg_DisableSystemTimezoneChangeNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_DisableSystemTimezoneChangeNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_DisableSystemTimezoneChangeNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetLight :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_SetLight__ID
    };
    Msg_SetLight() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_SetLight")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetLight(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_SetLight :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_SetLight__ID
    };
    Reply_SetLight() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_SetLight")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_SetLight(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetLight :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_GetLight__ID
    };
    Msg_GetLight() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_GetLight")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetLight(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetLight :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_GetLight__ID
    };
    Reply_GetLight() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_GetLight")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetLight(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_ModifyWakeLock :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_ModifyWakeLock__ID
    };
    Msg_ModifyWakeLock() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_ModifyWakeLock")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_ModifyWakeLock(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_EnableWakeLockNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_EnableWakeLockNotifications__ID
    };
    Msg_EnableWakeLockNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_EnableWakeLockNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_EnableWakeLockNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_DisableWakeLockNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_DisableWakeLockNotifications__ID
    };
    Msg_DisableWakeLockNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_DisableWakeLockNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_DisableWakeLockNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetWakeLockInfo :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_GetWakeLockInfo__ID
    };
    Msg_GetWakeLockInfo() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_GetWakeLockInfo")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetWakeLockInfo(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetWakeLockInfo :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_GetWakeLockInfo__ID
    };
    Reply_GetWakeLockInfo() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_GetWakeLockInfo")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetWakeLockInfo(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_EnableScreenConfigurationNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_EnableScreenConfigurationNotifications__ID
    };
    Msg_EnableScreenConfigurationNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_EnableScreenConfigurationNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_EnableScreenConfigurationNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_DisableScreenConfigurationNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_DisableScreenConfigurationNotifications__ID
    };
    Msg_DisableScreenConfigurationNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_DisableScreenConfigurationNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_DisableScreenConfigurationNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetCurrentScreenConfiguration :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_GetCurrentScreenConfiguration__ID
    };
    Msg_GetCurrentScreenConfiguration() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_GetCurrentScreenConfiguration")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetCurrentScreenConfiguration(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetCurrentScreenConfiguration :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_GetCurrentScreenConfiguration__ID
    };
    Reply_GetCurrentScreenConfiguration() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_GetCurrentScreenConfiguration")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetCurrentScreenConfiguration(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_LockScreenOrientation :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_LockScreenOrientation__ID
    };
    Msg_LockScreenOrientation() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_LockScreenOrientation")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_LockScreenOrientation(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_LockScreenOrientation :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_LockScreenOrientation__ID
    };
    Reply_LockScreenOrientation() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_LockScreenOrientation")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_LockScreenOrientation(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_UnlockScreenOrientation :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_UnlockScreenOrientation__ID
    };
    Msg_UnlockScreenOrientation() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_UnlockScreenOrientation")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_UnlockScreenOrientation(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_EnableSwitchNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_EnableSwitchNotifications__ID
    };
    Msg_EnableSwitchNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_EnableSwitchNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_EnableSwitchNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_DisableSwitchNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_DisableSwitchNotifications__ID
    };
    Msg_DisableSwitchNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_DisableSwitchNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_DisableSwitchNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetCurrentSwitchState :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_GetCurrentSwitchState__ID
    };
    Msg_GetCurrentSwitchState() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_GetCurrentSwitchState")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetCurrentSwitchState(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetCurrentSwitchState :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply_GetCurrentSwitchState__ID
    };
    Reply_GetCurrentSwitchState() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply_GetCurrentSwitchState")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetCurrentSwitchState(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetProcessPriority :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_SetProcessPriority__ID
    };
    Msg_SetProcessPriority() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_SetProcessPriority")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetProcessPriority(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_FactoryReset :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_FactoryReset__ID
    };
    Msg_FactoryReset() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_FactoryReset")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_FactoryReset(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifySensorChange :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_NotifySensorChange__ID
    };
    Msg_NotifySensorChange() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_NotifySensorChange")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifySensorChange(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_EnableSensorNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_EnableSensorNotifications__ID
    };
    Msg_EnableSensorNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_EnableSensorNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_EnableSensorNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_DisableSensorNotifications :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg_DisableSensorNotifications__ID
    };
    Msg_DisableSensorNotifications() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg_DisableSensorNotifications")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_DisableSensorNotifications(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PHal::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PHal
} // namespace hal_sandbox
} // namespace mozilla

#endif // ifndef PHal_h
