//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PHalChild_h
#define PHalChild_h

#include "mozilla/hal_sandbox/PHal.h"
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {


class /*NS_ABSTRACT_CLASS*/ PHalChild :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::dom::PContentChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PHal::State State;

    virtual bool
    RecvNotifyBatteryChange(const BatteryInformation& aBatteryInfo) = 0;
    virtual bool
    RecvNotifyNetworkChange(const NetworkInformation& aNetworkInfo) = 0;
    virtual bool
    RecvNotifyWakeLockChange(const WakeLockInformation& aWakeLockInfo) = 0;
    virtual bool
    RecvNotifyScreenConfigurationChange(const ScreenConfiguration& aScreenOrientation) = 0;
    virtual bool
    RecvNotifySwitchChange(const SwitchEvent& aEvent) = 0;
    virtual bool
    RecvNotifySystemClockChange(const int64_t& aClockDeltaMS) = 0;
    virtual bool
    RecvNotifySystemTimezoneChange(const SystemTimezoneChangeInformation& aSystemTimezoneChangeInfo) = 0;
    virtual bool
    RecvNotifySensorChange(const SensorData& aSensorData) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PHalChild();

    virtual ~PHalChild();

    PContentChild*
    Manager() const;

    PHal::State
    state();

    bool
    SendVibrate(
            const InfallibleTArray<uint32_t>& pattern,
            const InfallibleTArray<uint64_t>& id,
            PBrowserChild* browser);

    bool
    SendCancelVibrate(
            const InfallibleTArray<uint64_t>& id,
            PBrowserChild* browser);

    bool
    SendEnableBatteryNotifications();

    bool
    SendDisableBatteryNotifications();

    bool
    SendGetCurrentBatteryInformation(BatteryInformation* aBatteryInfo);

    bool
    SendEnableNetworkNotifications();

    bool
    SendDisableNetworkNotifications();

    bool
    SendGetCurrentNetworkInformation(NetworkInformation* aNetworkInfo);

    bool
    SendGetScreenEnabled(bool* enabled);

    bool
    SendSetScreenEnabled(const bool& enabled);

    bool
    SendGetCpuSleepAllowed(bool* allowed);

    bool
    SendSetCpuSleepAllowed(const bool& allowed);

    bool
    SendGetScreenBrightness(double* brightness);

    bool
    SendSetScreenBrightness(const double& brightness);

    bool
    SendAdjustSystemClock(const int64_t& aDeltaMilliseconds);

    bool
    SendSetTimezone(const nsCString& aTimezoneSpec);

    bool
    SendGetTimezone(nsCString* aTimezoneSpec);

    bool
    SendEnableSystemClockChangeNotifications();

    bool
    SendDisableSystemClockChangeNotifications();

    bool
    SendEnableSystemTimezoneChangeNotifications();

    bool
    SendDisableSystemTimezoneChangeNotifications();

    bool
    SendSetLight(
            const LightType& light,
            const LightConfiguration& aConfig,
            bool* status);

    bool
    SendGetLight(
            const LightType& light,
            LightConfiguration* aConfig,
            bool* status);

    bool
    SendModifyWakeLock(
            const nsString& aTopic,
            const WakeLockControl& aLockAdjust,
            const WakeLockControl& aHiddenAdjust,
            const uint64_t& aProcessID);

    bool
    SendEnableWakeLockNotifications();

    bool
    SendDisableWakeLockNotifications();

    bool
    SendGetWakeLockInfo(
            const nsString& aTopic,
            WakeLockInformation* aWakeLockInfo);

    bool
    SendEnableScreenConfigurationNotifications();

    bool
    SendDisableScreenConfigurationNotifications();

    bool
    SendGetCurrentScreenConfiguration(ScreenConfiguration* aScreenConfiguration);

    bool
    SendLockScreenOrientation(
            const ScreenOrientation& aOrientation,
            bool* allowed);

    bool
    SendUnlockScreenOrientation();

    bool
    SendEnableSwitchNotifications(const SwitchDevice& aDevice);

    bool
    SendDisableSwitchNotifications(const SwitchDevice& aDevice);

    bool
    SendGetCurrentSwitchState(
            const SwitchDevice& aDevice,
            SwitchState* aState);

    bool
    SendSetProcessPriority(
            const int& aPid,
            const ProcessPriority& aPriority);

    bool
    SendFactoryReset();

    bool
    SendEnableSensorNotifications(const SensorType& aSensor);

    bool
    SendDisableSensorNotifications(const SensorType& aSensor);

    static bool
    Send__delete__(PHalChild* actor);

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const SwitchEvent& __v,
            Message* __msg);

    bool
    Read(
            SwitchEvent* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const LightConfiguration& __v,
            Message* __msg);

    bool
    Read(
            LightConfiguration* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBrowserChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBrowserChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ScreenConfiguration& __v,
            Message* __msg);

    bool
    Read(
            ScreenConfiguration* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const BatteryInformation& __v,
            Message* __msg);

    bool
    Read(
            BatteryInformation* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const WakeLockInformation& __v,
            Message* __msg);

    bool
    Read(
            WakeLockInformation* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const NetworkInformation& __v,
            Message* __msg);

    bool
    Read(
            NetworkInformation* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SystemTimezoneChangeInformation& __v,
            Message* __msg);

    bool
    Read(
            SystemTimezoneChangeInformation* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SensorData& __v,
            Message* __msg);

    bool
    Read(
            SensorData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PHalChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PHalChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
};


} // namespace hal_sandbox
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace hal_sandbox {
class HalChild :
    public PHalChild
{
    virtual bool
    RecvNotifyBatteryChange(const BatteryInformation& aBatteryInfo);

    virtual bool
    RecvNotifyNetworkChange(const NetworkInformation& aNetworkInfo);

    virtual bool
    RecvNotifyWakeLockChange(const WakeLockInformation& aWakeLockInfo);

    virtual bool
    RecvNotifyScreenConfigurationChange(const ScreenConfiguration& aScreenOrientation);

    virtual bool
    RecvNotifySwitchChange(const SwitchEvent& aEvent);

    virtual bool
    RecvNotifySystemClockChange(const int64_t& aClockDeltaMS);

    virtual bool
    RecvNotifySystemTimezoneChange(const SystemTimezoneChangeInformation& aSystemTimezoneChangeInfo);

    virtual bool
    RecvNotifySensorChange(const SensorData& aSensorData);

    HalChild();
    virtual ~HalChild();
};
} // namespace hal_sandbox
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace hal_sandbox {
bool
HalChild::RecvNotifyBatteryChange(const BatteryInformation& aBatteryInfo)
{
    return false;
}

bool
HalChild::RecvNotifyNetworkChange(const NetworkInformation& aNetworkInfo)
{
    return false;
}

bool
HalChild::RecvNotifyWakeLockChange(const WakeLockInformation& aWakeLockInfo)
{
    return false;
}

bool
HalChild::RecvNotifyScreenConfigurationChange(const ScreenConfiguration& aScreenOrientation)
{
    return false;
}

bool
HalChild::RecvNotifySwitchChange(const SwitchEvent& aEvent)
{
    return false;
}

bool
HalChild::RecvNotifySystemClockChange(const int64_t& aClockDeltaMS)
{
    return false;
}

bool
HalChild::RecvNotifySystemTimezoneChange(const SystemTimezoneChangeInformation& aSystemTimezoneChangeInfo)
{
    return false;
}

bool
HalChild::RecvNotifySensorChange(const SensorData& aSensorData)
{
    return false;
}

HalChild::HalChild()
{
    MOZ_COUNT_CTOR(HalChild);
}

HalChild::~HalChild()
{
    MOZ_COUNT_DTOR(HalChild);
}

} // namespace hal_sandbox
} // namespace mozilla
#endif // if 0

#endif // ifndef PHalChild_h
