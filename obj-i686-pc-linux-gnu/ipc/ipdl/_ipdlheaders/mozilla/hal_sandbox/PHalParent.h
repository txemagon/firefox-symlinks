//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PHalParent_h
#define PHalParent_h

#include "mozilla/hal_sandbox/PHal.h"
namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {


class /*NS_ABSTRACT_CLASS*/ PHalParent :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::dom::PContentParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::hal::FMRadioCountry FMRadioCountry;
    typedef mozilla::hal::FMRadioOperation FMRadioOperation;
    typedef mozilla::hal::FMRadioOperationInformation FMRadioOperationInformation;
    typedef mozilla::hal::FMRadioOperationStatus FMRadioOperationStatus;
    typedef mozilla::hal::FMRadioSettings FMRadioSettings;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::hal::FlashMode FlashMode;
    typedef mozilla::hal::LightConfiguration LightConfiguration;
    typedef mozilla::hal::LightMode LightMode;
    typedef mozilla::hal::LightType LightType;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorAccuracyType SensorAccuracyType;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::hal::SwitchDevice SwitchDevice;
    typedef mozilla::hal::SwitchEvent SwitchEvent;
    typedef mozilla::hal::SwitchState SwitchState;
    typedef mozilla::hal::SystemTimezoneChangeInformation SystemTimezoneChangeInformation;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PHal::State State;

    virtual bool
    RecvVibrate(
            const InfallibleTArray<uint32_t>& pattern,
            const InfallibleTArray<uint64_t>& id,
            PBrowserParent* browser) = 0;
    virtual bool
    RecvCancelVibrate(
            const InfallibleTArray<uint64_t>& id,
            PBrowserParent* browser) = 0;
    virtual bool
    RecvEnableBatteryNotifications() = 0;
    virtual bool
    RecvDisableBatteryNotifications() = 0;
    virtual bool
    RecvGetCurrentBatteryInformation(BatteryInformation* aBatteryInfo) = 0;
    virtual bool
    RecvEnableNetworkNotifications() = 0;
    virtual bool
    RecvDisableNetworkNotifications() = 0;
    virtual bool
    RecvGetCurrentNetworkInformation(NetworkInformation* aNetworkInfo) = 0;
    virtual bool
    RecvGetScreenEnabled(bool* enabled) = 0;
    virtual bool
    RecvSetScreenEnabled(const bool& enabled) = 0;
    virtual bool
    RecvGetCpuSleepAllowed(bool* allowed) = 0;
    virtual bool
    RecvSetCpuSleepAllowed(const bool& allowed) = 0;
    virtual bool
    RecvGetScreenBrightness(double* brightness) = 0;
    virtual bool
    RecvSetScreenBrightness(const double& brightness) = 0;
    virtual bool
    RecvAdjustSystemClock(const int64_t& aDeltaMilliseconds) = 0;
    virtual bool
    RecvSetTimezone(const nsCString& aTimezoneSpec) = 0;
    virtual bool
    RecvGetTimezone(nsCString* aTimezoneSpec) = 0;
    virtual bool
    RecvEnableSystemClockChangeNotifications() = 0;
    virtual bool
    RecvDisableSystemClockChangeNotifications() = 0;
    virtual bool
    RecvEnableSystemTimezoneChangeNotifications() = 0;
    virtual bool
    RecvDisableSystemTimezoneChangeNotifications() = 0;
    virtual bool
    RecvSetLight(
            const LightType& light,
            const LightConfiguration& aConfig,
            bool* status) = 0;
    virtual bool
    RecvGetLight(
            const LightType& light,
            LightConfiguration* aConfig,
            bool* status) = 0;
    virtual bool
    RecvModifyWakeLock(
            const nsString& aTopic,
            const WakeLockControl& aLockAdjust,
            const WakeLockControl& aHiddenAdjust,
            const uint64_t& aProcessID) = 0;
    virtual bool
    RecvEnableWakeLockNotifications() = 0;
    virtual bool
    RecvDisableWakeLockNotifications() = 0;
    virtual bool
    RecvGetWakeLockInfo(
            const nsString& aTopic,
            WakeLockInformation* aWakeLockInfo) = 0;
    virtual bool
    RecvEnableScreenConfigurationNotifications() = 0;
    virtual bool
    RecvDisableScreenConfigurationNotifications() = 0;
    virtual bool
    RecvGetCurrentScreenConfiguration(ScreenConfiguration* aScreenConfiguration) = 0;
    virtual bool
    RecvLockScreenOrientation(
            const ScreenOrientation& aOrientation,
            bool* allowed) = 0;
    virtual bool
    RecvUnlockScreenOrientation() = 0;
    virtual bool
    RecvEnableSwitchNotifications(const SwitchDevice& aDevice) = 0;
    virtual bool
    RecvDisableSwitchNotifications(const SwitchDevice& aDevice) = 0;
    virtual bool
    RecvGetCurrentSwitchState(
            const SwitchDevice& aDevice,
            SwitchState* aState) = 0;
    virtual bool
    RecvSetProcessPriority(
            const int& aPid,
            const ProcessPriority& aPriority) = 0;
    virtual bool
    RecvFactoryReset() = 0;
    virtual bool
    RecvEnableSensorNotifications(const SensorType& aSensor) = 0;
    virtual bool
    RecvDisableSensorNotifications(const SensorType& aSensor) = 0;
    virtual bool
    Recv__delete__();

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PHalParent();

    virtual ~PHalParent();

    PContentParent*
    Manager() const;

    PHal::State
    state();

    bool
    SendNotifyBatteryChange(const BatteryInformation& aBatteryInfo) NS_WARN_UNUSED_RESULT;

    bool
    SendNotifyNetworkChange(const NetworkInformation& aNetworkInfo) NS_WARN_UNUSED_RESULT;

    bool
    SendNotifyWakeLockChange(const WakeLockInformation& aWakeLockInfo) NS_WARN_UNUSED_RESULT;

    bool
    SendNotifyScreenConfigurationChange(const ScreenConfiguration& aScreenOrientation) NS_WARN_UNUSED_RESULT;

    bool
    SendNotifySwitchChange(const SwitchEvent& aEvent) NS_WARN_UNUSED_RESULT;

    bool
    SendNotifySystemClockChange(const int64_t& aClockDeltaMS) NS_WARN_UNUSED_RESULT;

    bool
    SendNotifySystemTimezoneChange(const SystemTimezoneChangeInformation& aSystemTimezoneChangeInfo) NS_WARN_UNUSED_RESULT;

    bool
    SendNotifySensorChange(const SensorData& aSensorData) NS_WARN_UNUSED_RESULT;

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const SwitchEvent& __v,
            Message* __msg);

    bool
    Read(
            SwitchEvent* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const LightConfiguration& __v,
            Message* __msg);

    bool
    Read(
            LightConfiguration* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBrowserParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBrowserParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ScreenConfiguration& __v,
            Message* __msg);

    bool
    Read(
            ScreenConfiguration* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const BatteryInformation& __v,
            Message* __msg);

    bool
    Read(
            BatteryInformation* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const WakeLockInformation& __v,
            Message* __msg);

    bool
    Read(
            WakeLockInformation* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const NetworkInformation& __v,
            Message* __msg);

    bool
    Read(
            NetworkInformation* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SystemTimezoneChangeInformation& __v,
            Message* __msg);

    bool
    Read(
            SystemTimezoneChangeInformation* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SensorData& __v,
            Message* __msg);

    bool
    Read(
            SensorData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PHalParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PHalParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
};


} // namespace hal_sandbox
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace hal_sandbox {
class HalParent :
    public PHalParent
{
    virtual bool
    RecvVibrate(
            const InfallibleTArray<uint32_t>& pattern,
            const InfallibleTArray<uint64_t>& id,
            PBrowserParent* browser);

    virtual bool
    RecvCancelVibrate(
            const InfallibleTArray<uint64_t>& id,
            PBrowserParent* browser);

    virtual bool
    RecvEnableBatteryNotifications();

    virtual bool
    RecvDisableBatteryNotifications();

    virtual bool
    RecvGetCurrentBatteryInformation(BatteryInformation* aBatteryInfo);

    virtual bool
    RecvEnableNetworkNotifications();

    virtual bool
    RecvDisableNetworkNotifications();

    virtual bool
    RecvGetCurrentNetworkInformation(NetworkInformation* aNetworkInfo);

    virtual bool
    RecvGetScreenEnabled(bool* enabled);

    virtual bool
    RecvSetScreenEnabled(const bool& enabled);

    virtual bool
    RecvGetCpuSleepAllowed(bool* allowed);

    virtual bool
    RecvSetCpuSleepAllowed(const bool& allowed);

    virtual bool
    RecvGetScreenBrightness(double* brightness);

    virtual bool
    RecvSetScreenBrightness(const double& brightness);

    virtual bool
    RecvAdjustSystemClock(const int64_t& aDeltaMilliseconds);

    virtual bool
    RecvSetTimezone(const nsCString& aTimezoneSpec);

    virtual bool
    RecvGetTimezone(nsCString* aTimezoneSpec);

    virtual bool
    RecvEnableSystemClockChangeNotifications();

    virtual bool
    RecvDisableSystemClockChangeNotifications();

    virtual bool
    RecvEnableSystemTimezoneChangeNotifications();

    virtual bool
    RecvDisableSystemTimezoneChangeNotifications();

    virtual bool
    RecvSetLight(
            const LightType& light,
            const LightConfiguration& aConfig,
            bool* status);

    virtual bool
    RecvGetLight(
            const LightType& light,
            LightConfiguration* aConfig,
            bool* status);

    virtual bool
    RecvModifyWakeLock(
            const nsString& aTopic,
            const WakeLockControl& aLockAdjust,
            const WakeLockControl& aHiddenAdjust,
            const uint64_t& aProcessID);

    virtual bool
    RecvEnableWakeLockNotifications();

    virtual bool
    RecvDisableWakeLockNotifications();

    virtual bool
    RecvGetWakeLockInfo(
            const nsString& aTopic,
            WakeLockInformation* aWakeLockInfo);

    virtual bool
    RecvEnableScreenConfigurationNotifications();

    virtual bool
    RecvDisableScreenConfigurationNotifications();

    virtual bool
    RecvGetCurrentScreenConfiguration(ScreenConfiguration* aScreenConfiguration);

    virtual bool
    RecvLockScreenOrientation(
            const ScreenOrientation& aOrientation,
            bool* allowed);

    virtual bool
    RecvUnlockScreenOrientation();

    virtual bool
    RecvEnableSwitchNotifications(const SwitchDevice& aDevice);

    virtual bool
    RecvDisableSwitchNotifications(const SwitchDevice& aDevice);

    virtual bool
    RecvGetCurrentSwitchState(
            const SwitchDevice& aDevice,
            SwitchState* aState);

    virtual bool
    RecvSetProcessPriority(
            const int& aPid,
            const ProcessPriority& aPriority);

    virtual bool
    RecvFactoryReset();

    virtual bool
    RecvEnableSensorNotifications(const SensorType& aSensor);

    virtual bool
    RecvDisableSensorNotifications(const SensorType& aSensor);

    HalParent();
    virtual ~HalParent();
};
} // namespace hal_sandbox
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace hal_sandbox {
bool
HalParent::RecvVibrate(
        const InfallibleTArray<uint32_t>& pattern,
        const InfallibleTArray<uint64_t>& id,
        PBrowserParent* browser)
{
    return false;
}

bool
HalParent::RecvCancelVibrate(
        const InfallibleTArray<uint64_t>& id,
        PBrowserParent* browser)
{
    return false;
}

bool
HalParent::RecvEnableBatteryNotifications()
{
    return false;
}

bool
HalParent::RecvDisableBatteryNotifications()
{
    return false;
}

bool
HalParent::RecvGetCurrentBatteryInformation(BatteryInformation* aBatteryInfo)
{
    return false;
}

bool
HalParent::RecvEnableNetworkNotifications()
{
    return false;
}

bool
HalParent::RecvDisableNetworkNotifications()
{
    return false;
}

bool
HalParent::RecvGetCurrentNetworkInformation(NetworkInformation* aNetworkInfo)
{
    return false;
}

bool
HalParent::RecvGetScreenEnabled(bool* enabled)
{
    return false;
}

bool
HalParent::RecvSetScreenEnabled(const bool& enabled)
{
    return false;
}

bool
HalParent::RecvGetCpuSleepAllowed(bool* allowed)
{
    return false;
}

bool
HalParent::RecvSetCpuSleepAllowed(const bool& allowed)
{
    return false;
}

bool
HalParent::RecvGetScreenBrightness(double* brightness)
{
    return false;
}

bool
HalParent::RecvSetScreenBrightness(const double& brightness)
{
    return false;
}

bool
HalParent::RecvAdjustSystemClock(const int64_t& aDeltaMilliseconds)
{
    return false;
}

bool
HalParent::RecvSetTimezone(const nsCString& aTimezoneSpec)
{
    return false;
}

bool
HalParent::RecvGetTimezone(nsCString* aTimezoneSpec)
{
    return false;
}

bool
HalParent::RecvEnableSystemClockChangeNotifications()
{
    return false;
}

bool
HalParent::RecvDisableSystemClockChangeNotifications()
{
    return false;
}

bool
HalParent::RecvEnableSystemTimezoneChangeNotifications()
{
    return false;
}

bool
HalParent::RecvDisableSystemTimezoneChangeNotifications()
{
    return false;
}

bool
HalParent::RecvSetLight(
        const LightType& light,
        const LightConfiguration& aConfig,
        bool* status)
{
    return false;
}

bool
HalParent::RecvGetLight(
        const LightType& light,
        LightConfiguration* aConfig,
        bool* status)
{
    return false;
}

bool
HalParent::RecvModifyWakeLock(
        const nsString& aTopic,
        const WakeLockControl& aLockAdjust,
        const WakeLockControl& aHiddenAdjust,
        const uint64_t& aProcessID)
{
    return false;
}

bool
HalParent::RecvEnableWakeLockNotifications()
{
    return false;
}

bool
HalParent::RecvDisableWakeLockNotifications()
{
    return false;
}

bool
HalParent::RecvGetWakeLockInfo(
        const nsString& aTopic,
        WakeLockInformation* aWakeLockInfo)
{
    return false;
}

bool
HalParent::RecvEnableScreenConfigurationNotifications()
{
    return false;
}

bool
HalParent::RecvDisableScreenConfigurationNotifications()
{
    return false;
}

bool
HalParent::RecvGetCurrentScreenConfiguration(ScreenConfiguration* aScreenConfiguration)
{
    return false;
}

bool
HalParent::RecvLockScreenOrientation(
        const ScreenOrientation& aOrientation,
        bool* allowed)
{
    return false;
}

bool
HalParent::RecvUnlockScreenOrientation()
{
    return false;
}

bool
HalParent::RecvEnableSwitchNotifications(const SwitchDevice& aDevice)
{
    return false;
}

bool
HalParent::RecvDisableSwitchNotifications(const SwitchDevice& aDevice)
{
    return false;
}

bool
HalParent::RecvGetCurrentSwitchState(
        const SwitchDevice& aDevice,
        SwitchState* aState)
{
    return false;
}

bool
HalParent::RecvSetProcessPriority(
        const int& aPid,
        const ProcessPriority& aPriority)
{
    return false;
}

bool
HalParent::RecvFactoryReset()
{
    return false;
}

bool
HalParent::RecvEnableSensorNotifications(const SensorType& aSensor)
{
    return false;
}

bool
HalParent::RecvDisableSensorNotifications(const SensorType& aSensor)
{
    return false;
}

HalParent::HalParent()
{
    MOZ_COUNT_CTOR(HalParent);
}

HalParent::~HalParent()
{
    MOZ_COUNT_DTOR(HalParent);
}

} // namespace hal_sandbox
} // namespace mozilla
#endif // if 0

#endif // ifndef PHalParent_h
