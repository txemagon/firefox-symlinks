//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PNeckoChild_h
#define PNeckoChild_h

#include "mozilla/net/PNecko.h"
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PCookieServiceChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PWyciwygChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PFTPChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTCPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PRemoteOpenFileChild;
} // namespace net
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace net {
class PHttpChannelChild;
} // namespace net
} // namespace mozilla


namespace mozilla {
namespace net {
class PWyciwygChannelChild;
} // namespace net
} // namespace mozilla


namespace mozilla {
namespace net {
class PTCPSocketChild;
} // namespace net
} // namespace mozilla


namespace mozilla {
namespace net {
class PRemoteOpenFileChild;
} // namespace net
} // namespace mozilla


namespace mozilla {
namespace net {
class PFTPChannelChild;
} // namespace net
} // namespace mozilla


namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace net {
class PWebSocketChild;
} // namespace net
} // namespace mozilla


namespace mozilla {
namespace net {
class PCookieServiceChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {


class /*NS_ABSTRACT_CLASS*/ PNeckoChild :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::net::PHttpChannelChild;

    friend class mozilla::net::PWyciwygChannelChild;

    friend class mozilla::net::PTCPSocketChild;

    friend class mozilla::net::PRemoteOpenFileChild;

    friend class mozilla::net::PFTPChannelChild;

    friend class mozilla::dom::PContentChild;

    friend class mozilla::net::PWebSocketChild;

    friend class mozilla::net::PCookieServiceChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::GenericURIParams GenericURIParams;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::ipc::OptionalURIParams OptionalURIParams;
    typedef IPC::SerializedLoadContext SerializedLoadContext;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::ipc::URIParams URIParams;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::net::PHttpChannelChild PHttpChannelChild;
    typedef mozilla::net::PCookieServiceChild PCookieServiceChild;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::net::PWyciwygChannelChild PWyciwygChannelChild;
    typedef mozilla::net::PFTPChannelChild PFTPChannelChild;
    typedef mozilla::net::PWebSocketChild PWebSocketChild;
    typedef mozilla::net::PTCPSocketChild PTCPSocketChild;
    typedef mozilla::net::PRemoteOpenFileChild PRemoteOpenFileChild;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PNecko::State State;

    virtual PCookieServiceChild*
    AllocPCookieService() = 0;
    virtual bool
    DeallocPCookieService(PCookieServiceChild* actor) = 0;
    virtual PHttpChannelChild*
    AllocPHttpChannel(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext) = 0;
    virtual bool
    DeallocPHttpChannel(PHttpChannelChild* actor) = 0;
    virtual PWyciwygChannelChild*
    AllocPWyciwygChannel() = 0;
    virtual bool
    DeallocPWyciwygChannel(PWyciwygChannelChild* actor) = 0;
    virtual PFTPChannelChild*
    AllocPFTPChannel(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext) = 0;
    virtual bool
    DeallocPFTPChannel(PFTPChannelChild* actor) = 0;
    virtual PWebSocketChild*
    AllocPWebSocket(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext) = 0;
    virtual bool
    DeallocPWebSocket(PWebSocketChild* actor) = 0;
    virtual PTCPSocketChild*
    AllocPTCPSocket(
            const nsString& host,
            const uint16_t& port,
            const bool& useSSL,
            const nsString& binaryType,
            PBrowserChild* browser) = 0;
    virtual bool
    DeallocPTCPSocket(PTCPSocketChild* actor) = 0;
    virtual PRemoteOpenFileChild*
    AllocPRemoteOpenFile(
            const URIParams& fileuri,
            PBrowserChild* browser) = 0;
    virtual bool
    DeallocPRemoteOpenFile(PRemoteOpenFileChild* actor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PNeckoChild();

    virtual ~PNeckoChild();

    PContentChild*
    Manager() const;

    void
    ManagedPHttpChannelChild(InfallibleTArray<PHttpChannelChild*>& aArr) const;
    const InfallibleTArray<PHttpChannelChild*>&
    ManagedPHttpChannelChild() const;

    void
    ManagedPCookieServiceChild(InfallibleTArray<PCookieServiceChild*>& aArr) const;
    const InfallibleTArray<PCookieServiceChild*>&
    ManagedPCookieServiceChild() const;

    void
    ManagedPWyciwygChannelChild(InfallibleTArray<PWyciwygChannelChild*>& aArr) const;
    const InfallibleTArray<PWyciwygChannelChild*>&
    ManagedPWyciwygChannelChild() const;

    void
    ManagedPFTPChannelChild(InfallibleTArray<PFTPChannelChild*>& aArr) const;
    const InfallibleTArray<PFTPChannelChild*>&
    ManagedPFTPChannelChild() const;

    void
    ManagedPWebSocketChild(InfallibleTArray<PWebSocketChild*>& aArr) const;
    const InfallibleTArray<PWebSocketChild*>&
    ManagedPWebSocketChild() const;

    void
    ManagedPTCPSocketChild(InfallibleTArray<PTCPSocketChild*>& aArr) const;
    const InfallibleTArray<PTCPSocketChild*>&
    ManagedPTCPSocketChild() const;

    void
    ManagedPRemoteOpenFileChild(InfallibleTArray<PRemoteOpenFileChild*>& aArr) const;
    const InfallibleTArray<PRemoteOpenFileChild*>&
    ManagedPRemoteOpenFileChild() const;

    PNecko::State
    state();

    static bool
    Send__delete__(PNeckoChild* actor);

    PCookieServiceChild*
    SendPCookieServiceConstructor();

    PCookieServiceChild*
    SendPCookieServiceConstructor(PCookieServiceChild* actor);

    PHttpChannelChild*
    SendPHttpChannelConstructor(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext);

    PHttpChannelChild*
    SendPHttpChannelConstructor(
            PHttpChannelChild* actor,
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext);

    PWyciwygChannelChild*
    SendPWyciwygChannelConstructor();

    PWyciwygChannelChild*
    SendPWyciwygChannelConstructor(PWyciwygChannelChild* actor);

    PFTPChannelChild*
    SendPFTPChannelConstructor(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext);

    PFTPChannelChild*
    SendPFTPChannelConstructor(
            PFTPChannelChild* actor,
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext);

    PWebSocketChild*
    SendPWebSocketConstructor(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext);

    PWebSocketChild*
    SendPWebSocketConstructor(
            PWebSocketChild* actor,
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext);

    PTCPSocketChild*
    SendPTCPSocketConstructor(
            const nsString& host,
            const uint16_t& port,
            const bool& useSSL,
            const nsString& binaryType,
            PBrowserChild* browser);

    PTCPSocketChild*
    SendPTCPSocketConstructor(
            PTCPSocketChild* actor,
            const nsString& host,
            const uint16_t& port,
            const bool& useSSL,
            const nsString& binaryType,
            PBrowserChild* browser);

    PRemoteOpenFileChild*
    SendPRemoteOpenFileConstructor(
            const URIParams& fileuri,
            PBrowserChild* browser);

    PRemoteOpenFileChild*
    SendPRemoteOpenFileConstructor(
            PRemoteOpenFileChild* actor,
            const URIParams& fileuri,
            PBrowserChild* browser);

    bool
    SendHTMLDNSPrefetch(
            const nsString& hostname,
            const uint16_t& flags);

    bool
    SendCancelHTMLDNSPrefetch(
            const nsString& hostname,
            const uint16_t& flags,
            const nsresult& reason);

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            PHttpChannelChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PHttpChannelChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PWyciwygChannelChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PWyciwygChannelChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBrowserChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBrowserChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PTCPSocketChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PTCPSocketChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PRemoteOpenFileChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PRemoteOpenFileChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StandardURLSegment& __v,
            Message* __msg);

    bool
    Read(
            StandardURLSegment* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StandardURLParams& __v,
            Message* __msg);

    bool
    Read(
            StandardURLParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PNeckoChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PNeckoChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const JARURIParams& __v,
            Message* __msg);

    bool
    Read(
            JARURIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const URIParams& __v,
            Message* __msg);

    bool
    Read(
            URIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PFTPChannelChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PFTPChannelChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PWebSocketChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PWebSocketChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SimpleURIParams& __v,
            Message* __msg);

    bool
    Read(
            SimpleURIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PCookieServiceChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PCookieServiceChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const GenericURIParams& __v,
            Message* __msg);

    bool
    Read(
            GenericURIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PHttpChannelChild*> mManagedPHttpChannelChild;
    // Sorted by pointer value
    InfallibleTArray<PCookieServiceChild*> mManagedPCookieServiceChild;
    // Sorted by pointer value
    InfallibleTArray<PWyciwygChannelChild*> mManagedPWyciwygChannelChild;
    // Sorted by pointer value
    InfallibleTArray<PFTPChannelChild*> mManagedPFTPChannelChild;
    // Sorted by pointer value
    InfallibleTArray<PWebSocketChild*> mManagedPWebSocketChild;
    // Sorted by pointer value
    InfallibleTArray<PTCPSocketChild*> mManagedPTCPSocketChild;
    // Sorted by pointer value
    InfallibleTArray<PRemoteOpenFileChild*> mManagedPRemoteOpenFileChild;
};


} // namespace net
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace net {
class NeckoChild :
    public PNeckoChild
{
    virtual PCookieServiceChild*
    AllocPCookieService();

    virtual bool
    DeallocPCookieService(PCookieServiceChild* actor);

    virtual PHttpChannelChild*
    AllocPHttpChannel(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext);

    virtual bool
    DeallocPHttpChannel(PHttpChannelChild* actor);

    virtual PWyciwygChannelChild*
    AllocPWyciwygChannel();

    virtual bool
    DeallocPWyciwygChannel(PWyciwygChannelChild* actor);

    virtual PFTPChannelChild*
    AllocPFTPChannel(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext);

    virtual bool
    DeallocPFTPChannel(PFTPChannelChild* actor);

    virtual PWebSocketChild*
    AllocPWebSocket(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext);

    virtual bool
    DeallocPWebSocket(PWebSocketChild* actor);

    virtual PTCPSocketChild*
    AllocPTCPSocket(
            const nsString& host,
            const uint16_t& port,
            const bool& useSSL,
            const nsString& binaryType,
            PBrowserChild* browser);

    virtual bool
    DeallocPTCPSocket(PTCPSocketChild* actor);

    virtual PRemoteOpenFileChild*
    AllocPRemoteOpenFile(
            const URIParams& fileuri,
            PBrowserChild* browser);

    virtual bool
    DeallocPRemoteOpenFile(PRemoteOpenFileChild* actor);

    NeckoChild();
    virtual ~NeckoChild();
};
} // namespace net
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace net {
PCookieServiceChild*
NeckoChild::AllocPCookieService()
{
    return 0;
}

bool
NeckoChild::DeallocPCookieService(PCookieServiceChild* actor)
{
    return false;
}

PHttpChannelChild*
NeckoChild::AllocPHttpChannel(
        PBrowserChild* browser,
        const SerializedLoadContext& loadContext)
{
    return 0;
}

bool
NeckoChild::DeallocPHttpChannel(PHttpChannelChild* actor)
{
    return false;
}

PWyciwygChannelChild*
NeckoChild::AllocPWyciwygChannel()
{
    return 0;
}

bool
NeckoChild::DeallocPWyciwygChannel(PWyciwygChannelChild* actor)
{
    return false;
}

PFTPChannelChild*
NeckoChild::AllocPFTPChannel(
        PBrowserChild* browser,
        const SerializedLoadContext& loadContext)
{
    return 0;
}

bool
NeckoChild::DeallocPFTPChannel(PFTPChannelChild* actor)
{
    return false;
}

PWebSocketChild*
NeckoChild::AllocPWebSocket(
        PBrowserChild* browser,
        const SerializedLoadContext& loadContext)
{
    return 0;
}

bool
NeckoChild::DeallocPWebSocket(PWebSocketChild* actor)
{
    return false;
}

PTCPSocketChild*
NeckoChild::AllocPTCPSocket(
        const nsString& host,
        const uint16_t& port,
        const bool& useSSL,
        const nsString& binaryType,
        PBrowserChild* browser)
{
    return 0;
}

bool
NeckoChild::DeallocPTCPSocket(PTCPSocketChild* actor)
{
    return false;
}

PRemoteOpenFileChild*
NeckoChild::AllocPRemoteOpenFile(
        const URIParams& fileuri,
        PBrowserChild* browser)
{
    return 0;
}

bool
NeckoChild::DeallocPRemoteOpenFile(PRemoteOpenFileChild* actor)
{
    return false;
}

NeckoChild::NeckoChild()
{
    MOZ_COUNT_CTOR(NeckoChild);
}

NeckoChild::~NeckoChild()
{
    MOZ_COUNT_DTOR(NeckoChild);
}

} // namespace net
} // namespace mozilla
#endif // if 0

#endif // ifndef PNeckoChild_h
