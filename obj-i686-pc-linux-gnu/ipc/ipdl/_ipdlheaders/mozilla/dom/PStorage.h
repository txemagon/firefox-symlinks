//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PStorage_h
#define PStorage_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ItemData|
//
namespace mozilla {
namespace dom {
class ItemData MOZ_FINAL
{
private:

public:
    ItemData();

    ItemData(
            const nsString& _value,
            const bool& _secure)
    {
        Init();
        Assign(_value, _secure);
    }

    ItemData(const ItemData& _o)
    {
        Init();
        Assign((_o).value(), (_o).secure());
    }

    ~ItemData();

    void
    operator=(const ItemData& _o)
    {
        Assign((_o).value(), (_o).secure());
    }

    bool
    operator==(const ItemData& _o) const;

    nsString&
    value()
    {
        return value_;
    }
    const nsString&
    value() const
    {
        return value_;
    }

    bool&
    secure()
    {
        return secure_;
    }
    const bool&
    secure() const
    {
        return secure_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsString& _value,
            const bool& _secure);

    nsString value_;
    bool secure_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class ItemData;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union StorageItem|
//
namespace mozilla {
namespace dom {
class StorageItem MOZ_FINAL
{
public:
    enum Type {
        T__None,
        Tnull_t = 1,
        TItemData,
        T__Last = TItemData
    };

private:
    typedef mozilla::null_t null_t;
    typedef mozilla::dom::ItemData ItemData;
    typedef null_t null_t__tdef;
    typedef ItemData ItemData__tdef;

    union Value {
        char Vnull_t[sizeof(null_t)];
        char VItemData[sizeof(ItemData)];
    };

    null_t*
    ptr_null_t()
    {
        return reinterpret_cast<null_t*>((&((mValue).Vnull_t)));
    }
    const null_t* const
    constptr_null_t() const
    {
        return reinterpret_cast<const null_t* const>((&((mValue).Vnull_t)));
    }
    ItemData*
    ptr_ItemData()
    {
        return reinterpret_cast<ItemData*>((&((mValue).VItemData)));
    }
    const ItemData* const
    constptr_ItemData() const
    {
        return reinterpret_cast<const ItemData* const>((&((mValue).VItemData)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    StorageItem() :
        mType(T__None)
    {
    }

    StorageItem(const null_t& aOther);

    StorageItem(const ItemData& aOther);

    StorageItem(const StorageItem& aOther);

    ~StorageItem();

    Type
    type() const
    {
        return mType;
    }

    StorageItem&
    operator=(const null_t& aRhs);

    StorageItem&
    operator=(const ItemData& aRhs);

    StorageItem&
    operator=(const StorageItem& aRhs);

    bool
    operator==(const null_t& aRhs) const;

    bool
    operator==(const ItemData& aRhs) const;

    bool
    operator==(const StorageItem& aRhs) const;

    null_t&
    get_null_t()
    {
        AssertSanity(Tnull_t);
        return (*(ptr_null_t()));
    }
    const null_t&
    get_null_t() const
    {
        AssertSanity(Tnull_t);
        return (*(constptr_null_t()));
    }
    operator null_t&()
    {
        return get_null_t();
    }
    operator const null_t&() const
    {
        return get_null_t();
    }

    ItemData&
    get_ItemData()
    {
        AssertSanity(TItemData);
        return (*(ptr_ItemData()));
    }
    const ItemData&
    get_ItemData() const
    {
        AssertSanity(TItemData);
        return (*(constptr_ItemData()));
    }
    operator ItemData&()
    {
        return get_ItemData();
    }
    operator const ItemData&() const
    {
        return get_ItemData();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PStorageChild and PStorageParent
//
namespace mozilla {
namespace dom {
namespace PStorage {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PStorageStart = PStorageMsgStart << 16,
    PStoragePreStart = (PStorageMsgStart << 16) - 1,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Init__ID,
    Msg_GetKeys__ID,
    Reply_GetKeys__ID,
    Msg_GetLength__ID,
    Reply_GetLength__ID,
    Msg_GetKey__ID,
    Reply_GetKey__ID,
    Msg_GetValue__ID,
    Reply_GetValue__ID,
    Msg_SetValue__ID,
    Reply_SetValue__ID,
    Msg_RemoveValue__ID,
    Reply_RemoveValue__ID,
    Msg_Clear__ID,
    Reply_Clear__ID,
    Msg_GetDBValue__ID,
    Reply_GetDBValue__ID,
    Msg_SetDBValue__ID,
    Reply_SetDBValue__ID,
    Msg_SetSecure__ID,
    Reply_SetSecure__ID,
    Msg_UpdatePrivateState__ID,
    PStorageEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Init :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_Init__ID
    };
    Msg_Init() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_Init")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Init(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetKeys :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_GetKeys__ID
    };
    Msg_GetKeys() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_GetKeys")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetKeys(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetKeys :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_GetKeys__ID
    };
    Reply_GetKeys() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Reply_GetKeys")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetKeys(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetLength :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_GetLength__ID
    };
    Msg_GetLength() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_GetLength")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetLength(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetLength :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_GetLength__ID
    };
    Reply_GetLength() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Reply_GetLength")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetLength(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetKey :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_GetKey__ID
    };
    Msg_GetKey() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_GetKey")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetKey(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetKey :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_GetKey__ID
    };
    Reply_GetKey() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Reply_GetKey")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetKey(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetValue :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_GetValue__ID
    };
    Msg_GetValue() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_GetValue")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetValue(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetValue :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_GetValue__ID
    };
    Reply_GetValue() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Reply_GetValue")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetValue(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetValue :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_SetValue__ID
    };
    Msg_SetValue() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_SetValue")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetValue(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_SetValue :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_SetValue__ID
    };
    Reply_SetValue() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Reply_SetValue")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_SetValue(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_RemoveValue :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_RemoveValue__ID
    };
    Msg_RemoveValue() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_RemoveValue")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_RemoveValue(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_RemoveValue :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_RemoveValue__ID
    };
    Reply_RemoveValue() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Reply_RemoveValue")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_RemoveValue(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Clear :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_Clear__ID
    };
    Msg_Clear() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_Clear")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Clear(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_Clear :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_Clear__ID
    };
    Reply_Clear() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Reply_Clear")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_Clear(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetDBValue :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_GetDBValue__ID
    };
    Msg_GetDBValue() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_GetDBValue")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetDBValue(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetDBValue :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_GetDBValue__ID
    };
    Reply_GetDBValue() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Reply_GetDBValue")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetDBValue(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetDBValue :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_SetDBValue__ID
    };
    Msg_SetDBValue() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_SetDBValue")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetDBValue(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_SetDBValue :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_SetDBValue__ID
    };
    Reply_SetDBValue() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Reply_SetDBValue")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_SetDBValue(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetSecure :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_SetSecure__ID
    };
    Msg_SetSecure() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_SetSecure")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetSecure(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_SetSecure :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_SetSecure__ID
    };
    Reply_SetSecure() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Reply_SetSecure")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_SetSecure(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_UpdatePrivateState :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::ItemData ItemData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::StorageItem StorageItem;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_UpdatePrivateState__ID
    };
    Msg_UpdatePrivateState() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PStorage::Msg_UpdatePrivateState")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_UpdatePrivateState(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PStorage
} // namespace dom
} // namespace mozilla

#endif // ifndef PStorage_h
