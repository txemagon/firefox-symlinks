//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PMemoryReportRequest_h
#define PMemoryReportRequest_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct MemoryReport|
//
namespace mozilla {
namespace dom {
class MemoryReport MOZ_FINAL
{
private:

public:
    MemoryReport();

    MemoryReport(
            const nsCString& _process,
            const nsCString& _path,
            const int32_t& _kind,
            const int32_t& _units,
            const int64_t& _amount,
            const nsCString& _desc)
    {
        Init();
        Assign(_process, _path, _kind, _units, _amount, _desc);
    }

    MemoryReport(const MemoryReport& _o)
    {
        Init();
        Assign((_o).process(), (_o).path(), (_o).kind(), (_o).units(), (_o).amount(), (_o).desc());
    }

    ~MemoryReport();

    void
    operator=(const MemoryReport& _o)
    {
        Assign((_o).process(), (_o).path(), (_o).kind(), (_o).units(), (_o).amount(), (_o).desc());
    }

    bool
    operator==(const MemoryReport& _o) const;

    nsCString&
    process()
    {
        return process_;
    }
    const nsCString&
    process() const
    {
        return process_;
    }

    nsCString&
    path()
    {
        return path_;
    }
    const nsCString&
    path() const
    {
        return path_;
    }

    int32_t&
    kind()
    {
        return kind_;
    }
    const int32_t&
    kind() const
    {
        return kind_;
    }

    int32_t&
    units()
    {
        return units_;
    }
    const int32_t&
    units() const
    {
        return units_;
    }

    int64_t&
    amount()
    {
        return amount_;
    }
    const int64_t&
    amount() const
    {
        return amount_;
    }

    nsCString&
    desc()
    {
        return desc_;
    }
    const nsCString&
    desc() const
    {
        return desc_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsCString& _process,
            const nsCString& _path,
            const int32_t& _kind,
            const int32_t& _units,
            const int64_t& _amount,
            const nsCString& _desc);

    nsCString process_;
    nsCString path_;
    int32_t kind_;
    int32_t units_;
    int64_t amount_;
    nsCString desc_;
};
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PMemoryReportRequestChild and PMemoryReportRequestParent
//
namespace mozilla {
namespace dom {
namespace PMemoryReportRequest {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PMemoryReportRequestStart = PMemoryReportRequestMsgStart << 16,
    PMemoryReportRequestPreStart = (PMemoryReportRequestMsgStart << 16) - 1,
    Msg___delete____ID,
    Reply___delete____ID,
    PMemoryReportRequestEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::MemoryReport MemoryReport;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PMemoryReportRequest::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::MemoryReport MemoryReport;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PMemoryReportRequest::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PMemoryReportRequest
} // namespace dom
} // namespace mozilla

#endif // ifndef PMemoryReportRequest_h
