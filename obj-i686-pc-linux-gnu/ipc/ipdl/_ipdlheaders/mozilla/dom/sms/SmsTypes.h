//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef SmsTypes_h
#define SmsTypes_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/dom/sms/Types.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SmsSegmentInfoData|
//
namespace mozilla {
namespace dom {
namespace sms {
class SmsSegmentInfoData MOZ_FINAL
{
private:

public:
    SmsSegmentInfoData();

    SmsSegmentInfoData(
            const int32_t& _segments,
            const int32_t& _charsPerSegment,
            const int32_t& _charsAvailableInLastSegment)
    {
        Init();
        Assign(_segments, _charsPerSegment, _charsAvailableInLastSegment);
    }

    SmsSegmentInfoData(const SmsSegmentInfoData& _o)
    {
        Init();
        Assign((_o).segments(), (_o).charsPerSegment(), (_o).charsAvailableInLastSegment());
    }

    ~SmsSegmentInfoData();

    void
    operator=(const SmsSegmentInfoData& _o)
    {
        Assign((_o).segments(), (_o).charsPerSegment(), (_o).charsAvailableInLastSegment());
    }

    bool
    operator==(const SmsSegmentInfoData& _o) const;

    int32_t&
    segments()
    {
        return segments_;
    }
    const int32_t&
    segments() const
    {
        return segments_;
    }

    int32_t&
    charsPerSegment()
    {
        return charsPerSegment_;
    }
    const int32_t&
    charsPerSegment() const
    {
        return charsPerSegment_;
    }

    int32_t&
    charsAvailableInLastSegment()
    {
        return charsAvailableInLastSegment_;
    }
    const int32_t&
    charsAvailableInLastSegment() const
    {
        return charsAvailableInLastSegment_;
    }

private:
    void
    Init();

    void
    Assign(
            const int32_t& _segments,
            const int32_t& _charsPerSegment,
            const int32_t& _charsAvailableInLastSegment);

    int32_t segments_;
    int32_t charsPerSegment_;
    int32_t charsAvailableInLastSegment_;
};
} // namespace sms
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SmsMessageData|
//
namespace mozilla {
namespace dom {
namespace sms {
class SmsMessageData MOZ_FINAL
{
private:

public:
    SmsMessageData();

    SmsMessageData(
            const int32_t& _id,
            const DeliveryState& _delivery,
            const DeliveryStatus& _deliveryStatus,
            const nsString& _sender,
            const nsString& _receiver,
            const nsString& _body,
            const MessageClass& _messageClass,
            const uint64_t& _timestamp,
            const bool& _read)
    {
        Init();
        Assign(_id, _delivery, _deliveryStatus, _sender, _receiver, _body, _messageClass, _timestamp, _read);
    }

    SmsMessageData(const SmsMessageData& _o)
    {
        Init();
        Assign((_o).id(), (_o).delivery(), (_o).deliveryStatus(), (_o).sender(), (_o).receiver(), (_o).body(), (_o).messageClass(), (_o).timestamp(), (_o).read());
    }

    ~SmsMessageData();

    void
    operator=(const SmsMessageData& _o)
    {
        Assign((_o).id(), (_o).delivery(), (_o).deliveryStatus(), (_o).sender(), (_o).receiver(), (_o).body(), (_o).messageClass(), (_o).timestamp(), (_o).read());
    }

    bool
    operator==(const SmsMessageData& _o) const;

    int32_t&
    id()
    {
        return id_;
    }
    const int32_t&
    id() const
    {
        return id_;
    }

    DeliveryState&
    delivery()
    {
        return delivery_;
    }
    const DeliveryState&
    delivery() const
    {
        return delivery_;
    }

    DeliveryStatus&
    deliveryStatus()
    {
        return deliveryStatus_;
    }
    const DeliveryStatus&
    deliveryStatus() const
    {
        return deliveryStatus_;
    }

    nsString&
    sender()
    {
        return sender_;
    }
    const nsString&
    sender() const
    {
        return sender_;
    }

    nsString&
    receiver()
    {
        return receiver_;
    }
    const nsString&
    receiver() const
    {
        return receiver_;
    }

    nsString&
    body()
    {
        return body_;
    }
    const nsString&
    body() const
    {
        return body_;
    }

    MessageClass&
    messageClass()
    {
        return messageClass_;
    }
    const MessageClass&
    messageClass() const
    {
        return messageClass_;
    }

    uint64_t&
    timestamp()
    {
        return timestamp_;
    }
    const uint64_t&
    timestamp() const
    {
        return timestamp_;
    }

    bool&
    read()
    {
        return read_;
    }
    const bool&
    read() const
    {
        return read_;
    }

private:
    void
    Init();

    void
    Assign(
            const int32_t& _id,
            const DeliveryState& _delivery,
            const DeliveryStatus& _deliveryStatus,
            const nsString& _sender,
            const nsString& _receiver,
            const nsString& _body,
            const MessageClass& _messageClass,
            const uint64_t& _timestamp,
            const bool& _read);

    int32_t id_;
    DeliveryState delivery_;
    DeliveryStatus deliveryStatus_;
    nsString sender_;
    nsString receiver_;
    nsString body_;
    MessageClass messageClass_;
    uint64_t timestamp_;
    bool read_;
};
} // namespace sms
} // namespace dom
} // namespace mozilla

#endif // ifndef SmsTypes_h
