//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PSms_h
#define PSms_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/dom/sms/SmsTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SmsFilterData|
//
namespace mozilla {
namespace dom {
namespace sms {
class SmsFilterData MOZ_FINAL
{
private:

public:
    SmsFilterData();

    SmsFilterData(
            const uint64_t& _startDate,
            const uint64_t& _endDate,
            const InfallibleTArray<nsString>& _numbers,
            const DeliveryState& _delivery,
            const ReadState& _read)
    {
        Init();
        Assign(_startDate, _endDate, _numbers, _delivery, _read);
    }

    SmsFilterData(const SmsFilterData& _o)
    {
        Init();
        Assign((_o).startDate(), (_o).endDate(), (_o).numbers(), (_o).delivery(), (_o).read());
    }

    ~SmsFilterData();

    void
    operator=(const SmsFilterData& _o)
    {
        Assign((_o).startDate(), (_o).endDate(), (_o).numbers(), (_o).delivery(), (_o).read());
    }

    bool
    operator==(const SmsFilterData& _o) const;

    uint64_t&
    startDate()
    {
        return startDate_;
    }
    const uint64_t&
    startDate() const
    {
        return startDate_;
    }

    uint64_t&
    endDate()
    {
        return endDate_;
    }
    const uint64_t&
    endDate() const
    {
        return endDate_;
    }

    InfallibleTArray<nsString>&
    numbers()
    {
        return numbers_;
    }
    const InfallibleTArray<nsString>&
    numbers() const
    {
        return numbers_;
    }

    DeliveryState&
    delivery()
    {
        return delivery_;
    }
    const DeliveryState&
    delivery() const
    {
        return delivery_;
    }

    ReadState&
    read()
    {
        return read_;
    }
    const ReadState&
    read() const
    {
        return read_;
    }

private:
    void
    Init();

    void
    Assign(
            const uint64_t& _startDate,
            const uint64_t& _endDate,
            const InfallibleTArray<nsString>& _numbers,
            const DeliveryState& _delivery,
            const ReadState& _read);

    uint64_t startDate_;
    uint64_t endDate_;
    InfallibleTArray<nsString> numbers_;
    DeliveryState delivery_;
    ReadState read_;
};
} // namespace sms
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SendMessageRequest|
//
namespace mozilla {
namespace dom {
namespace sms {
class SendMessageRequest MOZ_FINAL
{
private:

public:
    SendMessageRequest();

    SendMessageRequest(
            const nsString& _number,
            const nsString& _message)
    {
        Init();
        Assign(_number, _message);
    }

    SendMessageRequest(const SendMessageRequest& _o)
    {
        Init();
        Assign((_o).number(), (_o).message());
    }

    ~SendMessageRequest();

    void
    operator=(const SendMessageRequest& _o)
    {
        Assign((_o).number(), (_o).message());
    }

    bool
    operator==(const SendMessageRequest& _o) const;

    nsString&
    number()
    {
        return number_;
    }
    const nsString&
    number() const
    {
        return number_;
    }

    nsString&
    message()
    {
        return message_;
    }
    const nsString&
    message() const
    {
        return message_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsString& _number,
            const nsString& _message);

    nsString number_;
    nsString message_;
};
} // namespace sms
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetMessageRequest|
//
namespace mozilla {
namespace dom {
namespace sms {
class GetMessageRequest MOZ_FINAL
{
private:

public:
    GetMessageRequest();

    GetMessageRequest(const int32_t& _messageId)
    {
        Init();
        Assign(_messageId);
    }

    GetMessageRequest(const GetMessageRequest& _o)
    {
        Init();
        Assign((_o).messageId());
    }

    ~GetMessageRequest();

    void
    operator=(const GetMessageRequest& _o)
    {
        Assign((_o).messageId());
    }

    bool
    operator==(const GetMessageRequest& _o) const;

    int32_t&
    messageId()
    {
        return messageId_;
    }
    const int32_t&
    messageId() const
    {
        return messageId_;
    }

private:
    void
    Init();

    void
    Assign(const int32_t& _messageId);

    int32_t messageId_;
};
} // namespace sms
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DeleteMessageRequest|
//
namespace mozilla {
namespace dom {
namespace sms {
class DeleteMessageRequest MOZ_FINAL
{
private:

public:
    DeleteMessageRequest();

    DeleteMessageRequest(const int32_t& _messageId)
    {
        Init();
        Assign(_messageId);
    }

    DeleteMessageRequest(const DeleteMessageRequest& _o)
    {
        Init();
        Assign((_o).messageId());
    }

    ~DeleteMessageRequest();

    void
    operator=(const DeleteMessageRequest& _o)
    {
        Assign((_o).messageId());
    }

    bool
    operator==(const DeleteMessageRequest& _o) const;

    int32_t&
    messageId()
    {
        return messageId_;
    }
    const int32_t&
    messageId() const
    {
        return messageId_;
    }

private:
    void
    Init();

    void
    Assign(const int32_t& _messageId);

    int32_t messageId_;
};
} // namespace sms
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace sms {
class SmsFilterData;
} // namespace sms
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CreateMessageListRequest|
//
namespace mozilla {
namespace dom {
namespace sms {
class CreateMessageListRequest MOZ_FINAL
{
private:
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;

public:
    CreateMessageListRequest();

    CreateMessageListRequest(
            const SmsFilterData& _filter,
            const bool& _reverse)
    {
        Init();
        Assign(_filter, _reverse);
    }

    CreateMessageListRequest(const CreateMessageListRequest& _o)
    {
        Init();
        Assign((_o).filter(), (_o).reverse());
    }

    ~CreateMessageListRequest();

    void
    operator=(const CreateMessageListRequest& _o)
    {
        Assign((_o).filter(), (_o).reverse());
    }

    bool
    operator==(const CreateMessageListRequest& _o) const;

    SmsFilterData&
    filter()
    {
        return filter_;
    }
    const SmsFilterData&
    filter() const
    {
        return filter_;
    }

    bool&
    reverse()
    {
        return reverse_;
    }
    const bool&
    reverse() const
    {
        return reverse_;
    }

private:
    void
    Init();

    void
    Assign(
            const SmsFilterData& _filter,
            const bool& _reverse);

    SmsFilterData filter_;
    bool reverse_;
};
} // namespace sms
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetNextMessageInListRequest|
//
namespace mozilla {
namespace dom {
namespace sms {
class GetNextMessageInListRequest MOZ_FINAL
{
private:

public:
    GetNextMessageInListRequest();

    GetNextMessageInListRequest(const int32_t& _aListId)
    {
        Init();
        Assign(_aListId);
    }

    GetNextMessageInListRequest(const GetNextMessageInListRequest& _o)
    {
        Init();
        Assign((_o).aListId());
    }

    ~GetNextMessageInListRequest();

    void
    operator=(const GetNextMessageInListRequest& _o)
    {
        Assign((_o).aListId());
    }

    bool
    operator==(const GetNextMessageInListRequest& _o) const;

    int32_t&
    aListId()
    {
        return aListId_;
    }
    const int32_t&
    aListId() const
    {
        return aListId_;
    }

private:
    void
    Init();

    void
    Assign(const int32_t& _aListId);

    int32_t aListId_;
};
} // namespace sms
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct MarkMessageReadRequest|
//
namespace mozilla {
namespace dom {
namespace sms {
class MarkMessageReadRequest MOZ_FINAL
{
private:

public:
    MarkMessageReadRequest();

    MarkMessageReadRequest(
            const int32_t& _messageId,
            const bool& _value)
    {
        Init();
        Assign(_messageId, _value);
    }

    MarkMessageReadRequest(const MarkMessageReadRequest& _o)
    {
        Init();
        Assign((_o).messageId(), (_o).value());
    }

    ~MarkMessageReadRequest();

    void
    operator=(const MarkMessageReadRequest& _o)
    {
        Assign((_o).messageId(), (_o).value());
    }

    bool
    operator==(const MarkMessageReadRequest& _o) const;

    int32_t&
    messageId()
    {
        return messageId_;
    }
    const int32_t&
    messageId() const
    {
        return messageId_;
    }

    bool&
    value()
    {
        return value_;
    }
    const bool&
    value() const
    {
        return value_;
    }

private:
    void
    Init();

    void
    Assign(
            const int32_t& _messageId,
            const bool& _value);

    int32_t messageId_;
    bool value_;
};
} // namespace sms
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetThreadListRequest|
//
namespace mozilla {
namespace dom {
namespace sms {
class GetThreadListRequest MOZ_FINAL
{
private:

public:
    GetThreadListRequest()
    {
        Init();
        Assign();
    }

    GetThreadListRequest(const GetThreadListRequest& _o)
    {
        Init();
        Assign();
    }

    ~GetThreadListRequest();

    void
    operator=(const GetThreadListRequest& _o)
    {
        Assign();
    }

    bool
    operator==(const GetThreadListRequest& _o) const;

private:
    void
    Init();

    void
    Assign();

};
} // namespace sms
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace sms {
class SendMessageRequest;
} // namespace sms
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace sms {
class GetMessageRequest;
} // namespace sms
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace sms {
class DeleteMessageRequest;
} // namespace sms
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace sms {
class CreateMessageListRequest;
} // namespace sms
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace sms {
class GetNextMessageInListRequest;
} // namespace sms
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace sms {
class MarkMessageReadRequest;
} // namespace sms
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace sms {
class GetThreadListRequest;
} // namespace sms
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union IPCSmsRequest|
//
namespace mozilla {
namespace dom {
namespace sms {
class IPCSmsRequest MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TSendMessageRequest = 1,
        TGetMessageRequest,
        TDeleteMessageRequest,
        TCreateMessageListRequest,
        TGetNextMessageInListRequest,
        TMarkMessageReadRequest,
        TGetThreadListRequest,
        T__Last = TGetThreadListRequest
    };

private:
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef SendMessageRequest SendMessageRequest__tdef;
    typedef GetMessageRequest GetMessageRequest__tdef;
    typedef DeleteMessageRequest DeleteMessageRequest__tdef;
    typedef CreateMessageListRequest CreateMessageListRequest__tdef;
    typedef GetNextMessageInListRequest GetNextMessageInListRequest__tdef;
    typedef MarkMessageReadRequest MarkMessageReadRequest__tdef;
    typedef GetThreadListRequest GetThreadListRequest__tdef;

    union Value {
        char VSendMessageRequest[sizeof(SendMessageRequest)];
        char VGetMessageRequest[sizeof(GetMessageRequest)];
        char VDeleteMessageRequest[sizeof(DeleteMessageRequest)];
        char VCreateMessageListRequest[sizeof(CreateMessageListRequest)];
        char VGetNextMessageInListRequest[sizeof(GetNextMessageInListRequest)];
        char VMarkMessageReadRequest[sizeof(MarkMessageReadRequest)];
        char VGetThreadListRequest[sizeof(GetThreadListRequest)];
    };

    SendMessageRequest*
    ptr_SendMessageRequest()
    {
        return reinterpret_cast<SendMessageRequest*>((&((mValue).VSendMessageRequest)));
    }
    const SendMessageRequest* const
    constptr_SendMessageRequest() const
    {
        return reinterpret_cast<const SendMessageRequest* const>((&((mValue).VSendMessageRequest)));
    }
    GetMessageRequest*
    ptr_GetMessageRequest()
    {
        return reinterpret_cast<GetMessageRequest*>((&((mValue).VGetMessageRequest)));
    }
    const GetMessageRequest* const
    constptr_GetMessageRequest() const
    {
        return reinterpret_cast<const GetMessageRequest* const>((&((mValue).VGetMessageRequest)));
    }
    DeleteMessageRequest*
    ptr_DeleteMessageRequest()
    {
        return reinterpret_cast<DeleteMessageRequest*>((&((mValue).VDeleteMessageRequest)));
    }
    const DeleteMessageRequest* const
    constptr_DeleteMessageRequest() const
    {
        return reinterpret_cast<const DeleteMessageRequest* const>((&((mValue).VDeleteMessageRequest)));
    }
    CreateMessageListRequest*
    ptr_CreateMessageListRequest()
    {
        return reinterpret_cast<CreateMessageListRequest*>((&((mValue).VCreateMessageListRequest)));
    }
    const CreateMessageListRequest* const
    constptr_CreateMessageListRequest() const
    {
        return reinterpret_cast<const CreateMessageListRequest* const>((&((mValue).VCreateMessageListRequest)));
    }
    GetNextMessageInListRequest*
    ptr_GetNextMessageInListRequest()
    {
        return reinterpret_cast<GetNextMessageInListRequest*>((&((mValue).VGetNextMessageInListRequest)));
    }
    const GetNextMessageInListRequest* const
    constptr_GetNextMessageInListRequest() const
    {
        return reinterpret_cast<const GetNextMessageInListRequest* const>((&((mValue).VGetNextMessageInListRequest)));
    }
    MarkMessageReadRequest*
    ptr_MarkMessageReadRequest()
    {
        return reinterpret_cast<MarkMessageReadRequest*>((&((mValue).VMarkMessageReadRequest)));
    }
    const MarkMessageReadRequest* const
    constptr_MarkMessageReadRequest() const
    {
        return reinterpret_cast<const MarkMessageReadRequest* const>((&((mValue).VMarkMessageReadRequest)));
    }
    GetThreadListRequest*
    ptr_GetThreadListRequest()
    {
        return reinterpret_cast<GetThreadListRequest*>((&((mValue).VGetThreadListRequest)));
    }
    const GetThreadListRequest* const
    constptr_GetThreadListRequest() const
    {
        return reinterpret_cast<const GetThreadListRequest* const>((&((mValue).VGetThreadListRequest)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    IPCSmsRequest() :
        mType(T__None)
    {
    }

    IPCSmsRequest(const SendMessageRequest& aOther);

    IPCSmsRequest(const GetMessageRequest& aOther);

    IPCSmsRequest(const DeleteMessageRequest& aOther);

    IPCSmsRequest(const CreateMessageListRequest& aOther);

    IPCSmsRequest(const GetNextMessageInListRequest& aOther);

    IPCSmsRequest(const MarkMessageReadRequest& aOther);

    IPCSmsRequest(const GetThreadListRequest& aOther);

    IPCSmsRequest(const IPCSmsRequest& aOther);

    ~IPCSmsRequest();

    Type
    type() const
    {
        return mType;
    }

    IPCSmsRequest&
    operator=(const SendMessageRequest& aRhs);

    IPCSmsRequest&
    operator=(const GetMessageRequest& aRhs);

    IPCSmsRequest&
    operator=(const DeleteMessageRequest& aRhs);

    IPCSmsRequest&
    operator=(const CreateMessageListRequest& aRhs);

    IPCSmsRequest&
    operator=(const GetNextMessageInListRequest& aRhs);

    IPCSmsRequest&
    operator=(const MarkMessageReadRequest& aRhs);

    IPCSmsRequest&
    operator=(const GetThreadListRequest& aRhs);

    IPCSmsRequest&
    operator=(const IPCSmsRequest& aRhs);

    bool
    operator==(const SendMessageRequest& aRhs) const;

    bool
    operator==(const GetMessageRequest& aRhs) const;

    bool
    operator==(const DeleteMessageRequest& aRhs) const;

    bool
    operator==(const CreateMessageListRequest& aRhs) const;

    bool
    operator==(const GetNextMessageInListRequest& aRhs) const;

    bool
    operator==(const MarkMessageReadRequest& aRhs) const;

    bool
    operator==(const GetThreadListRequest& aRhs) const;

    bool
    operator==(const IPCSmsRequest& aRhs) const;

    SendMessageRequest&
    get_SendMessageRequest()
    {
        AssertSanity(TSendMessageRequest);
        return (*(ptr_SendMessageRequest()));
    }
    const SendMessageRequest&
    get_SendMessageRequest() const
    {
        AssertSanity(TSendMessageRequest);
        return (*(constptr_SendMessageRequest()));
    }
    operator SendMessageRequest&()
    {
        return get_SendMessageRequest();
    }
    operator const SendMessageRequest&() const
    {
        return get_SendMessageRequest();
    }

    GetMessageRequest&
    get_GetMessageRequest()
    {
        AssertSanity(TGetMessageRequest);
        return (*(ptr_GetMessageRequest()));
    }
    const GetMessageRequest&
    get_GetMessageRequest() const
    {
        AssertSanity(TGetMessageRequest);
        return (*(constptr_GetMessageRequest()));
    }
    operator GetMessageRequest&()
    {
        return get_GetMessageRequest();
    }
    operator const GetMessageRequest&() const
    {
        return get_GetMessageRequest();
    }

    DeleteMessageRequest&
    get_DeleteMessageRequest()
    {
        AssertSanity(TDeleteMessageRequest);
        return (*(ptr_DeleteMessageRequest()));
    }
    const DeleteMessageRequest&
    get_DeleteMessageRequest() const
    {
        AssertSanity(TDeleteMessageRequest);
        return (*(constptr_DeleteMessageRequest()));
    }
    operator DeleteMessageRequest&()
    {
        return get_DeleteMessageRequest();
    }
    operator const DeleteMessageRequest&() const
    {
        return get_DeleteMessageRequest();
    }

    CreateMessageListRequest&
    get_CreateMessageListRequest()
    {
        AssertSanity(TCreateMessageListRequest);
        return (*(ptr_CreateMessageListRequest()));
    }
    const CreateMessageListRequest&
    get_CreateMessageListRequest() const
    {
        AssertSanity(TCreateMessageListRequest);
        return (*(constptr_CreateMessageListRequest()));
    }
    operator CreateMessageListRequest&()
    {
        return get_CreateMessageListRequest();
    }
    operator const CreateMessageListRequest&() const
    {
        return get_CreateMessageListRequest();
    }

    GetNextMessageInListRequest&
    get_GetNextMessageInListRequest()
    {
        AssertSanity(TGetNextMessageInListRequest);
        return (*(ptr_GetNextMessageInListRequest()));
    }
    const GetNextMessageInListRequest&
    get_GetNextMessageInListRequest() const
    {
        AssertSanity(TGetNextMessageInListRequest);
        return (*(constptr_GetNextMessageInListRequest()));
    }
    operator GetNextMessageInListRequest&()
    {
        return get_GetNextMessageInListRequest();
    }
    operator const GetNextMessageInListRequest&() const
    {
        return get_GetNextMessageInListRequest();
    }

    MarkMessageReadRequest&
    get_MarkMessageReadRequest()
    {
        AssertSanity(TMarkMessageReadRequest);
        return (*(ptr_MarkMessageReadRequest()));
    }
    const MarkMessageReadRequest&
    get_MarkMessageReadRequest() const
    {
        AssertSanity(TMarkMessageReadRequest);
        return (*(constptr_MarkMessageReadRequest()));
    }
    operator MarkMessageReadRequest&()
    {
        return get_MarkMessageReadRequest();
    }
    operator const MarkMessageReadRequest&() const
    {
        return get_MarkMessageReadRequest();
    }

    GetThreadListRequest&
    get_GetThreadListRequest()
    {
        AssertSanity(TGetThreadListRequest);
        return (*(ptr_GetThreadListRequest()));
    }
    const GetThreadListRequest&
    get_GetThreadListRequest() const
    {
        AssertSanity(TGetThreadListRequest);
        return (*(constptr_GetThreadListRequest()));
    }
    operator GetThreadListRequest&()
    {
        return get_GetThreadListRequest();
    }
    operator const GetThreadListRequest&() const
    {
        return get_GetThreadListRequest();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace sms
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PSmsChild and PSmsParent
//
namespace mozilla {
namespace dom {
namespace sms {
namespace PSms {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PSmsStart = PSmsMsgStart << 16,
    PSmsPreStart = (PSmsMsgStart << 16) - 1,
    Msg_NotifyReceivedMessage__ID,
    Msg_NotifySendingMessage__ID,
    Msg_NotifySentMessage__ID,
    Msg_NotifyFailedMessage__ID,
    Msg_NotifyDeliverySuccessMessage__ID,
    Msg_NotifyDeliveryErrorMessage__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_PSmsRequestConstructor__ID,
    Reply_PSmsRequestConstructor__ID,
    Msg_HasSupport__ID,
    Reply_HasSupport__ID,
    Msg_GetSegmentInfoForText__ID,
    Reply_GetSegmentInfoForText__ID,
    Msg_ClearMessageList__ID,
    PSmsEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg_NotifyReceivedMessage :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Msg_NotifyReceivedMessage__ID
    };
    Msg_NotifyReceivedMessage() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Msg_NotifyReceivedMessage")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifyReceivedMessage(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifySendingMessage :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Msg_NotifySendingMessage__ID
    };
    Msg_NotifySendingMessage() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Msg_NotifySendingMessage")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifySendingMessage(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifySentMessage :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Msg_NotifySentMessage__ID
    };
    Msg_NotifySentMessage() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Msg_NotifySentMessage")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifySentMessage(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifyFailedMessage :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Msg_NotifyFailedMessage__ID
    };
    Msg_NotifyFailedMessage() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Msg_NotifyFailedMessage")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifyFailedMessage(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifyDeliverySuccessMessage :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Msg_NotifyDeliverySuccessMessage__ID
    };
    Msg_NotifyDeliverySuccessMessage() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Msg_NotifyDeliverySuccessMessage")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifyDeliverySuccessMessage(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotifyDeliveryErrorMessage :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Msg_NotifyDeliveryErrorMessage__ID
    };
    Msg_NotifyDeliveryErrorMessage() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Msg_NotifyDeliveryErrorMessage")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotifyDeliveryErrorMessage(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PSmsRequestConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Msg_PSmsRequestConstructor__ID
    };
    Msg_PSmsRequestConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Msg_PSmsRequestConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PSmsRequestConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PSmsRequestConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Reply_PSmsRequestConstructor__ID
    };
    Reply_PSmsRequestConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Reply_PSmsRequestConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PSmsRequestConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_HasSupport :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Msg_HasSupport__ID
    };
    Msg_HasSupport() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Msg_HasSupport")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_HasSupport(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_HasSupport :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Reply_HasSupport__ID
    };
    Reply_HasSupport() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Reply_HasSupport")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_HasSupport(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetSegmentInfoForText :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Msg_GetSegmentInfoForText__ID
    };
    Msg_GetSegmentInfoForText() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Msg_GetSegmentInfoForText")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetSegmentInfoForText(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetSegmentInfoForText :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Reply_GetSegmentInfoForText__ID
    };
    Reply_GetSegmentInfoForText() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Reply_GetSegmentInfoForText")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetSegmentInfoForText(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_ClearMessageList :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;

public:
    enum {
        ID = Msg_ClearMessageList__ID
    };
    Msg_ClearMessageList() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PSms::Msg_ClearMessageList")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_ClearMessageList(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PSms
} // namespace sms
} // namespace dom
} // namespace mozilla

#endif // ifndef PSms_h
