//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PSmsRequestParent_h
#define PSmsRequestParent_h

#include "mozilla/dom/sms/PSmsRequest.h"
namespace mozilla {
namespace dom {
namespace sms {
class PSmsParent;
} // namespace sms
} // namespace dom
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace dom {
namespace sms {
class PSmsParent;
} // namespace sms
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace sms {


class /*NS_ABSTRACT_CLASS*/ PSmsRequestParent :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::dom::sms::PSmsParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::MessageReply MessageReply;
    typedef mozilla::dom::sms::ReplyCreateMessageList ReplyCreateMessageList;
    typedef mozilla::dom::sms::ReplyCreateMessageListFail ReplyCreateMessageListFail;
    typedef mozilla::dom::sms::ReplyGetMessage ReplyGetMessage;
    typedef mozilla::dom::sms::ReplyGetMessageFail ReplyGetMessageFail;
    typedef mozilla::dom::sms::ReplyGetNextMessage ReplyGetNextMessage;
    typedef mozilla::dom::sms::ReplyMarkeMessageRead ReplyMarkeMessageRead;
    typedef mozilla::dom::sms::ReplyMarkeMessageReadFail ReplyMarkeMessageReadFail;
    typedef mozilla::dom::sms::ReplyMessageDelete ReplyMessageDelete;
    typedef mozilla::dom::sms::ReplyMessageDeleteFail ReplyMessageDeleteFail;
    typedef mozilla::dom::sms::ReplyMessageSend ReplyMessageSend;
    typedef mozilla::dom::sms::ReplyMessageSendFail ReplyMessageSendFail;
    typedef mozilla::dom::sms::ReplyNoMessageInList ReplyNoMessageInList;
    typedef mozilla::dom::sms::ReplyThreadList ReplyThreadList;
    typedef mozilla::dom::sms::ReplyThreadListFail ReplyThreadListFail;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;
    typedef mozilla::dom::sms::ThreadListItem ThreadListItem;
    typedef mozilla::dom::sms::PSmsParent PSmsParent;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PSmsRequest::State State;


    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PSmsRequestParent();

    virtual ~PSmsRequestParent();

    PSmsParent*
    Manager() const;

    PSmsRequest::State
    state();

    static bool
    Send__delete__(
            PSmsRequestParent* actor,
            const MessageReply& response) NS_WARN_UNUSED_RESULT;

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const ReplyMarkeMessageRead& __v,
            Message* __msg);

    bool
    Read(
            ReplyMarkeMessageRead* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<ThreadListItem>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<ThreadListItem>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyGetMessageFail& __v,
            Message* __msg);

    bool
    Read(
            ReplyGetMessageFail* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyCreateMessageListFail& __v,
            Message* __msg);

    bool
    Read(
            ReplyCreateMessageListFail* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyMessageSendFail& __v,
            Message* __msg);

    bool
    Read(
            ReplyMessageSendFail* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyMarkeMessageReadFail& __v,
            Message* __msg);

    bool
    Read(
            ReplyMarkeMessageReadFail* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyMessageDeleteFail& __v,
            Message* __msg);

    bool
    Read(
            ReplyMessageDeleteFail* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyGetMessage& __v,
            Message* __msg);

    bool
    Read(
            ReplyGetMessage* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyNoMessageInList& __v,
            Message* __msg);

    bool
    Read(
            ReplyNoMessageInList* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyThreadListFail& __v,
            Message* __msg);

    bool
    Read(
            ReplyThreadListFail* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyThreadList& __v,
            Message* __msg);

    bool
    Read(
            ReplyThreadList* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyMessageDelete& __v,
            Message* __msg);

    bool
    Read(
            ReplyMessageDelete* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyCreateMessageList& __v,
            Message* __msg);

    bool
    Read(
            ReplyCreateMessageList* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ThreadListItem& __v,
            Message* __msg);

    bool
    Read(
            ThreadListItem* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyMessageSend& __v,
            Message* __msg);

    bool
    Read(
            ReplyMessageSend* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SmsMessageData& __v,
            Message* __msg);

    bool
    Read(
            SmsMessageData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ReplyGetNextMessage& __v,
            Message* __msg);

    bool
    Read(
            ReplyGetNextMessage* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PSmsRequestParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PSmsRequestParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const MessageReply& __v,
            Message* __msg);

    bool
    Read(
            MessageReply* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
};


} // namespace sms
} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
namespace sms {
class SmsRequestParent :
    public PSmsRequestParent
{
    SmsRequestParent();
    virtual ~SmsRequestParent();
};
} // namespace sms
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
namespace sms {
SmsRequestParent::SmsRequestParent()
{
    MOZ_COUNT_CTOR(SmsRequestParent);
}

SmsRequestParent::~SmsRequestParent()
{
    MOZ_COUNT_DTOR(SmsRequestParent);
}

} // namespace sms
} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PSmsRequestParent_h
