//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PSmsChild_h
#define PSmsChild_h

#include "mozilla/dom/sms/PSms.h"
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace sms {
class PSmsRequestChild;
} // namespace sms
} // namespace dom
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace sms {
class PSmsRequestChild;
} // namespace sms
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace sms {


class /*NS_ABSTRACT_CLASS*/ PSmsChild :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::dom::PContentChild;

    friend class mozilla::dom::sms::PSmsRequestChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
    typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
    typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
    typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
    typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
    typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
    typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
    typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
    typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::sms::PSmsRequestChild PSmsRequestChild;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PSms::State State;

    virtual bool
    RecvNotifyReceivedMessage(const SmsMessageData& aMessageData) = 0;
    virtual bool
    RecvNotifySendingMessage(const SmsMessageData& aMessageData) = 0;
    virtual bool
    RecvNotifySentMessage(const SmsMessageData& aMessageData) = 0;
    virtual bool
    RecvNotifyFailedMessage(const SmsMessageData& aMessageData) = 0;
    virtual bool
    RecvNotifyDeliverySuccessMessage(const SmsMessageData& aMessageData) = 0;
    virtual bool
    RecvNotifyDeliveryErrorMessage(const SmsMessageData& aMessageData) = 0;
    virtual PSmsRequestChild*
    AllocPSmsRequest(const IPCSmsRequest& request) = 0;
    virtual bool
    DeallocPSmsRequest(PSmsRequestChild* actor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PSmsChild();

    virtual ~PSmsChild();

    PContentChild*
    Manager() const;

    void
    ManagedPSmsRequestChild(InfallibleTArray<PSmsRequestChild*>& aArr) const;
    const InfallibleTArray<PSmsRequestChild*>&
    ManagedPSmsRequestChild() const;

    PSms::State
    state();

    static bool
    Send__delete__(PSmsChild* actor);

    PSmsRequestChild*
    SendPSmsRequestConstructor(const IPCSmsRequest& request);

    PSmsRequestChild*
    SendPSmsRequestConstructor(
            PSmsRequestChild* actor,
            const IPCSmsRequest& request);

    bool
    SendHasSupport(bool* aHasSupport);

    bool
    SendGetSegmentInfoForText(
            const nsString& aText,
            SmsSegmentInfoData* aResult);

    bool
    SendClearMessageList(const int32_t& aListId);

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const SendMessageRequest& __v,
            Message* __msg);

    bool
    Read(
            SendMessageRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeleteMessageRequest& __v,
            Message* __msg);

    bool
    Read(
            DeleteMessageRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SmsSegmentInfoData& __v,
            Message* __msg);

    bool
    Read(
            SmsSegmentInfoData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const MarkMessageReadRequest& __v,
            Message* __msg);

    bool
    Read(
            MarkMessageReadRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PSmsRequestChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PSmsRequestChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const GetNextMessageInListRequest& __v,
            Message* __msg);

    bool
    Read(
            GetNextMessageInListRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const CreateMessageListRequest& __v,
            Message* __msg);

    bool
    Read(
            CreateMessageListRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const IPCSmsRequest& __v,
            Message* __msg);

    bool
    Read(
            IPCSmsRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const GetThreadListRequest& __v,
            Message* __msg);

    bool
    Read(
            GetThreadListRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SmsFilterData& __v,
            Message* __msg);

    bool
    Read(
            SmsFilterData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SmsMessageData& __v,
            Message* __msg);

    bool
    Read(
            SmsMessageData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const GetMessageRequest& __v,
            Message* __msg);

    bool
    Read(
            GetMessageRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PSmsChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PSmsChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PSmsRequestChild*> mManagedPSmsRequestChild;
};


} // namespace sms
} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
namespace sms {
class SmsChild :
    public PSmsChild
{
    virtual bool
    RecvNotifyReceivedMessage(const SmsMessageData& aMessageData);

    virtual bool
    RecvNotifySendingMessage(const SmsMessageData& aMessageData);

    virtual bool
    RecvNotifySentMessage(const SmsMessageData& aMessageData);

    virtual bool
    RecvNotifyFailedMessage(const SmsMessageData& aMessageData);

    virtual bool
    RecvNotifyDeliverySuccessMessage(const SmsMessageData& aMessageData);

    virtual bool
    RecvNotifyDeliveryErrorMessage(const SmsMessageData& aMessageData);

    virtual PSmsRequestChild*
    AllocPSmsRequest(const IPCSmsRequest& request);

    virtual bool
    DeallocPSmsRequest(PSmsRequestChild* actor);

    SmsChild();
    virtual ~SmsChild();
};
} // namespace sms
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
namespace sms {
bool
SmsChild::RecvNotifyReceivedMessage(const SmsMessageData& aMessageData)
{
    return false;
}

bool
SmsChild::RecvNotifySendingMessage(const SmsMessageData& aMessageData)
{
    return false;
}

bool
SmsChild::RecvNotifySentMessage(const SmsMessageData& aMessageData)
{
    return false;
}

bool
SmsChild::RecvNotifyFailedMessage(const SmsMessageData& aMessageData)
{
    return false;
}

bool
SmsChild::RecvNotifyDeliverySuccessMessage(const SmsMessageData& aMessageData)
{
    return false;
}

bool
SmsChild::RecvNotifyDeliveryErrorMessage(const SmsMessageData& aMessageData)
{
    return false;
}

PSmsRequestChild*
SmsChild::AllocPSmsRequest(const IPCSmsRequest& request)
{
    return 0;
}

bool
SmsChild::DeallocPSmsRequest(PSmsRequestChild* actor)
{
    return false;
}

SmsChild::SmsChild()
{
    MOZ_COUNT_CTOR(SmsChild);
}

SmsChild::~SmsChild()
{
    MOZ_COUNT_DTOR(SmsChild);
}

} // namespace sms
} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PSmsChild_h
