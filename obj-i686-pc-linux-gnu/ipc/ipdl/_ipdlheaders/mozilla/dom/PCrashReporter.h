//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCrashReporter_h
#define PCrashReporter_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct Mapping|
//
namespace mozilla {
namespace dom {
class Mapping MOZ_FINAL
{
private:

public:
    Mapping();

    Mapping(
            const nsCString& _library_name,
            const nsCString& _file_id,
            const uintptr_t& _start_address,
            const size_t& _mapping_length,
            const size_t& _file_offset)
    {
        Init();
        Assign(_library_name, _file_id, _start_address, _mapping_length, _file_offset);
    }

    Mapping(const Mapping& _o)
    {
        Init();
        Assign((_o).library_name(), (_o).file_id(), (_o).start_address(), (_o).mapping_length(), (_o).file_offset());
    }

    ~Mapping();

    void
    operator=(const Mapping& _o)
    {
        Assign((_o).library_name(), (_o).file_id(), (_o).start_address(), (_o).mapping_length(), (_o).file_offset());
    }

    bool
    operator==(const Mapping& _o) const;

    nsCString&
    library_name()
    {
        return library_name_;
    }
    const nsCString&
    library_name() const
    {
        return library_name_;
    }

    nsCString&
    file_id()
    {
        return file_id_;
    }
    const nsCString&
    file_id() const
    {
        return file_id_;
    }

    uintptr_t&
    start_address()
    {
        return start_address_;
    }
    const uintptr_t&
    start_address() const
    {
        return start_address_;
    }

    size_t&
    mapping_length()
    {
        return mapping_length_;
    }
    const size_t&
    mapping_length() const
    {
        return mapping_length_;
    }

    size_t&
    file_offset()
    {
        return file_offset_;
    }
    const size_t&
    file_offset() const
    {
        return file_offset_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsCString& _library_name,
            const nsCString& _file_id,
            const uintptr_t& _start_address,
            const size_t& _mapping_length,
            const size_t& _file_offset);

    nsCString library_name_;
    nsCString file_id_;
    uintptr_t start_address_;
    size_t mapping_length_;
    size_t file_offset_;
};
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PCrashReporterChild and PCrashReporterParent
//
namespace mozilla {
namespace dom {
namespace PCrashReporter {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PCrashReporterStart = PCrashReporterMsgStart << 16,
    PCrashReporterPreStart = (PCrashReporterMsgStart << 16) - 1,
    Msg_AddLibraryMappings__ID,
    Msg_AnnotateCrashReport__ID,
    Msg_AppendAppNotes__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PCrashReporterEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg_AddLibraryMappings :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::Mapping Mapping;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_AddLibraryMappings__ID
    };
    Msg_AddLibraryMappings() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PCrashReporter::Msg_AddLibraryMappings")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_AddLibraryMappings(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_AnnotateCrashReport :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::Mapping Mapping;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_AnnotateCrashReport__ID
    };
    Msg_AnnotateCrashReport() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PCrashReporter::Msg_AnnotateCrashReport")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_AnnotateCrashReport(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_AppendAppNotes :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::Mapping Mapping;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_AppendAppNotes__ID
    };
    Msg_AppendAppNotes() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PCrashReporter::Msg_AppendAppNotes")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_AppendAppNotes(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::Mapping Mapping;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PCrashReporter::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::Mapping Mapping;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PCrashReporter::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PCrashReporter
} // namespace dom
} // namespace mozilla

#endif // ifndef PCrashReporter_h
