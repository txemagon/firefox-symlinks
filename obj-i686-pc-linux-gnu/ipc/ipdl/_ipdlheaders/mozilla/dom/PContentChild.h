//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PContentChild_h
#define PContentChild_h

#include "mozilla/dom/PContent.h"
namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace bluetooth {
class PBluetoothChild;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {
class PCrashReporterChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PExternalHelperAppChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace devicestorage {
class PDeviceStorageRequestChild;
} // namespace devicestorage
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {
class PHalChild;
} // namespace hal_sandbox
} // namespace mozilla

namespace mozilla {
namespace layers {
class PImageBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMemoryReportRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace sms {
class PSmsChild;
} // namespace sms
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PStorageChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PTestShellChild;
} // namespace ipc
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace dom {
class PStorageChild;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace devicestorage {
class PDeviceStorageRequestChild;
} // namespace devicestorage
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
class PExternalHelperAppChild;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace ipc {
class PTestShellChild;
} // namespace ipc
} // namespace mozilla


namespace mozilla {
namespace dom {
class PMemoryReportRequestChild;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace hal_sandbox {
class PHalChild;
} // namespace hal_sandbox
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace bluetooth {
class PBluetoothChild;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace sms {
class PSmsChild;
} // namespace sms
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
class PCrashReporterChild;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace net {
class PNeckoChild;
} // namespace net
} // namespace mozilla


namespace mozilla {
namespace layers {
class PCompositorChild;
} // namespace layers
} // namespace mozilla


namespace mozilla {
namespace layers {
class PImageBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {


class /*NS_ABSTRACT_CLASS*/ PContentChild :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::dom::PStorageChild;

    friend class mozilla::dom::PBrowserChild;

    friend class mozilla::dom::devicestorage::PDeviceStorageRequestChild;

    friend class mozilla::dom::PExternalHelperAppChild;

    friend class mozilla::dom::indexedDB::PIndexedDBChild;

    friend class mozilla::ipc::PTestShellChild;

    friend class mozilla::dom::PMemoryReportRequestChild;

    friend class mozilla::hal_sandbox::PHalChild;

    friend class mozilla::dom::bluetooth::PBluetoothChild;

    friend class mozilla::dom::PBlobChild;

    friend class mozilla::dom::sms::PSmsChild;

    friend class mozilla::dom::PCrashReporterChild;

    friend class mozilla::net::PNeckoChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::AppFrameIPCTabContext AppFrameIPCTabContext;
    typedef mozilla::dom::AudioChannelType AudioChannelType;
    typedef mozilla::dom::BlobConstructorParams BlobConstructorParams;
    typedef mozilla::dom::BrowserFrameIPCTabContext BrowserFrameIPCTabContext;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::DeviceStorageAddParams DeviceStorageAddParams;
    typedef mozilla::dom::DeviceStorageDeleteParams DeviceStorageDeleteParams;
    typedef mozilla::dom::DeviceStorageEnumerationParams DeviceStorageEnumerationParams;
    typedef mozilla::dom::DeviceStorageGetParams DeviceStorageGetParams;
    typedef mozilla::dom::DeviceStorageParams DeviceStorageParams;
    typedef mozilla::dom::DeviceStorageStatParams DeviceStorageStatParams;
    typedef mozilla::dom::FileBlobConstructorParams FileBlobConstructorParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::FontListEntry FontListEntry;
    typedef mozilla::ipc::GenericURIParams GenericURIParams;
    typedef mozilla::dom::IPCTabAppBrowserContext IPCTabAppBrowserContext;
    typedef mozilla::dom::IPCTabContext IPCTabContext;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::dom::MaybePrefValue MaybePrefValue;
    typedef mozilla::dom::MysteryBlobConstructorParams MysteryBlobConstructorParams;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::dom::NormalBlobConstructorParams NormalBlobConstructorParams;
    typedef mozilla::ipc::OptionalURIParams OptionalURIParams;
    typedef IPC::Permission Permission;
    typedef mozilla::dom::PopupIPCTabContext PopupIPCTabContext;
    typedef mozilla::dom::PrefSetting PrefSetting;
    typedef mozilla::dom::PrefValue PrefValue;
    typedef IPC::Principal Principal;
    typedef mozilla::layout::ScrollingBehavior ScrollingBehavior;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::dom::SlicedBlobConstructorParams SlicedBlobConstructorParams;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::dom::StorageClone StorageClone;
    typedef mozilla::dom::StorageConstructData StorageConstructData;
    typedef mozilla::ipc::URIParams URIParams;
    typedef mozilla::dom::VanillaFrameIPCTabContext VanillaFrameIPCTabContext;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PBlobChild PBlobChild;
    typedef mozilla::dom::bluetooth::PBluetoothChild PBluetoothChild;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::layers::PCompositorChild PCompositorChild;
    typedef mozilla::dom::PCrashReporterChild PCrashReporterChild;
    typedef mozilla::dom::PExternalHelperAppChild PExternalHelperAppChild;
    typedef mozilla::dom::devicestorage::PDeviceStorageRequestChild PDeviceStorageRequestChild;
    typedef mozilla::hal_sandbox::PHalChild PHalChild;
    typedef mozilla::layers::PImageBridgeChild PImageBridgeChild;
    typedef mozilla::dom::indexedDB::PIndexedDBChild PIndexedDBChild;
    typedef mozilla::dom::PMemoryReportRequestChild PMemoryReportRequestChild;
    typedef mozilla::net::PNeckoChild PNeckoChild;
    typedef mozilla::dom::sms::PSmsChild PSmsChild;
    typedef mozilla::dom::PStorageChild PStorageChild;
    typedef mozilla::ipc::PTestShellChild PTestShellChild;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PContent::State State;

    virtual bool
    RecvPBrowserConstructor(
            PBrowserChild* actor,
            const IPCTabContext& context,
            const uint32_t& chromeFlags);
    virtual bool
    RecvPBlobConstructor(
            PBlobChild* actor,
            const BlobConstructorParams& params);
    virtual bool
    RecvPMemoryReportRequestConstructor(PMemoryReportRequestChild* actor);
    virtual bool
    RecvAudioChannelNotify() = 0;
    virtual bool
    RecvDumpMemoryReportsToFile(
            const nsString& identifier,
            const bool& minimizeMemoryUsage,
            const bool& dumpChildProcesses) = 0;
    virtual bool
    RecvDumpGCAndCCLogsToFile(
            const nsString& identifier,
            const bool& dumpChildProcesses) = 0;
    virtual bool
    RecvPTestShellConstructor(PTestShellChild* actor);
    virtual bool
    RecvRegisterChrome(
            const InfallibleTArray<ChromePackage>& packages,
            const InfallibleTArray<ResourceMapping>& resources,
            const InfallibleTArray<OverrideMapping>& overrides,
            const nsCString& locale) = 0;
    virtual bool
    RecvSetOffline(const bool& offline) = 0;
    virtual bool
    RecvNotifyVisited(const URIParams& uri) = 0;
    virtual bool
    RecvPreferenceUpdate(const PrefSetting& pref) = 0;
    virtual bool
    RecvNotifyAlertsObserver(
            const nsCString& topic,
            const nsString& data) = 0;
    virtual bool
    RecvGeolocationUpdate(const GeoPosition& somewhere) = 0;
    virtual bool
    RecvAddPermission(const Permission& permission) = 0;
    virtual bool
    RecvScreenSizeChanged(const gfxIntSize& size) = 0;
    virtual bool
    RecvFlushMemory(const nsString& reason) = 0;
    virtual bool
    RecvGarbageCollect() = 0;
    virtual bool
    RecvCycleCollect() = 0;
    virtual bool
    RecvActivateA11y() = 0;
    virtual bool
    RecvAppInfo(
            const nsCString& version,
            const nsCString& buildID) = 0;
    virtual bool
    RecvLastPrivateDocShellDestroyed() = 0;
    virtual bool
    RecvFilePathUpdate(
            const nsString& type,
            const nsString& filepath,
            const nsCString& reasons) = 0;
    virtual bool
    RecvFileSystemUpdate(
            const nsString& fsName,
            const nsString& mountPoint,
            const int32_t& fsState) = 0;
    virtual bool
    RecvAsyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData) = 0;
    virtual PBrowserChild*
    AllocPBrowser(
            const IPCTabContext& context,
            const uint32_t& chromeFlags) = 0;
    virtual bool
    DeallocPBrowser(PBrowserChild* actor) = 0;
    virtual PBlobChild*
    AllocPBlob(const BlobConstructorParams& params) = 0;
    virtual bool
    DeallocPBlob(PBlobChild* actor) = 0;
    virtual PMemoryReportRequestChild*
    AllocPMemoryReportRequest() = 0;
    virtual bool
    DeallocPMemoryReportRequest(PMemoryReportRequestChild* actor) = 0;
    virtual PTestShellChild*
    AllocPTestShell() = 0;
    virtual bool
    DeallocPTestShell(PTestShellChild* actor) = 0;
    virtual PDeviceStorageRequestChild*
    AllocPDeviceStorageRequest(const DeviceStorageParams& params) = 0;
    virtual bool
    DeallocPDeviceStorageRequest(PDeviceStorageRequestChild* actor) = 0;
    virtual PCrashReporterChild*
    AllocPCrashReporter(
            const NativeThreadId& tid,
            const uint32_t& processType) = 0;
    virtual bool
    DeallocPCrashReporter(PCrashReporterChild* actor) = 0;
    virtual PHalChild*
    AllocPHal() = 0;
    virtual bool
    DeallocPHal(PHalChild* actor) = 0;
    virtual PIndexedDBChild*
    AllocPIndexedDB() = 0;
    virtual bool
    DeallocPIndexedDB(PIndexedDBChild* actor) = 0;
    virtual PNeckoChild*
    AllocPNecko() = 0;
    virtual bool
    DeallocPNecko(PNeckoChild* actor) = 0;
    virtual PSmsChild*
    AllocPSms() = 0;
    virtual bool
    DeallocPSms(PSmsChild* actor) = 0;
    virtual PStorageChild*
    AllocPStorage(const StorageConstructData& data) = 0;
    virtual bool
    DeallocPStorage(PStorageChild* actor) = 0;
    virtual PBluetoothChild*
    AllocPBluetooth() = 0;
    virtual bool
    DeallocPBluetooth(PBluetoothChild* actor) = 0;
    virtual PExternalHelperAppChild*
    AllocPExternalHelperApp(
            const OptionalURIParams& uri,
            const nsCString& aMimeContentType,
            const nsCString& aContentDisposition,
            const bool& aForceSave,
            const int64_t& aContentLength,
            const OptionalURIParams& aReferrer) = 0;
    virtual bool
    DeallocPExternalHelperApp(PExternalHelperAppChild* actor) = 0;
    virtual PCompositorChild*
    AllocPCompositor(
            Transport* transport,
            ProcessId otherProcess) = 0;
    virtual PImageBridgeChild*
    AllocPImageBridge(
            Transport* transport,
            ProcessId otherProcess) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

    virtual void
    ProcessingError(Result code);
    virtual bool
    ShouldContinueFromReplyTimeout();
    virtual void
    EnteredCxxStack();
    virtual void
    ExitedCxxStack();
    virtual void
    EnteredCall();
    virtual void
    ExitedCall();

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PContentChild();

    virtual ~PContentChild();

    bool
    Open(
            Channel::Transport* aTransport,
            ProcessHandle aOtherProcess,
            MessageLoop* aThread = 0,
            AsyncChannel::Side aSide = Channel::Unknown);

    bool
    Open(
            AsyncChannel* aChannel,
            MessageLoop* aMessageLoop,
            AsyncChannel::Side aSide = Channel::Unknown);

    void
    Close();

    void
    SetReplyTimeoutMs(int32_t aTimeoutMs);

    void
    ManagedPBlobChild(InfallibleTArray<PBlobChild*>& aArr) const;
    const InfallibleTArray<PBlobChild*>&
    ManagedPBlobChild() const;

    void
    ManagedPBluetoothChild(InfallibleTArray<PBluetoothChild*>& aArr) const;
    const InfallibleTArray<PBluetoothChild*>&
    ManagedPBluetoothChild() const;

    void
    ManagedPBrowserChild(InfallibleTArray<PBrowserChild*>& aArr) const;
    const InfallibleTArray<PBrowserChild*>&
    ManagedPBrowserChild() const;

    void
    ManagedPCrashReporterChild(InfallibleTArray<PCrashReporterChild*>& aArr) const;
    const InfallibleTArray<PCrashReporterChild*>&
    ManagedPCrashReporterChild() const;

    void
    ManagedPDeviceStorageRequestChild(InfallibleTArray<PDeviceStorageRequestChild*>& aArr) const;
    const InfallibleTArray<PDeviceStorageRequestChild*>&
    ManagedPDeviceStorageRequestChild() const;

    void
    ManagedPExternalHelperAppChild(InfallibleTArray<PExternalHelperAppChild*>& aArr) const;
    const InfallibleTArray<PExternalHelperAppChild*>&
    ManagedPExternalHelperAppChild() const;

    void
    ManagedPHalChild(InfallibleTArray<PHalChild*>& aArr) const;
    const InfallibleTArray<PHalChild*>&
    ManagedPHalChild() const;

    void
    ManagedPIndexedDBChild(InfallibleTArray<PIndexedDBChild*>& aArr) const;
    const InfallibleTArray<PIndexedDBChild*>&
    ManagedPIndexedDBChild() const;

    void
    ManagedPMemoryReportRequestChild(InfallibleTArray<PMemoryReportRequestChild*>& aArr) const;
    const InfallibleTArray<PMemoryReportRequestChild*>&
    ManagedPMemoryReportRequestChild() const;

    void
    ManagedPNeckoChild(InfallibleTArray<PNeckoChild*>& aArr) const;
    const InfallibleTArray<PNeckoChild*>&
    ManagedPNeckoChild() const;

    void
    ManagedPSmsChild(InfallibleTArray<PSmsChild*>& aArr) const;
    const InfallibleTArray<PSmsChild*>&
    ManagedPSmsChild() const;

    void
    ManagedPStorageChild(InfallibleTArray<PStorageChild*>& aArr) const;
    const InfallibleTArray<PStorageChild*>&
    ManagedPStorageChild() const;

    void
    ManagedPTestShellChild(InfallibleTArray<PTestShellChild*>& aArr) const;
    const InfallibleTArray<PTestShellChild*>&
    ManagedPTestShellChild() const;

    PContent::State
    state();

    PBrowserChild*
    SendPBrowserConstructor(
            const IPCTabContext& context,
            const uint32_t& chromeFlags);

    PBrowserChild*
    SendPBrowserConstructor(
            PBrowserChild* actor,
            const IPCTabContext& context,
            const uint32_t& chromeFlags);

    PBlobChild*
    SendPBlobConstructor(const BlobConstructorParams& params);

    PBlobChild*
    SendPBlobConstructor(
            PBlobChild* actor,
            const BlobConstructorParams& params);

    bool
    SendGetProcessAttributes(
            uint64_t* id,
            bool* startBackground,
            bool* isForApp,
            bool* isForBrowser);

    bool
    SendGetXPCOMProcessAttributes(bool* isOffline);

    PDeviceStorageRequestChild*
    SendPDeviceStorageRequestConstructor(const DeviceStorageParams& params);

    PDeviceStorageRequestChild*
    SendPDeviceStorageRequestConstructor(
            PDeviceStorageRequestChild* actor,
            const DeviceStorageParams& params);

    PCrashReporterChild*
    SendPCrashReporterConstructor(
            const NativeThreadId& tid,
            const uint32_t& processType);

    PCrashReporterChild*
    SendPCrashReporterConstructor(
            PCrashReporterChild* actor,
            const NativeThreadId& tid,
            const uint32_t& processType);

    PHalChild*
    SendPHalConstructor();

    PHalChild*
    SendPHalConstructor(PHalChild* actor);

    PIndexedDBChild*
    SendPIndexedDBConstructor();

    PIndexedDBChild*
    SendPIndexedDBConstructor(PIndexedDBChild* actor);

    PNeckoChild*
    SendPNeckoConstructor();

    PNeckoChild*
    SendPNeckoConstructor(PNeckoChild* actor);

    PSmsChild*
    SendPSmsConstructor();

    PSmsChild*
    SendPSmsConstructor(PSmsChild* actor);

    PStorageChild*
    SendPStorageConstructor(const StorageConstructData& data);

    PStorageChild*
    SendPStorageConstructor(
            PStorageChild* actor,
            const StorageConstructData& data);

    PBluetoothChild*
    SendPBluetoothConstructor();

    PBluetoothChild*
    SendPBluetoothConstructor(PBluetoothChild* actor);

    bool
    SendStartVisitedQuery(const URIParams& uri);

    bool
    SendVisitURI(
            const URIParams& uri,
            const OptionalURIParams& referrer,
            const uint32_t& flags);

    bool
    SendSetURITitle(
            const URIParams& uri,
            const nsString& title);

    bool
    SendShowFilePicker(
            const int16_t& mode,
            const int16_t& selectedType,
            const bool& addToRecentDocs,
            const nsString& title,
            const nsString& defaultFile,
            const nsString& defaultExtension,
            const InfallibleTArray<nsString>& filters,
            const InfallibleTArray<nsString>& filterNames,
            InfallibleTArray<nsString>* files,
            int16_t* retValue,
            nsresult* result);

    bool
    SendLoadURIExternal(const URIParams& uri);

    bool
    SendReadPrefsArray(InfallibleTArray<PrefSetting>* prefs);

    bool
    SendReadFontList(InfallibleTArray<FontListEntry>* retValue);

    bool
    SendSyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData,
            InfallibleTArray<nsString>* retval);

    bool
    SendShowAlertNotification(
            const nsString& imageUrl,
            const nsString& title,
            const nsString& text,
            const bool& textClickable,
            const nsString& cookie,
            const nsString& name);

    PExternalHelperAppChild*
    SendPExternalHelperAppConstructor(
            const OptionalURIParams& uri,
            const nsCString& aMimeContentType,
            const nsCString& aContentDisposition,
            const bool& aForceSave,
            const int64_t& aContentLength,
            const OptionalURIParams& aReferrer);

    PExternalHelperAppChild*
    SendPExternalHelperAppConstructor(
            PExternalHelperAppChild* actor,
            const OptionalURIParams& uri,
            const nsCString& aMimeContentType,
            const nsCString& aContentDisposition,
            const bool& aForceSave,
            const int64_t& aContentLength,
            const OptionalURIParams& aReferrer);

    bool
    SendAddGeolocationListener(const Principal& principal);

    bool
    SendRemoveGeolocationListener();

    bool
    SendSetGeolocationHigherAccuracy(const bool& enable);

    bool
    SendConsoleMessage(const nsString& message);

    bool
    SendScriptError(
            const nsString& message,
            const nsString& sourceName,
            const nsString& sourceLine,
            const uint32_t& lineNumber,
            const uint32_t& colNumber,
            const uint32_t& flags,
            const nsCString& category);

    bool
    SendReadPermissions(InfallibleTArray<Permission>* permissions);

    bool
    SendSetClipboardText(
            const nsString& text,
            const bool& isPrivateData,
            const int32_t& whichClipboard);

    bool
    SendGetClipboardText(
            const int32_t& whichClipboard,
            nsString* text);

    bool
    SendEmptyClipboard();

    bool
    SendClipboardHasText(bool* hasText);

    bool
    SendGetSystemColors(
            const uint32_t& colorsCount,
            InfallibleTArray<uint32_t>* colors);

    bool
    SendGetIconForExtension(
            const nsCString& aFileExt,
            const uint32_t& aIconSize,
            InfallibleTArray<uint8_t>* bits);

    bool
    SendGetShowPasswordSetting(bool* showPassword);

    bool
    SendPrivateDocShellsExist(const bool& aExist);

    bool
    SendFirstIdle();

    bool
    SendAudioChannelGetMuted(
            const AudioChannelType& aType,
            const bool& aMozHidden,
            bool* value);

    bool
    SendAudioChannelRegisterType(const AudioChannelType& aType);

    bool
    SendAudioChannelUnregisterType(const AudioChannelType& aType);

    bool
    SendAsyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData);

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnEnteredCxxStack();
    void
    OnExitedCxxStack();
    void
    OnEnteredCall();
    void
    OnExitedCall();
    bool
    IsOnCxxStack() const;
    void
    FlushPendingRPCQueue();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

    void
    ProcessNativeEventsInRPCCall();

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    void
    DeallocShmems();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const BlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            BlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const IPCTabContext& __v,
            Message* __msg);

    bool
    Read(
            IPCTabContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OptionalURIParams& __v,
            Message* __msg);

    bool
    Read(
            OptionalURIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PIndexedDBChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PIndexedDBChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StandardURLParams& __v,
            Message* __msg);

    bool
    Read(
            StandardURLParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const URIParams& __v,
            Message* __msg);

    bool
    Read(
            URIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBlobChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBlobChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<FontListEntry>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<FontListEntry>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PCrashReporterChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PCrashReporterChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PSmsChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PSmsChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const IPCTabAppBrowserContext& __v,
            Message* __msg);

    bool
    Read(
            IPCTabAppBrowserContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const BrowserFrameIPCTabContext& __v,
            Message* __msg);

    bool
    Read(
            BrowserFrameIPCTabContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<PrefSetting>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<PrefSetting>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const PrefValue& __v,
            Message* __msg);

    bool
    Read(
            PrefValue* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PExternalHelperAppChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PExternalHelperAppChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const FontListEntry& __v,
            Message* __msg);

    bool
    Read(
            FontListEntry* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageEnumerationParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageEnumerationParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const VanillaFrameIPCTabContext& __v,
            Message* __msg);

    bool
    Read(
            VanillaFrameIPCTabContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PTestShellChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PTestShellChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PMemoryReportRequestChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PMemoryReportRequestChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const GenericURIParams& __v,
            Message* __msg);

    bool
    Read(
            GenericURIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageGetParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageGetParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageAddParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageAddParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SlicedBlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            SlicedBlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const MaybePrefValue& __v,
            Message* __msg);

    bool
    Read(
            MaybePrefValue* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PNeckoChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PNeckoChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ClonedMessageData& __v,
            Message* __msg);

    bool
    Read(
            ClonedMessageData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<PBlobChild*>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<PBlobChild*>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PDeviceStorageRequestChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PDeviceStorageRequestChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const NormalBlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            NormalBlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageStatParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageStatParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StorageClone& __v,
            Message* __msg);

    bool
    Read(
            StorageClone* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const JARURIParams& __v,
            Message* __msg);

    bool
    Read(
            JARURIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const MysteryBlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            MysteryBlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBluetoothChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBluetoothChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const PopupIPCTabContext& __v,
            Message* __msg);

    bool
    Read(
            PopupIPCTabContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SimpleURIParams& __v,
            Message* __msg);

    bool
    Read(
            SimpleURIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StorageConstructData& __v,
            Message* __msg);

    bool
    Read(
            StorageConstructData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PStorageChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PStorageChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBrowserChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBrowserChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageDeleteParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageDeleteParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const PrefSetting& __v,
            Message* __msg);

    bool
    Read(
            PrefSetting* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PHalChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PHalChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StandardURLSegment& __v,
            Message* __msg);

    bool
    Read(
            StandardURLSegment* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const FileBlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            FileBlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const AppFrameIPCTabContext& __v,
            Message* __msg);

    bool
    Read(
            AppFrameIPCTabContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    Channel mChannel;
    IDMap<ChannelListener> mActorMap;
    int32_t mLastRouteId;
    ProcessHandle mOtherProcess;
    IDMap<Shmem::SharedMemory> mShmemMap;
    Shmem::id_t mLastShmemId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PBlobChild*> mManagedPBlobChild;
    // Sorted by pointer value
    InfallibleTArray<PBluetoothChild*> mManagedPBluetoothChild;
    // Sorted by pointer value
    InfallibleTArray<PBrowserChild*> mManagedPBrowserChild;
    // Sorted by pointer value
    InfallibleTArray<PCrashReporterChild*> mManagedPCrashReporterChild;
    // Sorted by pointer value
    InfallibleTArray<PDeviceStorageRequestChild*> mManagedPDeviceStorageRequestChild;
    // Sorted by pointer value
    InfallibleTArray<PExternalHelperAppChild*> mManagedPExternalHelperAppChild;
    // Sorted by pointer value
    InfallibleTArray<PHalChild*> mManagedPHalChild;
    // Sorted by pointer value
    InfallibleTArray<PIndexedDBChild*> mManagedPIndexedDBChild;
    // Sorted by pointer value
    InfallibleTArray<PMemoryReportRequestChild*> mManagedPMemoryReportRequestChild;
    // Sorted by pointer value
    InfallibleTArray<PNeckoChild*> mManagedPNeckoChild;
    // Sorted by pointer value
    InfallibleTArray<PSmsChild*> mManagedPSmsChild;
    // Sorted by pointer value
    InfallibleTArray<PStorageChild*> mManagedPStorageChild;
    // Sorted by pointer value
    InfallibleTArray<PTestShellChild*> mManagedPTestShellChild;
};


} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
class ContentChild :
    public PContentChild
{
    virtual bool
    RecvAudioChannelNotify();

    virtual bool
    RecvDumpMemoryReportsToFile(
            const nsString& identifier,
            const bool& minimizeMemoryUsage,
            const bool& dumpChildProcesses);

    virtual bool
    RecvDumpGCAndCCLogsToFile(
            const nsString& identifier,
            const bool& dumpChildProcesses);

    virtual bool
    RecvRegisterChrome(
            const InfallibleTArray<ChromePackage>& packages,
            const InfallibleTArray<ResourceMapping>& resources,
            const InfallibleTArray<OverrideMapping>& overrides,
            const nsCString& locale);

    virtual bool
    RecvSetOffline(const bool& offline);

    virtual bool
    RecvNotifyVisited(const URIParams& uri);

    virtual bool
    RecvPreferenceUpdate(const PrefSetting& pref);

    virtual bool
    RecvNotifyAlertsObserver(
            const nsCString& topic,
            const nsString& data);

    virtual bool
    RecvGeolocationUpdate(const GeoPosition& somewhere);

    virtual bool
    RecvAddPermission(const Permission& permission);

    virtual bool
    RecvScreenSizeChanged(const gfxIntSize& size);

    virtual bool
    RecvFlushMemory(const nsString& reason);

    virtual bool
    RecvGarbageCollect();

    virtual bool
    RecvCycleCollect();

    virtual bool
    RecvActivateA11y();

    virtual bool
    RecvAppInfo(
            const nsCString& version,
            const nsCString& buildID);

    virtual bool
    RecvLastPrivateDocShellDestroyed();

    virtual bool
    RecvFilePathUpdate(
            const nsString& type,
            const nsString& filepath,
            const nsCString& reasons);

    virtual bool
    RecvFileSystemUpdate(
            const nsString& fsName,
            const nsString& mountPoint,
            const int32_t& fsState);

    virtual bool
    RecvAsyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData);

    virtual PBrowserChild*
    AllocPBrowser(
            const IPCTabContext& context,
            const uint32_t& chromeFlags);

    virtual bool
    DeallocPBrowser(PBrowserChild* actor);

    virtual PBlobChild*
    AllocPBlob(const BlobConstructorParams& params);

    virtual bool
    DeallocPBlob(PBlobChild* actor);

    virtual PMemoryReportRequestChild*
    AllocPMemoryReportRequest();

    virtual bool
    DeallocPMemoryReportRequest(PMemoryReportRequestChild* actor);

    virtual PTestShellChild*
    AllocPTestShell();

    virtual bool
    DeallocPTestShell(PTestShellChild* actor);

    virtual PDeviceStorageRequestChild*
    AllocPDeviceStorageRequest(const DeviceStorageParams& params);

    virtual bool
    DeallocPDeviceStorageRequest(PDeviceStorageRequestChild* actor);

    virtual PCrashReporterChild*
    AllocPCrashReporter(
            const NativeThreadId& tid,
            const uint32_t& processType);

    virtual bool
    DeallocPCrashReporter(PCrashReporterChild* actor);

    virtual PHalChild*
    AllocPHal();

    virtual bool
    DeallocPHal(PHalChild* actor);

    virtual PIndexedDBChild*
    AllocPIndexedDB();

    virtual bool
    DeallocPIndexedDB(PIndexedDBChild* actor);

    virtual PNeckoChild*
    AllocPNecko();

    virtual bool
    DeallocPNecko(PNeckoChild* actor);

    virtual PSmsChild*
    AllocPSms();

    virtual bool
    DeallocPSms(PSmsChild* actor);

    virtual PStorageChild*
    AllocPStorage(const StorageConstructData& data);

    virtual bool
    DeallocPStorage(PStorageChild* actor);

    virtual PBluetoothChild*
    AllocPBluetooth();

    virtual bool
    DeallocPBluetooth(PBluetoothChild* actor);

    virtual PExternalHelperAppChild*
    AllocPExternalHelperApp(
            const OptionalURIParams& uri,
            const nsCString& aMimeContentType,
            const nsCString& aContentDisposition,
            const bool& aForceSave,
            const int64_t& aContentLength,
            const OptionalURIParams& aReferrer);

    virtual bool
    DeallocPExternalHelperApp(PExternalHelperAppChild* actor);

    virtual PCompositorChild*
    AllocPCompositor(
            Transport* transport,
            ProcessId otherProcess);

    virtual PImageBridgeChild*
    AllocPImageBridge(
            Transport* transport,
            ProcessId otherProcess);

    ContentChild();
    virtual ~ContentChild();
};
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
bool
ContentChild::RecvAudioChannelNotify()
{
    return false;
}

bool
ContentChild::RecvDumpMemoryReportsToFile(
        const nsString& identifier,
        const bool& minimizeMemoryUsage,
        const bool& dumpChildProcesses)
{
    return false;
}

bool
ContentChild::RecvDumpGCAndCCLogsToFile(
        const nsString& identifier,
        const bool& dumpChildProcesses)
{
    return false;
}

bool
ContentChild::RecvRegisterChrome(
        const InfallibleTArray<ChromePackage>& packages,
        const InfallibleTArray<ResourceMapping>& resources,
        const InfallibleTArray<OverrideMapping>& overrides,
        const nsCString& locale)
{
    return false;
}

bool
ContentChild::RecvSetOffline(const bool& offline)
{
    return false;
}

bool
ContentChild::RecvNotifyVisited(const URIParams& uri)
{
    return false;
}

bool
ContentChild::RecvPreferenceUpdate(const PrefSetting& pref)
{
    return false;
}

bool
ContentChild::RecvNotifyAlertsObserver(
        const nsCString& topic,
        const nsString& data)
{
    return false;
}

bool
ContentChild::RecvGeolocationUpdate(const GeoPosition& somewhere)
{
    return false;
}

bool
ContentChild::RecvAddPermission(const Permission& permission)
{
    return false;
}

bool
ContentChild::RecvScreenSizeChanged(const gfxIntSize& size)
{
    return false;
}

bool
ContentChild::RecvFlushMemory(const nsString& reason)
{
    return false;
}

bool
ContentChild::RecvGarbageCollect()
{
    return false;
}

bool
ContentChild::RecvCycleCollect()
{
    return false;
}

bool
ContentChild::RecvActivateA11y()
{
    return false;
}

bool
ContentChild::RecvAppInfo(
        const nsCString& version,
        const nsCString& buildID)
{
    return false;
}

bool
ContentChild::RecvLastPrivateDocShellDestroyed()
{
    return false;
}

bool
ContentChild::RecvFilePathUpdate(
        const nsString& type,
        const nsString& filepath,
        const nsCString& reasons)
{
    return false;
}

bool
ContentChild::RecvFileSystemUpdate(
        const nsString& fsName,
        const nsString& mountPoint,
        const int32_t& fsState)
{
    return false;
}

bool
ContentChild::RecvAsyncMessage(
        const nsString& aMessage,
        const ClonedMessageData& aData)
{
    return false;
}

PBrowserChild*
ContentChild::AllocPBrowser(
        const IPCTabContext& context,
        const uint32_t& chromeFlags)
{
    return 0;
}

bool
ContentChild::DeallocPBrowser(PBrowserChild* actor)
{
    return false;
}

PBlobChild*
ContentChild::AllocPBlob(const BlobConstructorParams& params)
{
    return 0;
}

bool
ContentChild::DeallocPBlob(PBlobChild* actor)
{
    return false;
}

PMemoryReportRequestChild*
ContentChild::AllocPMemoryReportRequest()
{
    return 0;
}

bool
ContentChild::DeallocPMemoryReportRequest(PMemoryReportRequestChild* actor)
{
    return false;
}

PTestShellChild*
ContentChild::AllocPTestShell()
{
    return 0;
}

bool
ContentChild::DeallocPTestShell(PTestShellChild* actor)
{
    return false;
}

PDeviceStorageRequestChild*
ContentChild::AllocPDeviceStorageRequest(const DeviceStorageParams& params)
{
    return 0;
}

bool
ContentChild::DeallocPDeviceStorageRequest(PDeviceStorageRequestChild* actor)
{
    return false;
}

PCrashReporterChild*
ContentChild::AllocPCrashReporter(
        const NativeThreadId& tid,
        const uint32_t& processType)
{
    return 0;
}

bool
ContentChild::DeallocPCrashReporter(PCrashReporterChild* actor)
{
    return false;
}

PHalChild*
ContentChild::AllocPHal()
{
    return 0;
}

bool
ContentChild::DeallocPHal(PHalChild* actor)
{
    return false;
}

PIndexedDBChild*
ContentChild::AllocPIndexedDB()
{
    return 0;
}

bool
ContentChild::DeallocPIndexedDB(PIndexedDBChild* actor)
{
    return false;
}

PNeckoChild*
ContentChild::AllocPNecko()
{
    return 0;
}

bool
ContentChild::DeallocPNecko(PNeckoChild* actor)
{
    return false;
}

PSmsChild*
ContentChild::AllocPSms()
{
    return 0;
}

bool
ContentChild::DeallocPSms(PSmsChild* actor)
{
    return false;
}

PStorageChild*
ContentChild::AllocPStorage(const StorageConstructData& data)
{
    return 0;
}

bool
ContentChild::DeallocPStorage(PStorageChild* actor)
{
    return false;
}

PBluetoothChild*
ContentChild::AllocPBluetooth()
{
    return 0;
}

bool
ContentChild::DeallocPBluetooth(PBluetoothChild* actor)
{
    return false;
}

PExternalHelperAppChild*
ContentChild::AllocPExternalHelperApp(
        const OptionalURIParams& uri,
        const nsCString& aMimeContentType,
        const nsCString& aContentDisposition,
        const bool& aForceSave,
        const int64_t& aContentLength,
        const OptionalURIParams& aReferrer)
{
    return 0;
}

bool
ContentChild::DeallocPExternalHelperApp(PExternalHelperAppChild* actor)
{
    return false;
}

PCompositorChild*
ContentChild::AllocPCompositor(
        Transport* transport,
        ProcessId otherProcess)
{
    return 0;
}

PImageBridgeChild*
ContentChild::AllocPImageBridge(
        Transport* transport,
        ProcessId otherProcess)
{
    return 0;
}

ContentChild::ContentChild()
{
    MOZ_COUNT_CTOR(ContentChild);
}

ContentChild::~ContentChild()
{
    MOZ_COUNT_DTOR(ContentChild);
}

} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PContentChild_h
