//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBlob_h
#define PBlob_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/dom/DOMTypes.h"

namespace mozilla {
namespace dom {
class NormalBlobConstructorParams;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class FileBlobConstructorParams;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union ResolveMysteryParams|
//
namespace mozilla {
namespace dom {
class ResolveMysteryParams MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TNormalBlobConstructorParams = 1,
        TFileBlobConstructorParams,
        T__Last = TFileBlobConstructorParams
    };

private:
    typedef mozilla::dom::NormalBlobConstructorParams NormalBlobConstructorParams;
    typedef mozilla::dom::FileBlobConstructorParams FileBlobConstructorParams;
    typedef NormalBlobConstructorParams NormalBlobConstructorParams__tdef;
    typedef FileBlobConstructorParams FileBlobConstructorParams__tdef;

    union Value {
        char VNormalBlobConstructorParams[sizeof(NormalBlobConstructorParams)];
        char VFileBlobConstructorParams[sizeof(FileBlobConstructorParams)];
    };

    NormalBlobConstructorParams*
    ptr_NormalBlobConstructorParams()
    {
        return reinterpret_cast<NormalBlobConstructorParams*>((&((mValue).VNormalBlobConstructorParams)));
    }
    const NormalBlobConstructorParams* const
    constptr_NormalBlobConstructorParams() const
    {
        return reinterpret_cast<const NormalBlobConstructorParams* const>((&((mValue).VNormalBlobConstructorParams)));
    }
    FileBlobConstructorParams*
    ptr_FileBlobConstructorParams()
    {
        return reinterpret_cast<FileBlobConstructorParams*>((&((mValue).VFileBlobConstructorParams)));
    }
    const FileBlobConstructorParams* const
    constptr_FileBlobConstructorParams() const
    {
        return reinterpret_cast<const FileBlobConstructorParams* const>((&((mValue).VFileBlobConstructorParams)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    ResolveMysteryParams() :
        mType(T__None)
    {
    }

    ResolveMysteryParams(const NormalBlobConstructorParams& aOther);

    ResolveMysteryParams(const FileBlobConstructorParams& aOther);

    ResolveMysteryParams(const ResolveMysteryParams& aOther);

    ~ResolveMysteryParams();

    Type
    type() const
    {
        return mType;
    }

    ResolveMysteryParams&
    operator=(const NormalBlobConstructorParams& aRhs);

    ResolveMysteryParams&
    operator=(const FileBlobConstructorParams& aRhs);

    ResolveMysteryParams&
    operator=(const ResolveMysteryParams& aRhs);

    bool
    operator==(const NormalBlobConstructorParams& aRhs) const;

    bool
    operator==(const FileBlobConstructorParams& aRhs) const;

    bool
    operator==(const ResolveMysteryParams& aRhs) const;

    NormalBlobConstructorParams&
    get_NormalBlobConstructorParams()
    {
        AssertSanity(TNormalBlobConstructorParams);
        return (*(ptr_NormalBlobConstructorParams()));
    }
    const NormalBlobConstructorParams&
    get_NormalBlobConstructorParams() const
    {
        AssertSanity(TNormalBlobConstructorParams);
        return (*(constptr_NormalBlobConstructorParams()));
    }
    operator NormalBlobConstructorParams&()
    {
        return get_NormalBlobConstructorParams();
    }
    operator const NormalBlobConstructorParams&() const
    {
        return get_NormalBlobConstructorParams();
    }

    FileBlobConstructorParams&
    get_FileBlobConstructorParams()
    {
        AssertSanity(TFileBlobConstructorParams);
        return (*(ptr_FileBlobConstructorParams()));
    }
    const FileBlobConstructorParams&
    get_FileBlobConstructorParams() const
    {
        AssertSanity(TFileBlobConstructorParams);
        return (*(constptr_FileBlobConstructorParams()));
    }
    operator FileBlobConstructorParams&()
    {
        return get_FileBlobConstructorParams();
    }
    operator const FileBlobConstructorParams&() const
    {
        return get_FileBlobConstructorParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBlobChild and PBlobParent
//
namespace mozilla {
namespace dom {
namespace PBlob {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PBlobStart = PBlobMsgStart << 16,
    PBlobPreStart = (PBlobMsgStart << 16) - 1,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_PBlobStreamConstructor__ID,
    Reply_PBlobStreamConstructor__ID,
    Msg_ResolveMystery__ID,
    PBlobEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::FileBlobConstructorParams FileBlobConstructorParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::NormalBlobConstructorParams NormalBlobConstructorParams;
    typedef mozilla::dom::ResolveMysteryParams ResolveMysteryParams;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBlob::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::FileBlobConstructorParams FileBlobConstructorParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::NormalBlobConstructorParams NormalBlobConstructorParams;
    typedef mozilla::dom::ResolveMysteryParams ResolveMysteryParams;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBlob::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PBlobStreamConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::FileBlobConstructorParams FileBlobConstructorParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::NormalBlobConstructorParams NormalBlobConstructorParams;
    typedef mozilla::dom::ResolveMysteryParams ResolveMysteryParams;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_PBlobStreamConstructor__ID
    };
    Msg_PBlobStreamConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBlob::Msg_PBlobStreamConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PBlobStreamConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PBlobStreamConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::FileBlobConstructorParams FileBlobConstructorParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::NormalBlobConstructorParams NormalBlobConstructorParams;
    typedef mozilla::dom::ResolveMysteryParams ResolveMysteryParams;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_PBlobStreamConstructor__ID
    };
    Reply_PBlobStreamConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBlob::Reply_PBlobStreamConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PBlobStreamConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_ResolveMystery :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::FileBlobConstructorParams FileBlobConstructorParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::NormalBlobConstructorParams NormalBlobConstructorParams;
    typedef mozilla::dom::ResolveMysteryParams ResolveMysteryParams;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_ResolveMystery__ID
    };
    Msg_ResolveMystery() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBlob::Msg_ResolveMystery")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_ResolveMystery(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PBlob
} // namespace dom
} // namespace mozilla

#endif // ifndef PBlob_h
