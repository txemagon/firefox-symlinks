//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBluetoothParent_h
#define PBluetoothParent_h

#include "mozilla/dom/bluetooth/PBluetooth.h"
namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace bluetooth {
class PBluetoothRequestParent;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace bluetooth {
class PBluetoothRequestParent;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace bluetooth {


class /*NS_ABSTRACT_CLASS*/ PBluetoothParent :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::dom::PContentParent;

    friend class mozilla::dom::bluetooth::PBluetoothRequestParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::bluetooth::PBluetoothRequestParent PBluetoothRequestParent;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PBluetooth::State State;

    virtual bool
    Recv__delete__();
    virtual bool
    RecvRegisterSignalHandler(const nsString& node) = 0;
    virtual bool
    RecvUnregisterSignalHandler(const nsString& node) = 0;
    virtual bool
    RecvStopNotifying() = 0;
    virtual bool
    RecvPBluetoothRequestConstructor(
            PBluetoothRequestParent* actor,
            const Request& request);
    virtual PBluetoothRequestParent*
    AllocPBluetoothRequest(const Request& request) = 0;
    virtual bool
    DeallocPBluetoothRequest(PBluetoothRequestParent* actor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PBluetoothParent();

    virtual ~PBluetoothParent();

    PContentParent*
    Manager() const;

    void
    ManagedPBluetoothRequestParent(InfallibleTArray<PBluetoothRequestParent*>& aArr) const;
    const InfallibleTArray<PBluetoothRequestParent*>&
    ManagedPBluetoothRequestParent() const;

    PBluetooth::State
    state();

    bool
    SendEnabled(const bool& enabled) NS_WARN_UNUSED_RESULT;

    bool
    SendNotify(const BluetoothSignal& signal) NS_WARN_UNUSED_RESULT;

    bool
    SendBeginShutdown() NS_WARN_UNUSED_RESULT;

    bool
    SendNotificationsStopped() NS_WARN_UNUSED_RESULT;

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const DefaultAdapterPathRequest& __v,
            Message* __msg);

    bool
    Read(
            DefaultAdapterPathRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ConfirmReceivingFileRequest& __v,
            Message* __msg);

    bool
    Read(
            ConfirmReceivingFileRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ConfirmAuthorizationRequest& __v,
            Message* __msg);

    bool
    Read(
            ConfirmAuthorizationRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const PairRequest& __v,
            Message* __msg);

    bool
    Read(
            PairRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBlobParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBlobParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const UnpairRequest& __v,
            Message* __msg);

    bool
    Read(
            UnpairRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ConnectRequest& __v,
            Message* __msg);

    bool
    Read(
            ConnectRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const BluetoothNamedValue& __v,
            Message* __msg);

    bool
    Read(
            BluetoothNamedValue* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DisconnectRequest& __v,
            Message* __msg);

    bool
    Read(
            DisconnectRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SetPasskeyRequest& __v,
            Message* __msg);

    bool
    Read(
            SetPasskeyRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBluetoothRequestParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBluetoothRequestParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const GetPropertyRequest& __v,
            Message* __msg);

    bool
    Read(
            GetPropertyRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SetPinCodeRequest& __v,
            Message* __msg);

    bool
    Read(
            SetPinCodeRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DenyAuthorizationRequest& __v,
            Message* __msg);

    bool
    Read(
            DenyAuthorizationRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DenyPairingConfirmationRequest& __v,
            Message* __msg);

    bool
    Read(
            DenyPairingConfirmationRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SendFileRequest& __v,
            Message* __msg);

    bool
    Read(
            SendFileRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DevicePropertiesRequest& __v,
            Message* __msg);

    bool
    Read(
            DevicePropertiesRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBluetoothParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBluetoothParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<BluetoothNamedValue>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<BluetoothNamedValue>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StopSendingFileRequest& __v,
            Message* __msg);

    bool
    Read(
            StopSendingFileRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ConfirmPairingConfirmationRequest& __v,
            Message* __msg);

    bool
    Read(
            ConfirmPairingConfirmationRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DenyReceivingFileRequest& __v,
            Message* __msg);

    bool
    Read(
            DenyReceivingFileRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StartDiscoveryRequest& __v,
            Message* __msg);

    bool
    Read(
            StartDiscoveryRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const Request& __v,
            Message* __msg);

    bool
    Read(
            Request* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const BluetoothSignal& __v,
            Message* __msg);

    bool
    Read(
            BluetoothSignal* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StopDiscoveryRequest& __v,
            Message* __msg);

    bool
    Read(
            StopDiscoveryRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const BluetoothValue& __v,
            Message* __msg);

    bool
    Read(
            BluetoothValue* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SetPropertyRequest& __v,
            Message* __msg);

    bool
    Read(
            SetPropertyRequest* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PBluetoothRequestParent*> mManagedPBluetoothRequestParent;
};


} // namespace bluetooth
} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
namespace bluetooth {
class BluetoothParent :
    public PBluetoothParent
{
    virtual bool
    RecvRegisterSignalHandler(const nsString& node);

    virtual bool
    RecvUnregisterSignalHandler(const nsString& node);

    virtual bool
    RecvStopNotifying();

    virtual PBluetoothRequestParent*
    AllocPBluetoothRequest(const Request& request);

    virtual bool
    DeallocPBluetoothRequest(PBluetoothRequestParent* actor);

    BluetoothParent();
    virtual ~BluetoothParent();
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
namespace bluetooth {
bool
BluetoothParent::RecvRegisterSignalHandler(const nsString& node)
{
    return false;
}

bool
BluetoothParent::RecvUnregisterSignalHandler(const nsString& node)
{
    return false;
}

bool
BluetoothParent::RecvStopNotifying()
{
    return false;
}

PBluetoothRequestParent*
BluetoothParent::AllocPBluetoothRequest(const Request& request)
{
    return 0;
}

bool
BluetoothParent::DeallocPBluetoothRequest(PBluetoothRequestParent* actor)
{
    return false;
}

BluetoothParent::BluetoothParent()
{
    MOZ_COUNT_CTOR(BluetoothParent);
}

BluetoothParent::~BluetoothParent()
{
    MOZ_COUNT_DTOR(BluetoothParent);
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PBluetoothParent_h
