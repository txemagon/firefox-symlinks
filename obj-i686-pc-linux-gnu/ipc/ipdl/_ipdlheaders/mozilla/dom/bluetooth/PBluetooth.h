//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBluetooth_h
#define PBluetooth_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/dom/bluetooth/ipc/BluetoothMessageUtils.h"
#include "mozilla/dom/bluetooth/BluetoothTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DefaultAdapterPathRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class DefaultAdapterPathRequest MOZ_FINAL
{
private:

public:
    DefaultAdapterPathRequest()
    {
        Init();
        Assign();
    }

    DefaultAdapterPathRequest(const DefaultAdapterPathRequest& _o)
    {
        Init();
        Assign();
    }

    ~DefaultAdapterPathRequest();

    void
    operator=(const DefaultAdapterPathRequest& _o)
    {
        Assign();
    }

    bool
    operator==(const DefaultAdapterPathRequest& _o) const;

private:
    void
    Init();

    void
    Assign();

};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace bluetooth {
class BluetoothNamedValue;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SetPropertyRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class SetPropertyRequest MOZ_FINAL
{
private:
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;

public:
    SetPropertyRequest();

    SetPropertyRequest(
            const BluetoothObjectType& _type,
            const nsString& _path,
            const BluetoothNamedValue& _value)
    {
        Init();
        Assign(_type, _path, _value);
    }

    SetPropertyRequest(const SetPropertyRequest& _o)
    {
        Init();
        Assign((_o).type(), (_o).path(), (_o).value());
    }

    ~SetPropertyRequest();

    void
    operator=(const SetPropertyRequest& _o)
    {
        Assign((_o).type(), (_o).path(), (_o).value());
    }

    bool
    operator==(const SetPropertyRequest& _o) const;

    BluetoothObjectType&
    type()
    {
        return type_;
    }
    const BluetoothObjectType&
    type() const
    {
        return type_;
    }

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

    BluetoothNamedValue&
    value()
    {
        return value_;
    }
    const BluetoothNamedValue&
    value() const
    {
        return value_;
    }

private:
    void
    Init();

    void
    Assign(
            const BluetoothObjectType& _type,
            const nsString& _path,
            const BluetoothNamedValue& _value);

    BluetoothObjectType type_;
    nsString path_;
    BluetoothNamedValue value_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetPropertyRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class GetPropertyRequest MOZ_FINAL
{
private:
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;

public:
    GetPropertyRequest();

    GetPropertyRequest(
            const BluetoothObjectType& _type,
            const nsString& _path)
    {
        Init();
        Assign(_type, _path);
    }

    GetPropertyRequest(const GetPropertyRequest& _o)
    {
        Init();
        Assign((_o).type(), (_o).path());
    }

    ~GetPropertyRequest();

    void
    operator=(const GetPropertyRequest& _o)
    {
        Assign((_o).type(), (_o).path());
    }

    bool
    operator==(const GetPropertyRequest& _o) const;

    BluetoothObjectType&
    type()
    {
        return type_;
    }
    const BluetoothObjectType&
    type() const
    {
        return type_;
    }

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

private:
    void
    Init();

    void
    Assign(
            const BluetoothObjectType& _type,
            const nsString& _path);

    BluetoothObjectType type_;
    nsString path_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct StartDiscoveryRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class StartDiscoveryRequest MOZ_FINAL
{
private:

public:
    StartDiscoveryRequest();

    StartDiscoveryRequest(const nsString& _path)
    {
        Init();
        Assign(_path);
    }

    StartDiscoveryRequest(const StartDiscoveryRequest& _o)
    {
        Init();
        Assign((_o).path());
    }

    ~StartDiscoveryRequest();

    void
    operator=(const StartDiscoveryRequest& _o)
    {
        Assign((_o).path());
    }

    bool
    operator==(const StartDiscoveryRequest& _o) const;

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _path);

    nsString path_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct StopDiscoveryRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class StopDiscoveryRequest MOZ_FINAL
{
private:

public:
    StopDiscoveryRequest();

    StopDiscoveryRequest(const nsString& _path)
    {
        Init();
        Assign(_path);
    }

    StopDiscoveryRequest(const StopDiscoveryRequest& _o)
    {
        Init();
        Assign((_o).path());
    }

    ~StopDiscoveryRequest();

    void
    operator=(const StopDiscoveryRequest& _o)
    {
        Assign((_o).path());
    }

    bool
    operator==(const StopDiscoveryRequest& _o) const;

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _path);

    nsString path_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PairRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class PairRequest MOZ_FINAL
{
private:

public:
    PairRequest();

    PairRequest(
            const nsString& _path,
            const nsString& _address,
            const uint32_t& _timeoutMS)
    {
        Init();
        Assign(_path, _address, _timeoutMS);
    }

    PairRequest(const PairRequest& _o)
    {
        Init();
        Assign((_o).path(), (_o).address(), (_o).timeoutMS());
    }

    ~PairRequest();

    void
    operator=(const PairRequest& _o)
    {
        Assign((_o).path(), (_o).address(), (_o).timeoutMS());
    }

    bool
    operator==(const PairRequest& _o) const;

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

    nsString&
    address()
    {
        return address_;
    }
    const nsString&
    address() const
    {
        return address_;
    }

    uint32_t&
    timeoutMS()
    {
        return timeoutMS_;
    }
    const uint32_t&
    timeoutMS() const
    {
        return timeoutMS_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsString& _path,
            const nsString& _address,
            const uint32_t& _timeoutMS);

    nsString path_;
    nsString address_;
    uint32_t timeoutMS_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct UnpairRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class UnpairRequest MOZ_FINAL
{
private:

public:
    UnpairRequest();

    UnpairRequest(
            const nsString& _path,
            const nsString& _address)
    {
        Init();
        Assign(_path, _address);
    }

    UnpairRequest(const UnpairRequest& _o)
    {
        Init();
        Assign((_o).path(), (_o).address());
    }

    ~UnpairRequest();

    void
    operator=(const UnpairRequest& _o)
    {
        Assign((_o).path(), (_o).address());
    }

    bool
    operator==(const UnpairRequest& _o) const;

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

    nsString&
    address()
    {
        return address_;
    }
    const nsString&
    address() const
    {
        return address_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsString& _path,
            const nsString& _address);

    nsString path_;
    nsString address_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SetPinCodeRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class SetPinCodeRequest MOZ_FINAL
{
private:

public:
    SetPinCodeRequest();

    SetPinCodeRequest(
            const nsString& _path,
            const nsString& _pincode)
    {
        Init();
        Assign(_path, _pincode);
    }

    SetPinCodeRequest(const SetPinCodeRequest& _o)
    {
        Init();
        Assign((_o).path(), (_o).pincode());
    }

    ~SetPinCodeRequest();

    void
    operator=(const SetPinCodeRequest& _o)
    {
        Assign((_o).path(), (_o).pincode());
    }

    bool
    operator==(const SetPinCodeRequest& _o) const;

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

    nsString&
    pincode()
    {
        return pincode_;
    }
    const nsString&
    pincode() const
    {
        return pincode_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsString& _path,
            const nsString& _pincode);

    nsString path_;
    nsString pincode_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SetPasskeyRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class SetPasskeyRequest MOZ_FINAL
{
private:

public:
    SetPasskeyRequest();

    SetPasskeyRequest(
            const nsString& _path,
            const uint32_t& _passkey)
    {
        Init();
        Assign(_path, _passkey);
    }

    SetPasskeyRequest(const SetPasskeyRequest& _o)
    {
        Init();
        Assign((_o).path(), (_o).passkey());
    }

    ~SetPasskeyRequest();

    void
    operator=(const SetPasskeyRequest& _o)
    {
        Assign((_o).path(), (_o).passkey());
    }

    bool
    operator==(const SetPasskeyRequest& _o) const;

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

    uint32_t&
    passkey()
    {
        return passkey_;
    }
    const uint32_t&
    passkey() const
    {
        return passkey_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsString& _path,
            const uint32_t& _passkey);

    nsString path_;
    uint32_t passkey_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ConfirmPairingConfirmationRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class ConfirmPairingConfirmationRequest MOZ_FINAL
{
private:

public:
    ConfirmPairingConfirmationRequest();

    ConfirmPairingConfirmationRequest(const nsString& _path)
    {
        Init();
        Assign(_path);
    }

    ConfirmPairingConfirmationRequest(const ConfirmPairingConfirmationRequest& _o)
    {
        Init();
        Assign((_o).path());
    }

    ~ConfirmPairingConfirmationRequest();

    void
    operator=(const ConfirmPairingConfirmationRequest& _o)
    {
        Assign((_o).path());
    }

    bool
    operator==(const ConfirmPairingConfirmationRequest& _o) const;

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _path);

    nsString path_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DenyPairingConfirmationRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class DenyPairingConfirmationRequest MOZ_FINAL
{
private:

public:
    DenyPairingConfirmationRequest();

    DenyPairingConfirmationRequest(const nsString& _path)
    {
        Init();
        Assign(_path);
    }

    DenyPairingConfirmationRequest(const DenyPairingConfirmationRequest& _o)
    {
        Init();
        Assign((_o).path());
    }

    ~DenyPairingConfirmationRequest();

    void
    operator=(const DenyPairingConfirmationRequest& _o)
    {
        Assign((_o).path());
    }

    bool
    operator==(const DenyPairingConfirmationRequest& _o) const;

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _path);

    nsString path_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ConfirmAuthorizationRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class ConfirmAuthorizationRequest MOZ_FINAL
{
private:

public:
    ConfirmAuthorizationRequest();

    ConfirmAuthorizationRequest(const nsString& _path)
    {
        Init();
        Assign(_path);
    }

    ConfirmAuthorizationRequest(const ConfirmAuthorizationRequest& _o)
    {
        Init();
        Assign((_o).path());
    }

    ~ConfirmAuthorizationRequest();

    void
    operator=(const ConfirmAuthorizationRequest& _o)
    {
        Assign((_o).path());
    }

    bool
    operator==(const ConfirmAuthorizationRequest& _o) const;

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _path);

    nsString path_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DenyAuthorizationRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class DenyAuthorizationRequest MOZ_FINAL
{
private:

public:
    DenyAuthorizationRequest();

    DenyAuthorizationRequest(const nsString& _path)
    {
        Init();
        Assign(_path);
    }

    DenyAuthorizationRequest(const DenyAuthorizationRequest& _o)
    {
        Init();
        Assign((_o).path());
    }

    ~DenyAuthorizationRequest();

    void
    operator=(const DenyAuthorizationRequest& _o)
    {
        Assign((_o).path());
    }

    bool
    operator==(const DenyAuthorizationRequest& _o) const;

    nsString&
    path()
    {
        return path_;
    }
    const nsString&
    path() const
    {
        return path_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _path);

    nsString path_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DevicePropertiesRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class DevicePropertiesRequest MOZ_FINAL
{
private:

public:
    DevicePropertiesRequest();

    DevicePropertiesRequest(const InfallibleTArray<nsString>& _addresses)
    {
        Init();
        Assign(_addresses);
    }

    DevicePropertiesRequest(const DevicePropertiesRequest& _o)
    {
        Init();
        Assign((_o).addresses());
    }

    ~DevicePropertiesRequest();

    void
    operator=(const DevicePropertiesRequest& _o)
    {
        Assign((_o).addresses());
    }

    bool
    operator==(const DevicePropertiesRequest& _o) const;

    InfallibleTArray<nsString>&
    addresses()
    {
        return addresses_;
    }
    const InfallibleTArray<nsString>&
    addresses() const
    {
        return addresses_;
    }

private:
    void
    Init();

    void
    Assign(const InfallibleTArray<nsString>& _addresses);

    InfallibleTArray<nsString> addresses_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ConnectRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class ConnectRequest MOZ_FINAL
{
private:

public:
    ConnectRequest();

    ConnectRequest(
            const nsString& _address,
            const nsString& _adapterPath,
            const uint16_t& _profileId)
    {
        Init();
        Assign(_address, _adapterPath, _profileId);
    }

    ConnectRequest(const ConnectRequest& _o)
    {
        Init();
        Assign((_o).address(), (_o).adapterPath(), (_o).profileId());
    }

    ~ConnectRequest();

    void
    operator=(const ConnectRequest& _o)
    {
        Assign((_o).address(), (_o).adapterPath(), (_o).profileId());
    }

    bool
    operator==(const ConnectRequest& _o) const;

    nsString&
    address()
    {
        return address_;
    }
    const nsString&
    address() const
    {
        return address_;
    }

    nsString&
    adapterPath()
    {
        return adapterPath_;
    }
    const nsString&
    adapterPath() const
    {
        return adapterPath_;
    }

    uint16_t&
    profileId()
    {
        return profileId_;
    }
    const uint16_t&
    profileId() const
    {
        return profileId_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsString& _address,
            const nsString& _adapterPath,
            const uint16_t& _profileId);

    nsString address_;
    nsString adapterPath_;
    uint16_t profileId_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DisconnectRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class DisconnectRequest MOZ_FINAL
{
private:

public:
    DisconnectRequest();

    DisconnectRequest(const uint16_t& _profileId)
    {
        Init();
        Assign(_profileId);
    }

    DisconnectRequest(const DisconnectRequest& _o)
    {
        Init();
        Assign((_o).profileId());
    }

    ~DisconnectRequest();

    void
    operator=(const DisconnectRequest& _o)
    {
        Assign((_o).profileId());
    }

    bool
    operator==(const DisconnectRequest& _o) const;

    uint16_t&
    profileId()
    {
        return profileId_;
    }
    const uint16_t&
    profileId() const
    {
        return profileId_;
    }

private:
    void
    Init();

    void
    Assign(const uint16_t& _profileId);

    uint16_t profileId_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SendFileRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class SendFileRequest MOZ_FINAL
{
private:
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::PBlobChild PBlobChild;

public:
    SendFileRequest();

    SendFileRequest(
            const nsString& _devicePath,
            PBlobParent* _blobParent,
            PBlobChild* _blobChild)
    {
        Init();
        Assign(_devicePath, _blobParent, _blobChild);
    }

    SendFileRequest(const SendFileRequest& _o)
    {
        Init();
        Assign((_o).devicePath(), const_cast<PBlobParent*>((_o).blobParent()), const_cast<PBlobChild*>((_o).blobChild()));
    }

    ~SendFileRequest();

    void
    operator=(const SendFileRequest& _o)
    {
        Assign((_o).devicePath(), const_cast<PBlobParent*>((_o).blobParent()), const_cast<PBlobChild*>((_o).blobChild()));
    }

    bool
    operator==(const SendFileRequest& _o) const;

    nsString&
    devicePath()
    {
        return devicePath_;
    }
    const nsString&
    devicePath() const
    {
        return devicePath_;
    }

    PBlobParent*&
    blobParent()
    {
        return blobParent_;
    }
    PBlobParent*
    blobParent() const
    {
        return blobParent_;
    }

    PBlobChild*&
    blobChild()
    {
        return blobChild_;
    }
    PBlobChild*
    blobChild() const
    {
        return blobChild_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsString& _devicePath,
            PBlobParent* _blobParent,
            PBlobChild* _blobChild);

    nsString devicePath_;
    PBlobParent* blobParent_;
    PBlobChild* blobChild_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct StopSendingFileRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class StopSendingFileRequest MOZ_FINAL
{
private:

public:
    StopSendingFileRequest();

    StopSendingFileRequest(const nsString& _devicePath)
    {
        Init();
        Assign(_devicePath);
    }

    StopSendingFileRequest(const StopSendingFileRequest& _o)
    {
        Init();
        Assign((_o).devicePath());
    }

    ~StopSendingFileRequest();

    void
    operator=(const StopSendingFileRequest& _o)
    {
        Assign((_o).devicePath());
    }

    bool
    operator==(const StopSendingFileRequest& _o) const;

    nsString&
    devicePath()
    {
        return devicePath_;
    }
    const nsString&
    devicePath() const
    {
        return devicePath_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _devicePath);

    nsString devicePath_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ConfirmReceivingFileRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class ConfirmReceivingFileRequest MOZ_FINAL
{
private:

public:
    ConfirmReceivingFileRequest();

    ConfirmReceivingFileRequest(const nsString& _devicePath)
    {
        Init();
        Assign(_devicePath);
    }

    ConfirmReceivingFileRequest(const ConfirmReceivingFileRequest& _o)
    {
        Init();
        Assign((_o).devicePath());
    }

    ~ConfirmReceivingFileRequest();

    void
    operator=(const ConfirmReceivingFileRequest& _o)
    {
        Assign((_o).devicePath());
    }

    bool
    operator==(const ConfirmReceivingFileRequest& _o) const;

    nsString&
    devicePath()
    {
        return devicePath_;
    }
    const nsString&
    devicePath() const
    {
        return devicePath_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _devicePath);

    nsString devicePath_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DenyReceivingFileRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class DenyReceivingFileRequest MOZ_FINAL
{
private:

public:
    DenyReceivingFileRequest();

    DenyReceivingFileRequest(const nsString& _devicePath)
    {
        Init();
        Assign(_devicePath);
    }

    DenyReceivingFileRequest(const DenyReceivingFileRequest& _o)
    {
        Init();
        Assign((_o).devicePath());
    }

    ~DenyReceivingFileRequest();

    void
    operator=(const DenyReceivingFileRequest& _o)
    {
        Assign((_o).devicePath());
    }

    bool
    operator==(const DenyReceivingFileRequest& _o) const;

    nsString&
    devicePath()
    {
        return devicePath_;
    }
    const nsString&
    devicePath() const
    {
        return devicePath_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _devicePath);

    nsString devicePath_;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace bluetooth {
class DefaultAdapterPathRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class SetPropertyRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class GetPropertyRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class StartDiscoveryRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class StopDiscoveryRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class PairRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class UnpairRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class SetPinCodeRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class SetPasskeyRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class ConfirmPairingConfirmationRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class DenyPairingConfirmationRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class ConfirmAuthorizationRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class DenyAuthorizationRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class DevicePropertiesRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class ConnectRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class DisconnectRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class SendFileRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class StopSendingFileRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class ConfirmReceivingFileRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace bluetooth {
class DenyReceivingFileRequest;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union Request|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
class Request MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TDefaultAdapterPathRequest = 1,
        TSetPropertyRequest,
        TGetPropertyRequest,
        TStartDiscoveryRequest,
        TStopDiscoveryRequest,
        TPairRequest,
        TUnpairRequest,
        TSetPinCodeRequest,
        TSetPasskeyRequest,
        TConfirmPairingConfirmationRequest,
        TDenyPairingConfirmationRequest,
        TConfirmAuthorizationRequest,
        TDenyAuthorizationRequest,
        TDevicePropertiesRequest,
        TConnectRequest,
        TDisconnectRequest,
        TSendFileRequest,
        TStopSendingFileRequest,
        TConfirmReceivingFileRequest,
        TDenyReceivingFileRequest,
        T__Last = TDenyReceivingFileRequest
    };

private:
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef DefaultAdapterPathRequest DefaultAdapterPathRequest__tdef;
    typedef SetPropertyRequest SetPropertyRequest__tdef;
    typedef GetPropertyRequest GetPropertyRequest__tdef;
    typedef StartDiscoveryRequest StartDiscoveryRequest__tdef;
    typedef StopDiscoveryRequest StopDiscoveryRequest__tdef;
    typedef PairRequest PairRequest__tdef;
    typedef UnpairRequest UnpairRequest__tdef;
    typedef SetPinCodeRequest SetPinCodeRequest__tdef;
    typedef SetPasskeyRequest SetPasskeyRequest__tdef;
    typedef ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest__tdef;
    typedef DenyPairingConfirmationRequest DenyPairingConfirmationRequest__tdef;
    typedef ConfirmAuthorizationRequest ConfirmAuthorizationRequest__tdef;
    typedef DenyAuthorizationRequest DenyAuthorizationRequest__tdef;
    typedef DevicePropertiesRequest DevicePropertiesRequest__tdef;
    typedef ConnectRequest ConnectRequest__tdef;
    typedef DisconnectRequest DisconnectRequest__tdef;
    typedef SendFileRequest SendFileRequest__tdef;
    typedef StopSendingFileRequest StopSendingFileRequest__tdef;
    typedef ConfirmReceivingFileRequest ConfirmReceivingFileRequest__tdef;
    typedef DenyReceivingFileRequest DenyReceivingFileRequest__tdef;

    union Value {
        char VDefaultAdapterPathRequest[sizeof(DefaultAdapterPathRequest)];
        char VSetPropertyRequest[sizeof(SetPropertyRequest)];
        char VGetPropertyRequest[sizeof(GetPropertyRequest)];
        char VStartDiscoveryRequest[sizeof(StartDiscoveryRequest)];
        char VStopDiscoveryRequest[sizeof(StopDiscoveryRequest)];
        char VPairRequest[sizeof(PairRequest)];
        char VUnpairRequest[sizeof(UnpairRequest)];
        char VSetPinCodeRequest[sizeof(SetPinCodeRequest)];
        char VSetPasskeyRequest[sizeof(SetPasskeyRequest)];
        char VConfirmPairingConfirmationRequest[sizeof(ConfirmPairingConfirmationRequest)];
        char VDenyPairingConfirmationRequest[sizeof(DenyPairingConfirmationRequest)];
        char VConfirmAuthorizationRequest[sizeof(ConfirmAuthorizationRequest)];
        char VDenyAuthorizationRequest[sizeof(DenyAuthorizationRequest)];
        char VDevicePropertiesRequest[sizeof(DevicePropertiesRequest)];
        char VConnectRequest[sizeof(ConnectRequest)];
        char VDisconnectRequest[sizeof(DisconnectRequest)];
        char VSendFileRequest[sizeof(SendFileRequest)];
        char VStopSendingFileRequest[sizeof(StopSendingFileRequest)];
        char VConfirmReceivingFileRequest[sizeof(ConfirmReceivingFileRequest)];
        char VDenyReceivingFileRequest[sizeof(DenyReceivingFileRequest)];
    };

    DefaultAdapterPathRequest*
    ptr_DefaultAdapterPathRequest()
    {
        return reinterpret_cast<DefaultAdapterPathRequest*>((&((mValue).VDefaultAdapterPathRequest)));
    }
    const DefaultAdapterPathRequest* const
    constptr_DefaultAdapterPathRequest() const
    {
        return reinterpret_cast<const DefaultAdapterPathRequest* const>((&((mValue).VDefaultAdapterPathRequest)));
    }
    SetPropertyRequest*
    ptr_SetPropertyRequest()
    {
        return reinterpret_cast<SetPropertyRequest*>((&((mValue).VSetPropertyRequest)));
    }
    const SetPropertyRequest* const
    constptr_SetPropertyRequest() const
    {
        return reinterpret_cast<const SetPropertyRequest* const>((&((mValue).VSetPropertyRequest)));
    }
    GetPropertyRequest*
    ptr_GetPropertyRequest()
    {
        return reinterpret_cast<GetPropertyRequest*>((&((mValue).VGetPropertyRequest)));
    }
    const GetPropertyRequest* const
    constptr_GetPropertyRequest() const
    {
        return reinterpret_cast<const GetPropertyRequest* const>((&((mValue).VGetPropertyRequest)));
    }
    StartDiscoveryRequest*
    ptr_StartDiscoveryRequest()
    {
        return reinterpret_cast<StartDiscoveryRequest*>((&((mValue).VStartDiscoveryRequest)));
    }
    const StartDiscoveryRequest* const
    constptr_StartDiscoveryRequest() const
    {
        return reinterpret_cast<const StartDiscoveryRequest* const>((&((mValue).VStartDiscoveryRequest)));
    }
    StopDiscoveryRequest*
    ptr_StopDiscoveryRequest()
    {
        return reinterpret_cast<StopDiscoveryRequest*>((&((mValue).VStopDiscoveryRequest)));
    }
    const StopDiscoveryRequest* const
    constptr_StopDiscoveryRequest() const
    {
        return reinterpret_cast<const StopDiscoveryRequest* const>((&((mValue).VStopDiscoveryRequest)));
    }
    PairRequest*
    ptr_PairRequest()
    {
        return reinterpret_cast<PairRequest*>((&((mValue).VPairRequest)));
    }
    const PairRequest* const
    constptr_PairRequest() const
    {
        return reinterpret_cast<const PairRequest* const>((&((mValue).VPairRequest)));
    }
    UnpairRequest*
    ptr_UnpairRequest()
    {
        return reinterpret_cast<UnpairRequest*>((&((mValue).VUnpairRequest)));
    }
    const UnpairRequest* const
    constptr_UnpairRequest() const
    {
        return reinterpret_cast<const UnpairRequest* const>((&((mValue).VUnpairRequest)));
    }
    SetPinCodeRequest*
    ptr_SetPinCodeRequest()
    {
        return reinterpret_cast<SetPinCodeRequest*>((&((mValue).VSetPinCodeRequest)));
    }
    const SetPinCodeRequest* const
    constptr_SetPinCodeRequest() const
    {
        return reinterpret_cast<const SetPinCodeRequest* const>((&((mValue).VSetPinCodeRequest)));
    }
    SetPasskeyRequest*
    ptr_SetPasskeyRequest()
    {
        return reinterpret_cast<SetPasskeyRequest*>((&((mValue).VSetPasskeyRequest)));
    }
    const SetPasskeyRequest* const
    constptr_SetPasskeyRequest() const
    {
        return reinterpret_cast<const SetPasskeyRequest* const>((&((mValue).VSetPasskeyRequest)));
    }
    ConfirmPairingConfirmationRequest*
    ptr_ConfirmPairingConfirmationRequest()
    {
        return reinterpret_cast<ConfirmPairingConfirmationRequest*>((&((mValue).VConfirmPairingConfirmationRequest)));
    }
    const ConfirmPairingConfirmationRequest* const
    constptr_ConfirmPairingConfirmationRequest() const
    {
        return reinterpret_cast<const ConfirmPairingConfirmationRequest* const>((&((mValue).VConfirmPairingConfirmationRequest)));
    }
    DenyPairingConfirmationRequest*
    ptr_DenyPairingConfirmationRequest()
    {
        return reinterpret_cast<DenyPairingConfirmationRequest*>((&((mValue).VDenyPairingConfirmationRequest)));
    }
    const DenyPairingConfirmationRequest* const
    constptr_DenyPairingConfirmationRequest() const
    {
        return reinterpret_cast<const DenyPairingConfirmationRequest* const>((&((mValue).VDenyPairingConfirmationRequest)));
    }
    ConfirmAuthorizationRequest*
    ptr_ConfirmAuthorizationRequest()
    {
        return reinterpret_cast<ConfirmAuthorizationRequest*>((&((mValue).VConfirmAuthorizationRequest)));
    }
    const ConfirmAuthorizationRequest* const
    constptr_ConfirmAuthorizationRequest() const
    {
        return reinterpret_cast<const ConfirmAuthorizationRequest* const>((&((mValue).VConfirmAuthorizationRequest)));
    }
    DenyAuthorizationRequest*
    ptr_DenyAuthorizationRequest()
    {
        return reinterpret_cast<DenyAuthorizationRequest*>((&((mValue).VDenyAuthorizationRequest)));
    }
    const DenyAuthorizationRequest* const
    constptr_DenyAuthorizationRequest() const
    {
        return reinterpret_cast<const DenyAuthorizationRequest* const>((&((mValue).VDenyAuthorizationRequest)));
    }
    DevicePropertiesRequest*
    ptr_DevicePropertiesRequest()
    {
        return reinterpret_cast<DevicePropertiesRequest*>((&((mValue).VDevicePropertiesRequest)));
    }
    const DevicePropertiesRequest* const
    constptr_DevicePropertiesRequest() const
    {
        return reinterpret_cast<const DevicePropertiesRequest* const>((&((mValue).VDevicePropertiesRequest)));
    }
    ConnectRequest*
    ptr_ConnectRequest()
    {
        return reinterpret_cast<ConnectRequest*>((&((mValue).VConnectRequest)));
    }
    const ConnectRequest* const
    constptr_ConnectRequest() const
    {
        return reinterpret_cast<const ConnectRequest* const>((&((mValue).VConnectRequest)));
    }
    DisconnectRequest*
    ptr_DisconnectRequest()
    {
        return reinterpret_cast<DisconnectRequest*>((&((mValue).VDisconnectRequest)));
    }
    const DisconnectRequest* const
    constptr_DisconnectRequest() const
    {
        return reinterpret_cast<const DisconnectRequest* const>((&((mValue).VDisconnectRequest)));
    }
    SendFileRequest*
    ptr_SendFileRequest()
    {
        return reinterpret_cast<SendFileRequest*>((&((mValue).VSendFileRequest)));
    }
    const SendFileRequest* const
    constptr_SendFileRequest() const
    {
        return reinterpret_cast<const SendFileRequest* const>((&((mValue).VSendFileRequest)));
    }
    StopSendingFileRequest*
    ptr_StopSendingFileRequest()
    {
        return reinterpret_cast<StopSendingFileRequest*>((&((mValue).VStopSendingFileRequest)));
    }
    const StopSendingFileRequest* const
    constptr_StopSendingFileRequest() const
    {
        return reinterpret_cast<const StopSendingFileRequest* const>((&((mValue).VStopSendingFileRequest)));
    }
    ConfirmReceivingFileRequest*
    ptr_ConfirmReceivingFileRequest()
    {
        return reinterpret_cast<ConfirmReceivingFileRequest*>((&((mValue).VConfirmReceivingFileRequest)));
    }
    const ConfirmReceivingFileRequest* const
    constptr_ConfirmReceivingFileRequest() const
    {
        return reinterpret_cast<const ConfirmReceivingFileRequest* const>((&((mValue).VConfirmReceivingFileRequest)));
    }
    DenyReceivingFileRequest*
    ptr_DenyReceivingFileRequest()
    {
        return reinterpret_cast<DenyReceivingFileRequest*>((&((mValue).VDenyReceivingFileRequest)));
    }
    const DenyReceivingFileRequest* const
    constptr_DenyReceivingFileRequest() const
    {
        return reinterpret_cast<const DenyReceivingFileRequest* const>((&((mValue).VDenyReceivingFileRequest)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    Request() :
        mType(T__None)
    {
    }

    Request(const DefaultAdapterPathRequest& aOther);

    Request(const SetPropertyRequest& aOther);

    Request(const GetPropertyRequest& aOther);

    Request(const StartDiscoveryRequest& aOther);

    Request(const StopDiscoveryRequest& aOther);

    Request(const PairRequest& aOther);

    Request(const UnpairRequest& aOther);

    Request(const SetPinCodeRequest& aOther);

    Request(const SetPasskeyRequest& aOther);

    Request(const ConfirmPairingConfirmationRequest& aOther);

    Request(const DenyPairingConfirmationRequest& aOther);

    Request(const ConfirmAuthorizationRequest& aOther);

    Request(const DenyAuthorizationRequest& aOther);

    Request(const DevicePropertiesRequest& aOther);

    Request(const ConnectRequest& aOther);

    Request(const DisconnectRequest& aOther);

    Request(const SendFileRequest& aOther);

    Request(const StopSendingFileRequest& aOther);

    Request(const ConfirmReceivingFileRequest& aOther);

    Request(const DenyReceivingFileRequest& aOther);

    Request(const Request& aOther);

    ~Request();

    Type
    type() const
    {
        return mType;
    }

    Request&
    operator=(const DefaultAdapterPathRequest& aRhs);

    Request&
    operator=(const SetPropertyRequest& aRhs);

    Request&
    operator=(const GetPropertyRequest& aRhs);

    Request&
    operator=(const StartDiscoveryRequest& aRhs);

    Request&
    operator=(const StopDiscoveryRequest& aRhs);

    Request&
    operator=(const PairRequest& aRhs);

    Request&
    operator=(const UnpairRequest& aRhs);

    Request&
    operator=(const SetPinCodeRequest& aRhs);

    Request&
    operator=(const SetPasskeyRequest& aRhs);

    Request&
    operator=(const ConfirmPairingConfirmationRequest& aRhs);

    Request&
    operator=(const DenyPairingConfirmationRequest& aRhs);

    Request&
    operator=(const ConfirmAuthorizationRequest& aRhs);

    Request&
    operator=(const DenyAuthorizationRequest& aRhs);

    Request&
    operator=(const DevicePropertiesRequest& aRhs);

    Request&
    operator=(const ConnectRequest& aRhs);

    Request&
    operator=(const DisconnectRequest& aRhs);

    Request&
    operator=(const SendFileRequest& aRhs);

    Request&
    operator=(const StopSendingFileRequest& aRhs);

    Request&
    operator=(const ConfirmReceivingFileRequest& aRhs);

    Request&
    operator=(const DenyReceivingFileRequest& aRhs);

    Request&
    operator=(const Request& aRhs);

    bool
    operator==(const DefaultAdapterPathRequest& aRhs) const;

    bool
    operator==(const SetPropertyRequest& aRhs) const;

    bool
    operator==(const GetPropertyRequest& aRhs) const;

    bool
    operator==(const StartDiscoveryRequest& aRhs) const;

    bool
    operator==(const StopDiscoveryRequest& aRhs) const;

    bool
    operator==(const PairRequest& aRhs) const;

    bool
    operator==(const UnpairRequest& aRhs) const;

    bool
    operator==(const SetPinCodeRequest& aRhs) const;

    bool
    operator==(const SetPasskeyRequest& aRhs) const;

    bool
    operator==(const ConfirmPairingConfirmationRequest& aRhs) const;

    bool
    operator==(const DenyPairingConfirmationRequest& aRhs) const;

    bool
    operator==(const ConfirmAuthorizationRequest& aRhs) const;

    bool
    operator==(const DenyAuthorizationRequest& aRhs) const;

    bool
    operator==(const DevicePropertiesRequest& aRhs) const;

    bool
    operator==(const ConnectRequest& aRhs) const;

    bool
    operator==(const DisconnectRequest& aRhs) const;

    bool
    operator==(const SendFileRequest& aRhs) const;

    bool
    operator==(const StopSendingFileRequest& aRhs) const;

    bool
    operator==(const ConfirmReceivingFileRequest& aRhs) const;

    bool
    operator==(const DenyReceivingFileRequest& aRhs) const;

    bool
    operator==(const Request& aRhs) const;

    DefaultAdapterPathRequest&
    get_DefaultAdapterPathRequest()
    {
        AssertSanity(TDefaultAdapterPathRequest);
        return (*(ptr_DefaultAdapterPathRequest()));
    }
    const DefaultAdapterPathRequest&
    get_DefaultAdapterPathRequest() const
    {
        AssertSanity(TDefaultAdapterPathRequest);
        return (*(constptr_DefaultAdapterPathRequest()));
    }
    operator DefaultAdapterPathRequest&()
    {
        return get_DefaultAdapterPathRequest();
    }
    operator const DefaultAdapterPathRequest&() const
    {
        return get_DefaultAdapterPathRequest();
    }

    SetPropertyRequest&
    get_SetPropertyRequest()
    {
        AssertSanity(TSetPropertyRequest);
        return (*(ptr_SetPropertyRequest()));
    }
    const SetPropertyRequest&
    get_SetPropertyRequest() const
    {
        AssertSanity(TSetPropertyRequest);
        return (*(constptr_SetPropertyRequest()));
    }
    operator SetPropertyRequest&()
    {
        return get_SetPropertyRequest();
    }
    operator const SetPropertyRequest&() const
    {
        return get_SetPropertyRequest();
    }

    GetPropertyRequest&
    get_GetPropertyRequest()
    {
        AssertSanity(TGetPropertyRequest);
        return (*(ptr_GetPropertyRequest()));
    }
    const GetPropertyRequest&
    get_GetPropertyRequest() const
    {
        AssertSanity(TGetPropertyRequest);
        return (*(constptr_GetPropertyRequest()));
    }
    operator GetPropertyRequest&()
    {
        return get_GetPropertyRequest();
    }
    operator const GetPropertyRequest&() const
    {
        return get_GetPropertyRequest();
    }

    StartDiscoveryRequest&
    get_StartDiscoveryRequest()
    {
        AssertSanity(TStartDiscoveryRequest);
        return (*(ptr_StartDiscoveryRequest()));
    }
    const StartDiscoveryRequest&
    get_StartDiscoveryRequest() const
    {
        AssertSanity(TStartDiscoveryRequest);
        return (*(constptr_StartDiscoveryRequest()));
    }
    operator StartDiscoveryRequest&()
    {
        return get_StartDiscoveryRequest();
    }
    operator const StartDiscoveryRequest&() const
    {
        return get_StartDiscoveryRequest();
    }

    StopDiscoveryRequest&
    get_StopDiscoveryRequest()
    {
        AssertSanity(TStopDiscoveryRequest);
        return (*(ptr_StopDiscoveryRequest()));
    }
    const StopDiscoveryRequest&
    get_StopDiscoveryRequest() const
    {
        AssertSanity(TStopDiscoveryRequest);
        return (*(constptr_StopDiscoveryRequest()));
    }
    operator StopDiscoveryRequest&()
    {
        return get_StopDiscoveryRequest();
    }
    operator const StopDiscoveryRequest&() const
    {
        return get_StopDiscoveryRequest();
    }

    PairRequest&
    get_PairRequest()
    {
        AssertSanity(TPairRequest);
        return (*(ptr_PairRequest()));
    }
    const PairRequest&
    get_PairRequest() const
    {
        AssertSanity(TPairRequest);
        return (*(constptr_PairRequest()));
    }
    operator PairRequest&()
    {
        return get_PairRequest();
    }
    operator const PairRequest&() const
    {
        return get_PairRequest();
    }

    UnpairRequest&
    get_UnpairRequest()
    {
        AssertSanity(TUnpairRequest);
        return (*(ptr_UnpairRequest()));
    }
    const UnpairRequest&
    get_UnpairRequest() const
    {
        AssertSanity(TUnpairRequest);
        return (*(constptr_UnpairRequest()));
    }
    operator UnpairRequest&()
    {
        return get_UnpairRequest();
    }
    operator const UnpairRequest&() const
    {
        return get_UnpairRequest();
    }

    SetPinCodeRequest&
    get_SetPinCodeRequest()
    {
        AssertSanity(TSetPinCodeRequest);
        return (*(ptr_SetPinCodeRequest()));
    }
    const SetPinCodeRequest&
    get_SetPinCodeRequest() const
    {
        AssertSanity(TSetPinCodeRequest);
        return (*(constptr_SetPinCodeRequest()));
    }
    operator SetPinCodeRequest&()
    {
        return get_SetPinCodeRequest();
    }
    operator const SetPinCodeRequest&() const
    {
        return get_SetPinCodeRequest();
    }

    SetPasskeyRequest&
    get_SetPasskeyRequest()
    {
        AssertSanity(TSetPasskeyRequest);
        return (*(ptr_SetPasskeyRequest()));
    }
    const SetPasskeyRequest&
    get_SetPasskeyRequest() const
    {
        AssertSanity(TSetPasskeyRequest);
        return (*(constptr_SetPasskeyRequest()));
    }
    operator SetPasskeyRequest&()
    {
        return get_SetPasskeyRequest();
    }
    operator const SetPasskeyRequest&() const
    {
        return get_SetPasskeyRequest();
    }

    ConfirmPairingConfirmationRequest&
    get_ConfirmPairingConfirmationRequest()
    {
        AssertSanity(TConfirmPairingConfirmationRequest);
        return (*(ptr_ConfirmPairingConfirmationRequest()));
    }
    const ConfirmPairingConfirmationRequest&
    get_ConfirmPairingConfirmationRequest() const
    {
        AssertSanity(TConfirmPairingConfirmationRequest);
        return (*(constptr_ConfirmPairingConfirmationRequest()));
    }
    operator ConfirmPairingConfirmationRequest&()
    {
        return get_ConfirmPairingConfirmationRequest();
    }
    operator const ConfirmPairingConfirmationRequest&() const
    {
        return get_ConfirmPairingConfirmationRequest();
    }

    DenyPairingConfirmationRequest&
    get_DenyPairingConfirmationRequest()
    {
        AssertSanity(TDenyPairingConfirmationRequest);
        return (*(ptr_DenyPairingConfirmationRequest()));
    }
    const DenyPairingConfirmationRequest&
    get_DenyPairingConfirmationRequest() const
    {
        AssertSanity(TDenyPairingConfirmationRequest);
        return (*(constptr_DenyPairingConfirmationRequest()));
    }
    operator DenyPairingConfirmationRequest&()
    {
        return get_DenyPairingConfirmationRequest();
    }
    operator const DenyPairingConfirmationRequest&() const
    {
        return get_DenyPairingConfirmationRequest();
    }

    ConfirmAuthorizationRequest&
    get_ConfirmAuthorizationRequest()
    {
        AssertSanity(TConfirmAuthorizationRequest);
        return (*(ptr_ConfirmAuthorizationRequest()));
    }
    const ConfirmAuthorizationRequest&
    get_ConfirmAuthorizationRequest() const
    {
        AssertSanity(TConfirmAuthorizationRequest);
        return (*(constptr_ConfirmAuthorizationRequest()));
    }
    operator ConfirmAuthorizationRequest&()
    {
        return get_ConfirmAuthorizationRequest();
    }
    operator const ConfirmAuthorizationRequest&() const
    {
        return get_ConfirmAuthorizationRequest();
    }

    DenyAuthorizationRequest&
    get_DenyAuthorizationRequest()
    {
        AssertSanity(TDenyAuthorizationRequest);
        return (*(ptr_DenyAuthorizationRequest()));
    }
    const DenyAuthorizationRequest&
    get_DenyAuthorizationRequest() const
    {
        AssertSanity(TDenyAuthorizationRequest);
        return (*(constptr_DenyAuthorizationRequest()));
    }
    operator DenyAuthorizationRequest&()
    {
        return get_DenyAuthorizationRequest();
    }
    operator const DenyAuthorizationRequest&() const
    {
        return get_DenyAuthorizationRequest();
    }

    DevicePropertiesRequest&
    get_DevicePropertiesRequest()
    {
        AssertSanity(TDevicePropertiesRequest);
        return (*(ptr_DevicePropertiesRequest()));
    }
    const DevicePropertiesRequest&
    get_DevicePropertiesRequest() const
    {
        AssertSanity(TDevicePropertiesRequest);
        return (*(constptr_DevicePropertiesRequest()));
    }
    operator DevicePropertiesRequest&()
    {
        return get_DevicePropertiesRequest();
    }
    operator const DevicePropertiesRequest&() const
    {
        return get_DevicePropertiesRequest();
    }

    ConnectRequest&
    get_ConnectRequest()
    {
        AssertSanity(TConnectRequest);
        return (*(ptr_ConnectRequest()));
    }
    const ConnectRequest&
    get_ConnectRequest() const
    {
        AssertSanity(TConnectRequest);
        return (*(constptr_ConnectRequest()));
    }
    operator ConnectRequest&()
    {
        return get_ConnectRequest();
    }
    operator const ConnectRequest&() const
    {
        return get_ConnectRequest();
    }

    DisconnectRequest&
    get_DisconnectRequest()
    {
        AssertSanity(TDisconnectRequest);
        return (*(ptr_DisconnectRequest()));
    }
    const DisconnectRequest&
    get_DisconnectRequest() const
    {
        AssertSanity(TDisconnectRequest);
        return (*(constptr_DisconnectRequest()));
    }
    operator DisconnectRequest&()
    {
        return get_DisconnectRequest();
    }
    operator const DisconnectRequest&() const
    {
        return get_DisconnectRequest();
    }

    SendFileRequest&
    get_SendFileRequest()
    {
        AssertSanity(TSendFileRequest);
        return (*(ptr_SendFileRequest()));
    }
    const SendFileRequest&
    get_SendFileRequest() const
    {
        AssertSanity(TSendFileRequest);
        return (*(constptr_SendFileRequest()));
    }
    operator SendFileRequest&()
    {
        return get_SendFileRequest();
    }
    operator const SendFileRequest&() const
    {
        return get_SendFileRequest();
    }

    StopSendingFileRequest&
    get_StopSendingFileRequest()
    {
        AssertSanity(TStopSendingFileRequest);
        return (*(ptr_StopSendingFileRequest()));
    }
    const StopSendingFileRequest&
    get_StopSendingFileRequest() const
    {
        AssertSanity(TStopSendingFileRequest);
        return (*(constptr_StopSendingFileRequest()));
    }
    operator StopSendingFileRequest&()
    {
        return get_StopSendingFileRequest();
    }
    operator const StopSendingFileRequest&() const
    {
        return get_StopSendingFileRequest();
    }

    ConfirmReceivingFileRequest&
    get_ConfirmReceivingFileRequest()
    {
        AssertSanity(TConfirmReceivingFileRequest);
        return (*(ptr_ConfirmReceivingFileRequest()));
    }
    const ConfirmReceivingFileRequest&
    get_ConfirmReceivingFileRequest() const
    {
        AssertSanity(TConfirmReceivingFileRequest);
        return (*(constptr_ConfirmReceivingFileRequest()));
    }
    operator ConfirmReceivingFileRequest&()
    {
        return get_ConfirmReceivingFileRequest();
    }
    operator const ConfirmReceivingFileRequest&() const
    {
        return get_ConfirmReceivingFileRequest();
    }

    DenyReceivingFileRequest&
    get_DenyReceivingFileRequest()
    {
        AssertSanity(TDenyReceivingFileRequest);
        return (*(ptr_DenyReceivingFileRequest()));
    }
    const DenyReceivingFileRequest&
    get_DenyReceivingFileRequest() const
    {
        AssertSanity(TDenyReceivingFileRequest);
        return (*(constptr_DenyReceivingFileRequest()));
    }
    operator DenyReceivingFileRequest&()
    {
        return get_DenyReceivingFileRequest();
    }
    operator const DenyReceivingFileRequest&() const
    {
        return get_DenyReceivingFileRequest();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBluetoothChild and PBluetoothParent
//
namespace mozilla {
namespace dom {
namespace bluetooth {
namespace PBluetooth {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PBluetoothStart = PBluetoothMsgStart << 16,
    PBluetoothPreStart = (PBluetoothMsgStart << 16) - 1,
    Msg_Enabled__ID,
    Msg_Notify__ID,
    Msg_BeginShutdown__ID,
    Msg_NotificationsStopped__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_RegisterSignalHandler__ID,
    Msg_UnregisterSignalHandler__ID,
    Msg_StopNotifying__ID,
    Msg_PBluetoothRequestConstructor__ID,
    Reply_PBluetoothRequestConstructor__ID,
    PBluetoothEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg_Enabled :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;

public:
    enum {
        ID = Msg_Enabled__ID
    };
    Msg_Enabled() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBluetooth::Msg_Enabled")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Enabled(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Notify :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;

public:
    enum {
        ID = Msg_Notify__ID
    };
    Msg_Notify() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBluetooth::Msg_Notify")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Notify(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_BeginShutdown :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;

public:
    enum {
        ID = Msg_BeginShutdown__ID
    };
    Msg_BeginShutdown() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBluetooth::Msg_BeginShutdown")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_BeginShutdown(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NotificationsStopped :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;

public:
    enum {
        ID = Msg_NotificationsStopped__ID
    };
    Msg_NotificationsStopped() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBluetooth::Msg_NotificationsStopped")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NotificationsStopped(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBluetooth::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBluetooth::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_RegisterSignalHandler :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;

public:
    enum {
        ID = Msg_RegisterSignalHandler__ID
    };
    Msg_RegisterSignalHandler() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBluetooth::Msg_RegisterSignalHandler")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_RegisterSignalHandler(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_UnregisterSignalHandler :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;

public:
    enum {
        ID = Msg_UnregisterSignalHandler__ID
    };
    Msg_UnregisterSignalHandler() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBluetooth::Msg_UnregisterSignalHandler")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_UnregisterSignalHandler(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_StopNotifying :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;

public:
    enum {
        ID = Msg_StopNotifying__ID
    };
    Msg_StopNotifying() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBluetooth::Msg_StopNotifying")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_StopNotifying(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PBluetoothRequestConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;

public:
    enum {
        ID = Msg_PBluetoothRequestConstructor__ID
    };
    Msg_PBluetoothRequestConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBluetooth::Msg_PBluetoothRequestConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PBluetoothRequestConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PBluetoothRequestConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::bluetooth::BluetoothNamedValue BluetoothNamedValue;
    typedef mozilla::dom::bluetooth::BluetoothObjectType BluetoothObjectType;
    typedef mozilla::dom::bluetooth::BluetoothReply BluetoothReply;
    typedef mozilla::dom::bluetooth::BluetoothReplyError BluetoothReplyError;
    typedef mozilla::dom::bluetooth::BluetoothReplySuccess BluetoothReplySuccess;
    typedef mozilla::dom::bluetooth::BluetoothSignal BluetoothSignal;
    typedef mozilla::dom::bluetooth::BluetoothValue BluetoothValue;
    typedef mozilla::dom::bluetooth::ConfirmAuthorizationRequest ConfirmAuthorizationRequest;
    typedef mozilla::dom::bluetooth::ConfirmPairingConfirmationRequest ConfirmPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::ConfirmReceivingFileRequest ConfirmReceivingFileRequest;
    typedef mozilla::dom::bluetooth::ConnectRequest ConnectRequest;
    typedef mozilla::dom::bluetooth::DefaultAdapterPathRequest DefaultAdapterPathRequest;
    typedef mozilla::dom::bluetooth::DenyAuthorizationRequest DenyAuthorizationRequest;
    typedef mozilla::dom::bluetooth::DenyPairingConfirmationRequest DenyPairingConfirmationRequest;
    typedef mozilla::dom::bluetooth::DenyReceivingFileRequest DenyReceivingFileRequest;
    typedef mozilla::dom::bluetooth::DevicePropertiesRequest DevicePropertiesRequest;
    typedef mozilla::dom::bluetooth::DisconnectRequest DisconnectRequest;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::bluetooth::GetPropertyRequest GetPropertyRequest;
    typedef mozilla::dom::bluetooth::PairRequest PairRequest;
    typedef mozilla::dom::bluetooth::Request Request;
    typedef mozilla::dom::bluetooth::SendFileRequest SendFileRequest;
    typedef mozilla::dom::bluetooth::SetPasskeyRequest SetPasskeyRequest;
    typedef mozilla::dom::bluetooth::SetPinCodeRequest SetPinCodeRequest;
    typedef mozilla::dom::bluetooth::SetPropertyRequest SetPropertyRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::bluetooth::StartDiscoveryRequest StartDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopDiscoveryRequest StopDiscoveryRequest;
    typedef mozilla::dom::bluetooth::StopSendingFileRequest StopSendingFileRequest;
    typedef mozilla::dom::bluetooth::UnpairRequest UnpairRequest;

public:
    enum {
        ID = Reply_PBluetoothRequestConstructor__ID
    };
    Reply_PBluetoothRequestConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PBluetooth::Reply_PBluetoothRequestConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PBluetoothRequestConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PBluetooth
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

#endif // ifndef PBluetooth_h
