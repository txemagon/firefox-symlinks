//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBlobParent_h
#define PBlobParent_h

#include "mozilla/dom/PBlob.h"
namespace mozilla {
namespace dom {
class PBlobStreamParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace net {
class PHttpChannelParent;
} // namespace net
} // namespace mozilla


namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
class PBlobStreamParent;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace devicestorage {
class PDeviceStorageRequestParent;
} // namespace devicestorage
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBRequestParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace bluetooth {
class PBluetoothParent;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBIndexParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBObjectStoreParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace net {
class PWebSocketParent;
} // namespace net
} // namespace mozilla


namespace mozilla {
namespace net {
class PFTPChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {


class /*NS_ABSTRACT_CLASS*/ PBlobParent :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::net::PHttpChannelParent;

    friend class mozilla::dom::PBrowserParent;

    friend class mozilla::dom::PBlobStreamParent;

    friend class mozilla::dom::devicestorage::PDeviceStorageRequestParent;

    friend class mozilla::dom::indexedDB::PIndexedDBRequestParent;

    friend class mozilla::dom::bluetooth::PBluetoothParent;

    friend class mozilla::dom::indexedDB::PIndexedDBIndexParent;

    friend class mozilla::dom::PContentParent;

    friend class mozilla::dom::indexedDB::PIndexedDBObjectStoreParent;

    friend class mozilla::net::PWebSocketParent;

    friend class mozilla::net::PFTPChannelParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::FileBlobConstructorParams FileBlobConstructorParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::NormalBlobConstructorParams NormalBlobConstructorParams;
    typedef mozilla::dom::ResolveMysteryParams ResolveMysteryParams;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::PBlobStreamParent PBlobStreamParent;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PBlob::State State;

    virtual bool
    Recv__delete__();
    virtual bool
    RecvPBlobStreamConstructor(PBlobStreamParent* actor);
    virtual bool
    RecvResolveMystery(const ResolveMysteryParams& params) = 0;
    virtual PBlobStreamParent*
    AllocPBlobStream() = 0;
    virtual bool
    DeallocPBlobStream(PBlobStreamParent* actor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PBlobParent();

    virtual ~PBlobParent();

    PContentParent*
    Manager() const;

    void
    ManagedPBlobStreamParent(InfallibleTArray<PBlobStreamParent*>& aArr) const;
    const InfallibleTArray<PBlobStreamParent*>&
    ManagedPBlobStreamParent() const;

    PBlob::State
    state();

    static bool
    Send__delete__(PBlobParent* actor) NS_WARN_UNUSED_RESULT;

    PBlobStreamParent*
    SendPBlobStreamConstructor() NS_WARN_UNUSED_RESULT;

    PBlobStreamParent*
    SendPBlobStreamConstructor(PBlobStreamParent* actor) NS_WARN_UNUSED_RESULT;

    bool
    SendResolveMystery(const ResolveMysteryParams& params) NS_WARN_UNUSED_RESULT;

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            PBlobStreamParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBlobStreamParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const FileBlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            FileBlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBlobParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBlobParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const NormalBlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            NormalBlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ResolveMysteryParams& __v,
            Message* __msg);

    bool
    Read(
            ResolveMysteryParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PBlobStreamParent*> mManagedPBlobStreamParent;
};


} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
class BlobParent :
    public PBlobParent
{
    virtual bool
    RecvResolveMystery(const ResolveMysteryParams& params);

    virtual PBlobStreamParent*
    AllocPBlobStream();

    virtual bool
    DeallocPBlobStream(PBlobStreamParent* actor);

    BlobParent();
    virtual ~BlobParent();
};
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
bool
BlobParent::RecvResolveMystery(const ResolveMysteryParams& params)
{
    return false;
}

PBlobStreamParent*
BlobParent::AllocPBlobStream()
{
    return 0;
}

bool
BlobParent::DeallocPBlobStream(PBlobStreamParent* actor)
{
    return false;
}

BlobParent::BlobParent()
{
    MOZ_COUNT_CTOR(BlobParent);
}

BlobParent::~BlobParent()
{
    MOZ_COUNT_DTOR(BlobParent);
}

} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PBlobParent_h
