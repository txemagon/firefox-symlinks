//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PIndexedDBObjectStore_h
#define PIndexedDBObjectStore_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/dom/indexedDB/SerializationHelpers.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct KeyRange|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class KeyRange MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    KeyRange();

    KeyRange(
            const Key& _lower,
            const Key& _upper,
            const bool& _lowerOpen,
            const bool& _upperOpen,
            const bool& _isOnly)
    {
        Init();
        Assign(_lower, _upper, _lowerOpen, _upperOpen, _isOnly);
    }

    KeyRange(const KeyRange& _o)
    {
        Init();
        Assign((_o).lower(), (_o).upper(), (_o).lowerOpen(), (_o).upperOpen(), (_o).isOnly());
    }

    ~KeyRange();

    void
    operator=(const KeyRange& _o)
    {
        Assign((_o).lower(), (_o).upper(), (_o).lowerOpen(), (_o).upperOpen(), (_o).isOnly());
    }

    bool
    operator==(const KeyRange& _o) const;

    Key&
    lower()
    {
        return lower_;
    }
    const Key&
    lower() const
    {
        return lower_;
    }

    Key&
    upper()
    {
        return upper_;
    }
    const Key&
    upper() const
    {
        return upper_;
    }

    bool&
    lowerOpen()
    {
        return lowerOpen_;
    }
    const bool&
    lowerOpen() const
    {
        return lowerOpen_;
    }

    bool&
    upperOpen()
    {
        return upperOpen_;
    }
    const bool&
    upperOpen() const
    {
        return upperOpen_;
    }

    bool&
    isOnly()
    {
        return isOnly_;
    }
    const bool&
    isOnly() const
    {
        return isOnly_;
    }

private:
    void
    Init();

    void
    Assign(
            const Key& _lower,
            const Key& _upper,
            const bool& _lowerOpen,
            const bool& _upperOpen,
            const bool& _isOnly);

    Key lower_;
    Key upper_;
    bool lowerOpen_;
    bool upperOpen_;
    bool isOnly_;
};
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class KeyRange;
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union OptionalKeyRange|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class OptionalKeyRange MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TKeyRange = 1,
        Tvoid_t,
        T__Last = Tvoid_t
    };

private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
    typedef mozilla::void_t void_t;
    typedef KeyRange KeyRange__tdef;
    typedef void_t void_t__tdef;

    union Value {
        char VKeyRange[sizeof(KeyRange)];
        char Vvoid_t[sizeof(void_t)];
    };

    KeyRange*
    ptr_KeyRange()
    {
        return reinterpret_cast<KeyRange*>((&((mValue).VKeyRange)));
    }
    const KeyRange* const
    constptr_KeyRange() const
    {
        return reinterpret_cast<const KeyRange* const>((&((mValue).VKeyRange)));
    }
    void_t*
    ptr_void_t()
    {
        return reinterpret_cast<void_t*>((&((mValue).Vvoid_t)));
    }
    const void_t* const
    constptr_void_t() const
    {
        return reinterpret_cast<const void_t* const>((&((mValue).Vvoid_t)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    OptionalKeyRange() :
        mType(T__None)
    {
    }

    OptionalKeyRange(const KeyRange& aOther);

    OptionalKeyRange(const void_t& aOther);

    OptionalKeyRange(const OptionalKeyRange& aOther);

    ~OptionalKeyRange();

    Type
    type() const
    {
        return mType;
    }

    OptionalKeyRange&
    operator=(const KeyRange& aRhs);

    OptionalKeyRange&
    operator=(const void_t& aRhs);

    OptionalKeyRange&
    operator=(const OptionalKeyRange& aRhs);

    bool
    operator==(const KeyRange& aRhs) const;

    bool
    operator==(const void_t& aRhs) const;

    bool
    operator==(const OptionalKeyRange& aRhs) const;

    KeyRange&
    get_KeyRange()
    {
        AssertSanity(TKeyRange);
        return (*(ptr_KeyRange()));
    }
    const KeyRange&
    get_KeyRange() const
    {
        AssertSanity(TKeyRange);
        return (*(constptr_KeyRange()));
    }
    operator KeyRange&()
    {
        return get_KeyRange();
    }
    operator const KeyRange&() const
    {
        return get_KeyRange();
    }

    void_t&
    get_void_t()
    {
        AssertSanity(Tvoid_t);
        return (*(ptr_void_t()));
    }
    const void_t&
    get_void_t() const
    {
        AssertSanity(Tvoid_t);
        return (*(constptr_void_t()));
    }
    operator void_t&()
    {
        return get_void_t();
    }
    operator const void_t&() const
    {
        return get_void_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class KeyRange;
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class GetParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;

public:
    GetParams();

    GetParams(const KeyRange& _keyRange)
    {
        Init();
        Assign(_keyRange);
    }

    GetParams(const GetParams& _o)
    {
        Init();
        Assign((_o).keyRange());
    }

    ~GetParams();

    void
    operator=(const GetParams& _o)
    {
        Assign((_o).keyRange());
    }

    bool
    operator==(const GetParams& _o) const;

    KeyRange&
    keyRange()
    {
        return keyRange_;
    }
    const KeyRange&
    keyRange() const
    {
        return keyRange_;
    }

private:
    void
    Init();

    void
    Assign(const KeyRange& _keyRange);

    KeyRange keyRange_;
};
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class OptionalKeyRange;
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetAllParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class GetAllParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;

public:
    GetAllParams();

    GetAllParams(
            const OptionalKeyRange& _optionalKeyRange,
            const uint32_t& _limit)
    {
        Init();
        Assign(_optionalKeyRange, _limit);
    }

    GetAllParams(const GetAllParams& _o)
    {
        Init();
        Assign((_o).optionalKeyRange(), (_o).limit());
    }

    ~GetAllParams();

    void
    operator=(const GetAllParams& _o)
    {
        Assign((_o).optionalKeyRange(), (_o).limit());
    }

    bool
    operator==(const GetAllParams& _o) const;

    OptionalKeyRange&
    optionalKeyRange()
    {
        return optionalKeyRange_;
    }
    const OptionalKeyRange&
    optionalKeyRange() const
    {
        return optionalKeyRange_;
    }

    uint32_t&
    limit()
    {
        return limit_;
    }
    const uint32_t&
    limit() const
    {
        return limit_;
    }

private:
    void
    Init();

    void
    Assign(
            const OptionalKeyRange& _optionalKeyRange,
            const uint32_t& _limit);

    OptionalKeyRange optionalKeyRange_;
    uint32_t limit_;
};
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class OptionalKeyRange;
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CountParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class CountParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;

public:
    CountParams();

    CountParams(const OptionalKeyRange& _optionalKeyRange)
    {
        Init();
        Assign(_optionalKeyRange);
    }

    CountParams(const CountParams& _o)
    {
        Init();
        Assign((_o).optionalKeyRange());
    }

    ~CountParams();

    void
    operator=(const CountParams& _o)
    {
        Assign((_o).optionalKeyRange());
    }

    bool
    operator==(const CountParams& _o) const;

    OptionalKeyRange&
    optionalKeyRange()
    {
        return optionalKeyRange_;
    }
    const OptionalKeyRange&
    optionalKeyRange() const
    {
        return optionalKeyRange_;
    }

private:
    void
    Init();

    void
    Assign(const OptionalKeyRange& _optionalKeyRange);

    OptionalKeyRange optionalKeyRange_;
};
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class OptionalKeyRange;
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct OpenCursorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class OpenCursorParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;

public:
    OpenCursorParams();

    OpenCursorParams(
            const OptionalKeyRange& _optionalKeyRange,
            const Direction& _direction)
    {
        Init();
        Assign(_optionalKeyRange, _direction);
    }

    OpenCursorParams(const OpenCursorParams& _o)
    {
        Init();
        Assign((_o).optionalKeyRange(), (_o).direction());
    }

    ~OpenCursorParams();

    void
    operator=(const OpenCursorParams& _o)
    {
        Assign((_o).optionalKeyRange(), (_o).direction());
    }

    bool
    operator==(const OpenCursorParams& _o) const;

    OptionalKeyRange&
    optionalKeyRange()
    {
        return optionalKeyRange_;
    }
    const OptionalKeyRange&
    optionalKeyRange() const
    {
        return optionalKeyRange_;
    }

    Direction&
    direction()
    {
        return direction_;
    }
    const Direction&
    direction() const
    {
        return direction_;
    }

private:
    void
    Init();

    void
    Assign(
            const OptionalKeyRange& _optionalKeyRange,
            const Direction& _direction);

    OptionalKeyRange optionalKeyRange_;
    Direction direction_;
};
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct AddPutParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class AddPutParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::PBlobChild PBlobChild;

public:
    AddPutParams();

    AddPutParams(
            const SerializedStructuredCloneWriteInfo& _cloneInfo,
            const Key& _key,
            const InfallibleTArray<IndexUpdateInfo>& _indexUpdateInfos,
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild)
    {
        Init();
        Assign(_cloneInfo, _key, _indexUpdateInfos, _blobsParent, _blobsChild);
    }

    AddPutParams(const AddPutParams& _o)
    {
        Init();
        Assign((_o).cloneInfo(), (_o).key(), (_o).indexUpdateInfos(), (_o).blobsParent(), (_o).blobsChild());
    }

    ~AddPutParams();

    void
    operator=(const AddPutParams& _o)
    {
        Assign((_o).cloneInfo(), (_o).key(), (_o).indexUpdateInfos(), (_o).blobsParent(), (_o).blobsChild());
    }

    bool
    operator==(const AddPutParams& _o) const;

    SerializedStructuredCloneWriteInfo&
    cloneInfo()
    {
        return cloneInfo_;
    }
    const SerializedStructuredCloneWriteInfo&
    cloneInfo() const
    {
        return cloneInfo_;
    }

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

    InfallibleTArray<IndexUpdateInfo>&
    indexUpdateInfos()
    {
        return indexUpdateInfos_;
    }
    const InfallibleTArray<IndexUpdateInfo>&
    indexUpdateInfos() const
    {
        return indexUpdateInfos_;
    }

    InfallibleTArray<PBlobParent*>&
    blobsParent()
    {
        return blobsParent_;
    }
    const InfallibleTArray<PBlobParent*>&
    blobsParent() const
    {
        return blobsParent_;
    }

    InfallibleTArray<PBlobChild*>&
    blobsChild()
    {
        return blobsChild_;
    }
    const InfallibleTArray<PBlobChild*>&
    blobsChild() const
    {
        return blobsChild_;
    }

private:
    void
    Init();

    void
    Assign(
            const SerializedStructuredCloneWriteInfo& _cloneInfo,
            const Key& _key,
            const InfallibleTArray<IndexUpdateInfo>& _indexUpdateInfos,
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild);

    SerializedStructuredCloneWriteInfo cloneInfo_;
    Key key_;
    InfallibleTArray<IndexUpdateInfo> indexUpdateInfos_;
    InfallibleTArray<PBlobParent*> blobsParent_;
    InfallibleTArray<PBlobChild*> blobsChild_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class AddPutParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct AddParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class AddParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;

public:
    AddParams();

    AddParams(const AddPutParams& _commonParams)
    {
        Init();
        Assign(_commonParams);
    }

    AddParams(const AddParams& _o)
    {
        Init();
        Assign((_o).commonParams());
    }

    ~AddParams();

    void
    operator=(const AddParams& _o)
    {
        Assign((_o).commonParams());
    }

    bool
    operator==(const AddParams& _o) const;

    AddPutParams&
    commonParams()
    {
        return commonParams_;
    }
    const AddPutParams&
    commonParams() const
    {
        return commonParams_;
    }

private:
    void
    Init();

    void
    Assign(const AddPutParams& _commonParams);

    AddPutParams commonParams_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class AddPutParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PutParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class PutParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;

public:
    PutParams();

    PutParams(const AddPutParams& _commonParams)
    {
        Init();
        Assign(_commonParams);
    }

    PutParams(const PutParams& _o)
    {
        Init();
        Assign((_o).commonParams());
    }

    ~PutParams();

    void
    operator=(const PutParams& _o)
    {
        Assign((_o).commonParams());
    }

    bool
    operator==(const PutParams& _o) const;

    AddPutParams&
    commonParams()
    {
        return commonParams_;
    }
    const AddPutParams&
    commonParams() const
    {
        return commonParams_;
    }

private:
    void
    Init();

    void
    Assign(const AddPutParams& _commonParams);

    AddPutParams commonParams_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class KeyRange;
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DeleteParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class DeleteParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;

public:
    DeleteParams();

    DeleteParams(const KeyRange& _keyRange)
    {
        Init();
        Assign(_keyRange);
    }

    DeleteParams(const DeleteParams& _o)
    {
        Init();
        Assign((_o).keyRange());
    }

    ~DeleteParams();

    void
    operator=(const DeleteParams& _o)
    {
        Assign((_o).keyRange());
    }

    bool
    operator==(const DeleteParams& _o) const;

    KeyRange&
    keyRange()
    {
        return keyRange_;
    }
    const KeyRange&
    keyRange() const
    {
        return keyRange_;
    }

private:
    void
    Init();

    void
    Assign(const KeyRange& _keyRange);

    KeyRange keyRange_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ClearParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ClearParams MOZ_FINAL
{
private:
    typedef mozilla::void_t void_t;

public:
    ClearParams();

    ClearParams(const void_t& _FIXME_Bug_753159)
    {
        Init();
        Assign(_FIXME_Bug_753159);
    }

    ClearParams(const ClearParams& _o)
    {
        Init();
        Assign((_o).FIXME_Bug_753159());
    }

    ~ClearParams();

    void
    operator=(const ClearParams& _o)
    {
        Assign((_o).FIXME_Bug_753159());
    }

    bool
    operator==(const ClearParams& _o) const;

    void_t&
    FIXME_Bug_753159()
    {
        return FIXME_Bug_753159_;
    }
    const void_t&
    FIXME_Bug_753159() const
    {
        return FIXME_Bug_753159_;
    }

private:
    void
    Init();

    void
    Assign(const void_t& _FIXME_Bug_753159);

    void_t FIXME_Bug_753159_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class GetParams;
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class GetAllParams;
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class AddParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class PutParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class DeleteParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ClearParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class CountParams;
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_objectstore {
class OpenCursorParams;
} // namespace FIXME_Bug_521898_objectstore
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union ObjectStoreRequestParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ObjectStoreRequestParams MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TGetParams = 1,
        TGetAllParams,
        TAddParams,
        TPutParams,
        TDeleteParams,
        TClearParams,
        TCountParams,
        TOpenCursorParams,
        T__Last = TOpenCursorParams
    };

private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
    typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
    typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
    typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
    typedef GetParams GetParams__tdef;
    typedef GetAllParams GetAllParams__tdef;
    typedef AddParams AddParams__tdef;
    typedef PutParams PutParams__tdef;
    typedef DeleteParams DeleteParams__tdef;
    typedef ClearParams ClearParams__tdef;
    typedef CountParams CountParams__tdef;
    typedef OpenCursorParams OpenCursorParams__tdef;

    union Value {
        char VGetParams[sizeof(GetParams)];
        char VGetAllParams[sizeof(GetAllParams)];
        char VAddParams[sizeof(AddParams)];
        char VPutParams[sizeof(PutParams)];
        char VDeleteParams[sizeof(DeleteParams)];
        char VClearParams[sizeof(ClearParams)];
        char VCountParams[sizeof(CountParams)];
        char VOpenCursorParams[sizeof(OpenCursorParams)];
    };

    GetParams*
    ptr_GetParams()
    {
        return reinterpret_cast<GetParams*>((&((mValue).VGetParams)));
    }
    const GetParams* const
    constptr_GetParams() const
    {
        return reinterpret_cast<const GetParams* const>((&((mValue).VGetParams)));
    }
    GetAllParams*
    ptr_GetAllParams()
    {
        return reinterpret_cast<GetAllParams*>((&((mValue).VGetAllParams)));
    }
    const GetAllParams* const
    constptr_GetAllParams() const
    {
        return reinterpret_cast<const GetAllParams* const>((&((mValue).VGetAllParams)));
    }
    AddParams*
    ptr_AddParams()
    {
        return reinterpret_cast<AddParams*>((&((mValue).VAddParams)));
    }
    const AddParams* const
    constptr_AddParams() const
    {
        return reinterpret_cast<const AddParams* const>((&((mValue).VAddParams)));
    }
    PutParams*
    ptr_PutParams()
    {
        return reinterpret_cast<PutParams*>((&((mValue).VPutParams)));
    }
    const PutParams* const
    constptr_PutParams() const
    {
        return reinterpret_cast<const PutParams* const>((&((mValue).VPutParams)));
    }
    DeleteParams*
    ptr_DeleteParams()
    {
        return reinterpret_cast<DeleteParams*>((&((mValue).VDeleteParams)));
    }
    const DeleteParams* const
    constptr_DeleteParams() const
    {
        return reinterpret_cast<const DeleteParams* const>((&((mValue).VDeleteParams)));
    }
    ClearParams*
    ptr_ClearParams()
    {
        return reinterpret_cast<ClearParams*>((&((mValue).VClearParams)));
    }
    const ClearParams* const
    constptr_ClearParams() const
    {
        return reinterpret_cast<const ClearParams* const>((&((mValue).VClearParams)));
    }
    CountParams*
    ptr_CountParams()
    {
        return reinterpret_cast<CountParams*>((&((mValue).VCountParams)));
    }
    const CountParams* const
    constptr_CountParams() const
    {
        return reinterpret_cast<const CountParams* const>((&((mValue).VCountParams)));
    }
    OpenCursorParams*
    ptr_OpenCursorParams()
    {
        return reinterpret_cast<OpenCursorParams*>((&((mValue).VOpenCursorParams)));
    }
    const OpenCursorParams* const
    constptr_OpenCursorParams() const
    {
        return reinterpret_cast<const OpenCursorParams* const>((&((mValue).VOpenCursorParams)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    ObjectStoreRequestParams() :
        mType(T__None)
    {
    }

    ObjectStoreRequestParams(const GetParams& aOther);

    ObjectStoreRequestParams(const GetAllParams& aOther);

    ObjectStoreRequestParams(const AddParams& aOther);

    ObjectStoreRequestParams(const PutParams& aOther);

    ObjectStoreRequestParams(const DeleteParams& aOther);

    ObjectStoreRequestParams(const ClearParams& aOther);

    ObjectStoreRequestParams(const CountParams& aOther);

    ObjectStoreRequestParams(const OpenCursorParams& aOther);

    ObjectStoreRequestParams(const ObjectStoreRequestParams& aOther);

    ~ObjectStoreRequestParams();

    Type
    type() const
    {
        return mType;
    }

    ObjectStoreRequestParams&
    operator=(const GetParams& aRhs);

    ObjectStoreRequestParams&
    operator=(const GetAllParams& aRhs);

    ObjectStoreRequestParams&
    operator=(const AddParams& aRhs);

    ObjectStoreRequestParams&
    operator=(const PutParams& aRhs);

    ObjectStoreRequestParams&
    operator=(const DeleteParams& aRhs);

    ObjectStoreRequestParams&
    operator=(const ClearParams& aRhs);

    ObjectStoreRequestParams&
    operator=(const CountParams& aRhs);

    ObjectStoreRequestParams&
    operator=(const OpenCursorParams& aRhs);

    ObjectStoreRequestParams&
    operator=(const ObjectStoreRequestParams& aRhs);

    bool
    operator==(const GetParams& aRhs) const;

    bool
    operator==(const GetAllParams& aRhs) const;

    bool
    operator==(const AddParams& aRhs) const;

    bool
    operator==(const PutParams& aRhs) const;

    bool
    operator==(const DeleteParams& aRhs) const;

    bool
    operator==(const ClearParams& aRhs) const;

    bool
    operator==(const CountParams& aRhs) const;

    bool
    operator==(const OpenCursorParams& aRhs) const;

    bool
    operator==(const ObjectStoreRequestParams& aRhs) const;

    GetParams&
    get_GetParams()
    {
        AssertSanity(TGetParams);
        return (*(ptr_GetParams()));
    }
    const GetParams&
    get_GetParams() const
    {
        AssertSanity(TGetParams);
        return (*(constptr_GetParams()));
    }
    operator GetParams&()
    {
        return get_GetParams();
    }
    operator const GetParams&() const
    {
        return get_GetParams();
    }

    GetAllParams&
    get_GetAllParams()
    {
        AssertSanity(TGetAllParams);
        return (*(ptr_GetAllParams()));
    }
    const GetAllParams&
    get_GetAllParams() const
    {
        AssertSanity(TGetAllParams);
        return (*(constptr_GetAllParams()));
    }
    operator GetAllParams&()
    {
        return get_GetAllParams();
    }
    operator const GetAllParams&() const
    {
        return get_GetAllParams();
    }

    AddParams&
    get_AddParams()
    {
        AssertSanity(TAddParams);
        return (*(ptr_AddParams()));
    }
    const AddParams&
    get_AddParams() const
    {
        AssertSanity(TAddParams);
        return (*(constptr_AddParams()));
    }
    operator AddParams&()
    {
        return get_AddParams();
    }
    operator const AddParams&() const
    {
        return get_AddParams();
    }

    PutParams&
    get_PutParams()
    {
        AssertSanity(TPutParams);
        return (*(ptr_PutParams()));
    }
    const PutParams&
    get_PutParams() const
    {
        AssertSanity(TPutParams);
        return (*(constptr_PutParams()));
    }
    operator PutParams&()
    {
        return get_PutParams();
    }
    operator const PutParams&() const
    {
        return get_PutParams();
    }

    DeleteParams&
    get_DeleteParams()
    {
        AssertSanity(TDeleteParams);
        return (*(ptr_DeleteParams()));
    }
    const DeleteParams&
    get_DeleteParams() const
    {
        AssertSanity(TDeleteParams);
        return (*(constptr_DeleteParams()));
    }
    operator DeleteParams&()
    {
        return get_DeleteParams();
    }
    operator const DeleteParams&() const
    {
        return get_DeleteParams();
    }

    ClearParams&
    get_ClearParams()
    {
        AssertSanity(TClearParams);
        return (*(ptr_ClearParams()));
    }
    const ClearParams&
    get_ClearParams() const
    {
        AssertSanity(TClearParams);
        return (*(constptr_ClearParams()));
    }
    operator ClearParams&()
    {
        return get_ClearParams();
    }
    operator const ClearParams&() const
    {
        return get_ClearParams();
    }

    CountParams&
    get_CountParams()
    {
        AssertSanity(TCountParams);
        return (*(ptr_CountParams()));
    }
    const CountParams&
    get_CountParams() const
    {
        AssertSanity(TCountParams);
        return (*(constptr_CountParams()));
    }
    operator CountParams&()
    {
        return get_CountParams();
    }
    operator const CountParams&() const
    {
        return get_CountParams();
    }

    OpenCursorParams&
    get_OpenCursorParams()
    {
        AssertSanity(TOpenCursorParams);
        return (*(ptr_OpenCursorParams()));
    }
    const OpenCursorParams&
    get_OpenCursorParams() const
    {
        AssertSanity(TOpenCursorParams);
        return (*(constptr_OpenCursorParams()));
    }
    operator OpenCursorParams&()
    {
        return get_OpenCursorParams();
    }
    operator const OpenCursorParams&() const
    {
        return get_OpenCursorParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CreateIndexParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class CreateIndexParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;

public:
    CreateIndexParams();

    CreateIndexParams(const IndexInfo& _info)
    {
        Init();
        Assign(_info);
    }

    CreateIndexParams(const CreateIndexParams& _o)
    {
        Init();
        Assign((_o).info());
    }

    ~CreateIndexParams();

    void
    operator=(const CreateIndexParams& _o)
    {
        Assign((_o).info());
    }

    bool
    operator==(const CreateIndexParams& _o) const;

    IndexInfo&
    info()
    {
        return info_;
    }
    const IndexInfo&
    info() const
    {
        return info_;
    }

private:
    void
    Init();

    void
    Assign(const IndexInfo& _info);

    IndexInfo info_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetIndexParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetIndexParams MOZ_FINAL
{
private:

public:
    GetIndexParams();

    GetIndexParams(const nsString& _name)
    {
        Init();
        Assign(_name);
    }

    GetIndexParams(const GetIndexParams& _o)
    {
        Init();
        Assign((_o).name());
    }

    ~GetIndexParams();

    void
    operator=(const GetIndexParams& _o)
    {
        Assign((_o).name());
    }

    bool
    operator==(const GetIndexParams& _o) const;

    nsString&
    name()
    {
        return name_;
    }
    const nsString&
    name() const
    {
        return name_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _name);

    nsString name_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class CreateIndexParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetIndexParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union IndexConstructorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class IndexConstructorParams MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TCreateIndexParams = 1,
        TGetIndexParams,
        T__Last = TGetIndexParams
    };

private:
    typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
    typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
    typedef CreateIndexParams CreateIndexParams__tdef;
    typedef GetIndexParams GetIndexParams__tdef;

    union Value {
        char VCreateIndexParams[sizeof(CreateIndexParams)];
        char VGetIndexParams[sizeof(GetIndexParams)];
    };

    CreateIndexParams*
    ptr_CreateIndexParams()
    {
        return reinterpret_cast<CreateIndexParams*>((&((mValue).VCreateIndexParams)));
    }
    const CreateIndexParams* const
    constptr_CreateIndexParams() const
    {
        return reinterpret_cast<const CreateIndexParams* const>((&((mValue).VCreateIndexParams)));
    }
    GetIndexParams*
    ptr_GetIndexParams()
    {
        return reinterpret_cast<GetIndexParams*>((&((mValue).VGetIndexParams)));
    }
    const GetIndexParams* const
    constptr_GetIndexParams() const
    {
        return reinterpret_cast<const GetIndexParams* const>((&((mValue).VGetIndexParams)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    IndexConstructorParams() :
        mType(T__None)
    {
    }

    IndexConstructorParams(const CreateIndexParams& aOther);

    IndexConstructorParams(const GetIndexParams& aOther);

    IndexConstructorParams(const IndexConstructorParams& aOther);

    ~IndexConstructorParams();

    Type
    type() const
    {
        return mType;
    }

    IndexConstructorParams&
    operator=(const CreateIndexParams& aRhs);

    IndexConstructorParams&
    operator=(const GetIndexParams& aRhs);

    IndexConstructorParams&
    operator=(const IndexConstructorParams& aRhs);

    bool
    operator==(const CreateIndexParams& aRhs) const;

    bool
    operator==(const GetIndexParams& aRhs) const;

    bool
    operator==(const IndexConstructorParams& aRhs) const;

    CreateIndexParams&
    get_CreateIndexParams()
    {
        AssertSanity(TCreateIndexParams);
        return (*(ptr_CreateIndexParams()));
    }
    const CreateIndexParams&
    get_CreateIndexParams() const
    {
        AssertSanity(TCreateIndexParams);
        return (*(constptr_CreateIndexParams()));
    }
    operator CreateIndexParams&()
    {
        return get_CreateIndexParams();
    }
    operator const CreateIndexParams&() const
    {
        return get_CreateIndexParams();
    }

    GetIndexParams&
    get_GetIndexParams()
    {
        AssertSanity(TGetIndexParams);
        return (*(ptr_GetIndexParams()));
    }
    const GetIndexParams&
    get_GetIndexParams() const
    {
        AssertSanity(TGetIndexParams);
        return (*(constptr_GetIndexParams()));
    }
    operator GetIndexParams&()
    {
        return get_GetIndexParams();
    }
    operator const GetIndexParams&() const
    {
        return get_GetIndexParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBRequestParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBRequestChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreCursorConstructorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ObjectStoreCursorConstructorParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::PIndexedDBRequestParent PIndexedDBRequestParent;
    typedef mozilla::dom::indexedDB::PIndexedDBRequestChild PIndexedDBRequestChild;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::PBlobChild PBlobChild;

public:
    ObjectStoreCursorConstructorParams();

    ObjectStoreCursorConstructorParams(
            PIndexedDBRequestParent* _requestParent,
            PIndexedDBRequestChild* _requestChild,
            const Direction& _direction,
            const Key& _key,
            const SerializedStructuredCloneReadInfo& _cloneInfo,
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild)
    {
        Init();
        Assign(_requestParent, _requestChild, _direction, _key, _cloneInfo, _blobsParent, _blobsChild);
    }

    ObjectStoreCursorConstructorParams(const ObjectStoreCursorConstructorParams& _o)
    {
        Init();
        Assign(const_cast<PIndexedDBRequestParent*>((_o).requestParent()), const_cast<PIndexedDBRequestChild*>((_o).requestChild()), (_o).direction(), (_o).key(), (_o).cloneInfo(), (_o).blobsParent(), (_o).blobsChild());
    }

    ~ObjectStoreCursorConstructorParams();

    void
    operator=(const ObjectStoreCursorConstructorParams& _o)
    {
        Assign(const_cast<PIndexedDBRequestParent*>((_o).requestParent()), const_cast<PIndexedDBRequestChild*>((_o).requestChild()), (_o).direction(), (_o).key(), (_o).cloneInfo(), (_o).blobsParent(), (_o).blobsChild());
    }

    bool
    operator==(const ObjectStoreCursorConstructorParams& _o) const;

    PIndexedDBRequestParent*&
    requestParent()
    {
        return requestParent_;
    }
    PIndexedDBRequestParent*
    requestParent() const
    {
        return requestParent_;
    }

    PIndexedDBRequestChild*&
    requestChild()
    {
        return requestChild_;
    }
    PIndexedDBRequestChild*
    requestChild() const
    {
        return requestChild_;
    }

    Direction&
    direction()
    {
        return direction_;
    }
    const Direction&
    direction() const
    {
        return direction_;
    }

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

    SerializedStructuredCloneReadInfo&
    cloneInfo()
    {
        return cloneInfo_;
    }
    const SerializedStructuredCloneReadInfo&
    cloneInfo() const
    {
        return cloneInfo_;
    }

    InfallibleTArray<PBlobParent*>&
    blobsParent()
    {
        return blobsParent_;
    }
    const InfallibleTArray<PBlobParent*>&
    blobsParent() const
    {
        return blobsParent_;
    }

    InfallibleTArray<PBlobChild*>&
    blobsChild()
    {
        return blobsChild_;
    }
    const InfallibleTArray<PBlobChild*>&
    blobsChild() const
    {
        return blobsChild_;
    }

private:
    void
    Init();

    void
    Assign(
            PIndexedDBRequestParent* _requestParent,
            PIndexedDBRequestChild* _requestChild,
            const Direction& _direction,
            const Key& _key,
            const SerializedStructuredCloneReadInfo& _cloneInfo,
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild);

    PIndexedDBRequestParent* requestParent_;
    PIndexedDBRequestChild* requestChild_;
    Direction direction_;
    Key key_;
    SerializedStructuredCloneReadInfo cloneInfo_;
    InfallibleTArray<PBlobParent*> blobsParent_;
    InfallibleTArray<PBlobChild*> blobsChild_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PIndexedDBObjectStoreChild and PIndexedDBObjectStoreParent
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PIndexedDBObjectStore {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PIndexedDBObjectStoreStart = PIndexedDBObjectStoreMsgStart << 16,
    PIndexedDBObjectStorePreStart = (PIndexedDBObjectStoreMsgStart << 16) - 1,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_PIndexedDBIndexConstructor__ID,
    Reply_PIndexedDBIndexConstructor__ID,
    Msg_PIndexedDBRequestConstructor__ID,
    Reply_PIndexedDBRequestConstructor__ID,
    Msg_DeleteIndex__ID,
    Msg_PIndexedDBCursorConstructor__ID,
    Reply_PIndexedDBCursorConstructor__ID,
    PIndexedDBObjectStoreEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;
    typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
    typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexConstructorParams IndexConstructorParams;
    typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreCursorConstructorParams ObjectStoreCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreRequestParams ObjectStoreRequestParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBObjectStore::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;
    typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
    typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexConstructorParams IndexConstructorParams;
    typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreCursorConstructorParams ObjectStoreCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreRequestParams ObjectStoreRequestParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBObjectStore::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PIndexedDBIndexConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;
    typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
    typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexConstructorParams IndexConstructorParams;
    typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreCursorConstructorParams ObjectStoreCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreRequestParams ObjectStoreRequestParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_PIndexedDBIndexConstructor__ID
    };
    Msg_PIndexedDBIndexConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBObjectStore::Msg_PIndexedDBIndexConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PIndexedDBIndexConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PIndexedDBIndexConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;
    typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
    typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexConstructorParams IndexConstructorParams;
    typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreCursorConstructorParams ObjectStoreCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreRequestParams ObjectStoreRequestParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_PIndexedDBIndexConstructor__ID
    };
    Reply_PIndexedDBIndexConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBObjectStore::Reply_PIndexedDBIndexConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PIndexedDBIndexConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PIndexedDBRequestConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;
    typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
    typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexConstructorParams IndexConstructorParams;
    typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreCursorConstructorParams ObjectStoreCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreRequestParams ObjectStoreRequestParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_PIndexedDBRequestConstructor__ID
    };
    Msg_PIndexedDBRequestConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBObjectStore::Msg_PIndexedDBRequestConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PIndexedDBRequestConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PIndexedDBRequestConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;
    typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
    typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexConstructorParams IndexConstructorParams;
    typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreCursorConstructorParams ObjectStoreCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreRequestParams ObjectStoreRequestParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_PIndexedDBRequestConstructor__ID
    };
    Reply_PIndexedDBRequestConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBObjectStore::Reply_PIndexedDBRequestConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PIndexedDBRequestConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_DeleteIndex :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;
    typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
    typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexConstructorParams IndexConstructorParams;
    typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreCursorConstructorParams ObjectStoreCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreRequestParams ObjectStoreRequestParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_DeleteIndex__ID
    };
    Msg_DeleteIndex() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBObjectStore::Msg_DeleteIndex")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_DeleteIndex(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PIndexedDBCursorConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;
    typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
    typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexConstructorParams IndexConstructorParams;
    typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreCursorConstructorParams ObjectStoreCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreRequestParams ObjectStoreRequestParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_PIndexedDBCursorConstructor__ID
    };
    Msg_PIndexedDBCursorConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBObjectStore::Msg_PIndexedDBCursorConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PIndexedDBCursorConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PIndexedDBCursorConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;
    typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
    typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexConstructorParams IndexConstructorParams;
    typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreCursorConstructorParams ObjectStoreCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreRequestParams ObjectStoreRequestParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_PIndexedDBCursorConstructor__ID
    };
    Reply_PIndexedDBCursorConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBObjectStore::Reply_PIndexedDBCursorConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PIndexedDBCursorConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PIndexedDBObjectStore
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#endif // ifndef PIndexedDBObjectStore_h
