//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PIndexedDBDatabase_h
#define PIndexedDBDatabase_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/dom/indexedDB/SerializationHelpers.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct NormalTransactionParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class NormalTransactionParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;

public:
    NormalTransactionParams();

    NormalTransactionParams(
            const InfallibleTArray<nsString>& _names,
            const Mode& _mode)
    {
        Init();
        Assign(_names, _mode);
    }

    NormalTransactionParams(const NormalTransactionParams& _o)
    {
        Init();
        Assign((_o).names(), (_o).mode());
    }

    ~NormalTransactionParams();

    void
    operator=(const NormalTransactionParams& _o)
    {
        Assign((_o).names(), (_o).mode());
    }

    bool
    operator==(const NormalTransactionParams& _o) const;

    InfallibleTArray<nsString>&
    names()
    {
        return names_;
    }
    const InfallibleTArray<nsString>&
    names() const
    {
        return names_;
    }

    Mode&
    mode()
    {
        return mode_;
    }
    const Mode&
    mode() const
    {
        return mode_;
    }

private:
    void
    Init();

    void
    Assign(
            const InfallibleTArray<nsString>& _names,
            const Mode& _mode);

    InfallibleTArray<nsString> names_;
    Mode mode_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct VersionChangeTransactionParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class VersionChangeTransactionParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;

public:
    VersionChangeTransactionParams();

    VersionChangeTransactionParams(
            const DatabaseInfoGuts& _dbInfo,
            const InfallibleTArray<ObjectStoreInfoGuts>& _osInfo,
            const uint64_t& _oldVersion)
    {
        Init();
        Assign(_dbInfo, _osInfo, _oldVersion);
    }

    VersionChangeTransactionParams(const VersionChangeTransactionParams& _o)
    {
        Init();
        Assign((_o).dbInfo(), (_o).osInfo(), (_o).oldVersion());
    }

    ~VersionChangeTransactionParams();

    void
    operator=(const VersionChangeTransactionParams& _o)
    {
        Assign((_o).dbInfo(), (_o).osInfo(), (_o).oldVersion());
    }

    bool
    operator==(const VersionChangeTransactionParams& _o) const;

    DatabaseInfoGuts&
    dbInfo()
    {
        return dbInfo_;
    }
    const DatabaseInfoGuts&
    dbInfo() const
    {
        return dbInfo_;
    }

    InfallibleTArray<ObjectStoreInfoGuts>&
    osInfo()
    {
        return osInfo_;
    }
    const InfallibleTArray<ObjectStoreInfoGuts>&
    osInfo() const
    {
        return osInfo_;
    }

    uint64_t&
    oldVersion()
    {
        return oldVersion_;
    }
    const uint64_t&
    oldVersion() const
    {
        return oldVersion_;
    }

private:
    void
    Init();

    void
    Assign(
            const DatabaseInfoGuts& _dbInfo,
            const InfallibleTArray<ObjectStoreInfoGuts>& _osInfo,
            const uint64_t& _oldVersion);

    DatabaseInfoGuts dbInfo_;
    InfallibleTArray<ObjectStoreInfoGuts> osInfo_;
    uint64_t oldVersion_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class NormalTransactionParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class VersionChangeTransactionParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union TransactionParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class TransactionParams MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TNormalTransactionParams = 1,
        TVersionChangeTransactionParams,
        T__Last = TVersionChangeTransactionParams
    };

private:
    typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
    typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;
    typedef NormalTransactionParams NormalTransactionParams__tdef;
    typedef VersionChangeTransactionParams VersionChangeTransactionParams__tdef;

    union Value {
        char VNormalTransactionParams[sizeof(NormalTransactionParams)];
        char VVersionChangeTransactionParams[sizeof(VersionChangeTransactionParams)];
    };

    NormalTransactionParams*
    ptr_NormalTransactionParams()
    {
        return reinterpret_cast<NormalTransactionParams*>((&((mValue).VNormalTransactionParams)));
    }
    const NormalTransactionParams* const
    constptr_NormalTransactionParams() const
    {
        return reinterpret_cast<const NormalTransactionParams* const>((&((mValue).VNormalTransactionParams)));
    }
    VersionChangeTransactionParams*
    ptr_VersionChangeTransactionParams()
    {
        return reinterpret_cast<VersionChangeTransactionParams*>((&((mValue).VVersionChangeTransactionParams)));
    }
    const VersionChangeTransactionParams* const
    constptr_VersionChangeTransactionParams() const
    {
        return reinterpret_cast<const VersionChangeTransactionParams* const>((&((mValue).VVersionChangeTransactionParams)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    TransactionParams() :
        mType(T__None)
    {
    }

    TransactionParams(const NormalTransactionParams& aOther);

    TransactionParams(const VersionChangeTransactionParams& aOther);

    TransactionParams(const TransactionParams& aOther);

    ~TransactionParams();

    Type
    type() const
    {
        return mType;
    }

    TransactionParams&
    operator=(const NormalTransactionParams& aRhs);

    TransactionParams&
    operator=(const VersionChangeTransactionParams& aRhs);

    TransactionParams&
    operator=(const TransactionParams& aRhs);

    bool
    operator==(const NormalTransactionParams& aRhs) const;

    bool
    operator==(const VersionChangeTransactionParams& aRhs) const;

    bool
    operator==(const TransactionParams& aRhs) const;

    NormalTransactionParams&
    get_NormalTransactionParams()
    {
        AssertSanity(TNormalTransactionParams);
        return (*(ptr_NormalTransactionParams()));
    }
    const NormalTransactionParams&
    get_NormalTransactionParams() const
    {
        AssertSanity(TNormalTransactionParams);
        return (*(constptr_NormalTransactionParams()));
    }
    operator NormalTransactionParams&()
    {
        return get_NormalTransactionParams();
    }
    operator const NormalTransactionParams&() const
    {
        return get_NormalTransactionParams();
    }

    VersionChangeTransactionParams&
    get_VersionChangeTransactionParams()
    {
        AssertSanity(TVersionChangeTransactionParams);
        return (*(ptr_VersionChangeTransactionParams()));
    }
    const VersionChangeTransactionParams&
    get_VersionChangeTransactionParams() const
    {
        AssertSanity(TVersionChangeTransactionParams);
        return (*(constptr_VersionChangeTransactionParams()));
    }
    operator VersionChangeTransactionParams&()
    {
        return get_VersionChangeTransactionParams();
    }
    operator const VersionChangeTransactionParams&() const
    {
        return get_VersionChangeTransactionParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PIndexedDBDatabaseChild and PIndexedDBDatabaseParent
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PIndexedDBDatabase {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PIndexedDBDatabaseStart = PIndexedDBDatabaseMsgStart << 16,
    PIndexedDBDatabasePreStart = (PIndexedDBDatabaseMsgStart << 16) - 1,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Close__ID,
    Msg_Success__ID,
    Msg_Error__ID,
    Msg_Blocked__ID,
    Msg_VersionChange__ID,
    Msg_Invalidate__ID,
    Msg_PIndexedDBTransactionConstructor__ID,
    Reply_PIndexedDBTransactionConstructor__ID,
    PIndexedDBDatabaseEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;
    typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::indexedDB::ipc::TransactionParams TransactionParams;
    typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBDatabase::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;
    typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::indexedDB::ipc::TransactionParams TransactionParams;
    typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBDatabase::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Close :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;
    typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::indexedDB::ipc::TransactionParams TransactionParams;
    typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;

public:
    enum {
        ID = Msg_Close__ID
    };
    Msg_Close() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBDatabase::Msg_Close")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Close(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Success :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;
    typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::indexedDB::ipc::TransactionParams TransactionParams;
    typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;

public:
    enum {
        ID = Msg_Success__ID
    };
    Msg_Success() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBDatabase::Msg_Success")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Success(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Error :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;
    typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::indexedDB::ipc::TransactionParams TransactionParams;
    typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;

public:
    enum {
        ID = Msg_Error__ID
    };
    Msg_Error() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBDatabase::Msg_Error")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Error(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Blocked :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;
    typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::indexedDB::ipc::TransactionParams TransactionParams;
    typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;

public:
    enum {
        ID = Msg_Blocked__ID
    };
    Msg_Blocked() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBDatabase::Msg_Blocked")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Blocked(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_VersionChange :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;
    typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::indexedDB::ipc::TransactionParams TransactionParams;
    typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;

public:
    enum {
        ID = Msg_VersionChange__ID
    };
    Msg_VersionChange() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBDatabase::Msg_VersionChange")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_VersionChange(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Invalidate :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;
    typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::indexedDB::ipc::TransactionParams TransactionParams;
    typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;

public:
    enum {
        ID = Msg_Invalidate__ID
    };
    Msg_Invalidate() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBDatabase::Msg_Invalidate")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Invalidate(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PIndexedDBTransactionConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;
    typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::indexedDB::ipc::TransactionParams TransactionParams;
    typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;

public:
    enum {
        ID = Msg_PIndexedDBTransactionConstructor__ID
    };
    Msg_PIndexedDBTransactionConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBDatabase::Msg_PIndexedDBTransactionConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PIndexedDBTransactionConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PIndexedDBTransactionConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;
    typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::indexedDB::ipc::TransactionParams TransactionParams;
    typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;

public:
    enum {
        ID = Reply_PIndexedDBTransactionConstructor__ID
    };
    Reply_PIndexedDBTransactionConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBDatabase::Reply_PIndexedDBTransactionConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PIndexedDBTransactionConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PIndexedDBDatabase
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#endif // ifndef PIndexedDBDatabase_h
