//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PIndexedDBRequest_h
#define PIndexedDBRequest_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/dom/indexedDB/SerializationHelpers.h"

namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetResponse MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::PBlobChild PBlobChild;

public:
    GetResponse();

    GetResponse(
            const SerializedStructuredCloneReadInfo& _cloneInfo,
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild)
    {
        Init();
        Assign(_cloneInfo, _blobsParent, _blobsChild);
    }

    GetResponse(const GetResponse& _o)
    {
        Init();
        Assign((_o).cloneInfo(), (_o).blobsParent(), (_o).blobsChild());
    }

    ~GetResponse();

    void
    operator=(const GetResponse& _o)
    {
        Assign((_o).cloneInfo(), (_o).blobsParent(), (_o).blobsChild());
    }

    bool
    operator==(const GetResponse& _o) const;

    SerializedStructuredCloneReadInfo&
    cloneInfo()
    {
        return cloneInfo_;
    }
    const SerializedStructuredCloneReadInfo&
    cloneInfo() const
    {
        return cloneInfo_;
    }

    InfallibleTArray<PBlobParent*>&
    blobsParent()
    {
        return blobsParent_;
    }
    const InfallibleTArray<PBlobParent*>&
    blobsParent() const
    {
        return blobsParent_;
    }

    InfallibleTArray<PBlobChild*>&
    blobsChild()
    {
        return blobsChild_;
    }
    const InfallibleTArray<PBlobChild*>&
    blobsChild() const
    {
        return blobsChild_;
    }

private:
    void
    Init();

    void
    Assign(
            const SerializedStructuredCloneReadInfo& _cloneInfo,
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild);

    SerializedStructuredCloneReadInfo cloneInfo_;
    InfallibleTArray<PBlobParent*> blobsParent_;
    InfallibleTArray<PBlobChild*> blobsChild_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetKeyResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetKeyResponse MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    GetKeyResponse();

    GetKeyResponse(const Key& _key)
    {
        Init();
        Assign(_key);
    }

    GetKeyResponse(const GetKeyResponse& _o)
    {
        Init();
        Assign((_o).key());
    }

    ~GetKeyResponse();

    void
    operator=(const GetKeyResponse& _o)
    {
        Assign((_o).key());
    }

    bool
    operator==(const GetKeyResponse& _o) const;

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

private:
    void
    Init();

    void
    Assign(const Key& _key);

    Key key_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct BlobArray|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class BlobArray MOZ_FINAL
{
private:
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::PBlobChild PBlobChild;

public:
    BlobArray();

    BlobArray(
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild)
    {
        Init();
        Assign(_blobsParent, _blobsChild);
    }

    BlobArray(const BlobArray& _o)
    {
        Init();
        Assign((_o).blobsParent(), (_o).blobsChild());
    }

    ~BlobArray();

    void
    operator=(const BlobArray& _o)
    {
        Assign((_o).blobsParent(), (_o).blobsChild());
    }

    bool
    operator==(const BlobArray& _o) const;

    InfallibleTArray<PBlobParent*>&
    blobsParent()
    {
        return blobsParent_;
    }
    const InfallibleTArray<PBlobParent*>&
    blobsParent() const
    {
        return blobsParent_;
    }

    InfallibleTArray<PBlobChild*>&
    blobsChild()
    {
        return blobsChild_;
    }
    const InfallibleTArray<PBlobChild*>&
    blobsChild() const
    {
        return blobsChild_;
    }

private:
    void
    Init();

    void
    Assign(
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild);

    InfallibleTArray<PBlobParent*> blobsParent_;
    InfallibleTArray<PBlobChild*> blobsChild_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class BlobArray;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetAllResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetAllResponse MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::ipc::BlobArray BlobArray;

public:
    GetAllResponse();

    GetAllResponse(
            const InfallibleTArray<SerializedStructuredCloneReadInfo>& _cloneInfos,
            const InfallibleTArray<BlobArray>& _blobs)
    {
        Init();
        Assign(_cloneInfos, _blobs);
    }

    GetAllResponse(const GetAllResponse& _o)
    {
        Init();
        Assign((_o).cloneInfos(), (_o).blobs());
    }

    ~GetAllResponse();

    void
    operator=(const GetAllResponse& _o)
    {
        Assign((_o).cloneInfos(), (_o).blobs());
    }

    bool
    operator==(const GetAllResponse& _o) const;

    InfallibleTArray<SerializedStructuredCloneReadInfo>&
    cloneInfos()
    {
        return cloneInfos_;
    }
    const InfallibleTArray<SerializedStructuredCloneReadInfo>&
    cloneInfos() const
    {
        return cloneInfos_;
    }

    InfallibleTArray<BlobArray>&
    blobs()
    {
        return blobs_;
    }
    const InfallibleTArray<BlobArray>&
    blobs() const
    {
        return blobs_;
    }

private:
    void
    Init();

    void
    Assign(
            const InfallibleTArray<SerializedStructuredCloneReadInfo>& _cloneInfos,
            const InfallibleTArray<BlobArray>& _blobs);

    InfallibleTArray<SerializedStructuredCloneReadInfo> cloneInfos_;
    InfallibleTArray<BlobArray> blobs_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetAllKeysResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetAllKeysResponse MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    GetAllKeysResponse();

    GetAllKeysResponse(const InfallibleTArray<Key>& _keys)
    {
        Init();
        Assign(_keys);
    }

    GetAllKeysResponse(const GetAllKeysResponse& _o)
    {
        Init();
        Assign((_o).keys());
    }

    ~GetAllKeysResponse();

    void
    operator=(const GetAllKeysResponse& _o)
    {
        Assign((_o).keys());
    }

    bool
    operator==(const GetAllKeysResponse& _o) const;

    InfallibleTArray<Key>&
    keys()
    {
        return keys_;
    }
    const InfallibleTArray<Key>&
    keys() const
    {
        return keys_;
    }

private:
    void
    Init();

    void
    Assign(const InfallibleTArray<Key>& _keys);

    InfallibleTArray<Key> keys_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct AddResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class AddResponse MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    AddResponse();

    AddResponse(const Key& _key)
    {
        Init();
        Assign(_key);
    }

    AddResponse(const AddResponse& _o)
    {
        Init();
        Assign((_o).key());
    }

    ~AddResponse();

    void
    operator=(const AddResponse& _o)
    {
        Assign((_o).key());
    }

    bool
    operator==(const AddResponse& _o) const;

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

private:
    void
    Init();

    void
    Assign(const Key& _key);

    Key key_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PutResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class PutResponse MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    PutResponse();

    PutResponse(const Key& _key)
    {
        Init();
        Assign(_key);
    }

    PutResponse(const PutResponse& _o)
    {
        Init();
        Assign((_o).key());
    }

    ~PutResponse();

    void
    operator=(const PutResponse& _o)
    {
        Assign((_o).key());
    }

    bool
    operator==(const PutResponse& _o) const;

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

private:
    void
    Init();

    void
    Assign(const Key& _key);

    Key key_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DeleteResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class DeleteResponse MOZ_FINAL
{
private:
    typedef mozilla::void_t void_t;

public:
    DeleteResponse();

    DeleteResponse(const void_t& _FIXME_Bug_753159)
    {
        Init();
        Assign(_FIXME_Bug_753159);
    }

    DeleteResponse(const DeleteResponse& _o)
    {
        Init();
        Assign((_o).FIXME_Bug_753159());
    }

    ~DeleteResponse();

    void
    operator=(const DeleteResponse& _o)
    {
        Assign((_o).FIXME_Bug_753159());
    }

    bool
    operator==(const DeleteResponse& _o) const;

    void_t&
    FIXME_Bug_753159()
    {
        return FIXME_Bug_753159_;
    }
    const void_t&
    FIXME_Bug_753159() const
    {
        return FIXME_Bug_753159_;
    }

private:
    void
    Init();

    void
    Assign(const void_t& _FIXME_Bug_753159);

    void_t FIXME_Bug_753159_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ClearResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ClearResponse MOZ_FINAL
{
private:
    typedef mozilla::void_t void_t;

public:
    ClearResponse();

    ClearResponse(const void_t& _FIXME_Bug_753159)
    {
        Init();
        Assign(_FIXME_Bug_753159);
    }

    ClearResponse(const ClearResponse& _o)
    {
        Init();
        Assign((_o).FIXME_Bug_753159());
    }

    ~ClearResponse();

    void
    operator=(const ClearResponse& _o)
    {
        Assign((_o).FIXME_Bug_753159());
    }

    bool
    operator==(const ClearResponse& _o) const;

    void_t&
    FIXME_Bug_753159()
    {
        return FIXME_Bug_753159_;
    }
    const void_t&
    FIXME_Bug_753159() const
    {
        return FIXME_Bug_753159_;
    }

private:
    void
    Init();

    void
    Assign(const void_t& _FIXME_Bug_753159);

    void_t FIXME_Bug_753159_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CountResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class CountResponse MOZ_FINAL
{
private:

public:
    CountResponse();

    CountResponse(const uint64_t& _count)
    {
        Init();
        Assign(_count);
    }

    CountResponse(const CountResponse& _o)
    {
        Init();
        Assign((_o).count());
    }

    ~CountResponse();

    void
    operator=(const CountResponse& _o)
    {
        Assign((_o).count());
    }

    bool
    operator==(const CountResponse& _o) const;

    uint64_t&
    count()
    {
        return count_;
    }
    const uint64_t&
    count() const
    {
        return count_;
    }

private:
    void
    Init();

    void
    Assign(const uint64_t& _count);

    uint64_t count_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBCursorParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBCursorChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union OpenCursorResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class OpenCursorResponse MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TPIndexedDBCursorParent = 1,
        TPIndexedDBCursorChild,
        Tvoid_t,
        T__Last = Tvoid_t
    };

private:
    typedef mozilla::dom::indexedDB::PIndexedDBCursorParent PIndexedDBCursorParent;
    typedef mozilla::dom::indexedDB::PIndexedDBCursorChild PIndexedDBCursorChild;
    typedef mozilla::void_t void_t;
    typedef PIndexedDBCursorParent* PIndexedDBCursorParent__tdef;
    typedef PIndexedDBCursorChild* PIndexedDBCursorChild__tdef;
    typedef void_t void_t__tdef;

    union Value {
        char VPIndexedDBCursorParent[sizeof(PIndexedDBCursorParent*)];
        char VPIndexedDBCursorChild[sizeof(PIndexedDBCursorChild*)];
        char Vvoid_t[sizeof(void_t)];
    };

    PIndexedDBCursorParent**
    ptr_PIndexedDBCursorParent()
    {
        return reinterpret_cast<PIndexedDBCursorParent**>((&((mValue).VPIndexedDBCursorParent)));
    }
    PIndexedDBCursorParent* const*
    constptr_PIndexedDBCursorParent() const
    {
        return reinterpret_cast<PIndexedDBCursorParent* const*>((&((mValue).VPIndexedDBCursorParent)));
    }
    PIndexedDBCursorChild**
    ptr_PIndexedDBCursorChild()
    {
        return reinterpret_cast<PIndexedDBCursorChild**>((&((mValue).VPIndexedDBCursorChild)));
    }
    PIndexedDBCursorChild* const*
    constptr_PIndexedDBCursorChild() const
    {
        return reinterpret_cast<PIndexedDBCursorChild* const*>((&((mValue).VPIndexedDBCursorChild)));
    }
    void_t*
    ptr_void_t()
    {
        return reinterpret_cast<void_t*>((&((mValue).Vvoid_t)));
    }
    const void_t* const
    constptr_void_t() const
    {
        return reinterpret_cast<const void_t* const>((&((mValue).Vvoid_t)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    OpenCursorResponse() :
        mType(T__None)
    {
    }

    OpenCursorResponse(PIndexedDBCursorParent* aOther);

    OpenCursorResponse(PIndexedDBCursorChild* aOther);

    OpenCursorResponse(const void_t& aOther);

    OpenCursorResponse(const OpenCursorResponse& aOther);

    ~OpenCursorResponse();

    Type
    type() const
    {
        return mType;
    }

    OpenCursorResponse&
    operator=(PIndexedDBCursorParent* aRhs);

    OpenCursorResponse&
    operator=(PIndexedDBCursorChild* aRhs);

    OpenCursorResponse&
    operator=(const void_t& aRhs);

    OpenCursorResponse&
    operator=(const OpenCursorResponse& aRhs);

    bool
    operator==(PIndexedDBCursorParent* aRhs) const;

    bool
    operator==(PIndexedDBCursorChild* aRhs) const;

    bool
    operator==(const void_t& aRhs) const;

    bool
    operator==(const OpenCursorResponse& aRhs) const;

    PIndexedDBCursorParent*&
    get_PIndexedDBCursorParent()
    {
        AssertSanity(TPIndexedDBCursorParent);
        return (*(ptr_PIndexedDBCursorParent()));
    }
    PIndexedDBCursorParent*
    get_PIndexedDBCursorParent() const
    {
        AssertSanity(TPIndexedDBCursorParent);
        return (*(constptr_PIndexedDBCursorParent()));
    }
    operator PIndexedDBCursorParent*&()
    {
        return get_PIndexedDBCursorParent();
    }
    operator PIndexedDBCursorParent*() const
    {
        return get_PIndexedDBCursorParent();
    }

    PIndexedDBCursorChild*&
    get_PIndexedDBCursorChild()
    {
        AssertSanity(TPIndexedDBCursorChild);
        return (*(ptr_PIndexedDBCursorChild()));
    }
    PIndexedDBCursorChild*
    get_PIndexedDBCursorChild() const
    {
        AssertSanity(TPIndexedDBCursorChild);
        return (*(constptr_PIndexedDBCursorChild()));
    }
    operator PIndexedDBCursorChild*&()
    {
        return get_PIndexedDBCursorChild();
    }
    operator PIndexedDBCursorChild*() const
    {
        return get_PIndexedDBCursorChild();
    }

    void_t&
    get_void_t()
    {
        AssertSanity(Tvoid_t);
        return (*(ptr_void_t()));
    }
    const void_t&
    get_void_t() const
    {
        AssertSanity(Tvoid_t);
        return (*(constptr_void_t()));
    }
    operator void_t&()
    {
        return get_void_t();
    }
    operator const void_t&() const
    {
        return get_void_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ContinueResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ContinueResponse MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::PBlobChild PBlobChild;

public:
    ContinueResponse();

    ContinueResponse(
            const Key& _key,
            const Key& _objectKey,
            const SerializedStructuredCloneReadInfo& _cloneInfo,
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild)
    {
        Init();
        Assign(_key, _objectKey, _cloneInfo, _blobsParent, _blobsChild);
    }

    ContinueResponse(const ContinueResponse& _o)
    {
        Init();
        Assign((_o).key(), (_o).objectKey(), (_o).cloneInfo(), (_o).blobsParent(), (_o).blobsChild());
    }

    ~ContinueResponse();

    void
    operator=(const ContinueResponse& _o)
    {
        Assign((_o).key(), (_o).objectKey(), (_o).cloneInfo(), (_o).blobsParent(), (_o).blobsChild());
    }

    bool
    operator==(const ContinueResponse& _o) const;

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

    Key&
    objectKey()
    {
        return objectKey_;
    }
    const Key&
    objectKey() const
    {
        return objectKey_;
    }

    SerializedStructuredCloneReadInfo&
    cloneInfo()
    {
        return cloneInfo_;
    }
    const SerializedStructuredCloneReadInfo&
    cloneInfo() const
    {
        return cloneInfo_;
    }

    InfallibleTArray<PBlobParent*>&
    blobsParent()
    {
        return blobsParent_;
    }
    const InfallibleTArray<PBlobParent*>&
    blobsParent() const
    {
        return blobsParent_;
    }

    InfallibleTArray<PBlobChild*>&
    blobsChild()
    {
        return blobsChild_;
    }
    const InfallibleTArray<PBlobChild*>&
    blobsChild() const
    {
        return blobsChild_;
    }

private:
    void
    Init();

    void
    Assign(
            const Key& _key,
            const Key& _objectKey,
            const SerializedStructuredCloneReadInfo& _cloneInfo,
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild);

    Key key_;
    Key objectKey_;
    SerializedStructuredCloneReadInfo cloneInfo_;
    InfallibleTArray<PBlobParent*> blobsParent_;
    InfallibleTArray<PBlobChild*> blobsChild_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetResponse;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetKeyResponse;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetAllResponse;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetAllKeysResponse;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class AddResponse;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class PutResponse;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class DeleteResponse;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ClearResponse;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class CountResponse;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class OpenCursorResponse;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ContinueResponse;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union ResponseValue|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ResponseValue MOZ_FINAL
{
public:
    enum Type {
        T__None,
        Tnsresult = 1,
        TGetResponse,
        TGetKeyResponse,
        TGetAllResponse,
        TGetAllKeysResponse,
        TAddResponse,
        TPutResponse,
        TDeleteResponse,
        TClearResponse,
        TCountResponse,
        TOpenCursorResponse,
        TContinueResponse,
        T__Last = TContinueResponse
    };

private:
    typedef mozilla::dom::indexedDB::ipc::GetResponse GetResponse;
    typedef mozilla::dom::indexedDB::ipc::GetKeyResponse GetKeyResponse;
    typedef mozilla::dom::indexedDB::ipc::GetAllResponse GetAllResponse;
    typedef mozilla::dom::indexedDB::ipc::GetAllKeysResponse GetAllKeysResponse;
    typedef mozilla::dom::indexedDB::ipc::AddResponse AddResponse;
    typedef mozilla::dom::indexedDB::ipc::PutResponse PutResponse;
    typedef mozilla::dom::indexedDB::ipc::DeleteResponse DeleteResponse;
    typedef mozilla::dom::indexedDB::ipc::ClearResponse ClearResponse;
    typedef mozilla::dom::indexedDB::ipc::CountResponse CountResponse;
    typedef mozilla::dom::indexedDB::ipc::OpenCursorResponse OpenCursorResponse;
    typedef mozilla::dom::indexedDB::ipc::ContinueResponse ContinueResponse;
    typedef nsresult nsresult__tdef;
    typedef GetResponse GetResponse__tdef;
    typedef GetKeyResponse GetKeyResponse__tdef;
    typedef GetAllResponse GetAllResponse__tdef;
    typedef GetAllKeysResponse GetAllKeysResponse__tdef;
    typedef AddResponse AddResponse__tdef;
    typedef PutResponse PutResponse__tdef;
    typedef DeleteResponse DeleteResponse__tdef;
    typedef ClearResponse ClearResponse__tdef;
    typedef CountResponse CountResponse__tdef;
    typedef OpenCursorResponse OpenCursorResponse__tdef;
    typedef ContinueResponse ContinueResponse__tdef;

    union Value {
        char Vnsresult[sizeof(nsresult)];
        char VGetResponse[sizeof(GetResponse)];
        char VGetKeyResponse[sizeof(GetKeyResponse)];
        char VGetAllResponse[sizeof(GetAllResponse)];
        char VGetAllKeysResponse[sizeof(GetAllKeysResponse)];
        char VAddResponse[sizeof(AddResponse)];
        char VPutResponse[sizeof(PutResponse)];
        char VDeleteResponse[sizeof(DeleteResponse)];
        char VClearResponse[sizeof(ClearResponse)];
        char VCountResponse[sizeof(CountResponse)];
        char VOpenCursorResponse[sizeof(OpenCursorResponse)];
        char VContinueResponse[sizeof(ContinueResponse)];
    };

    nsresult*
    ptr_nsresult()
    {
        return reinterpret_cast<nsresult*>((&((mValue).Vnsresult)));
    }
    const nsresult* const
    constptr_nsresult() const
    {
        return reinterpret_cast<const nsresult* const>((&((mValue).Vnsresult)));
    }
    GetResponse*
    ptr_GetResponse()
    {
        return reinterpret_cast<GetResponse*>((&((mValue).VGetResponse)));
    }
    const GetResponse* const
    constptr_GetResponse() const
    {
        return reinterpret_cast<const GetResponse* const>((&((mValue).VGetResponse)));
    }
    GetKeyResponse*
    ptr_GetKeyResponse()
    {
        return reinterpret_cast<GetKeyResponse*>((&((mValue).VGetKeyResponse)));
    }
    const GetKeyResponse* const
    constptr_GetKeyResponse() const
    {
        return reinterpret_cast<const GetKeyResponse* const>((&((mValue).VGetKeyResponse)));
    }
    GetAllResponse*
    ptr_GetAllResponse()
    {
        return reinterpret_cast<GetAllResponse*>((&((mValue).VGetAllResponse)));
    }
    const GetAllResponse* const
    constptr_GetAllResponse() const
    {
        return reinterpret_cast<const GetAllResponse* const>((&((mValue).VGetAllResponse)));
    }
    GetAllKeysResponse*
    ptr_GetAllKeysResponse()
    {
        return reinterpret_cast<GetAllKeysResponse*>((&((mValue).VGetAllKeysResponse)));
    }
    const GetAllKeysResponse* const
    constptr_GetAllKeysResponse() const
    {
        return reinterpret_cast<const GetAllKeysResponse* const>((&((mValue).VGetAllKeysResponse)));
    }
    AddResponse*
    ptr_AddResponse()
    {
        return reinterpret_cast<AddResponse*>((&((mValue).VAddResponse)));
    }
    const AddResponse* const
    constptr_AddResponse() const
    {
        return reinterpret_cast<const AddResponse* const>((&((mValue).VAddResponse)));
    }
    PutResponse*
    ptr_PutResponse()
    {
        return reinterpret_cast<PutResponse*>((&((mValue).VPutResponse)));
    }
    const PutResponse* const
    constptr_PutResponse() const
    {
        return reinterpret_cast<const PutResponse* const>((&((mValue).VPutResponse)));
    }
    DeleteResponse*
    ptr_DeleteResponse()
    {
        return reinterpret_cast<DeleteResponse*>((&((mValue).VDeleteResponse)));
    }
    const DeleteResponse* const
    constptr_DeleteResponse() const
    {
        return reinterpret_cast<const DeleteResponse* const>((&((mValue).VDeleteResponse)));
    }
    ClearResponse*
    ptr_ClearResponse()
    {
        return reinterpret_cast<ClearResponse*>((&((mValue).VClearResponse)));
    }
    const ClearResponse* const
    constptr_ClearResponse() const
    {
        return reinterpret_cast<const ClearResponse* const>((&((mValue).VClearResponse)));
    }
    CountResponse*
    ptr_CountResponse()
    {
        return reinterpret_cast<CountResponse*>((&((mValue).VCountResponse)));
    }
    const CountResponse* const
    constptr_CountResponse() const
    {
        return reinterpret_cast<const CountResponse* const>((&((mValue).VCountResponse)));
    }
    OpenCursorResponse*
    ptr_OpenCursorResponse()
    {
        return reinterpret_cast<OpenCursorResponse*>((&((mValue).VOpenCursorResponse)));
    }
    const OpenCursorResponse* const
    constptr_OpenCursorResponse() const
    {
        return reinterpret_cast<const OpenCursorResponse* const>((&((mValue).VOpenCursorResponse)));
    }
    ContinueResponse*
    ptr_ContinueResponse()
    {
        return reinterpret_cast<ContinueResponse*>((&((mValue).VContinueResponse)));
    }
    const ContinueResponse* const
    constptr_ContinueResponse() const
    {
        return reinterpret_cast<const ContinueResponse* const>((&((mValue).VContinueResponse)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    ResponseValue() :
        mType(T__None)
    {
    }

    ResponseValue(const nsresult& aOther);

    ResponseValue(const GetResponse& aOther);

    ResponseValue(const GetKeyResponse& aOther);

    ResponseValue(const GetAllResponse& aOther);

    ResponseValue(const GetAllKeysResponse& aOther);

    ResponseValue(const AddResponse& aOther);

    ResponseValue(const PutResponse& aOther);

    ResponseValue(const DeleteResponse& aOther);

    ResponseValue(const ClearResponse& aOther);

    ResponseValue(const CountResponse& aOther);

    ResponseValue(const OpenCursorResponse& aOther);

    ResponseValue(const ContinueResponse& aOther);

    ResponseValue(const ResponseValue& aOther);

    ~ResponseValue();

    Type
    type() const
    {
        return mType;
    }

    ResponseValue&
    operator=(const nsresult& aRhs);

    ResponseValue&
    operator=(const GetResponse& aRhs);

    ResponseValue&
    operator=(const GetKeyResponse& aRhs);

    ResponseValue&
    operator=(const GetAllResponse& aRhs);

    ResponseValue&
    operator=(const GetAllKeysResponse& aRhs);

    ResponseValue&
    operator=(const AddResponse& aRhs);

    ResponseValue&
    operator=(const PutResponse& aRhs);

    ResponseValue&
    operator=(const DeleteResponse& aRhs);

    ResponseValue&
    operator=(const ClearResponse& aRhs);

    ResponseValue&
    operator=(const CountResponse& aRhs);

    ResponseValue&
    operator=(const OpenCursorResponse& aRhs);

    ResponseValue&
    operator=(const ContinueResponse& aRhs);

    ResponseValue&
    operator=(const ResponseValue& aRhs);

    bool
    operator==(const nsresult& aRhs) const;

    bool
    operator==(const GetResponse& aRhs) const;

    bool
    operator==(const GetKeyResponse& aRhs) const;

    bool
    operator==(const GetAllResponse& aRhs) const;

    bool
    operator==(const GetAllKeysResponse& aRhs) const;

    bool
    operator==(const AddResponse& aRhs) const;

    bool
    operator==(const PutResponse& aRhs) const;

    bool
    operator==(const DeleteResponse& aRhs) const;

    bool
    operator==(const ClearResponse& aRhs) const;

    bool
    operator==(const CountResponse& aRhs) const;

    bool
    operator==(const OpenCursorResponse& aRhs) const;

    bool
    operator==(const ContinueResponse& aRhs) const;

    bool
    operator==(const ResponseValue& aRhs) const;

    nsresult&
    get_nsresult()
    {
        AssertSanity(Tnsresult);
        return (*(ptr_nsresult()));
    }
    const nsresult&
    get_nsresult() const
    {
        AssertSanity(Tnsresult);
        return (*(constptr_nsresult()));
    }
    operator nsresult&()
    {
        return get_nsresult();
    }
    operator const nsresult&() const
    {
        return get_nsresult();
    }

    GetResponse&
    get_GetResponse()
    {
        AssertSanity(TGetResponse);
        return (*(ptr_GetResponse()));
    }
    const GetResponse&
    get_GetResponse() const
    {
        AssertSanity(TGetResponse);
        return (*(constptr_GetResponse()));
    }
    operator GetResponse&()
    {
        return get_GetResponse();
    }
    operator const GetResponse&() const
    {
        return get_GetResponse();
    }

    GetKeyResponse&
    get_GetKeyResponse()
    {
        AssertSanity(TGetKeyResponse);
        return (*(ptr_GetKeyResponse()));
    }
    const GetKeyResponse&
    get_GetKeyResponse() const
    {
        AssertSanity(TGetKeyResponse);
        return (*(constptr_GetKeyResponse()));
    }
    operator GetKeyResponse&()
    {
        return get_GetKeyResponse();
    }
    operator const GetKeyResponse&() const
    {
        return get_GetKeyResponse();
    }

    GetAllResponse&
    get_GetAllResponse()
    {
        AssertSanity(TGetAllResponse);
        return (*(ptr_GetAllResponse()));
    }
    const GetAllResponse&
    get_GetAllResponse() const
    {
        AssertSanity(TGetAllResponse);
        return (*(constptr_GetAllResponse()));
    }
    operator GetAllResponse&()
    {
        return get_GetAllResponse();
    }
    operator const GetAllResponse&() const
    {
        return get_GetAllResponse();
    }

    GetAllKeysResponse&
    get_GetAllKeysResponse()
    {
        AssertSanity(TGetAllKeysResponse);
        return (*(ptr_GetAllKeysResponse()));
    }
    const GetAllKeysResponse&
    get_GetAllKeysResponse() const
    {
        AssertSanity(TGetAllKeysResponse);
        return (*(constptr_GetAllKeysResponse()));
    }
    operator GetAllKeysResponse&()
    {
        return get_GetAllKeysResponse();
    }
    operator const GetAllKeysResponse&() const
    {
        return get_GetAllKeysResponse();
    }

    AddResponse&
    get_AddResponse()
    {
        AssertSanity(TAddResponse);
        return (*(ptr_AddResponse()));
    }
    const AddResponse&
    get_AddResponse() const
    {
        AssertSanity(TAddResponse);
        return (*(constptr_AddResponse()));
    }
    operator AddResponse&()
    {
        return get_AddResponse();
    }
    operator const AddResponse&() const
    {
        return get_AddResponse();
    }

    PutResponse&
    get_PutResponse()
    {
        AssertSanity(TPutResponse);
        return (*(ptr_PutResponse()));
    }
    const PutResponse&
    get_PutResponse() const
    {
        AssertSanity(TPutResponse);
        return (*(constptr_PutResponse()));
    }
    operator PutResponse&()
    {
        return get_PutResponse();
    }
    operator const PutResponse&() const
    {
        return get_PutResponse();
    }

    DeleteResponse&
    get_DeleteResponse()
    {
        AssertSanity(TDeleteResponse);
        return (*(ptr_DeleteResponse()));
    }
    const DeleteResponse&
    get_DeleteResponse() const
    {
        AssertSanity(TDeleteResponse);
        return (*(constptr_DeleteResponse()));
    }
    operator DeleteResponse&()
    {
        return get_DeleteResponse();
    }
    operator const DeleteResponse&() const
    {
        return get_DeleteResponse();
    }

    ClearResponse&
    get_ClearResponse()
    {
        AssertSanity(TClearResponse);
        return (*(ptr_ClearResponse()));
    }
    const ClearResponse&
    get_ClearResponse() const
    {
        AssertSanity(TClearResponse);
        return (*(constptr_ClearResponse()));
    }
    operator ClearResponse&()
    {
        return get_ClearResponse();
    }
    operator const ClearResponse&() const
    {
        return get_ClearResponse();
    }

    CountResponse&
    get_CountResponse()
    {
        AssertSanity(TCountResponse);
        return (*(ptr_CountResponse()));
    }
    const CountResponse&
    get_CountResponse() const
    {
        AssertSanity(TCountResponse);
        return (*(constptr_CountResponse()));
    }
    operator CountResponse&()
    {
        return get_CountResponse();
    }
    operator const CountResponse&() const
    {
        return get_CountResponse();
    }

    OpenCursorResponse&
    get_OpenCursorResponse()
    {
        AssertSanity(TOpenCursorResponse);
        return (*(ptr_OpenCursorResponse()));
    }
    const OpenCursorResponse&
    get_OpenCursorResponse() const
    {
        AssertSanity(TOpenCursorResponse);
        return (*(constptr_OpenCursorResponse()));
    }
    operator OpenCursorResponse&()
    {
        return get_OpenCursorResponse();
    }
    operator const OpenCursorResponse&() const
    {
        return get_OpenCursorResponse();
    }

    ContinueResponse&
    get_ContinueResponse()
    {
        AssertSanity(TContinueResponse);
        return (*(ptr_ContinueResponse()));
    }
    const ContinueResponse&
    get_ContinueResponse() const
    {
        AssertSanity(TContinueResponse);
        return (*(constptr_ContinueResponse()));
    }
    operator ContinueResponse&()
    {
        return get_ContinueResponse();
    }
    operator const ContinueResponse&() const
    {
        return get_ContinueResponse();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PIndexedDBRequestChild and PIndexedDBRequestParent
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PIndexedDBRequest {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PIndexedDBRequestStart = PIndexedDBRequestMsgStart << 16,
    PIndexedDBRequestPreStart = (PIndexedDBRequestMsgStart << 16) - 1,
    Msg___delete____ID,
    Reply___delete____ID,
    PIndexedDBRequestEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddResponse AddResponse;
    typedef mozilla::dom::indexedDB::ipc::BlobArray BlobArray;
    typedef mozilla::dom::indexedDB::ipc::ClearResponse ClearResponse;
    typedef mozilla::dom::indexedDB::ipc::ContinueResponse ContinueResponse;
    typedef mozilla::dom::indexedDB::ipc::CountResponse CountResponse;
    typedef mozilla::dom::indexedDB::ipc::DeleteResponse DeleteResponse;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetAllKeysResponse GetAllKeysResponse;
    typedef mozilla::dom::indexedDB::ipc::GetAllResponse GetAllResponse;
    typedef mozilla::dom::indexedDB::ipc::GetKeyResponse GetKeyResponse;
    typedef mozilla::dom::indexedDB::ipc::GetResponse GetResponse;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::OpenCursorResponse OpenCursorResponse;
    typedef mozilla::dom::indexedDB::ipc::PutResponse PutResponse;
    typedef mozilla::dom::indexedDB::ipc::ResponseValue ResponseValue;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBRequest::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddResponse AddResponse;
    typedef mozilla::dom::indexedDB::ipc::BlobArray BlobArray;
    typedef mozilla::dom::indexedDB::ipc::ClearResponse ClearResponse;
    typedef mozilla::dom::indexedDB::ipc::ContinueResponse ContinueResponse;
    typedef mozilla::dom::indexedDB::ipc::CountResponse CountResponse;
    typedef mozilla::dom::indexedDB::ipc::DeleteResponse DeleteResponse;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetAllKeysResponse GetAllKeysResponse;
    typedef mozilla::dom::indexedDB::ipc::GetAllResponse GetAllResponse;
    typedef mozilla::dom::indexedDB::ipc::GetKeyResponse GetKeyResponse;
    typedef mozilla::dom::indexedDB::ipc::GetResponse GetResponse;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::OpenCursorResponse OpenCursorResponse;
    typedef mozilla::dom::indexedDB::ipc::PutResponse PutResponse;
    typedef mozilla::dom::indexedDB::ipc::ResponseValue ResponseValue;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBRequest::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PIndexedDBRequest
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#endif // ifndef PIndexedDBRequest_h
