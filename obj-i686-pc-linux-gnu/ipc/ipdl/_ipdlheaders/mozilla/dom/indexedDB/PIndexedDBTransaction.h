//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PIndexedDBTransaction_h
#define PIndexedDBTransaction_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/dom/indexedDB/SerializationHelpers.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CreateObjectStoreParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class CreateObjectStoreParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;

public:
    CreateObjectStoreParams();

    CreateObjectStoreParams(const ObjectStoreInfoGuts& _info)
    {
        Init();
        Assign(_info);
    }

    CreateObjectStoreParams(const CreateObjectStoreParams& _o)
    {
        Init();
        Assign((_o).info());
    }

    ~CreateObjectStoreParams();

    void
    operator=(const CreateObjectStoreParams& _o)
    {
        Assign((_o).info());
    }

    bool
    operator==(const CreateObjectStoreParams& _o) const;

    ObjectStoreInfoGuts&
    info()
    {
        return info_;
    }
    const ObjectStoreInfoGuts&
    info() const
    {
        return info_;
    }

private:
    void
    Init();

    void
    Assign(const ObjectStoreInfoGuts& _info);

    ObjectStoreInfoGuts info_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetObjectStoreParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetObjectStoreParams MOZ_FINAL
{
private:

public:
    GetObjectStoreParams();

    GetObjectStoreParams(const nsString& _name)
    {
        Init();
        Assign(_name);
    }

    GetObjectStoreParams(const GetObjectStoreParams& _o)
    {
        Init();
        Assign((_o).name());
    }

    ~GetObjectStoreParams();

    void
    operator=(const GetObjectStoreParams& _o)
    {
        Assign((_o).name());
    }

    bool
    operator==(const GetObjectStoreParams& _o) const;

    nsString&
    name()
    {
        return name_;
    }
    const nsString&
    name() const
    {
        return name_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _name);

    nsString name_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class CreateObjectStoreParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetObjectStoreParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union ObjectStoreConstructorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ObjectStoreConstructorParams MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TCreateObjectStoreParams = 1,
        TGetObjectStoreParams,
        T__Last = TGetObjectStoreParams
    };

private:
    typedef mozilla::dom::indexedDB::ipc::CreateObjectStoreParams CreateObjectStoreParams;
    typedef mozilla::dom::indexedDB::ipc::GetObjectStoreParams GetObjectStoreParams;
    typedef CreateObjectStoreParams CreateObjectStoreParams__tdef;
    typedef GetObjectStoreParams GetObjectStoreParams__tdef;

    union Value {
        char VCreateObjectStoreParams[sizeof(CreateObjectStoreParams)];
        char VGetObjectStoreParams[sizeof(GetObjectStoreParams)];
    };

    CreateObjectStoreParams*
    ptr_CreateObjectStoreParams()
    {
        return reinterpret_cast<CreateObjectStoreParams*>((&((mValue).VCreateObjectStoreParams)));
    }
    const CreateObjectStoreParams* const
    constptr_CreateObjectStoreParams() const
    {
        return reinterpret_cast<const CreateObjectStoreParams* const>((&((mValue).VCreateObjectStoreParams)));
    }
    GetObjectStoreParams*
    ptr_GetObjectStoreParams()
    {
        return reinterpret_cast<GetObjectStoreParams*>((&((mValue).VGetObjectStoreParams)));
    }
    const GetObjectStoreParams* const
    constptr_GetObjectStoreParams() const
    {
        return reinterpret_cast<const GetObjectStoreParams* const>((&((mValue).VGetObjectStoreParams)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    ObjectStoreConstructorParams() :
        mType(T__None)
    {
    }

    ObjectStoreConstructorParams(const CreateObjectStoreParams& aOther);

    ObjectStoreConstructorParams(const GetObjectStoreParams& aOther);

    ObjectStoreConstructorParams(const ObjectStoreConstructorParams& aOther);

    ~ObjectStoreConstructorParams();

    Type
    type() const
    {
        return mType;
    }

    ObjectStoreConstructorParams&
    operator=(const CreateObjectStoreParams& aRhs);

    ObjectStoreConstructorParams&
    operator=(const GetObjectStoreParams& aRhs);

    ObjectStoreConstructorParams&
    operator=(const ObjectStoreConstructorParams& aRhs);

    bool
    operator==(const CreateObjectStoreParams& aRhs) const;

    bool
    operator==(const GetObjectStoreParams& aRhs) const;

    bool
    operator==(const ObjectStoreConstructorParams& aRhs) const;

    CreateObjectStoreParams&
    get_CreateObjectStoreParams()
    {
        AssertSanity(TCreateObjectStoreParams);
        return (*(ptr_CreateObjectStoreParams()));
    }
    const CreateObjectStoreParams&
    get_CreateObjectStoreParams() const
    {
        AssertSanity(TCreateObjectStoreParams);
        return (*(constptr_CreateObjectStoreParams()));
    }
    operator CreateObjectStoreParams&()
    {
        return get_CreateObjectStoreParams();
    }
    operator const CreateObjectStoreParams&() const
    {
        return get_CreateObjectStoreParams();
    }

    GetObjectStoreParams&
    get_GetObjectStoreParams()
    {
        AssertSanity(TGetObjectStoreParams);
        return (*(ptr_GetObjectStoreParams()));
    }
    const GetObjectStoreParams&
    get_GetObjectStoreParams() const
    {
        AssertSanity(TGetObjectStoreParams);
        return (*(constptr_GetObjectStoreParams()));
    }
    operator GetObjectStoreParams&()
    {
        return get_GetObjectStoreParams();
    }
    operator const GetObjectStoreParams&() const
    {
        return get_GetObjectStoreParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CompleteResult|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class CompleteResult MOZ_FINAL
{
private:

public:
    CompleteResult()
    {
        Init();
        Assign();
    }

    CompleteResult(const CompleteResult& _o)
    {
        Init();
        Assign();
    }

    ~CompleteResult();

    void
    operator=(const CompleteResult& _o)
    {
        Assign();
    }

    bool
    operator==(const CompleteResult& _o) const;

private:
    void
    Init();

    void
    Assign();

};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct AbortResult|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class AbortResult MOZ_FINAL
{
private:

public:
    AbortResult();

    AbortResult(const nsresult& _errorCode)
    {
        Init();
        Assign(_errorCode);
    }

    AbortResult(const AbortResult& _o)
    {
        Init();
        Assign((_o).errorCode());
    }

    ~AbortResult();

    void
    operator=(const AbortResult& _o)
    {
        Assign((_o).errorCode());
    }

    bool
    operator==(const AbortResult& _o) const;

    nsresult&
    errorCode()
    {
        return errorCode_;
    }
    const nsresult&
    errorCode() const
    {
        return errorCode_;
    }

private:
    void
    Init();

    void
    Assign(const nsresult& _errorCode);

    nsresult errorCode_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class CompleteResult;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class AbortResult;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union CompleteParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class CompleteParams MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TCompleteResult = 1,
        TAbortResult,
        T__Last = TAbortResult
    };

private:
    typedef mozilla::dom::indexedDB::ipc::CompleteResult CompleteResult;
    typedef mozilla::dom::indexedDB::ipc::AbortResult AbortResult;
    typedef CompleteResult CompleteResult__tdef;
    typedef AbortResult AbortResult__tdef;

    union Value {
        char VCompleteResult[sizeof(CompleteResult)];
        char VAbortResult[sizeof(AbortResult)];
    };

    CompleteResult*
    ptr_CompleteResult()
    {
        return reinterpret_cast<CompleteResult*>((&((mValue).VCompleteResult)));
    }
    const CompleteResult* const
    constptr_CompleteResult() const
    {
        return reinterpret_cast<const CompleteResult* const>((&((mValue).VCompleteResult)));
    }
    AbortResult*
    ptr_AbortResult()
    {
        return reinterpret_cast<AbortResult*>((&((mValue).VAbortResult)));
    }
    const AbortResult* const
    constptr_AbortResult() const
    {
        return reinterpret_cast<const AbortResult* const>((&((mValue).VAbortResult)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    CompleteParams() :
        mType(T__None)
    {
    }

    CompleteParams(const CompleteResult& aOther);

    CompleteParams(const AbortResult& aOther);

    CompleteParams(const CompleteParams& aOther);

    ~CompleteParams();

    Type
    type() const
    {
        return mType;
    }

    CompleteParams&
    operator=(const CompleteResult& aRhs);

    CompleteParams&
    operator=(const AbortResult& aRhs);

    CompleteParams&
    operator=(const CompleteParams& aRhs);

    bool
    operator==(const CompleteResult& aRhs) const;

    bool
    operator==(const AbortResult& aRhs) const;

    bool
    operator==(const CompleteParams& aRhs) const;

    CompleteResult&
    get_CompleteResult()
    {
        AssertSanity(TCompleteResult);
        return (*(ptr_CompleteResult()));
    }
    const CompleteResult&
    get_CompleteResult() const
    {
        AssertSanity(TCompleteResult);
        return (*(constptr_CompleteResult()));
    }
    operator CompleteResult&()
    {
        return get_CompleteResult();
    }
    operator const CompleteResult&() const
    {
        return get_CompleteResult();
    }

    AbortResult&
    get_AbortResult()
    {
        AssertSanity(TAbortResult);
        return (*(ptr_AbortResult()));
    }
    const AbortResult&
    get_AbortResult() const
    {
        AssertSanity(TAbortResult);
        return (*(constptr_AbortResult()));
    }
    operator AbortResult&()
    {
        return get_AbortResult();
    }
    operator const AbortResult&() const
    {
        return get_AbortResult();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PIndexedDBTransactionChild and PIndexedDBTransactionParent
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PIndexedDBTransaction {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PIndexedDBTransactionStart = PIndexedDBTransactionMsgStart << 16,
    PIndexedDBTransactionPreStart = (PIndexedDBTransactionMsgStart << 16) - 1,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_PIndexedDBObjectStoreConstructor__ID,
    Reply_PIndexedDBObjectStoreConstructor__ID,
    Msg_Abort__ID,
    Msg_AllRequestsFinished__ID,
    Msg_DeleteObjectStore__ID,
    Msg_Complete__ID,
    PIndexedDBTransactionEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::dom::indexedDB::ipc::AbortResult AbortResult;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::CompleteParams CompleteParams;
    typedef mozilla::dom::indexedDB::ipc::CompleteResult CompleteResult;
    typedef mozilla::dom::indexedDB::ipc::CreateObjectStoreParams CreateObjectStoreParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetObjectStoreParams GetObjectStoreParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreConstructorParams ObjectStoreConstructorParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBTransaction::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::dom::indexedDB::ipc::AbortResult AbortResult;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::CompleteParams CompleteParams;
    typedef mozilla::dom::indexedDB::ipc::CompleteResult CompleteResult;
    typedef mozilla::dom::indexedDB::ipc::CreateObjectStoreParams CreateObjectStoreParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetObjectStoreParams GetObjectStoreParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreConstructorParams ObjectStoreConstructorParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBTransaction::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PIndexedDBObjectStoreConstructor :
    public IPC::Message
{
private:
    typedef mozilla::dom::indexedDB::ipc::AbortResult AbortResult;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::CompleteParams CompleteParams;
    typedef mozilla::dom::indexedDB::ipc::CompleteResult CompleteResult;
    typedef mozilla::dom::indexedDB::ipc::CreateObjectStoreParams CreateObjectStoreParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetObjectStoreParams GetObjectStoreParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreConstructorParams ObjectStoreConstructorParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_PIndexedDBObjectStoreConstructor__ID
    };
    Msg_PIndexedDBObjectStoreConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBTransaction::Msg_PIndexedDBObjectStoreConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PIndexedDBObjectStoreConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PIndexedDBObjectStoreConstructor :
    public IPC::Message
{
private:
    typedef mozilla::dom::indexedDB::ipc::AbortResult AbortResult;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::CompleteParams CompleteParams;
    typedef mozilla::dom::indexedDB::ipc::CompleteResult CompleteResult;
    typedef mozilla::dom::indexedDB::ipc::CreateObjectStoreParams CreateObjectStoreParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetObjectStoreParams GetObjectStoreParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreConstructorParams ObjectStoreConstructorParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_PIndexedDBObjectStoreConstructor__ID
    };
    Reply_PIndexedDBObjectStoreConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBTransaction::Reply_PIndexedDBObjectStoreConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PIndexedDBObjectStoreConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Abort :
    public IPC::Message
{
private:
    typedef mozilla::dom::indexedDB::ipc::AbortResult AbortResult;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::CompleteParams CompleteParams;
    typedef mozilla::dom::indexedDB::ipc::CompleteResult CompleteResult;
    typedef mozilla::dom::indexedDB::ipc::CreateObjectStoreParams CreateObjectStoreParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetObjectStoreParams GetObjectStoreParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreConstructorParams ObjectStoreConstructorParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_Abort__ID
    };
    Msg_Abort() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBTransaction::Msg_Abort")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Abort(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_AllRequestsFinished :
    public IPC::Message
{
private:
    typedef mozilla::dom::indexedDB::ipc::AbortResult AbortResult;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::CompleteParams CompleteParams;
    typedef mozilla::dom::indexedDB::ipc::CompleteResult CompleteResult;
    typedef mozilla::dom::indexedDB::ipc::CreateObjectStoreParams CreateObjectStoreParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetObjectStoreParams GetObjectStoreParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreConstructorParams ObjectStoreConstructorParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_AllRequestsFinished__ID
    };
    Msg_AllRequestsFinished() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBTransaction::Msg_AllRequestsFinished")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_AllRequestsFinished(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_DeleteObjectStore :
    public IPC::Message
{
private:
    typedef mozilla::dom::indexedDB::ipc::AbortResult AbortResult;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::CompleteParams CompleteParams;
    typedef mozilla::dom::indexedDB::ipc::CompleteResult CompleteResult;
    typedef mozilla::dom::indexedDB::ipc::CreateObjectStoreParams CreateObjectStoreParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetObjectStoreParams GetObjectStoreParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreConstructorParams ObjectStoreConstructorParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_DeleteObjectStore__ID
    };
    Msg_DeleteObjectStore() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBTransaction::Msg_DeleteObjectStore")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_DeleteObjectStore(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Complete :
    public IPC::Message
{
private:
    typedef mozilla::dom::indexedDB::ipc::AbortResult AbortResult;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::CompleteParams CompleteParams;
    typedef mozilla::dom::indexedDB::ipc::CompleteResult CompleteResult;
    typedef mozilla::dom::indexedDB::ipc::CreateObjectStoreParams CreateObjectStoreParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetObjectStoreParams GetObjectStoreParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreConstructorParams ObjectStoreConstructorParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_Complete__ID
    };
    Msg_Complete() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBTransaction::Msg_Complete")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Complete(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PIndexedDBTransaction
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#endif // ifndef PIndexedDBTransaction_h
