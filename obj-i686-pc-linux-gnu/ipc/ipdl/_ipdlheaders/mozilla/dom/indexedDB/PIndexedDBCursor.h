//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PIndexedDBCursor_h
#define PIndexedDBCursor_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/dom/indexedDB/SerializationHelpers.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ContinueParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ContinueParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    ContinueParams();

    ContinueParams(
            const Key& _key,
            const uint32_t& _count)
    {
        Init();
        Assign(_key, _count);
    }

    ContinueParams(const ContinueParams& _o)
    {
        Init();
        Assign((_o).key(), (_o).count());
    }

    ~ContinueParams();

    void
    operator=(const ContinueParams& _o)
    {
        Assign((_o).key(), (_o).count());
    }

    bool
    operator==(const ContinueParams& _o) const;

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

    uint32_t&
    count()
    {
        return count_;
    }
    const uint32_t&
    count() const
    {
        return count_;
    }

private:
    void
    Init();

    void
    Assign(
            const Key& _key,
            const uint32_t& _count);

    Key key_;
    uint32_t count_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class ContinueParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union CursorRequestParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class CursorRequestParams MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TContinueParams = 1,
        T__Last = TContinueParams
    };

private:
    typedef mozilla::dom::indexedDB::ipc::ContinueParams ContinueParams;
    typedef ContinueParams ContinueParams__tdef;

    union Value {
        char VContinueParams[sizeof(ContinueParams)];
    };

    ContinueParams*
    ptr_ContinueParams()
    {
        return reinterpret_cast<ContinueParams*>((&((mValue).VContinueParams)));
    }
    const ContinueParams* const
    constptr_ContinueParams() const
    {
        return reinterpret_cast<const ContinueParams* const>((&((mValue).VContinueParams)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    CursorRequestParams() :
        mType(T__None)
    {
    }

    CursorRequestParams(const ContinueParams& aOther);

    CursorRequestParams(const CursorRequestParams& aOther);

    ~CursorRequestParams();

    Type
    type() const
    {
        return mType;
    }

    CursorRequestParams&
    operator=(const ContinueParams& aRhs);

    CursorRequestParams&
    operator=(const CursorRequestParams& aRhs);

    bool
    operator==(const ContinueParams& aRhs) const;

    bool
    operator==(const CursorRequestParams& aRhs) const;

    ContinueParams&
    get_ContinueParams()
    {
        AssertSanity(TContinueParams);
        return (*(ptr_ContinueParams()));
    }
    const ContinueParams&
    get_ContinueParams() const
    {
        AssertSanity(TContinueParams);
        return (*(constptr_ContinueParams()));
    }
    operator ContinueParams&()
    {
        return get_ContinueParams();
    }
    operator const ContinueParams&() const
    {
        return get_ContinueParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PIndexedDBCursorChild and PIndexedDBCursorParent
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PIndexedDBCursor {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PIndexedDBCursorStart = PIndexedDBCursorMsgStart << 16,
    PIndexedDBCursorPreStart = (PIndexedDBCursorMsgStart << 16) - 1,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_PIndexedDBRequestConstructor__ID,
    Reply_PIndexedDBRequestConstructor__ID,
    PIndexedDBCursorEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::ContinueParams ContinueParams;
    typedef mozilla::dom::indexedDB::ipc::CursorRequestParams CursorRequestParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBCursor::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::ContinueParams ContinueParams;
    typedef mozilla::dom::indexedDB::ipc::CursorRequestParams CursorRequestParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBCursor::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PIndexedDBRequestConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::ContinueParams ContinueParams;
    typedef mozilla::dom::indexedDB::ipc::CursorRequestParams CursorRequestParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_PIndexedDBRequestConstructor__ID
    };
    Msg_PIndexedDBRequestConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBCursor::Msg_PIndexedDBRequestConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PIndexedDBRequestConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PIndexedDBRequestConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::ContinueParams ContinueParams;
    typedef mozilla::dom::indexedDB::ipc::CursorRequestParams CursorRequestParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_PIndexedDBRequestConstructor__ID
    };
    Reply_PIndexedDBRequestConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBCursor::Reply_PIndexedDBRequestConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PIndexedDBRequestConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PIndexedDBCursor
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#endif // ifndef PIndexedDBCursor_h
