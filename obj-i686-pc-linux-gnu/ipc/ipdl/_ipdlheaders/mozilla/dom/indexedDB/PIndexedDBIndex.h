//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PIndexedDBIndex_h
#define PIndexedDBIndex_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/dom/indexedDB/SerializationHelpers.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct KeyRange|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class KeyRange MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    KeyRange();

    KeyRange(
            const Key& _lower,
            const Key& _upper,
            const bool& _lowerOpen,
            const bool& _upperOpen,
            const bool& _isOnly)
    {
        Init();
        Assign(_lower, _upper, _lowerOpen, _upperOpen, _isOnly);
    }

    KeyRange(const KeyRange& _o)
    {
        Init();
        Assign((_o).lower(), (_o).upper(), (_o).lowerOpen(), (_o).upperOpen(), (_o).isOnly());
    }

    ~KeyRange();

    void
    operator=(const KeyRange& _o)
    {
        Assign((_o).lower(), (_o).upper(), (_o).lowerOpen(), (_o).upperOpen(), (_o).isOnly());
    }

    bool
    operator==(const KeyRange& _o) const;

    Key&
    lower()
    {
        return lower_;
    }
    const Key&
    lower() const
    {
        return lower_;
    }

    Key&
    upper()
    {
        return upper_;
    }
    const Key&
    upper() const
    {
        return upper_;
    }

    bool&
    lowerOpen()
    {
        return lowerOpen_;
    }
    const bool&
    lowerOpen() const
    {
        return lowerOpen_;
    }

    bool&
    upperOpen()
    {
        return upperOpen_;
    }
    const bool&
    upperOpen() const
    {
        return upperOpen_;
    }

    bool&
    isOnly()
    {
        return isOnly_;
    }
    const bool&
    isOnly() const
    {
        return isOnly_;
    }

private:
    void
    Init();

    void
    Assign(
            const Key& _lower,
            const Key& _upper,
            const bool& _lowerOpen,
            const bool& _upperOpen,
            const bool& _isOnly);

    Key lower_;
    Key upper_;
    bool lowerOpen_;
    bool upperOpen_;
    bool isOnly_;
};
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class KeyRange;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union OptionalKeyRange|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class OptionalKeyRange MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TKeyRange = 1,
        Tvoid_t,
        T__Last = Tvoid_t
    };

private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::KeyRange KeyRange;
    typedef mozilla::void_t void_t;
    typedef KeyRange KeyRange__tdef;
    typedef void_t void_t__tdef;

    union Value {
        char VKeyRange[sizeof(KeyRange)];
        char Vvoid_t[sizeof(void_t)];
    };

    KeyRange*
    ptr_KeyRange()
    {
        return reinterpret_cast<KeyRange*>((&((mValue).VKeyRange)));
    }
    const KeyRange* const
    constptr_KeyRange() const
    {
        return reinterpret_cast<const KeyRange* const>((&((mValue).VKeyRange)));
    }
    void_t*
    ptr_void_t()
    {
        return reinterpret_cast<void_t*>((&((mValue).Vvoid_t)));
    }
    const void_t* const
    constptr_void_t() const
    {
        return reinterpret_cast<const void_t* const>((&((mValue).Vvoid_t)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    OptionalKeyRange() :
        mType(T__None)
    {
    }

    OptionalKeyRange(const KeyRange& aOther);

    OptionalKeyRange(const void_t& aOther);

    OptionalKeyRange(const OptionalKeyRange& aOther);

    ~OptionalKeyRange();

    Type
    type() const
    {
        return mType;
    }

    OptionalKeyRange&
    operator=(const KeyRange& aRhs);

    OptionalKeyRange&
    operator=(const void_t& aRhs);

    OptionalKeyRange&
    operator=(const OptionalKeyRange& aRhs);

    bool
    operator==(const KeyRange& aRhs) const;

    bool
    operator==(const void_t& aRhs) const;

    bool
    operator==(const OptionalKeyRange& aRhs) const;

    KeyRange&
    get_KeyRange()
    {
        AssertSanity(TKeyRange);
        return (*(ptr_KeyRange()));
    }
    const KeyRange&
    get_KeyRange() const
    {
        AssertSanity(TKeyRange);
        return (*(constptr_KeyRange()));
    }
    operator KeyRange&()
    {
        return get_KeyRange();
    }
    operator const KeyRange&() const
    {
        return get_KeyRange();
    }

    void_t&
    get_void_t()
    {
        AssertSanity(Tvoid_t);
        return (*(ptr_void_t()));
    }
    const void_t&
    get_void_t() const
    {
        AssertSanity(Tvoid_t);
        return (*(constptr_void_t()));
    }
    operator void_t&()
    {
        return get_void_t();
    }
    operator const void_t&() const
    {
        return get_void_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class KeyRange;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class GetParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::KeyRange KeyRange;

public:
    GetParams();

    GetParams(const KeyRange& _keyRange)
    {
        Init();
        Assign(_keyRange);
    }

    GetParams(const GetParams& _o)
    {
        Init();
        Assign((_o).keyRange());
    }

    ~GetParams();

    void
    operator=(const GetParams& _o)
    {
        Assign((_o).keyRange());
    }

    bool
    operator==(const GetParams& _o) const;

    KeyRange&
    keyRange()
    {
        return keyRange_;
    }
    const KeyRange&
    keyRange() const
    {
        return keyRange_;
    }

private:
    void
    Init();

    void
    Assign(const KeyRange& _keyRange);

    KeyRange keyRange_;
};
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class OptionalKeyRange;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetAllParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class GetAllParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OptionalKeyRange OptionalKeyRange;

public:
    GetAllParams();

    GetAllParams(
            const OptionalKeyRange& _optionalKeyRange,
            const uint32_t& _limit)
    {
        Init();
        Assign(_optionalKeyRange, _limit);
    }

    GetAllParams(const GetAllParams& _o)
    {
        Init();
        Assign((_o).optionalKeyRange(), (_o).limit());
    }

    ~GetAllParams();

    void
    operator=(const GetAllParams& _o)
    {
        Assign((_o).optionalKeyRange(), (_o).limit());
    }

    bool
    operator==(const GetAllParams& _o) const;

    OptionalKeyRange&
    optionalKeyRange()
    {
        return optionalKeyRange_;
    }
    const OptionalKeyRange&
    optionalKeyRange() const
    {
        return optionalKeyRange_;
    }

    uint32_t&
    limit()
    {
        return limit_;
    }
    const uint32_t&
    limit() const
    {
        return limit_;
    }

private:
    void
    Init();

    void
    Assign(
            const OptionalKeyRange& _optionalKeyRange,
            const uint32_t& _limit);

    OptionalKeyRange optionalKeyRange_;
    uint32_t limit_;
};
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class OptionalKeyRange;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CountParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class CountParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OptionalKeyRange OptionalKeyRange;

public:
    CountParams();

    CountParams(const OptionalKeyRange& _optionalKeyRange)
    {
        Init();
        Assign(_optionalKeyRange);
    }

    CountParams(const CountParams& _o)
    {
        Init();
        Assign((_o).optionalKeyRange());
    }

    ~CountParams();

    void
    operator=(const CountParams& _o)
    {
        Assign((_o).optionalKeyRange());
    }

    bool
    operator==(const CountParams& _o) const;

    OptionalKeyRange&
    optionalKeyRange()
    {
        return optionalKeyRange_;
    }
    const OptionalKeyRange&
    optionalKeyRange() const
    {
        return optionalKeyRange_;
    }

private:
    void
    Init();

    void
    Assign(const OptionalKeyRange& _optionalKeyRange);

    OptionalKeyRange optionalKeyRange_;
};
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class OptionalKeyRange;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct OpenCursorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class OpenCursorParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;

public:
    OpenCursorParams();

    OpenCursorParams(
            const OptionalKeyRange& _optionalKeyRange,
            const Direction& _direction)
    {
        Init();
        Assign(_optionalKeyRange, _direction);
    }

    OpenCursorParams(const OpenCursorParams& _o)
    {
        Init();
        Assign((_o).optionalKeyRange(), (_o).direction());
    }

    ~OpenCursorParams();

    void
    operator=(const OpenCursorParams& _o)
    {
        Assign((_o).optionalKeyRange(), (_o).direction());
    }

    bool
    operator==(const OpenCursorParams& _o) const;

    OptionalKeyRange&
    optionalKeyRange()
    {
        return optionalKeyRange_;
    }
    const OptionalKeyRange&
    optionalKeyRange() const
    {
        return optionalKeyRange_;
    }

    Direction&
    direction()
    {
        return direction_;
    }
    const Direction&
    direction() const
    {
        return direction_;
    }

private:
    void
    Init();

    void
    Assign(
            const OptionalKeyRange& _optionalKeyRange,
            const Direction& _direction);

    OptionalKeyRange optionalKeyRange_;
    Direction direction_;
};
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class KeyRange;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetKeyParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetKeyParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::KeyRange KeyRange;

public:
    GetKeyParams();

    GetKeyParams(const KeyRange& _keyRange)
    {
        Init();
        Assign(_keyRange);
    }

    GetKeyParams(const GetKeyParams& _o)
    {
        Init();
        Assign((_o).keyRange());
    }

    ~GetKeyParams();

    void
    operator=(const GetKeyParams& _o)
    {
        Assign((_o).keyRange());
    }

    bool
    operator==(const GetKeyParams& _o) const;

    KeyRange&
    keyRange()
    {
        return keyRange_;
    }
    const KeyRange&
    keyRange() const
    {
        return keyRange_;
    }

private:
    void
    Init();

    void
    Assign(const KeyRange& _keyRange);

    KeyRange keyRange_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class OptionalKeyRange;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GetAllKeysParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetAllKeysParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OptionalKeyRange OptionalKeyRange;

public:
    GetAllKeysParams();

    GetAllKeysParams(
            const OptionalKeyRange& _optionalKeyRange,
            const uint32_t& _limit)
    {
        Init();
        Assign(_optionalKeyRange, _limit);
    }

    GetAllKeysParams(const GetAllKeysParams& _o)
    {
        Init();
        Assign((_o).optionalKeyRange(), (_o).limit());
    }

    ~GetAllKeysParams();

    void
    operator=(const GetAllKeysParams& _o)
    {
        Assign((_o).optionalKeyRange(), (_o).limit());
    }

    bool
    operator==(const GetAllKeysParams& _o) const;

    OptionalKeyRange&
    optionalKeyRange()
    {
        return optionalKeyRange_;
    }
    const OptionalKeyRange&
    optionalKeyRange() const
    {
        return optionalKeyRange_;
    }

    uint32_t&
    limit()
    {
        return limit_;
    }
    const uint32_t&
    limit() const
    {
        return limit_;
    }

private:
    void
    Init();

    void
    Assign(
            const OptionalKeyRange& _optionalKeyRange,
            const uint32_t& _limit);

    OptionalKeyRange optionalKeyRange_;
    uint32_t limit_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class OptionalKeyRange;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct OpenKeyCursorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class OpenKeyCursorParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;

public:
    OpenKeyCursorParams();

    OpenKeyCursorParams(
            const OptionalKeyRange& _optionalKeyRange,
            const Direction& _direction)
    {
        Init();
        Assign(_optionalKeyRange, _direction);
    }

    OpenKeyCursorParams(const OpenKeyCursorParams& _o)
    {
        Init();
        Assign((_o).optionalKeyRange(), (_o).direction());
    }

    ~OpenKeyCursorParams();

    void
    operator=(const OpenKeyCursorParams& _o)
    {
        Assign((_o).optionalKeyRange(), (_o).direction());
    }

    bool
    operator==(const OpenKeyCursorParams& _o) const;

    OptionalKeyRange&
    optionalKeyRange()
    {
        return optionalKeyRange_;
    }
    const OptionalKeyRange&
    optionalKeyRange() const
    {
        return optionalKeyRange_;
    }

    Direction&
    direction()
    {
        return direction_;
    }
    const Direction&
    direction() const
    {
        return direction_;
    }

private:
    void
    Init();

    void
    Assign(
            const OptionalKeyRange& _optionalKeyRange,
            const Direction& _direction);

    OptionalKeyRange optionalKeyRange_;
    Direction direction_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class GetParams;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetKeyParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class GetAllParams;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class GetAllKeysParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class CountParams;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
namespace FIXME_Bug_521898_index {
class OpenCursorParams;
} // namespace FIXME_Bug_521898_index
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class OpenKeyCursorParams;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union IndexRequestParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class IndexRequestParams MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TGetParams = 1,
        TGetKeyParams,
        TGetAllParams,
        TGetAllKeysParams,
        TCountParams,
        TOpenCursorParams,
        TOpenKeyCursorParams,
        T__Last = TOpenKeyCursorParams
    };

private:
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::GetKeyParams GetKeyParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetAllKeysParams GetAllKeysParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::OpenKeyCursorParams OpenKeyCursorParams;
    typedef GetParams GetParams__tdef;
    typedef GetKeyParams GetKeyParams__tdef;
    typedef GetAllParams GetAllParams__tdef;
    typedef GetAllKeysParams GetAllKeysParams__tdef;
    typedef CountParams CountParams__tdef;
    typedef OpenCursorParams OpenCursorParams__tdef;
    typedef OpenKeyCursorParams OpenKeyCursorParams__tdef;

    union Value {
        char VGetParams[sizeof(GetParams)];
        char VGetKeyParams[sizeof(GetKeyParams)];
        char VGetAllParams[sizeof(GetAllParams)];
        char VGetAllKeysParams[sizeof(GetAllKeysParams)];
        char VCountParams[sizeof(CountParams)];
        char VOpenCursorParams[sizeof(OpenCursorParams)];
        char VOpenKeyCursorParams[sizeof(OpenKeyCursorParams)];
    };

    GetParams*
    ptr_GetParams()
    {
        return reinterpret_cast<GetParams*>((&((mValue).VGetParams)));
    }
    const GetParams* const
    constptr_GetParams() const
    {
        return reinterpret_cast<const GetParams* const>((&((mValue).VGetParams)));
    }
    GetKeyParams*
    ptr_GetKeyParams()
    {
        return reinterpret_cast<GetKeyParams*>((&((mValue).VGetKeyParams)));
    }
    const GetKeyParams* const
    constptr_GetKeyParams() const
    {
        return reinterpret_cast<const GetKeyParams* const>((&((mValue).VGetKeyParams)));
    }
    GetAllParams*
    ptr_GetAllParams()
    {
        return reinterpret_cast<GetAllParams*>((&((mValue).VGetAllParams)));
    }
    const GetAllParams* const
    constptr_GetAllParams() const
    {
        return reinterpret_cast<const GetAllParams* const>((&((mValue).VGetAllParams)));
    }
    GetAllKeysParams*
    ptr_GetAllKeysParams()
    {
        return reinterpret_cast<GetAllKeysParams*>((&((mValue).VGetAllKeysParams)));
    }
    const GetAllKeysParams* const
    constptr_GetAllKeysParams() const
    {
        return reinterpret_cast<const GetAllKeysParams* const>((&((mValue).VGetAllKeysParams)));
    }
    CountParams*
    ptr_CountParams()
    {
        return reinterpret_cast<CountParams*>((&((mValue).VCountParams)));
    }
    const CountParams* const
    constptr_CountParams() const
    {
        return reinterpret_cast<const CountParams* const>((&((mValue).VCountParams)));
    }
    OpenCursorParams*
    ptr_OpenCursorParams()
    {
        return reinterpret_cast<OpenCursorParams*>((&((mValue).VOpenCursorParams)));
    }
    const OpenCursorParams* const
    constptr_OpenCursorParams() const
    {
        return reinterpret_cast<const OpenCursorParams* const>((&((mValue).VOpenCursorParams)));
    }
    OpenKeyCursorParams*
    ptr_OpenKeyCursorParams()
    {
        return reinterpret_cast<OpenKeyCursorParams*>((&((mValue).VOpenKeyCursorParams)));
    }
    const OpenKeyCursorParams* const
    constptr_OpenKeyCursorParams() const
    {
        return reinterpret_cast<const OpenKeyCursorParams* const>((&((mValue).VOpenKeyCursorParams)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    IndexRequestParams() :
        mType(T__None)
    {
    }

    IndexRequestParams(const GetParams& aOther);

    IndexRequestParams(const GetKeyParams& aOther);

    IndexRequestParams(const GetAllParams& aOther);

    IndexRequestParams(const GetAllKeysParams& aOther);

    IndexRequestParams(const CountParams& aOther);

    IndexRequestParams(const OpenCursorParams& aOther);

    IndexRequestParams(const OpenKeyCursorParams& aOther);

    IndexRequestParams(const IndexRequestParams& aOther);

    ~IndexRequestParams();

    Type
    type() const
    {
        return mType;
    }

    IndexRequestParams&
    operator=(const GetParams& aRhs);

    IndexRequestParams&
    operator=(const GetKeyParams& aRhs);

    IndexRequestParams&
    operator=(const GetAllParams& aRhs);

    IndexRequestParams&
    operator=(const GetAllKeysParams& aRhs);

    IndexRequestParams&
    operator=(const CountParams& aRhs);

    IndexRequestParams&
    operator=(const OpenCursorParams& aRhs);

    IndexRequestParams&
    operator=(const OpenKeyCursorParams& aRhs);

    IndexRequestParams&
    operator=(const IndexRequestParams& aRhs);

    bool
    operator==(const GetParams& aRhs) const;

    bool
    operator==(const GetKeyParams& aRhs) const;

    bool
    operator==(const GetAllParams& aRhs) const;

    bool
    operator==(const GetAllKeysParams& aRhs) const;

    bool
    operator==(const CountParams& aRhs) const;

    bool
    operator==(const OpenCursorParams& aRhs) const;

    bool
    operator==(const OpenKeyCursorParams& aRhs) const;

    bool
    operator==(const IndexRequestParams& aRhs) const;

    GetParams&
    get_GetParams()
    {
        AssertSanity(TGetParams);
        return (*(ptr_GetParams()));
    }
    const GetParams&
    get_GetParams() const
    {
        AssertSanity(TGetParams);
        return (*(constptr_GetParams()));
    }
    operator GetParams&()
    {
        return get_GetParams();
    }
    operator const GetParams&() const
    {
        return get_GetParams();
    }

    GetKeyParams&
    get_GetKeyParams()
    {
        AssertSanity(TGetKeyParams);
        return (*(ptr_GetKeyParams()));
    }
    const GetKeyParams&
    get_GetKeyParams() const
    {
        AssertSanity(TGetKeyParams);
        return (*(constptr_GetKeyParams()));
    }
    operator GetKeyParams&()
    {
        return get_GetKeyParams();
    }
    operator const GetKeyParams&() const
    {
        return get_GetKeyParams();
    }

    GetAllParams&
    get_GetAllParams()
    {
        AssertSanity(TGetAllParams);
        return (*(ptr_GetAllParams()));
    }
    const GetAllParams&
    get_GetAllParams() const
    {
        AssertSanity(TGetAllParams);
        return (*(constptr_GetAllParams()));
    }
    operator GetAllParams&()
    {
        return get_GetAllParams();
    }
    operator const GetAllParams&() const
    {
        return get_GetAllParams();
    }

    GetAllKeysParams&
    get_GetAllKeysParams()
    {
        AssertSanity(TGetAllKeysParams);
        return (*(ptr_GetAllKeysParams()));
    }
    const GetAllKeysParams&
    get_GetAllKeysParams() const
    {
        AssertSanity(TGetAllKeysParams);
        return (*(constptr_GetAllKeysParams()));
    }
    operator GetAllKeysParams&()
    {
        return get_GetAllKeysParams();
    }
    operator const GetAllKeysParams&() const
    {
        return get_GetAllKeysParams();
    }

    CountParams&
    get_CountParams()
    {
        AssertSanity(TCountParams);
        return (*(ptr_CountParams()));
    }
    const CountParams&
    get_CountParams() const
    {
        AssertSanity(TCountParams);
        return (*(constptr_CountParams()));
    }
    operator CountParams&()
    {
        return get_CountParams();
    }
    operator const CountParams&() const
    {
        return get_CountParams();
    }

    OpenCursorParams&
    get_OpenCursorParams()
    {
        AssertSanity(TOpenCursorParams);
        return (*(ptr_OpenCursorParams()));
    }
    const OpenCursorParams&
    get_OpenCursorParams() const
    {
        AssertSanity(TOpenCursorParams);
        return (*(constptr_OpenCursorParams()));
    }
    operator OpenCursorParams&()
    {
        return get_OpenCursorParams();
    }
    operator const OpenCursorParams&() const
    {
        return get_OpenCursorParams();
    }

    OpenKeyCursorParams&
    get_OpenKeyCursorParams()
    {
        AssertSanity(TOpenKeyCursorParams);
        return (*(ptr_OpenKeyCursorParams()));
    }
    const OpenKeyCursorParams&
    get_OpenKeyCursorParams() const
    {
        AssertSanity(TOpenKeyCursorParams);
        return (*(constptr_OpenKeyCursorParams()));
    }
    operator OpenKeyCursorParams&()
    {
        return get_OpenKeyCursorParams();
    }
    operator const OpenKeyCursorParams&() const
    {
        return get_OpenKeyCursorParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union OptionalStructuredCloneReadInfo|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class OptionalStructuredCloneReadInfo MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TSerializedStructuredCloneReadInfo = 1,
        Tvoid_t,
        T__Last = Tvoid_t
    };

private:
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::void_t void_t;
    typedef SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo__tdef;
    typedef void_t void_t__tdef;

    union Value {
        char VSerializedStructuredCloneReadInfo[sizeof(SerializedStructuredCloneReadInfo)];
        char Vvoid_t[sizeof(void_t)];
    };

    SerializedStructuredCloneReadInfo*
    ptr_SerializedStructuredCloneReadInfo()
    {
        return reinterpret_cast<SerializedStructuredCloneReadInfo*>((&((mValue).VSerializedStructuredCloneReadInfo)));
    }
    const SerializedStructuredCloneReadInfo* const
    constptr_SerializedStructuredCloneReadInfo() const
    {
        return reinterpret_cast<const SerializedStructuredCloneReadInfo* const>((&((mValue).VSerializedStructuredCloneReadInfo)));
    }
    void_t*
    ptr_void_t()
    {
        return reinterpret_cast<void_t*>((&((mValue).Vvoid_t)));
    }
    const void_t* const
    constptr_void_t() const
    {
        return reinterpret_cast<const void_t* const>((&((mValue).Vvoid_t)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    OptionalStructuredCloneReadInfo() :
        mType(T__None)
    {
    }

    OptionalStructuredCloneReadInfo(const SerializedStructuredCloneReadInfo& aOther);

    OptionalStructuredCloneReadInfo(const void_t& aOther);

    OptionalStructuredCloneReadInfo(const OptionalStructuredCloneReadInfo& aOther);

    ~OptionalStructuredCloneReadInfo();

    Type
    type() const
    {
        return mType;
    }

    OptionalStructuredCloneReadInfo&
    operator=(const SerializedStructuredCloneReadInfo& aRhs);

    OptionalStructuredCloneReadInfo&
    operator=(const void_t& aRhs);

    OptionalStructuredCloneReadInfo&
    operator=(const OptionalStructuredCloneReadInfo& aRhs);

    bool
    operator==(const SerializedStructuredCloneReadInfo& aRhs) const;

    bool
    operator==(const void_t& aRhs) const;

    bool
    operator==(const OptionalStructuredCloneReadInfo& aRhs) const;

    SerializedStructuredCloneReadInfo&
    get_SerializedStructuredCloneReadInfo()
    {
        AssertSanity(TSerializedStructuredCloneReadInfo);
        return (*(ptr_SerializedStructuredCloneReadInfo()));
    }
    const SerializedStructuredCloneReadInfo&
    get_SerializedStructuredCloneReadInfo() const
    {
        AssertSanity(TSerializedStructuredCloneReadInfo);
        return (*(constptr_SerializedStructuredCloneReadInfo()));
    }
    operator SerializedStructuredCloneReadInfo&()
    {
        return get_SerializedStructuredCloneReadInfo();
    }
    operator const SerializedStructuredCloneReadInfo&() const
    {
        return get_SerializedStructuredCloneReadInfo();
    }

    void_t&
    get_void_t()
    {
        AssertSanity(Tvoid_t);
        return (*(ptr_void_t()));
    }
    const void_t&
    get_void_t() const
    {
        AssertSanity(Tvoid_t);
        return (*(constptr_void_t()));
    }
    operator void_t&()
    {
        return get_void_t();
    }
    operator const void_t&() const
    {
        return get_void_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBRequestParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBRequestChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class OptionalStructuredCloneReadInfo;
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IndexCursorConstructorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
class IndexCursorConstructorParams MOZ_FINAL
{
private:
    typedef mozilla::dom::indexedDB::PIndexedDBRequestParent PIndexedDBRequestParent;
    typedef mozilla::dom::indexedDB::PIndexedDBRequestChild PIndexedDBRequestChild;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::OptionalStructuredCloneReadInfo OptionalStructuredCloneReadInfo;
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::PBlobChild PBlobChild;

public:
    IndexCursorConstructorParams();

    IndexCursorConstructorParams(
            PIndexedDBRequestParent* _requestParent,
            PIndexedDBRequestChild* _requestChild,
            const Direction& _direction,
            const Key& _key,
            const Key& _objectKey,
            const OptionalStructuredCloneReadInfo& _optionalCloneInfo,
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild)
    {
        Init();
        Assign(_requestParent, _requestChild, _direction, _key, _objectKey, _optionalCloneInfo, _blobsParent, _blobsChild);
    }

    IndexCursorConstructorParams(const IndexCursorConstructorParams& _o)
    {
        Init();
        Assign(const_cast<PIndexedDBRequestParent*>((_o).requestParent()), const_cast<PIndexedDBRequestChild*>((_o).requestChild()), (_o).direction(), (_o).key(), (_o).objectKey(), (_o).optionalCloneInfo(), (_o).blobsParent(), (_o).blobsChild());
    }

    ~IndexCursorConstructorParams();

    void
    operator=(const IndexCursorConstructorParams& _o)
    {
        Assign(const_cast<PIndexedDBRequestParent*>((_o).requestParent()), const_cast<PIndexedDBRequestChild*>((_o).requestChild()), (_o).direction(), (_o).key(), (_o).objectKey(), (_o).optionalCloneInfo(), (_o).blobsParent(), (_o).blobsChild());
    }

    bool
    operator==(const IndexCursorConstructorParams& _o) const;

    PIndexedDBRequestParent*&
    requestParent()
    {
        return requestParent_;
    }
    PIndexedDBRequestParent*
    requestParent() const
    {
        return requestParent_;
    }

    PIndexedDBRequestChild*&
    requestChild()
    {
        return requestChild_;
    }
    PIndexedDBRequestChild*
    requestChild() const
    {
        return requestChild_;
    }

    Direction&
    direction()
    {
        return direction_;
    }
    const Direction&
    direction() const
    {
        return direction_;
    }

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

    Key&
    objectKey()
    {
        return objectKey_;
    }
    const Key&
    objectKey() const
    {
        return objectKey_;
    }

    OptionalStructuredCloneReadInfo&
    optionalCloneInfo()
    {
        return optionalCloneInfo_;
    }
    const OptionalStructuredCloneReadInfo&
    optionalCloneInfo() const
    {
        return optionalCloneInfo_;
    }

    InfallibleTArray<PBlobParent*>&
    blobsParent()
    {
        return blobsParent_;
    }
    const InfallibleTArray<PBlobParent*>&
    blobsParent() const
    {
        return blobsParent_;
    }

    InfallibleTArray<PBlobChild*>&
    blobsChild()
    {
        return blobsChild_;
    }
    const InfallibleTArray<PBlobChild*>&
    blobsChild() const
    {
        return blobsChild_;
    }

private:
    void
    Init();

    void
    Assign(
            PIndexedDBRequestParent* _requestParent,
            PIndexedDBRequestChild* _requestChild,
            const Direction& _direction,
            const Key& _key,
            const Key& _objectKey,
            const OptionalStructuredCloneReadInfo& _optionalCloneInfo,
            const InfallibleTArray<PBlobParent*>& _blobsParent,
            const InfallibleTArray<PBlobChild*>& _blobsChild);

    PIndexedDBRequestParent* requestParent_;
    PIndexedDBRequestChild* requestChild_;
    Direction direction_;
    Key key_;
    Key objectKey_;
    OptionalStructuredCloneReadInfo optionalCloneInfo_;
    InfallibleTArray<PBlobParent*> blobsParent_;
    InfallibleTArray<PBlobChild*> blobsChild_;
};
} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PIndexedDBIndexChild and PIndexedDBIndexParent
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PIndexedDBIndex {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PIndexedDBIndexStart = PIndexedDBIndexMsgStart << 16,
    PIndexedDBIndexPreStart = (PIndexedDBIndexMsgStart << 16) - 1,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_PIndexedDBRequestConstructor__ID,
    Reply_PIndexedDBRequestConstructor__ID,
    Msg_PIndexedDBCursorConstructor__ID,
    Reply_PIndexedDBCursorConstructor__ID,
    PIndexedDBIndexEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::CountParams CountParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetAllKeysParams GetAllKeysParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetKeyParams GetKeyParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexCursorConstructorParams IndexCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::IndexRequestParams IndexRequestParams;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::OpenKeyCursorParams OpenKeyCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::OptionalStructuredCloneReadInfo OptionalStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBIndex::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::CountParams CountParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetAllKeysParams GetAllKeysParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetKeyParams GetKeyParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexCursorConstructorParams IndexCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::IndexRequestParams IndexRequestParams;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::OpenKeyCursorParams OpenKeyCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::OptionalStructuredCloneReadInfo OptionalStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBIndex::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PIndexedDBRequestConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::CountParams CountParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetAllKeysParams GetAllKeysParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetKeyParams GetKeyParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexCursorConstructorParams IndexCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::IndexRequestParams IndexRequestParams;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::OpenKeyCursorParams OpenKeyCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::OptionalStructuredCloneReadInfo OptionalStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_PIndexedDBRequestConstructor__ID
    };
    Msg_PIndexedDBRequestConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBIndex::Msg_PIndexedDBRequestConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PIndexedDBRequestConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PIndexedDBRequestConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::CountParams CountParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetAllKeysParams GetAllKeysParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetKeyParams GetKeyParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexCursorConstructorParams IndexCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::IndexRequestParams IndexRequestParams;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::OpenKeyCursorParams OpenKeyCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::OptionalStructuredCloneReadInfo OptionalStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_PIndexedDBRequestConstructor__ID
    };
    Reply_PIndexedDBRequestConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBIndex::Reply_PIndexedDBRequestConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PIndexedDBRequestConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PIndexedDBCursorConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::CountParams CountParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetAllKeysParams GetAllKeysParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetKeyParams GetKeyParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexCursorConstructorParams IndexCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::IndexRequestParams IndexRequestParams;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::OpenKeyCursorParams OpenKeyCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::OptionalStructuredCloneReadInfo OptionalStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_PIndexedDBCursorConstructor__ID
    };
    Msg_PIndexedDBCursorConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBIndex::Msg_PIndexedDBCursorConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PIndexedDBCursorConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PIndexedDBCursorConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::CountParams CountParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetAllKeysParams GetAllKeysParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetKeyParams GetKeyParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexCursorConstructorParams IndexCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::IndexRequestParams IndexRequestParams;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::OpenKeyCursorParams OpenKeyCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_index::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::OptionalStructuredCloneReadInfo OptionalStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_PIndexedDBCursorConstructor__ID
    };
    Reply_PIndexedDBCursorConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PIndexedDBIndex::Reply_PIndexedDBCursorConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PIndexedDBCursorConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PIndexedDBIndex
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#endif // ifndef PIndexedDBIndex_h
