//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PIndexedDBTransactionParent_h
#define PIndexedDBTransactionParent_h

#include "mozilla/dom/indexedDB/PIndexedDBTransaction.h"
namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBDatabaseParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBObjectStoreParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBDatabaseParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBObjectStoreParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {


class /*NS_ABSTRACT_CLASS*/ PIndexedDBTransactionParent :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::dom::indexedDB::PIndexedDBDatabaseParent;

    friend class mozilla::dom::indexedDB::PIndexedDBObjectStoreParent;

protected:
    typedef mozilla::dom::indexedDB::ipc::AbortResult AbortResult;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::CompleteParams CompleteParams;
    typedef mozilla::dom::indexedDB::ipc::CompleteResult CompleteResult;
    typedef mozilla::dom::indexedDB::ipc::CreateObjectStoreParams CreateObjectStoreParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::GetObjectStoreParams GetObjectStoreParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreConstructorParams ObjectStoreConstructorParams;
    typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::indexedDB::PIndexedDBDatabaseParent PIndexedDBDatabaseParent;
    typedef mozilla::dom::indexedDB::PIndexedDBObjectStoreParent PIndexedDBObjectStoreParent;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PIndexedDBTransaction::State State;

    virtual bool
    Recv__delete__();
    virtual bool
    RecvPIndexedDBObjectStoreConstructor(
            PIndexedDBObjectStoreParent* actor,
            const ObjectStoreConstructorParams& params);
    virtual bool
    RecvAbort(const nsresult& abortCode) = 0;
    virtual bool
    RecvAllRequestsFinished() = 0;
    virtual bool
    RecvDeleteObjectStore(const nsString& name) = 0;
    virtual PIndexedDBObjectStoreParent*
    AllocPIndexedDBObjectStore(const ObjectStoreConstructorParams& params) = 0;
    virtual bool
    DeallocPIndexedDBObjectStore(PIndexedDBObjectStoreParent* actor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PIndexedDBTransactionParent();

    virtual ~PIndexedDBTransactionParent();

    PIndexedDBDatabaseParent*
    Manager() const;

    void
    ManagedPIndexedDBObjectStoreParent(InfallibleTArray<PIndexedDBObjectStoreParent*>& aArr) const;
    const InfallibleTArray<PIndexedDBObjectStoreParent*>&
    ManagedPIndexedDBObjectStoreParent() const;

    PIndexedDBTransaction::State
    state();

    bool
    SendComplete(const CompleteParams& params) NS_WARN_UNUSED_RESULT;

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const AbortResult& __v,
            Message* __msg);

    bool
    Read(
            AbortResult* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const CompleteParams& __v,
            Message* __msg);

    bool
    Read(
            CompleteParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const CompleteResult& __v,
            Message* __msg);

    bool
    Read(
            CompleteResult* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ObjectStoreConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            ObjectStoreConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PIndexedDBTransactionParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PIndexedDBTransactionParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const GetObjectStoreParams& __v,
            Message* __msg);

    bool
    Read(
            GetObjectStoreParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const CreateObjectStoreParams& __v,
            Message* __msg);

    bool
    Read(
            CreateObjectStoreParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PIndexedDBObjectStoreParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PIndexedDBObjectStoreParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PIndexedDBObjectStoreParent*> mManagedPIndexedDBObjectStoreParent;
};


} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
namespace indexedDB {
class IndexedDBTransactionParent :
    public PIndexedDBTransactionParent
{
    virtual bool
    RecvAbort(const nsresult& abortCode);

    virtual bool
    RecvAllRequestsFinished();

    virtual bool
    RecvDeleteObjectStore(const nsString& name);

    virtual PIndexedDBObjectStoreParent*
    AllocPIndexedDBObjectStore(const ObjectStoreConstructorParams& params);

    virtual bool
    DeallocPIndexedDBObjectStore(PIndexedDBObjectStoreParent* actor);

    IndexedDBTransactionParent();
    virtual ~IndexedDBTransactionParent();
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
namespace indexedDB {
bool
IndexedDBTransactionParent::RecvAbort(const nsresult& abortCode)
{
    return false;
}

bool
IndexedDBTransactionParent::RecvAllRequestsFinished()
{
    return false;
}

bool
IndexedDBTransactionParent::RecvDeleteObjectStore(const nsString& name)
{
    return false;
}

PIndexedDBObjectStoreParent*
IndexedDBTransactionParent::AllocPIndexedDBObjectStore(const ObjectStoreConstructorParams& params)
{
    return 0;
}

bool
IndexedDBTransactionParent::DeallocPIndexedDBObjectStore(PIndexedDBObjectStoreParent* actor)
{
    return false;
}

IndexedDBTransactionParent::IndexedDBTransactionParent()
{
    MOZ_COUNT_CTOR(IndexedDBTransactionParent);
}

IndexedDBTransactionParent::~IndexedDBTransactionParent()
{
    MOZ_COUNT_DTOR(IndexedDBTransactionParent);
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PIndexedDBTransactionParent_h
