//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PIndexedDBObjectStoreChild_h
#define PIndexedDBObjectStoreChild_h

#include "mozilla/dom/indexedDB/PIndexedDBObjectStore.h"
namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBCursorChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBIndexChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBRequestChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBTransactionChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBIndexChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBTransactionChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBCursorChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBRequestChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {


class /*NS_ABSTRACT_CLASS*/ PIndexedDBObjectStoreChild :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::dom::indexedDB::PIndexedDBIndexChild;

    friend class mozilla::dom::indexedDB::PIndexedDBTransactionChild;

    friend class mozilla::dom::indexedDB::PIndexedDBCursorChild;

    friend class mozilla::dom::indexedDB::PIndexedDBRequestChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
    typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;
    typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
    typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
    typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
    typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
    typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
    typedef mozilla::dom::indexedDB::ipc::IndexConstructorParams IndexConstructorParams;
    typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreCursorConstructorParams ObjectStoreCursorConstructorParams;
    typedef mozilla::dom::indexedDB::ipc::ObjectStoreRequestParams ObjectStoreRequestParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
    typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PBlobChild PBlobChild;
    typedef mozilla::dom::indexedDB::PIndexedDBCursorChild PIndexedDBCursorChild;
    typedef mozilla::dom::indexedDB::PIndexedDBIndexChild PIndexedDBIndexChild;
    typedef mozilla::dom::indexedDB::PIndexedDBRequestChild PIndexedDBRequestChild;
    typedef mozilla::dom::indexedDB::PIndexedDBTransactionChild PIndexedDBTransactionChild;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PIndexedDBObjectStore::State State;

    virtual bool
    RecvPIndexedDBCursorConstructor(
            PIndexedDBCursorChild* actor,
            const ObjectStoreCursorConstructorParams& params);
    virtual PIndexedDBIndexChild*
    AllocPIndexedDBIndex(const IndexConstructorParams& params) = 0;
    virtual bool
    DeallocPIndexedDBIndex(PIndexedDBIndexChild* actor) = 0;
    virtual PIndexedDBRequestChild*
    AllocPIndexedDBRequest(const ObjectStoreRequestParams& params) = 0;
    virtual bool
    DeallocPIndexedDBRequest(PIndexedDBRequestChild* actor) = 0;
    virtual PIndexedDBCursorChild*
    AllocPIndexedDBCursor(const ObjectStoreCursorConstructorParams& params) = 0;
    virtual bool
    DeallocPIndexedDBCursor(PIndexedDBCursorChild* actor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PIndexedDBObjectStoreChild();

    virtual ~PIndexedDBObjectStoreChild();

    PIndexedDBTransactionChild*
    Manager() const;

    void
    ManagedPIndexedDBCursorChild(InfallibleTArray<PIndexedDBCursorChild*>& aArr) const;
    const InfallibleTArray<PIndexedDBCursorChild*>&
    ManagedPIndexedDBCursorChild() const;

    void
    ManagedPIndexedDBIndexChild(InfallibleTArray<PIndexedDBIndexChild*>& aArr) const;
    const InfallibleTArray<PIndexedDBIndexChild*>&
    ManagedPIndexedDBIndexChild() const;

    void
    ManagedPIndexedDBRequestChild(InfallibleTArray<PIndexedDBRequestChild*>& aArr) const;
    const InfallibleTArray<PIndexedDBRequestChild*>&
    ManagedPIndexedDBRequestChild() const;

    PIndexedDBObjectStore::State
    state();

    static bool
    Send__delete__(PIndexedDBObjectStoreChild* actor);

    PIndexedDBIndexChild*
    SendPIndexedDBIndexConstructor(const IndexConstructorParams& params);

    PIndexedDBIndexChild*
    SendPIndexedDBIndexConstructor(
            PIndexedDBIndexChild* actor,
            const IndexConstructorParams& params);

    PIndexedDBRequestChild*
    SendPIndexedDBRequestConstructor(const ObjectStoreRequestParams& params);

    PIndexedDBRequestChild*
    SendPIndexedDBRequestConstructor(
            PIndexedDBRequestChild* actor,
            const ObjectStoreRequestParams& params);

    bool
    SendDeleteIndex(const nsString& name);

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const ObjectStoreCursorConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            ObjectStoreCursorConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpenCursorParams& __v,
            Message* __msg);

    bool
    Read(
            OpenCursorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const IndexConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            IndexConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const AddParams& __v,
            Message* __msg);

    bool
    Read(
            AddParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const PutParams& __v,
            Message* __msg);

    bool
    Read(
            PutParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const KeyRange& __v,
            Message* __msg);

    bool
    Read(
            KeyRange* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBlobChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBlobChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const GetAllParams& __v,
            Message* __msg);

    bool
    Read(
            GetAllParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PIndexedDBCursorChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PIndexedDBCursorChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeleteParams& __v,
            Message* __msg);

    bool
    Read(
            DeleteParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OptionalKeyRange& __v,
            Message* __msg);

    bool
    Read(
            OptionalKeyRange* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const GetIndexParams& __v,
            Message* __msg);

    bool
    Read(
            GetIndexParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<PBlobChild*>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<PBlobChild*>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ObjectStoreRequestParams& __v,
            Message* __msg);

    bool
    Read(
            ObjectStoreRequestParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PIndexedDBRequestChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PIndexedDBRequestChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PIndexedDBIndexChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PIndexedDBIndexChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const CreateIndexParams& __v,
            Message* __msg);

    bool
    Read(
            CreateIndexParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const AddPutParams& __v,
            Message* __msg);

    bool
    Read(
            AddPutParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const CountParams& __v,
            Message* __msg);

    bool
    Read(
            CountParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const GetParams& __v,
            Message* __msg);

    bool
    Read(
            GetParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PIndexedDBObjectStoreChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PIndexedDBObjectStoreChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ClearParams& __v,
            Message* __msg);

    bool
    Read(
            ClearParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PIndexedDBCursorChild*> mManagedPIndexedDBCursorChild;
    // Sorted by pointer value
    InfallibleTArray<PIndexedDBIndexChild*> mManagedPIndexedDBIndexChild;
    // Sorted by pointer value
    InfallibleTArray<PIndexedDBRequestChild*> mManagedPIndexedDBRequestChild;
};


} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
namespace indexedDB {
class IndexedDBObjectStoreChild :
    public PIndexedDBObjectStoreChild
{
    virtual PIndexedDBIndexChild*
    AllocPIndexedDBIndex(const IndexConstructorParams& params);

    virtual bool
    DeallocPIndexedDBIndex(PIndexedDBIndexChild* actor);

    virtual PIndexedDBRequestChild*
    AllocPIndexedDBRequest(const ObjectStoreRequestParams& params);

    virtual bool
    DeallocPIndexedDBRequest(PIndexedDBRequestChild* actor);

    virtual PIndexedDBCursorChild*
    AllocPIndexedDBCursor(const ObjectStoreCursorConstructorParams& params);

    virtual bool
    DeallocPIndexedDBCursor(PIndexedDBCursorChild* actor);

    IndexedDBObjectStoreChild();
    virtual ~IndexedDBObjectStoreChild();
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
namespace indexedDB {
PIndexedDBIndexChild*
IndexedDBObjectStoreChild::AllocPIndexedDBIndex(const IndexConstructorParams& params)
{
    return 0;
}

bool
IndexedDBObjectStoreChild::DeallocPIndexedDBIndex(PIndexedDBIndexChild* actor)
{
    return false;
}

PIndexedDBRequestChild*
IndexedDBObjectStoreChild::AllocPIndexedDBRequest(const ObjectStoreRequestParams& params)
{
    return 0;
}

bool
IndexedDBObjectStoreChild::DeallocPIndexedDBRequest(PIndexedDBRequestChild* actor)
{
    return false;
}

PIndexedDBCursorChild*
IndexedDBObjectStoreChild::AllocPIndexedDBCursor(const ObjectStoreCursorConstructorParams& params)
{
    return 0;
}

bool
IndexedDBObjectStoreChild::DeallocPIndexedDBCursor(PIndexedDBCursorChild* actor)
{
    return false;
}

IndexedDBObjectStoreChild::IndexedDBObjectStoreChild()
{
    MOZ_COUNT_CTOR(IndexedDBObjectStoreChild);
}

IndexedDBObjectStoreChild::~IndexedDBObjectStoreChild()
{
    MOZ_COUNT_DTOR(IndexedDBObjectStoreChild);
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PIndexedDBObjectStoreChild_h
