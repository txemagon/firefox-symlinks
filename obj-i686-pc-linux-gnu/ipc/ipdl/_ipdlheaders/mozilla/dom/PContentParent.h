//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PContentParent_h
#define PContentParent_h

#include "mozilla/dom/PContent.h"
namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace bluetooth {
class PBluetoothParent;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {
class PCrashReporterParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PExternalHelperAppParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace devicestorage {
class PDeviceStorageRequestParent;
} // namespace devicestorage
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {
class PHalParent;
} // namespace hal_sandbox
} // namespace mozilla

namespace mozilla {
namespace layers {
class PImageBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMemoryReportRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace sms {
class PSmsParent;
} // namespace sms
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PStorageParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PTestShellParent;
} // namespace ipc
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace dom {
class PStorageParent;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace devicestorage {
class PDeviceStorageRequestParent;
} // namespace devicestorage
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
class PExternalHelperAppParent;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace indexedDB {
class PIndexedDBParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace ipc {
class PTestShellParent;
} // namespace ipc
} // namespace mozilla


namespace mozilla {
namespace dom {
class PMemoryReportRequestParent;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace hal_sandbox {
class PHalParent;
} // namespace hal_sandbox
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace bluetooth {
class PBluetoothParent;
} // namespace bluetooth
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
namespace sms {
class PSmsParent;
} // namespace sms
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {
class PCrashReporterParent;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace net {
class PNeckoParent;
} // namespace net
} // namespace mozilla


namespace mozilla {
namespace layers {
class PCompositorParent;
} // namespace layers
} // namespace mozilla


namespace mozilla {
namespace layers {
class PImageBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {


class /*NS_ABSTRACT_CLASS*/ PContentParent :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::dom::PStorageParent;

    friend class mozilla::dom::PBrowserParent;

    friend class mozilla::dom::devicestorage::PDeviceStorageRequestParent;

    friend class mozilla::dom::PExternalHelperAppParent;

    friend class mozilla::dom::indexedDB::PIndexedDBParent;

    friend class mozilla::ipc::PTestShellParent;

    friend class mozilla::dom::PMemoryReportRequestParent;

    friend class mozilla::hal_sandbox::PHalParent;

    friend class mozilla::dom::bluetooth::PBluetoothParent;

    friend class mozilla::dom::PBlobParent;

    friend class mozilla::dom::sms::PSmsParent;

    friend class mozilla::dom::PCrashReporterParent;

    friend class mozilla::net::PNeckoParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::AppFrameIPCTabContext AppFrameIPCTabContext;
    typedef mozilla::dom::AudioChannelType AudioChannelType;
    typedef mozilla::dom::BlobConstructorParams BlobConstructorParams;
    typedef mozilla::dom::BrowserFrameIPCTabContext BrowserFrameIPCTabContext;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::DeviceStorageAddParams DeviceStorageAddParams;
    typedef mozilla::dom::DeviceStorageDeleteParams DeviceStorageDeleteParams;
    typedef mozilla::dom::DeviceStorageEnumerationParams DeviceStorageEnumerationParams;
    typedef mozilla::dom::DeviceStorageGetParams DeviceStorageGetParams;
    typedef mozilla::dom::DeviceStorageParams DeviceStorageParams;
    typedef mozilla::dom::DeviceStorageStatParams DeviceStorageStatParams;
    typedef mozilla::dom::FileBlobConstructorParams FileBlobConstructorParams;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::FontListEntry FontListEntry;
    typedef mozilla::ipc::GenericURIParams GenericURIParams;
    typedef mozilla::dom::IPCTabAppBrowserContext IPCTabAppBrowserContext;
    typedef mozilla::dom::IPCTabContext IPCTabContext;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::dom::MaybePrefValue MaybePrefValue;
    typedef mozilla::dom::MysteryBlobConstructorParams MysteryBlobConstructorParams;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::dom::NormalBlobConstructorParams NormalBlobConstructorParams;
    typedef mozilla::ipc::OptionalURIParams OptionalURIParams;
    typedef IPC::Permission Permission;
    typedef mozilla::dom::PopupIPCTabContext PopupIPCTabContext;
    typedef mozilla::dom::PrefSetting PrefSetting;
    typedef mozilla::dom::PrefValue PrefValue;
    typedef IPC::Principal Principal;
    typedef mozilla::layout::ScrollingBehavior ScrollingBehavior;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::dom::SlicedBlobConstructorParams SlicedBlobConstructorParams;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::dom::StorageClone StorageClone;
    typedef mozilla::dom::StorageConstructData StorageConstructData;
    typedef mozilla::ipc::URIParams URIParams;
    typedef mozilla::dom::VanillaFrameIPCTabContext VanillaFrameIPCTabContext;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::bluetooth::PBluetoothParent PBluetoothParent;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::layers::PCompositorParent PCompositorParent;
    typedef mozilla::dom::PCrashReporterParent PCrashReporterParent;
    typedef mozilla::dom::PExternalHelperAppParent PExternalHelperAppParent;
    typedef mozilla::dom::devicestorage::PDeviceStorageRequestParent PDeviceStorageRequestParent;
    typedef mozilla::hal_sandbox::PHalParent PHalParent;
    typedef mozilla::layers::PImageBridgeParent PImageBridgeParent;
    typedef mozilla::dom::indexedDB::PIndexedDBParent PIndexedDBParent;
    typedef mozilla::dom::PMemoryReportRequestParent PMemoryReportRequestParent;
    typedef mozilla::net::PNeckoParent PNeckoParent;
    typedef mozilla::dom::sms::PSmsParent PSmsParent;
    typedef mozilla::dom::PStorageParent PStorageParent;
    typedef mozilla::ipc::PTestShellParent PTestShellParent;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PContent::State State;

    virtual bool
    RecvPBrowserConstructor(
            PBrowserParent* actor,
            const IPCTabContext& context,
            const uint32_t& chromeFlags);
    virtual bool
    RecvPBlobConstructor(
            PBlobParent* actor,
            const BlobConstructorParams& params);
    virtual bool
    RecvGetProcessAttributes(
            uint64_t* id,
            bool* startBackground,
            bool* isForApp,
            bool* isForBrowser) = 0;
    virtual bool
    RecvGetXPCOMProcessAttributes(bool* isOffline) = 0;
    virtual bool
    RecvPDeviceStorageRequestConstructor(
            PDeviceStorageRequestParent* actor,
            const DeviceStorageParams& params);
    virtual bool
    RecvPCrashReporterConstructor(
            PCrashReporterParent* actor,
            const NativeThreadId& tid,
            const uint32_t& processType);
    virtual bool
    RecvPHalConstructor(PHalParent* actor);
    virtual bool
    RecvPIndexedDBConstructor(PIndexedDBParent* actor);
    virtual bool
    RecvPNeckoConstructor(PNeckoParent* actor);
    virtual bool
    RecvPSmsConstructor(PSmsParent* actor);
    virtual bool
    RecvPStorageConstructor(
            PStorageParent* actor,
            const StorageConstructData& data);
    virtual bool
    RecvPBluetoothConstructor(PBluetoothParent* actor);
    virtual bool
    RecvStartVisitedQuery(const URIParams& uri) = 0;
    virtual bool
    RecvVisitURI(
            const URIParams& uri,
            const OptionalURIParams& referrer,
            const uint32_t& flags) = 0;
    virtual bool
    RecvSetURITitle(
            const URIParams& uri,
            const nsString& title) = 0;
    virtual bool
    RecvShowFilePicker(
            const int16_t& mode,
            const int16_t& selectedType,
            const bool& addToRecentDocs,
            const nsString& title,
            const nsString& defaultFile,
            const nsString& defaultExtension,
            const InfallibleTArray<nsString>& filters,
            const InfallibleTArray<nsString>& filterNames,
            InfallibleTArray<nsString>* files,
            int16_t* retValue,
            nsresult* result) = 0;
    virtual bool
    RecvLoadURIExternal(const URIParams& uri) = 0;
    virtual bool
    RecvReadPrefsArray(InfallibleTArray<PrefSetting>* prefs) = 0;
    virtual bool
    RecvReadFontList(InfallibleTArray<FontListEntry>* retValue) = 0;
    virtual bool
    RecvSyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData,
            InfallibleTArray<nsString>* retval) = 0;
    virtual bool
    RecvShowAlertNotification(
            const nsString& imageUrl,
            const nsString& title,
            const nsString& text,
            const bool& textClickable,
            const nsString& cookie,
            const nsString& name) = 0;
    virtual bool
    RecvPExternalHelperAppConstructor(
            PExternalHelperAppParent* actor,
            const OptionalURIParams& uri,
            const nsCString& aMimeContentType,
            const nsCString& aContentDisposition,
            const bool& aForceSave,
            const int64_t& aContentLength,
            const OptionalURIParams& aReferrer);
    virtual bool
    RecvAddGeolocationListener(const Principal& principal) = 0;
    virtual bool
    RecvRemoveGeolocationListener() = 0;
    virtual bool
    RecvSetGeolocationHigherAccuracy(const bool& enable) = 0;
    virtual bool
    RecvConsoleMessage(const nsString& message) = 0;
    virtual bool
    RecvScriptError(
            const nsString& message,
            const nsString& sourceName,
            const nsString& sourceLine,
            const uint32_t& lineNumber,
            const uint32_t& colNumber,
            const uint32_t& flags,
            const nsCString& category) = 0;
    virtual bool
    RecvReadPermissions(InfallibleTArray<Permission>* permissions) = 0;
    virtual bool
    RecvSetClipboardText(
            const nsString& text,
            const bool& isPrivateData,
            const int32_t& whichClipboard) = 0;
    virtual bool
    RecvGetClipboardText(
            const int32_t& whichClipboard,
            nsString* text) = 0;
    virtual bool
    RecvEmptyClipboard() = 0;
    virtual bool
    RecvClipboardHasText(bool* hasText) = 0;
    virtual bool
    RecvGetSystemColors(
            const uint32_t& colorsCount,
            InfallibleTArray<uint32_t>* colors) = 0;
    virtual bool
    RecvGetIconForExtension(
            const nsCString& aFileExt,
            const uint32_t& aIconSize,
            InfallibleTArray<uint8_t>* bits) = 0;
    virtual bool
    RecvGetShowPasswordSetting(bool* showPassword) = 0;
    virtual bool
    RecvPrivateDocShellsExist(const bool& aExist) = 0;
    virtual bool
    RecvFirstIdle() = 0;
    virtual bool
    RecvAudioChannelGetMuted(
            const AudioChannelType& aType,
            const bool& aMozHidden,
            bool* value) = 0;
    virtual bool
    RecvAudioChannelRegisterType(const AudioChannelType& aType) = 0;
    virtual bool
    RecvAudioChannelUnregisterType(const AudioChannelType& aType) = 0;
    virtual bool
    RecvAsyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData) = 0;
    virtual PBrowserParent*
    AllocPBrowser(
            const IPCTabContext& context,
            const uint32_t& chromeFlags) = 0;
    virtual bool
    DeallocPBrowser(PBrowserParent* actor) = 0;
    virtual PBlobParent*
    AllocPBlob(const BlobConstructorParams& params) = 0;
    virtual bool
    DeallocPBlob(PBlobParent* actor) = 0;
    virtual PMemoryReportRequestParent*
    AllocPMemoryReportRequest() = 0;
    virtual bool
    DeallocPMemoryReportRequest(PMemoryReportRequestParent* actor) = 0;
    virtual PTestShellParent*
    AllocPTestShell() = 0;
    virtual bool
    DeallocPTestShell(PTestShellParent* actor) = 0;
    virtual PDeviceStorageRequestParent*
    AllocPDeviceStorageRequest(const DeviceStorageParams& params) = 0;
    virtual bool
    DeallocPDeviceStorageRequest(PDeviceStorageRequestParent* actor) = 0;
    virtual PCrashReporterParent*
    AllocPCrashReporter(
            const NativeThreadId& tid,
            const uint32_t& processType) = 0;
    virtual bool
    DeallocPCrashReporter(PCrashReporterParent* actor) = 0;
    virtual PHalParent*
    AllocPHal() = 0;
    virtual bool
    DeallocPHal(PHalParent* actor) = 0;
    virtual PIndexedDBParent*
    AllocPIndexedDB() = 0;
    virtual bool
    DeallocPIndexedDB(PIndexedDBParent* actor) = 0;
    virtual PNeckoParent*
    AllocPNecko() = 0;
    virtual bool
    DeallocPNecko(PNeckoParent* actor) = 0;
    virtual PSmsParent*
    AllocPSms() = 0;
    virtual bool
    DeallocPSms(PSmsParent* actor) = 0;
    virtual PStorageParent*
    AllocPStorage(const StorageConstructData& data) = 0;
    virtual bool
    DeallocPStorage(PStorageParent* actor) = 0;
    virtual PBluetoothParent*
    AllocPBluetooth() = 0;
    virtual bool
    DeallocPBluetooth(PBluetoothParent* actor) = 0;
    virtual PExternalHelperAppParent*
    AllocPExternalHelperApp(
            const OptionalURIParams& uri,
            const nsCString& aMimeContentType,
            const nsCString& aContentDisposition,
            const bool& aForceSave,
            const int64_t& aContentLength,
            const OptionalURIParams& aReferrer) = 0;
    virtual bool
    DeallocPExternalHelperApp(PExternalHelperAppParent* actor) = 0;
    virtual PCompositorParent*
    AllocPCompositor(
            Transport* transport,
            ProcessId otherProcess) = 0;
    virtual PImageBridgeParent*
    AllocPImageBridge(
            Transport* transport,
            ProcessId otherProcess) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

    virtual void
    ProcessingError(Result code);
    virtual bool
    ShouldContinueFromReplyTimeout();
    virtual void
    EnteredCxxStack();
    virtual void
    ExitedCxxStack();
    virtual void
    EnteredCall();
    virtual void
    ExitedCall();

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PContentParent();

    virtual ~PContentParent();

    bool
    Open(
            Channel::Transport* aTransport,
            ProcessHandle aOtherProcess,
            MessageLoop* aThread = 0,
            AsyncChannel::Side aSide = Channel::Unknown);

    bool
    Open(
            AsyncChannel* aChannel,
            MessageLoop* aMessageLoop,
            AsyncChannel::Side aSide = Channel::Unknown);

    void
    Close();

    void
    SetReplyTimeoutMs(int32_t aTimeoutMs);

    void
    ManagedPBlobParent(InfallibleTArray<PBlobParent*>& aArr) const;
    const InfallibleTArray<PBlobParent*>&
    ManagedPBlobParent() const;

    void
    ManagedPBluetoothParent(InfallibleTArray<PBluetoothParent*>& aArr) const;
    const InfallibleTArray<PBluetoothParent*>&
    ManagedPBluetoothParent() const;

    void
    ManagedPBrowserParent(InfallibleTArray<PBrowserParent*>& aArr) const;
    const InfallibleTArray<PBrowserParent*>&
    ManagedPBrowserParent() const;

    void
    ManagedPCrashReporterParent(InfallibleTArray<PCrashReporterParent*>& aArr) const;
    const InfallibleTArray<PCrashReporterParent*>&
    ManagedPCrashReporterParent() const;

    void
    ManagedPDeviceStorageRequestParent(InfallibleTArray<PDeviceStorageRequestParent*>& aArr) const;
    const InfallibleTArray<PDeviceStorageRequestParent*>&
    ManagedPDeviceStorageRequestParent() const;

    void
    ManagedPExternalHelperAppParent(InfallibleTArray<PExternalHelperAppParent*>& aArr) const;
    const InfallibleTArray<PExternalHelperAppParent*>&
    ManagedPExternalHelperAppParent() const;

    void
    ManagedPHalParent(InfallibleTArray<PHalParent*>& aArr) const;
    const InfallibleTArray<PHalParent*>&
    ManagedPHalParent() const;

    void
    ManagedPIndexedDBParent(InfallibleTArray<PIndexedDBParent*>& aArr) const;
    const InfallibleTArray<PIndexedDBParent*>&
    ManagedPIndexedDBParent() const;

    void
    ManagedPMemoryReportRequestParent(InfallibleTArray<PMemoryReportRequestParent*>& aArr) const;
    const InfallibleTArray<PMemoryReportRequestParent*>&
    ManagedPMemoryReportRequestParent() const;

    void
    ManagedPNeckoParent(InfallibleTArray<PNeckoParent*>& aArr) const;
    const InfallibleTArray<PNeckoParent*>&
    ManagedPNeckoParent() const;

    void
    ManagedPSmsParent(InfallibleTArray<PSmsParent*>& aArr) const;
    const InfallibleTArray<PSmsParent*>&
    ManagedPSmsParent() const;

    void
    ManagedPStorageParent(InfallibleTArray<PStorageParent*>& aArr) const;
    const InfallibleTArray<PStorageParent*>&
    ManagedPStorageParent() const;

    void
    ManagedPTestShellParent(InfallibleTArray<PTestShellParent*>& aArr) const;
    const InfallibleTArray<PTestShellParent*>&
    ManagedPTestShellParent() const;

    PContent::State
    state();

    PBrowserParent*
    SendPBrowserConstructor(
            const IPCTabContext& context,
            const uint32_t& chromeFlags) NS_WARN_UNUSED_RESULT;

    PBrowserParent*
    SendPBrowserConstructor(
            PBrowserParent* actor,
            const IPCTabContext& context,
            const uint32_t& chromeFlags) NS_WARN_UNUSED_RESULT;

    PBlobParent*
    SendPBlobConstructor(const BlobConstructorParams& params) NS_WARN_UNUSED_RESULT;

    PBlobParent*
    SendPBlobConstructor(
            PBlobParent* actor,
            const BlobConstructorParams& params) NS_WARN_UNUSED_RESULT;

    PMemoryReportRequestParent*
    SendPMemoryReportRequestConstructor() NS_WARN_UNUSED_RESULT;

    PMemoryReportRequestParent*
    SendPMemoryReportRequestConstructor(PMemoryReportRequestParent* actor) NS_WARN_UNUSED_RESULT;

    bool
    SendAudioChannelNotify() NS_WARN_UNUSED_RESULT;

    bool
    SendDumpMemoryReportsToFile(
            const nsString& identifier,
            const bool& minimizeMemoryUsage,
            const bool& dumpChildProcesses) NS_WARN_UNUSED_RESULT;

    bool
    SendDumpGCAndCCLogsToFile(
            const nsString& identifier,
            const bool& dumpChildProcesses) NS_WARN_UNUSED_RESULT;

    PTestShellParent*
    SendPTestShellConstructor() NS_WARN_UNUSED_RESULT;

    PTestShellParent*
    SendPTestShellConstructor(PTestShellParent* actor) NS_WARN_UNUSED_RESULT;

    bool
    SendRegisterChrome(
            const InfallibleTArray<ChromePackage>& packages,
            const InfallibleTArray<ResourceMapping>& resources,
            const InfallibleTArray<OverrideMapping>& overrides,
            const nsCString& locale) NS_WARN_UNUSED_RESULT;

    bool
    SendSetOffline(const bool& offline) NS_WARN_UNUSED_RESULT;

    bool
    SendNotifyVisited(const URIParams& uri) NS_WARN_UNUSED_RESULT;

    bool
    SendPreferenceUpdate(const PrefSetting& pref) NS_WARN_UNUSED_RESULT;

    bool
    SendNotifyAlertsObserver(
            const nsCString& topic,
            const nsString& data) NS_WARN_UNUSED_RESULT;

    bool
    SendGeolocationUpdate(const GeoPosition& somewhere) NS_WARN_UNUSED_RESULT;

    bool
    SendAddPermission(const Permission& permission) NS_WARN_UNUSED_RESULT;

    bool
    SendScreenSizeChanged(const gfxIntSize& size) NS_WARN_UNUSED_RESULT;

    bool
    SendFlushMemory(const nsString& reason) NS_WARN_UNUSED_RESULT;

    bool
    SendGarbageCollect() NS_WARN_UNUSED_RESULT;

    bool
    SendCycleCollect() NS_WARN_UNUSED_RESULT;

    bool
    SendActivateA11y() NS_WARN_UNUSED_RESULT;

    bool
    SendAppInfo(
            const nsCString& version,
            const nsCString& buildID) NS_WARN_UNUSED_RESULT;

    bool
    SendLastPrivateDocShellDestroyed() NS_WARN_UNUSED_RESULT;

    bool
    SendFilePathUpdate(
            const nsString& type,
            const nsString& filepath,
            const nsCString& reasons) NS_WARN_UNUSED_RESULT;

    bool
    SendFileSystemUpdate(
            const nsString& fsName,
            const nsString& mountPoint,
            const int32_t& fsState) NS_WARN_UNUSED_RESULT;

    bool
    SendAsyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData) NS_WARN_UNUSED_RESULT;

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnEnteredCxxStack();
    void
    OnExitedCxxStack();
    void
    OnEnteredCall();
    void
    OnExitedCall();
    bool
    IsOnCxxStack() const;
    void
    FlushPendingRPCQueue();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

    void
    ProcessNativeEventsInRPCCall();

    void
    SetOtherProcess(ProcessHandle aOtherProcess);

protected:
    base::ProcessId
    OtherSidePID() const;

    bool
    TakeMinidump(
            nsIFile** aDump,
            uint32_t* aSequence) const;

    bool
    BlockChild();
    bool
    UnblockChild();

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    void
    DeallocShmems();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const BlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            BlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const IPCTabContext& __v,
            Message* __msg);

    bool
    Read(
            IPCTabContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OptionalURIParams& __v,
            Message* __msg);

    bool
    Read(
            OptionalURIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PIndexedDBParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PIndexedDBParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StandardURLParams& __v,
            Message* __msg);

    bool
    Read(
            StandardURLParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const URIParams& __v,
            Message* __msg);

    bool
    Read(
            URIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBlobParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBlobParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<FontListEntry>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<FontListEntry>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PCrashReporterParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PCrashReporterParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PSmsParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PSmsParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const IPCTabAppBrowserContext& __v,
            Message* __msg);

    bool
    Read(
            IPCTabAppBrowserContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const BrowserFrameIPCTabContext& __v,
            Message* __msg);

    bool
    Read(
            BrowserFrameIPCTabContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<PrefSetting>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<PrefSetting>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const PrefValue& __v,
            Message* __msg);

    bool
    Read(
            PrefValue* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PExternalHelperAppParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PExternalHelperAppParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const FontListEntry& __v,
            Message* __msg);

    bool
    Read(
            FontListEntry* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageEnumerationParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageEnumerationParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const VanillaFrameIPCTabContext& __v,
            Message* __msg);

    bool
    Read(
            VanillaFrameIPCTabContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PTestShellParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PTestShellParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PMemoryReportRequestParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PMemoryReportRequestParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const GenericURIParams& __v,
            Message* __msg);

    bool
    Read(
            GenericURIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageGetParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageGetParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageAddParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageAddParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SlicedBlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            SlicedBlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const MaybePrefValue& __v,
            Message* __msg);

    bool
    Read(
            MaybePrefValue* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PNeckoParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PNeckoParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ClonedMessageData& __v,
            Message* __msg);

    bool
    Read(
            ClonedMessageData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<PBlobParent*>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<PBlobParent*>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PDeviceStorageRequestParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PDeviceStorageRequestParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const NormalBlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            NormalBlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageStatParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageStatParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StorageClone& __v,
            Message* __msg);

    bool
    Read(
            StorageClone* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const JARURIParams& __v,
            Message* __msg);

    bool
    Read(
            JARURIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const MysteryBlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            MysteryBlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBluetoothParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBluetoothParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const PopupIPCTabContext& __v,
            Message* __msg);

    bool
    Read(
            PopupIPCTabContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SimpleURIParams& __v,
            Message* __msg);

    bool
    Read(
            SimpleURIParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StorageConstructData& __v,
            Message* __msg);

    bool
    Read(
            StorageConstructData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PStorageParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PStorageParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PBrowserParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PBrowserParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const DeviceStorageDeleteParams& __v,
            Message* __msg);

    bool
    Read(
            DeviceStorageDeleteParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const PrefSetting& __v,
            Message* __msg);

    bool
    Read(
            PrefSetting* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PHalParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PHalParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StandardURLSegment& __v,
            Message* __msg);

    bool
    Read(
            StandardURLSegment* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const FileBlobConstructorParams& __v,
            Message* __msg);

    bool
    Read(
            FileBlobConstructorParams* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const AppFrameIPCTabContext& __v,
            Message* __msg);

    bool
    Read(
            AppFrameIPCTabContext* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    Channel mChannel;
    IDMap<ChannelListener> mActorMap;
    int32_t mLastRouteId;
    ProcessHandle mOtherProcess;
    IDMap<Shmem::SharedMemory> mShmemMap;
    Shmem::id_t mLastShmemId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PBlobParent*> mManagedPBlobParent;
    // Sorted by pointer value
    InfallibleTArray<PBluetoothParent*> mManagedPBluetoothParent;
    // Sorted by pointer value
    InfallibleTArray<PBrowserParent*> mManagedPBrowserParent;
    // Sorted by pointer value
    InfallibleTArray<PCrashReporterParent*> mManagedPCrashReporterParent;
    // Sorted by pointer value
    InfallibleTArray<PDeviceStorageRequestParent*> mManagedPDeviceStorageRequestParent;
    // Sorted by pointer value
    InfallibleTArray<PExternalHelperAppParent*> mManagedPExternalHelperAppParent;
    // Sorted by pointer value
    InfallibleTArray<PHalParent*> mManagedPHalParent;
    // Sorted by pointer value
    InfallibleTArray<PIndexedDBParent*> mManagedPIndexedDBParent;
    // Sorted by pointer value
    InfallibleTArray<PMemoryReportRequestParent*> mManagedPMemoryReportRequestParent;
    // Sorted by pointer value
    InfallibleTArray<PNeckoParent*> mManagedPNeckoParent;
    // Sorted by pointer value
    InfallibleTArray<PSmsParent*> mManagedPSmsParent;
    // Sorted by pointer value
    InfallibleTArray<PStorageParent*> mManagedPStorageParent;
    // Sorted by pointer value
    InfallibleTArray<PTestShellParent*> mManagedPTestShellParent;
};


} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
class ContentParent :
    public PContentParent
{
    virtual bool
    RecvGetProcessAttributes(
            uint64_t* id,
            bool* startBackground,
            bool* isForApp,
            bool* isForBrowser);

    virtual bool
    RecvGetXPCOMProcessAttributes(bool* isOffline);

    virtual bool
    RecvStartVisitedQuery(const URIParams& uri);

    virtual bool
    RecvVisitURI(
            const URIParams& uri,
            const OptionalURIParams& referrer,
            const uint32_t& flags);

    virtual bool
    RecvSetURITitle(
            const URIParams& uri,
            const nsString& title);

    virtual bool
    RecvShowFilePicker(
            const int16_t& mode,
            const int16_t& selectedType,
            const bool& addToRecentDocs,
            const nsString& title,
            const nsString& defaultFile,
            const nsString& defaultExtension,
            const InfallibleTArray<nsString>& filters,
            const InfallibleTArray<nsString>& filterNames,
            InfallibleTArray<nsString>* files,
            int16_t* retValue,
            nsresult* result);

    virtual bool
    RecvLoadURIExternal(const URIParams& uri);

    virtual bool
    RecvReadPrefsArray(InfallibleTArray<PrefSetting>* prefs);

    virtual bool
    RecvReadFontList(InfallibleTArray<FontListEntry>* retValue);

    virtual bool
    RecvSyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData,
            InfallibleTArray<nsString>* retval);

    virtual bool
    RecvShowAlertNotification(
            const nsString& imageUrl,
            const nsString& title,
            const nsString& text,
            const bool& textClickable,
            const nsString& cookie,
            const nsString& name);

    virtual bool
    RecvAddGeolocationListener(const Principal& principal);

    virtual bool
    RecvRemoveGeolocationListener();

    virtual bool
    RecvSetGeolocationHigherAccuracy(const bool& enable);

    virtual bool
    RecvConsoleMessage(const nsString& message);

    virtual bool
    RecvScriptError(
            const nsString& message,
            const nsString& sourceName,
            const nsString& sourceLine,
            const uint32_t& lineNumber,
            const uint32_t& colNumber,
            const uint32_t& flags,
            const nsCString& category);

    virtual bool
    RecvReadPermissions(InfallibleTArray<Permission>* permissions);

    virtual bool
    RecvSetClipboardText(
            const nsString& text,
            const bool& isPrivateData,
            const int32_t& whichClipboard);

    virtual bool
    RecvGetClipboardText(
            const int32_t& whichClipboard,
            nsString* text);

    virtual bool
    RecvEmptyClipboard();

    virtual bool
    RecvClipboardHasText(bool* hasText);

    virtual bool
    RecvGetSystemColors(
            const uint32_t& colorsCount,
            InfallibleTArray<uint32_t>* colors);

    virtual bool
    RecvGetIconForExtension(
            const nsCString& aFileExt,
            const uint32_t& aIconSize,
            InfallibleTArray<uint8_t>* bits);

    virtual bool
    RecvGetShowPasswordSetting(bool* showPassword);

    virtual bool
    RecvPrivateDocShellsExist(const bool& aExist);

    virtual bool
    RecvFirstIdle();

    virtual bool
    RecvAudioChannelGetMuted(
            const AudioChannelType& aType,
            const bool& aMozHidden,
            bool* value);

    virtual bool
    RecvAudioChannelRegisterType(const AudioChannelType& aType);

    virtual bool
    RecvAudioChannelUnregisterType(const AudioChannelType& aType);

    virtual bool
    RecvAsyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData);

    virtual PBrowserParent*
    AllocPBrowser(
            const IPCTabContext& context,
            const uint32_t& chromeFlags);

    virtual bool
    DeallocPBrowser(PBrowserParent* actor);

    virtual PBlobParent*
    AllocPBlob(const BlobConstructorParams& params);

    virtual bool
    DeallocPBlob(PBlobParent* actor);

    virtual PMemoryReportRequestParent*
    AllocPMemoryReportRequest();

    virtual bool
    DeallocPMemoryReportRequest(PMemoryReportRequestParent* actor);

    virtual PTestShellParent*
    AllocPTestShell();

    virtual bool
    DeallocPTestShell(PTestShellParent* actor);

    virtual PDeviceStorageRequestParent*
    AllocPDeviceStorageRequest(const DeviceStorageParams& params);

    virtual bool
    DeallocPDeviceStorageRequest(PDeviceStorageRequestParent* actor);

    virtual PCrashReporterParent*
    AllocPCrashReporter(
            const NativeThreadId& tid,
            const uint32_t& processType);

    virtual bool
    DeallocPCrashReporter(PCrashReporterParent* actor);

    virtual PHalParent*
    AllocPHal();

    virtual bool
    DeallocPHal(PHalParent* actor);

    virtual PIndexedDBParent*
    AllocPIndexedDB();

    virtual bool
    DeallocPIndexedDB(PIndexedDBParent* actor);

    virtual PNeckoParent*
    AllocPNecko();

    virtual bool
    DeallocPNecko(PNeckoParent* actor);

    virtual PSmsParent*
    AllocPSms();

    virtual bool
    DeallocPSms(PSmsParent* actor);

    virtual PStorageParent*
    AllocPStorage(const StorageConstructData& data);

    virtual bool
    DeallocPStorage(PStorageParent* actor);

    virtual PBluetoothParent*
    AllocPBluetooth();

    virtual bool
    DeallocPBluetooth(PBluetoothParent* actor);

    virtual PExternalHelperAppParent*
    AllocPExternalHelperApp(
            const OptionalURIParams& uri,
            const nsCString& aMimeContentType,
            const nsCString& aContentDisposition,
            const bool& aForceSave,
            const int64_t& aContentLength,
            const OptionalURIParams& aReferrer);

    virtual bool
    DeallocPExternalHelperApp(PExternalHelperAppParent* actor);

    virtual PCompositorParent*
    AllocPCompositor(
            Transport* transport,
            ProcessId otherProcess);

    virtual PImageBridgeParent*
    AllocPImageBridge(
            Transport* transport,
            ProcessId otherProcess);

    ContentParent();
    virtual ~ContentParent();
};
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
bool
ContentParent::RecvGetProcessAttributes(
        uint64_t* id,
        bool* startBackground,
        bool* isForApp,
        bool* isForBrowser)
{
    return false;
}

bool
ContentParent::RecvGetXPCOMProcessAttributes(bool* isOffline)
{
    return false;
}

bool
ContentParent::RecvStartVisitedQuery(const URIParams& uri)
{
    return false;
}

bool
ContentParent::RecvVisitURI(
        const URIParams& uri,
        const OptionalURIParams& referrer,
        const uint32_t& flags)
{
    return false;
}

bool
ContentParent::RecvSetURITitle(
        const URIParams& uri,
        const nsString& title)
{
    return false;
}

bool
ContentParent::RecvShowFilePicker(
        const int16_t& mode,
        const int16_t& selectedType,
        const bool& addToRecentDocs,
        const nsString& title,
        const nsString& defaultFile,
        const nsString& defaultExtension,
        const InfallibleTArray<nsString>& filters,
        const InfallibleTArray<nsString>& filterNames,
        InfallibleTArray<nsString>* files,
        int16_t* retValue,
        nsresult* result)
{
    return false;
}

bool
ContentParent::RecvLoadURIExternal(const URIParams& uri)
{
    return false;
}

bool
ContentParent::RecvReadPrefsArray(InfallibleTArray<PrefSetting>* prefs)
{
    return false;
}

bool
ContentParent::RecvReadFontList(InfallibleTArray<FontListEntry>* retValue)
{
    return false;
}

bool
ContentParent::RecvSyncMessage(
        const nsString& aMessage,
        const ClonedMessageData& aData,
        InfallibleTArray<nsString>* retval)
{
    return false;
}

bool
ContentParent::RecvShowAlertNotification(
        const nsString& imageUrl,
        const nsString& title,
        const nsString& text,
        const bool& textClickable,
        const nsString& cookie,
        const nsString& name)
{
    return false;
}

bool
ContentParent::RecvAddGeolocationListener(const Principal& principal)
{
    return false;
}

bool
ContentParent::RecvRemoveGeolocationListener()
{
    return false;
}

bool
ContentParent::RecvSetGeolocationHigherAccuracy(const bool& enable)
{
    return false;
}

bool
ContentParent::RecvConsoleMessage(const nsString& message)
{
    return false;
}

bool
ContentParent::RecvScriptError(
        const nsString& message,
        const nsString& sourceName,
        const nsString& sourceLine,
        const uint32_t& lineNumber,
        const uint32_t& colNumber,
        const uint32_t& flags,
        const nsCString& category)
{
    return false;
}

bool
ContentParent::RecvReadPermissions(InfallibleTArray<Permission>* permissions)
{
    return false;
}

bool
ContentParent::RecvSetClipboardText(
        const nsString& text,
        const bool& isPrivateData,
        const int32_t& whichClipboard)
{
    return false;
}

bool
ContentParent::RecvGetClipboardText(
        const int32_t& whichClipboard,
        nsString* text)
{
    return false;
}

bool
ContentParent::RecvEmptyClipboard()
{
    return false;
}

bool
ContentParent::RecvClipboardHasText(bool* hasText)
{
    return false;
}

bool
ContentParent::RecvGetSystemColors(
        const uint32_t& colorsCount,
        InfallibleTArray<uint32_t>* colors)
{
    return false;
}

bool
ContentParent::RecvGetIconForExtension(
        const nsCString& aFileExt,
        const uint32_t& aIconSize,
        InfallibleTArray<uint8_t>* bits)
{
    return false;
}

bool
ContentParent::RecvGetShowPasswordSetting(bool* showPassword)
{
    return false;
}

bool
ContentParent::RecvPrivateDocShellsExist(const bool& aExist)
{
    return false;
}

bool
ContentParent::RecvFirstIdle()
{
    return false;
}

bool
ContentParent::RecvAudioChannelGetMuted(
        const AudioChannelType& aType,
        const bool& aMozHidden,
        bool* value)
{
    return false;
}

bool
ContentParent::RecvAudioChannelRegisterType(const AudioChannelType& aType)
{
    return false;
}

bool
ContentParent::RecvAudioChannelUnregisterType(const AudioChannelType& aType)
{
    return false;
}

bool
ContentParent::RecvAsyncMessage(
        const nsString& aMessage,
        const ClonedMessageData& aData)
{
    return false;
}

PBrowserParent*
ContentParent::AllocPBrowser(
        const IPCTabContext& context,
        const uint32_t& chromeFlags)
{
    return 0;
}

bool
ContentParent::DeallocPBrowser(PBrowserParent* actor)
{
    return false;
}

PBlobParent*
ContentParent::AllocPBlob(const BlobConstructorParams& params)
{
    return 0;
}

bool
ContentParent::DeallocPBlob(PBlobParent* actor)
{
    return false;
}

PMemoryReportRequestParent*
ContentParent::AllocPMemoryReportRequest()
{
    return 0;
}

bool
ContentParent::DeallocPMemoryReportRequest(PMemoryReportRequestParent* actor)
{
    return false;
}

PTestShellParent*
ContentParent::AllocPTestShell()
{
    return 0;
}

bool
ContentParent::DeallocPTestShell(PTestShellParent* actor)
{
    return false;
}

PDeviceStorageRequestParent*
ContentParent::AllocPDeviceStorageRequest(const DeviceStorageParams& params)
{
    return 0;
}

bool
ContentParent::DeallocPDeviceStorageRequest(PDeviceStorageRequestParent* actor)
{
    return false;
}

PCrashReporterParent*
ContentParent::AllocPCrashReporter(
        const NativeThreadId& tid,
        const uint32_t& processType)
{
    return 0;
}

bool
ContentParent::DeallocPCrashReporter(PCrashReporterParent* actor)
{
    return false;
}

PHalParent*
ContentParent::AllocPHal()
{
    return 0;
}

bool
ContentParent::DeallocPHal(PHalParent* actor)
{
    return false;
}

PIndexedDBParent*
ContentParent::AllocPIndexedDB()
{
    return 0;
}

bool
ContentParent::DeallocPIndexedDB(PIndexedDBParent* actor)
{
    return false;
}

PNeckoParent*
ContentParent::AllocPNecko()
{
    return 0;
}

bool
ContentParent::DeallocPNecko(PNeckoParent* actor)
{
    return false;
}

PSmsParent*
ContentParent::AllocPSms()
{
    return 0;
}

bool
ContentParent::DeallocPSms(PSmsParent* actor)
{
    return false;
}

PStorageParent*
ContentParent::AllocPStorage(const StorageConstructData& data)
{
    return 0;
}

bool
ContentParent::DeallocPStorage(PStorageParent* actor)
{
    return false;
}

PBluetoothParent*
ContentParent::AllocPBluetooth()
{
    return 0;
}

bool
ContentParent::DeallocPBluetooth(PBluetoothParent* actor)
{
    return false;
}

PExternalHelperAppParent*
ContentParent::AllocPExternalHelperApp(
        const OptionalURIParams& uri,
        const nsCString& aMimeContentType,
        const nsCString& aContentDisposition,
        const bool& aForceSave,
        const int64_t& aContentLength,
        const OptionalURIParams& aReferrer)
{
    return 0;
}

bool
ContentParent::DeallocPExternalHelperApp(PExternalHelperAppParent* actor)
{
    return false;
}

PCompositorParent*
ContentParent::AllocPCompositor(
        Transport* transport,
        ProcessId otherProcess)
{
    return 0;
}

PImageBridgeParent*
ContentParent::AllocPImageBridge(
        Transport* transport,
        ProcessId otherProcess)
{
    return 0;
}

ContentParent::ContentParent()
{
    MOZ_COUNT_CTOR(ContentParent);
}

ContentParent::~ContentParent()
{
    MOZ_COUNT_DTOR(ContentParent);
}

} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PContentParent_h
