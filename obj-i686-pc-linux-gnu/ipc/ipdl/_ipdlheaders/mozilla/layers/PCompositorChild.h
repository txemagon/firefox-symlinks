//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCompositorChild_h
#define PCompositorChild_h

#include "mozilla/layers/PCompositor.h"
namespace mozilla {
namespace layers {
class PGrallocBufferChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PLayersChild;
} // namespace layers
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace layers {
class PLayersChild;
} // namespace layers
} // namespace mozilla


namespace mozilla {
namespace layers {
class PGrallocBufferChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {


class /*NS_ABSTRACT_CLASS*/ PCompositorChild :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::layers::PLayersChild;

    friend class mozilla::layers::PGrallocBufferChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::layers::FrameMetrics FrameMetrics;
    typedef mozilla::GraphicsFilterType GraphicsFilterType;
    typedef mozilla::layers::LayersBackend LayersBackend;
    typedef mozilla::layers::MagicGrallocBufferHandle MagicGrallocBufferHandle;
    typedef mozilla::layers::MaybeMagicGrallocBufferHandle MaybeMagicGrallocBufferHandle;
    typedef mozilla::layers::RGBImage RGBImage;
    typedef mozilla::layers::SharedImage SharedImage;
    typedef mozilla::layers::SharedImageID SharedImageID;
    typedef mozilla::layers::SharedTextureDescriptor SharedTextureDescriptor;
    typedef mozilla::gl::SharedTextureHandle SharedTextureHandle;
    typedef mozilla::gl::GLContext::SharedTextureShareType SharedTextureShareType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::layers::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::layers::SurfaceDescriptorD3D10 SurfaceDescriptorD3D10;
    typedef mozilla::layers::SurfaceDescriptorGralloc SurfaceDescriptorGralloc;
    typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::layers::YCbCrImage YCbCrImage;
    typedef mozilla::layers::YUVImage YUVImage;
    typedef mozilla::gfxContentType gfxContentType;
    typedef mozilla::null_t null_t;
    typedef mozilla::layers::PGrallocBufferChild PGrallocBufferChild;
    typedef mozilla::layers::PLayersChild PLayersChild;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PCompositor::State State;

    virtual PLayersChild*
    AllocPLayers(
            const LayersBackend& backendHint,
            const uint64_t& id,
            LayersBackend* backend,
            int32_t* maxTextureSize) = 0;
    virtual bool
    DeallocPLayers(PLayersChild* actor) = 0;
    virtual PGrallocBufferChild*
    AllocPGrallocBuffer(
            const gfxIntSize& size,
            const uint32_t& format,
            const uint32_t& usage,
            MaybeMagicGrallocBufferHandle* handle) = 0;
    virtual bool
    DeallocPGrallocBuffer(PGrallocBufferChild* actor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

    virtual void
    ProcessingError(Result code);
    virtual bool
    ShouldContinueFromReplyTimeout();
    virtual void
    EnteredCxxStack();
    virtual void
    ExitedCxxStack();
    virtual void
    EnteredCall();
    virtual void
    ExitedCall();

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PCompositorChild();

    virtual ~PCompositorChild();

    bool
    Open(
            Channel::Transport* aTransport,
            ProcessHandle aOtherProcess,
            MessageLoop* aThread = 0,
            AsyncChannel::Side aSide = Channel::Unknown);

    bool
    Open(
            AsyncChannel* aChannel,
            MessageLoop* aMessageLoop,
            AsyncChannel::Side aSide = Channel::Unknown);

    void
    Close();

    void
    SetReplyTimeoutMs(int32_t aTimeoutMs);

    void
    ManagedPGrallocBufferChild(InfallibleTArray<PGrallocBufferChild*>& aArr) const;
    const InfallibleTArray<PGrallocBufferChild*>&
    ManagedPGrallocBufferChild() const;

    void
    ManagedPLayersChild(InfallibleTArray<PLayersChild*>& aArr) const;
    const InfallibleTArray<PLayersChild*>&
    ManagedPLayersChild() const;

    PCompositor::State
    state();

    bool
    SendMemoryPressure();

    bool
    SendWillStop();

    bool
    SendStop();

    bool
    SendPause();

    bool
    SendResume();

    bool
    SendMakeSnapshot(
            const SurfaceDescriptor& inSnapshot,
            SurfaceDescriptor* outSnapshot);

    PLayersChild*
    SendPLayersConstructor(
            const LayersBackend& backendHint,
            const uint64_t& id,
            LayersBackend* backend,
            int32_t* maxTextureSize);

    PLayersChild*
    SendPLayersConstructor(
            PLayersChild* actor,
            const LayersBackend& backendHint,
            const uint64_t& id,
            LayersBackend* backend,
            int32_t* maxTextureSize);

    PGrallocBufferChild*
    SendPGrallocBufferConstructor(
            const gfxIntSize& size,
            const uint32_t& format,
            const uint32_t& usage,
            MaybeMagicGrallocBufferHandle* handle);

    PGrallocBufferChild*
    SendPGrallocBufferConstructor(
            PGrallocBufferChild* actor,
            const gfxIntSize& size,
            const uint32_t& format,
            const uint32_t& usage,
            MaybeMagicGrallocBufferHandle* handle);

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnEnteredCxxStack();
    void
    OnExitedCxxStack();
    void
    OnEnteredCall();
    void
    OnExitedCall();
    bool
    IsOnCxxStack() const;
    void
    FlushPendingRPCQueue();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

    void
    ProcessNativeEventsInRPCCall();

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    void
    DeallocShmems();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const SurfaceDescriptor& __v,
            Message* __msg);

    bool
    Read(
            SurfaceDescriptor* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            Shmem& __v,
            Message* __msg);

    bool
    Read(
            Shmem* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PGrallocBufferChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PGrallocBufferChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const MaybeMagicGrallocBufferHandle& __v,
            Message* __msg);

    bool
    Read(
            MaybeMagicGrallocBufferHandle* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PLayersChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PLayersChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SurfaceDescriptorD3D10& __v,
            Message* __msg);

    bool
    Read(
            SurfaceDescriptorD3D10* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SurfaceDescriptorGralloc& __v,
            Message* __msg);

    bool
    Read(
            SurfaceDescriptorGralloc* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SharedTextureDescriptor& __v,
            Message* __msg);

    bool
    Read(
            SharedTextureDescriptor* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    Channel mChannel;
    IDMap<ChannelListener> mActorMap;
    int32_t mLastRouteId;
    ProcessHandle mOtherProcess;
    IDMap<Shmem::SharedMemory> mShmemMap;
    Shmem::id_t mLastShmemId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PGrallocBufferChild*> mManagedPGrallocBufferChild;
    // Sorted by pointer value
    InfallibleTArray<PLayersChild*> mManagedPLayersChild;
};


} // namespace layers
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace layers {
class CompositorChild :
    public PCompositorChild
{
    virtual PLayersChild*
    AllocPLayers(
            const LayersBackend& backendHint,
            const uint64_t& id,
            LayersBackend* backend,
            int32_t* maxTextureSize);

    virtual bool
    DeallocPLayers(PLayersChild* actor);

    virtual PGrallocBufferChild*
    AllocPGrallocBuffer(
            const gfxIntSize& size,
            const uint32_t& format,
            const uint32_t& usage,
            MaybeMagicGrallocBufferHandle* handle);

    virtual bool
    DeallocPGrallocBuffer(PGrallocBufferChild* actor);

    CompositorChild();
    virtual ~CompositorChild();
};
} // namespace layers
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace layers {
PLayersChild*
CompositorChild::AllocPLayers(
        const LayersBackend& backendHint,
        const uint64_t& id,
        LayersBackend* backend,
        int32_t* maxTextureSize)
{
    return 0;
}

bool
CompositorChild::DeallocPLayers(PLayersChild* actor)
{
    return false;
}

PGrallocBufferChild*
CompositorChild::AllocPGrallocBuffer(
        const gfxIntSize& size,
        const uint32_t& format,
        const uint32_t& usage,
        MaybeMagicGrallocBufferHandle* handle)
{
    return 0;
}

bool
CompositorChild::DeallocPGrallocBuffer(PGrallocBufferChild* actor)
{
    return false;
}

CompositorChild::CompositorChild()
{
    MOZ_COUNT_CTOR(CompositorChild);
}

CompositorChild::~CompositorChild()
{
    MOZ_COUNT_DTOR(CompositorChild);
}

} // namespace layers
} // namespace mozilla
#endif // if 0

#endif // ifndef PCompositorChild_h
