//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PLayersChild_h
#define PLayersChild_h

#include "mozilla/layers/PLayers.h"
namespace mozilla {
namespace layers {
class PCompositorChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PGrallocBufferChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PLayerChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layout {
class PRenderFrameChild;
} // namespace layout
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace layers {
class PLayerChild;
} // namespace layers
} // namespace mozilla


namespace mozilla {
namespace layout {
class PRenderFrameChild;
} // namespace layout
} // namespace mozilla


namespace mozilla {
namespace layers {
class PCompositorChild;
} // namespace layers
} // namespace mozilla


namespace mozilla {
namespace layers {
class PGrallocBufferChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {


class /*NS_ABSTRACT_CLASS*/ PLayersChild :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::layers::PLayerChild;

    friend class mozilla::layout::PRenderFrameChild;

    friend class mozilla::layers::PCompositorChild;

    friend class mozilla::layers::PGrallocBufferChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::layers::Animatable Animatable;
    typedef mozilla::layers::Animation Animation;
    typedef mozilla::layers::AnimationData AnimationData;
    typedef mozilla::layers::AnimationSegment AnimationSegment;
    typedef mozilla::layers::CanvasLayerAttributes CanvasLayerAttributes;
    typedef mozilla::layers::CanvasSurface CanvasSurface;
    typedef mozilla::layers::Color Color;
    typedef mozilla::layers::ColorLayerAttributes ColorLayerAttributes;
    typedef mozilla::layers::CommonLayerAttributes CommonLayerAttributes;
    typedef mozilla::layers::ContainerLayerAttributes ContainerLayerAttributes;
    typedef mozilla::layers::CubicBezierFunction CubicBezierFunction;
    typedef mozilla::layers::Edit Edit;
    typedef mozilla::layers::EditReply EditReply;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::layers::FrameMetrics FrameMetrics;
    typedef mozilla::GraphicsFilterType GraphicsFilterType;
    typedef mozilla::layers::ImageLayerAttributes ImageLayerAttributes;
    typedef mozilla::layers::LayerAttributes LayerAttributes;
    typedef mozilla::layers::MagicGrallocBufferHandle MagicGrallocBufferHandle;
    typedef mozilla::layers::MaybeMagicGrallocBufferHandle MaybeMagicGrallocBufferHandle;
    typedef mozilla::layers::OpAppendChild OpAppendChild;
    typedef mozilla::layers::OpBufferSwap OpBufferSwap;
    typedef mozilla::layers::OpCreateCanvasLayer OpCreateCanvasLayer;
    typedef mozilla::layers::OpCreateColorLayer OpCreateColorLayer;
    typedef mozilla::layers::OpCreateContainerLayer OpCreateContainerLayer;
    typedef mozilla::layers::OpCreateImageLayer OpCreateImageLayer;
    typedef mozilla::layers::OpCreateRefLayer OpCreateRefLayer;
    typedef mozilla::layers::OpCreateThebesLayer OpCreateThebesLayer;
    typedef mozilla::layers::OpImageSwap OpImageSwap;
    typedef mozilla::layers::OpInsertAfter OpInsertAfter;
    typedef mozilla::layers::OpPaintCanvas OpPaintCanvas;
    typedef mozilla::layers::OpPaintImage OpPaintImage;
    typedef mozilla::layers::OpPaintThebesBuffer OpPaintThebesBuffer;
    typedef mozilla::layers::OpPaintTiledLayerBuffer OpPaintTiledLayerBuffer;
    typedef mozilla::layers::OpRaiseToTopChild OpRaiseToTopChild;
    typedef mozilla::layers::OpRemoveChild OpRemoveChild;
    typedef mozilla::layers::OpRepositionChild OpRepositionChild;
    typedef mozilla::layers::OpSetLayerAttributes OpSetLayerAttributes;
    typedef mozilla::layers::OpSetRoot OpSetRoot;
    typedef mozilla::layers::OpThebesBufferSwap OpThebesBufferSwap;
    typedef mozilla::layers::OptionalThebesBuffer OptionalThebesBuffer;
    typedef mozilla::layers::Perspective Perspective;
    typedef mozilla::layers::RGBImage RGBImage;
    typedef mozilla::layers::RefLayerAttributes RefLayerAttributes;
    typedef mozilla::layers::Rotation Rotation;
    typedef mozilla::layers::Rotation3D Rotation3D;
    typedef mozilla::layers::RotationX RotationX;
    typedef mozilla::layers::RotationY RotationY;
    typedef mozilla::layers::RotationZ RotationZ;
    typedef mozilla::layers::Scale Scale;
    typedef mozilla::dom::ScreenOrientation ScreenOrientation;
    typedef mozilla::ScreenRotation ScreenRotation;
    typedef mozilla::layers::SharedImage SharedImage;
    typedef mozilla::layers::SharedImageID SharedImageID;
    typedef mozilla::layers::SharedTextureDescriptor SharedTextureDescriptor;
    typedef mozilla::gl::SharedTextureHandle SharedTextureHandle;
    typedef mozilla::gl::GLContext::SharedTextureShareType SharedTextureShareType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::layers::SkewX SkewX;
    typedef mozilla::layers::SkewY SkewY;
    typedef mozilla::layers::SpecificLayerAttributes SpecificLayerAttributes;
    typedef mozilla::layers::StepFunction StepFunction;
    typedef mozilla::layers::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::layers::SurfaceDescriptorD3D10 SurfaceDescriptorD3D10;
    typedef mozilla::layers::SurfaceDescriptorGralloc SurfaceDescriptorGralloc;
    typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
    typedef mozilla::layers::TargetConfig TargetConfig;
    typedef mozilla::layers::ThebesBuffer ThebesBuffer;
    typedef mozilla::layers::ThebesLayerAttributes ThebesLayerAttributes;
    typedef mozilla::TimeDuration TimeDuration;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::layers::TimingFunction TimingFunction;
    typedef mozilla::layers::TransformData TransformData;
    typedef mozilla::layers::TransformFunction TransformFunction;
    typedef mozilla::layers::TransformMatrix TransformMatrix;
    typedef mozilla::layers::Translation Translation;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::layers::YCbCrImage YCbCrImage;
    typedef mozilla::layers::YUVImage YUVImage;
    typedef mozilla::gfxContentType gfxContentType;
    typedef mozilla::null_t null_t;
    typedef mozilla::layers::PCompositorChild PCompositorChild;
    typedef mozilla::layers::PGrallocBufferChild PGrallocBufferChild;
    typedef mozilla::layers::PLayerChild PLayerChild;
    typedef mozilla::layout::PRenderFrameChild PRenderFrameChild;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PLayers::State State;

    virtual PGrallocBufferChild*
    AllocPGrallocBuffer(
            const gfxIntSize& size,
            const gfxContentType& content,
            MaybeMagicGrallocBufferHandle* handle) = 0;
    virtual bool
    DeallocPGrallocBuffer(PGrallocBufferChild* actor) = 0;
    virtual PLayerChild*
    AllocPLayer() = 0;
    virtual bool
    DeallocPLayer(PLayerChild* actor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PLayersChild();

    virtual ~PLayersChild();

    void
    ManagedPGrallocBufferChild(InfallibleTArray<PGrallocBufferChild*>& aArr) const;
    const InfallibleTArray<PGrallocBufferChild*>&
    ManagedPGrallocBufferChild() const;

    void
    ManagedPLayerChild(InfallibleTArray<PLayerChild*>& aArr) const;
    const InfallibleTArray<PLayerChild*>&
    ManagedPLayerChild() const;

    PLayers::State
    state();

    PGrallocBufferChild*
    SendPGrallocBufferConstructor(
            const gfxIntSize& size,
            const gfxContentType& content,
            MaybeMagicGrallocBufferHandle* handle);

    PGrallocBufferChild*
    SendPGrallocBufferConstructor(
            PGrallocBufferChild* actor,
            const gfxIntSize& size,
            const gfxContentType& content,
            MaybeMagicGrallocBufferHandle* handle);

    PLayerChild*
    SendPLayerConstructor();

    PLayerChild*
    SendPLayerConstructor(PLayerChild* actor);

    bool
    SendUpdate(
            const InfallibleTArray<Edit>& cset,
            const TargetConfig& targetConfig,
            const bool& isFirstPaint,
            InfallibleTArray<EditReply>* reply);

    bool
    SendUpdateNoSwap(
            const InfallibleTArray<Edit>& cset,
            const TargetConfig& targetConfig,
            const bool& isFirstPaint);

    bool
    SendClearCachedResources();

    static bool
    Send__delete__(PLayersChild* actor);

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const OpAppendChild& __v,
            Message* __msg);

    bool
    Read(
            OpAppendChild* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SurfaceDescriptor& __v,
            Message* __msg);

    bool
    Read(
            SurfaceDescriptor* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const CubicBezierFunction& __v,
            Message* __msg);

    bool
    Read(
            CubicBezierFunction* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const Color& __v,
            Message* __msg);

    bool
    Read(
            Color* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpInsertAfter& __v,
            Message* __msg);

    bool
    Read(
            OpInsertAfter* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpPaintThebesBuffer& __v,
            Message* __msg);

    bool
    Read(
            OpPaintThebesBuffer* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const CanvasLayerAttributes& __v,
            Message* __msg);

    bool
    Read(
            CanvasLayerAttributes* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const TransformFunction& __v,
            Message* __msg);

    bool
    Read(
            TransformFunction* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const Animation& __v,
            Message* __msg);

    bool
    Read(
            Animation* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpCreateColorLayer& __v,
            Message* __msg);

    bool
    Read(
            OpCreateColorLayer* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpPaintTiledLayerBuffer& __v,
            Message* __msg);

    bool
    Read(
            OpPaintTiledLayerBuffer* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ImageLayerAttributes& __v,
            Message* __msg);

    bool
    Read(
            ImageLayerAttributes* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const YUVImage& __v,
            Message* __msg);

    bool
    Read(
            YUVImage* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PGrallocBufferChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PGrallocBufferChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const Translation& __v,
            Message* __msg);

    bool
    Read(
            Translation* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const Perspective& __v,
            Message* __msg);

    bool
    Read(
            Perspective* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PLayerChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PLayerChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SurfaceDescriptorGralloc& __v,
            Message* __msg);

    bool
    Read(
            SurfaceDescriptorGralloc* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpCreateThebesLayer& __v,
            Message* __msg);

    bool
    Read(
            OpCreateThebesLayer* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const EditReply& __v,
            Message* __msg);

    bool
    Read(
            EditReply* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<Edit>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<Edit>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const Edit& __v,
            Message* __msg);

    bool
    Read(
            Edit* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SharedImage& __v,
            Message* __msg);

    bool
    Read(
            SharedImage* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const AnimationSegment& __v,
            Message* __msg);

    bool
    Read(
            AnimationSegment* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const CanvasSurface& __v,
            Message* __msg);

    bool
    Read(
            CanvasSurface* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const YCbCrImage& __v,
            Message* __msg);

    bool
    Read(
            YCbCrImage* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OptionalThebesBuffer& __v,
            Message* __msg);

    bool
    Read(
            OptionalThebesBuffer* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpBufferSwap& __v,
            Message* __msg);

    bool
    Read(
            OpBufferSwap* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PLayersChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PLayersChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpImageSwap& __v,
            Message* __msg);

    bool
    Read(
            OpImageSwap* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ColorLayerAttributes& __v,
            Message* __msg);

    bool
    Read(
            ColorLayerAttributes* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SurfaceDescriptorD3D10& __v,
            Message* __msg);

    bool
    Read(
            SurfaceDescriptorD3D10* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SkewX& __v,
            Message* __msg);

    bool
    Read(
            SkewX* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SkewY& __v,
            Message* __msg);

    bool
    Read(
            SkewY* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const RotationZ& __v,
            Message* __msg);

    bool
    Read(
            RotationZ* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SharedTextureDescriptor& __v,
            Message* __msg);

    bool
    Read(
            SharedTextureDescriptor* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const RotationX& __v,
            Message* __msg);

    bool
    Read(
            RotationX* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const RotationY& __v,
            Message* __msg);

    bool
    Read(
            RotationY* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const Animatable& __v,
            Message* __msg);

    bool
    Read(
            Animatable* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            Shmem& __v,
            Message* __msg);

    bool
    Read(
            Shmem* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpCreateRefLayer& __v,
            Message* __msg);

    bool
    Read(
            OpCreateRefLayer* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpPaintImage& __v,
            Message* __msg);

    bool
    Read(
            OpPaintImage* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpThebesBufferSwap& __v,
            Message* __msg);

    bool
    Read(
            OpThebesBufferSwap* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpCreateContainerLayer& __v,
            Message* __msg);

    bool
    Read(
            OpCreateContainerLayer* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const LayerAttributes& __v,
            Message* __msg);

    bool
    Read(
            LayerAttributes* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const Rotation& __v,
            Message* __msg);

    bool
    Read(
            Rotation* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<TransformFunction>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<TransformFunction>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpSetRoot& __v,
            Message* __msg);

    bool
    Read(
            OpSetRoot* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const TransformData& __v,
            Message* __msg);

    bool
    Read(
            TransformData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpRemoveChild& __v,
            Message* __msg);

    bool
    Read(
            OpRemoveChild* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ContainerLayerAttributes& __v,
            Message* __msg);

    bool
    Read(
            ContainerLayerAttributes* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const AnimationData& __v,
            Message* __msg);

    bool
    Read(
            AnimationData* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpRepositionChild& __v,
            Message* __msg);

    bool
    Read(
            OpRepositionChild* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<AnimationSegment>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<AnimationSegment>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const TargetConfig& __v,
            Message* __msg);

    bool
    Read(
            TargetConfig* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpSetLayerAttributes& __v,
            Message* __msg);

    bool
    Read(
            OpSetLayerAttributes* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ThebesBuffer& __v,
            Message* __msg);

    bool
    Read(
            ThebesBuffer* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SpecificLayerAttributes& __v,
            Message* __msg);

    bool
    Read(
            SpecificLayerAttributes* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const ThebesLayerAttributes& __v,
            Message* __msg);

    bool
    Read(
            ThebesLayerAttributes* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpRaiseToTopChild& __v,
            Message* __msg);

    bool
    Read(
            OpRaiseToTopChild* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<EditReply>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<EditReply>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const SharedImageID& __v,
            Message* __msg);

    bool
    Read(
            SharedImageID* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const TransformMatrix& __v,
            Message* __msg);

    bool
    Read(
            TransformMatrix* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpCreateImageLayer& __v,
            Message* __msg);

    bool
    Read(
            OpCreateImageLayer* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const CommonLayerAttributes& __v,
            Message* __msg);

    bool
    Read(
            CommonLayerAttributes* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpCreateCanvasLayer& __v,
            Message* __msg);

    bool
    Read(
            OpCreateCanvasLayer* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const TimingFunction& __v,
            Message* __msg);

    bool
    Read(
            TimingFunction* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const MaybeMagicGrallocBufferHandle& __v,
            Message* __msg);

    bool
    Read(
            MaybeMagicGrallocBufferHandle* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const Rotation3D& __v,
            Message* __msg);

    bool
    Read(
            Rotation3D* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const RGBImage& __v,
            Message* __msg);

    bool
    Read(
            RGBImage* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const RefLayerAttributes& __v,
            Message* __msg);

    bool
    Read(
            RefLayerAttributes* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const StepFunction& __v,
            Message* __msg);

    bool
    Read(
            StepFunction* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OpPaintCanvas& __v,
            Message* __msg);

    bool
    Read(
            OpPaintCanvas* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<Animation>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<Animation>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const Scale& __v,
            Message* __msg);

    bool
    Read(
            Scale* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PGrallocBufferChild*> mManagedPGrallocBufferChild;
    // Sorted by pointer value
    InfallibleTArray<PLayerChild*> mManagedPLayerChild;
};


} // namespace layers
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace layers {
class LayersChild :
    public PLayersChild
{
    virtual PGrallocBufferChild*
    AllocPGrallocBuffer(
            const gfxIntSize& size,
            const gfxContentType& content,
            MaybeMagicGrallocBufferHandle* handle);

    virtual bool
    DeallocPGrallocBuffer(PGrallocBufferChild* actor);

    virtual PLayerChild*
    AllocPLayer();

    virtual bool
    DeallocPLayer(PLayerChild* actor);

    LayersChild();
    virtual ~LayersChild();
};
} // namespace layers
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace layers {
PGrallocBufferChild*
LayersChild::AllocPGrallocBuffer(
        const gfxIntSize& size,
        const gfxContentType& content,
        MaybeMagicGrallocBufferHandle* handle)
{
    return 0;
}

bool
LayersChild::DeallocPGrallocBuffer(PGrallocBufferChild* actor)
{
    return false;
}

PLayerChild*
LayersChild::AllocPLayer()
{
    return 0;
}

bool
LayersChild::DeallocPLayer(PLayerChild* actor)
{
    return false;
}

LayersChild::LayersChild()
{
    MOZ_COUNT_CTOR(LayersChild);
}

LayersChild::~LayersChild()
{
    MOZ_COUNT_DTOR(LayersChild);
}

} // namespace layers
} // namespace mozilla
#endif // if 0

#endif // ifndef PLayersChild_h
