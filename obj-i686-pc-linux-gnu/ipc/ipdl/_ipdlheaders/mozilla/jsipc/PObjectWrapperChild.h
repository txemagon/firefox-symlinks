//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PObjectWrapperChild_h
#define PObjectWrapperChild_h

#include "mozilla/jsipc/PObjectWrapper.h"
namespace mozilla {
namespace jsipc {
class PContextWrapperChild;
} // namespace jsipc
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace jsipc {
class PContextWrapperChild;
} // namespace jsipc
} // namespace mozilla

namespace mozilla {
namespace jsipc {


class /*NS_ABSTRACT_CLASS*/ PObjectWrapperChild :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::jsipc::PContextWrapperChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::jsipc::JSVariant JSVariant;
    typedef mozilla::jsipc::OperationStatus OperationStatus;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::void_t void_t;
    typedef mozilla::jsipc::PContextWrapperChild PContextWrapperChild;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PObjectWrapper::State State;

    virtual bool
    Recv__delete__();
    virtual bool
    AnswerAddProperty(
            const nsString& id,
            OperationStatus* status) = 0;
    virtual bool
    AnswerGetProperty(
            const nsString& id,
            OperationStatus* status,
            JSVariant* vp) = 0;
    virtual bool
    AnswerSetProperty(
            const nsString& id,
            const JSVariant& v,
            OperationStatus* status,
            JSVariant* vp) = 0;
    virtual bool
    AnswerDelProperty(
            const nsString& id,
            OperationStatus* status,
            JSVariant* vp) = 0;
    virtual bool
    AnswerNewEnumerateInit(
            OperationStatus* status,
            JSVariant* statep,
            int* idp) = 0;
    virtual bool
    AnswerNewEnumerateNext(
            const JSVariant& in_state,
            OperationStatus* status,
            JSVariant* statep,
            nsString* idp) = 0;
    virtual bool
    RecvNewEnumerateDestroy(const JSVariant& in_state) = 0;
    virtual bool
    AnswerNewResolve(
            const nsString& id,
            const int& flags,
            OperationStatus* status,
            PObjectWrapperChild** obj2) = 0;
    virtual bool
    AnswerConvert(
            const JSType& type,
            OperationStatus* status,
            JSVariant* vp) = 0;
    virtual bool
    AnswerCall(
            PObjectWrapperChild* receiver,
            const InfallibleTArray<JSVariant>& argv,
            OperationStatus* status,
            JSVariant* rval) = 0;
    virtual bool
    AnswerConstruct(
            const InfallibleTArray<JSVariant>& argv,
            OperationStatus* status,
            PObjectWrapperChild** rval) = 0;
    virtual bool
    AnswerHasInstance(
            const JSVariant& v,
            OperationStatus* status,
            JSBool* bp) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PObjectWrapperChild();

    virtual ~PObjectWrapperChild();

    PContextWrapperChild*
    Manager() const;

    PObjectWrapper::State
    state();

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            PObjectWrapperChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PObjectWrapperChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<JSVariant>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<JSVariant>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const OperationStatus& __v,
            Message* __msg);

    bool
    Read(
            OperationStatus* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const JSVariant& __v,
            Message* __msg);

    bool
    Read(
            JSVariant* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
};


} // namespace jsipc
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace jsipc {
class ObjectWrapperChild :
    public PObjectWrapperChild
{
    virtual bool
    AnswerAddProperty(
            const nsString& id,
            OperationStatus* status);

    virtual bool
    AnswerGetProperty(
            const nsString& id,
            OperationStatus* status,
            JSVariant* vp);

    virtual bool
    AnswerSetProperty(
            const nsString& id,
            const JSVariant& v,
            OperationStatus* status,
            JSVariant* vp);

    virtual bool
    AnswerDelProperty(
            const nsString& id,
            OperationStatus* status,
            JSVariant* vp);

    virtual bool
    AnswerNewEnumerateInit(
            OperationStatus* status,
            JSVariant* statep,
            int* idp);

    virtual bool
    AnswerNewEnumerateNext(
            const JSVariant& in_state,
            OperationStatus* status,
            JSVariant* statep,
            nsString* idp);

    virtual bool
    RecvNewEnumerateDestroy(const JSVariant& in_state);

    virtual bool
    AnswerNewResolve(
            const nsString& id,
            const int& flags,
            OperationStatus* status,
            PObjectWrapperChild** obj2);

    virtual bool
    AnswerConvert(
            const JSType& type,
            OperationStatus* status,
            JSVariant* vp);

    virtual bool
    AnswerCall(
            PObjectWrapperChild* receiver,
            const InfallibleTArray<JSVariant>& argv,
            OperationStatus* status,
            JSVariant* rval);

    virtual bool
    AnswerConstruct(
            const InfallibleTArray<JSVariant>& argv,
            OperationStatus* status,
            PObjectWrapperChild** rval);

    virtual bool
    AnswerHasInstance(
            const JSVariant& v,
            OperationStatus* status,
            JSBool* bp);

    ObjectWrapperChild();
    virtual ~ObjectWrapperChild();
};
} // namespace jsipc
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace jsipc {
bool
ObjectWrapperChild::AnswerAddProperty(
        const nsString& id,
        OperationStatus* status)
{
    return false;
}

bool
ObjectWrapperChild::AnswerGetProperty(
        const nsString& id,
        OperationStatus* status,
        JSVariant* vp)
{
    return false;
}

bool
ObjectWrapperChild::AnswerSetProperty(
        const nsString& id,
        const JSVariant& v,
        OperationStatus* status,
        JSVariant* vp)
{
    return false;
}

bool
ObjectWrapperChild::AnswerDelProperty(
        const nsString& id,
        OperationStatus* status,
        JSVariant* vp)
{
    return false;
}

bool
ObjectWrapperChild::AnswerNewEnumerateInit(
        OperationStatus* status,
        JSVariant* statep,
        int* idp)
{
    return false;
}

bool
ObjectWrapperChild::AnswerNewEnumerateNext(
        const JSVariant& in_state,
        OperationStatus* status,
        JSVariant* statep,
        nsString* idp)
{
    return false;
}

bool
ObjectWrapperChild::RecvNewEnumerateDestroy(const JSVariant& in_state)
{
    return false;
}

bool
ObjectWrapperChild::AnswerNewResolve(
        const nsString& id,
        const int& flags,
        OperationStatus* status,
        PObjectWrapperChild** obj2)
{
    return false;
}

bool
ObjectWrapperChild::AnswerConvert(
        const JSType& type,
        OperationStatus* status,
        JSVariant* vp)
{
    return false;
}

bool
ObjectWrapperChild::AnswerCall(
        PObjectWrapperChild* receiver,
        const InfallibleTArray<JSVariant>& argv,
        OperationStatus* status,
        JSVariant* rval)
{
    return false;
}

bool
ObjectWrapperChild::AnswerConstruct(
        const InfallibleTArray<JSVariant>& argv,
        OperationStatus* status,
        PObjectWrapperChild** rval)
{
    return false;
}

bool
ObjectWrapperChild::AnswerHasInstance(
        const JSVariant& v,
        OperationStatus* status,
        JSBool* bp)
{
    return false;
}

ObjectWrapperChild::ObjectWrapperChild()
{
    MOZ_COUNT_CTOR(ObjectWrapperChild);
}

ObjectWrapperChild::~ObjectWrapperChild()
{
    MOZ_COUNT_DTOR(ObjectWrapperChild);
}

} // namespace jsipc
} // namespace mozilla
#endif // if 0

#endif // ifndef PObjectWrapperChild_h
