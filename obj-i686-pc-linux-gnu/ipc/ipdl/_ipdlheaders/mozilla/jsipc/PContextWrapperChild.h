//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PContextWrapperChild_h
#define PContextWrapperChild_h

#include "mozilla/jsipc/PContextWrapper.h"
namespace mozilla {
namespace ipc {
class PTestShellChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace jsipc {
class PObjectWrapperChild;
} // namespace jsipc
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace ipc {
class PTestShellChild;
} // namespace ipc
} // namespace mozilla


namespace mozilla {
namespace jsipc {
class PObjectWrapperChild;
} // namespace jsipc
} // namespace mozilla

namespace mozilla {
namespace jsipc {


class /*NS_ABSTRACT_CLASS*/ PContextWrapperChild :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::ipc::PTestShellChild;

    friend class mozilla::jsipc::PObjectWrapperChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::PTestShellChild PTestShellChild;
    typedef mozilla::jsipc::PObjectWrapperChild PObjectWrapperChild;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PContextWrapper::State State;

    virtual PObjectWrapperChild*
    AllocPObjectWrapper(const bool& makeGlobal) = 0;
    virtual bool
    DeallocPObjectWrapper(PObjectWrapperChild* actor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PContextWrapperChild();

    virtual ~PContextWrapperChild();

    PTestShellChild*
    Manager() const;

    void
    ManagedPObjectWrapperChild(InfallibleTArray<PObjectWrapperChild*>& aArr) const;
    const InfallibleTArray<PObjectWrapperChild*>&
    ManagedPObjectWrapperChild() const;

    PContextWrapper::State
    state();

    static bool
    Send__delete__(PContextWrapperChild* actor);

    PObjectWrapperChild*
    SendPObjectWrapperConstructor(const bool& makeGlobal);

    PObjectWrapperChild*
    SendPObjectWrapperConstructor(
            PObjectWrapperChild* actor,
            const bool& makeGlobal);

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            PObjectWrapperChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PObjectWrapperChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PContextWrapperChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PContextWrapperChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PObjectWrapperChild*> mManagedPObjectWrapperChild;
};


} // namespace jsipc
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace jsipc {
class ContextWrapperChild :
    public PContextWrapperChild
{
    virtual PObjectWrapperChild*
    AllocPObjectWrapper(const bool& makeGlobal);

    virtual bool
    DeallocPObjectWrapper(PObjectWrapperChild* actor);

    ContextWrapperChild();
    virtual ~ContextWrapperChild();
};
} // namespace jsipc
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace jsipc {
PObjectWrapperChild*
ContextWrapperChild::AllocPObjectWrapper(const bool& makeGlobal)
{
    return 0;
}

bool
ContextWrapperChild::DeallocPObjectWrapper(PObjectWrapperChild* actor)
{
    return false;
}

ContextWrapperChild::ContextWrapperChild()
{
    MOZ_COUNT_CTOR(ContextWrapperChild);
}

ContextWrapperChild::~ContextWrapperChild()
{
    MOZ_COUNT_DTOR(ContextWrapperChild);
}

} // namespace jsipc
} // namespace mozilla
#endif // if 0

#endif // ifndef PContextWrapperChild_h
