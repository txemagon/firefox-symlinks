//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginModuleParent_h
#define PPluginModuleParent_h

#include "mozilla/plugins/PPluginModule.h"
namespace mozilla {
namespace plugins {
class PPluginIdentifierParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginInstanceParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginScriptableObjectParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace dom {
class PCrashReporterParent;
} // namespace dom
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace plugins {
class PPluginInstanceParent;
} // namespace plugins
} // namespace mozilla


namespace mozilla {
namespace dom {
class PCrashReporterParent;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace plugins {
class PPluginIdentifierParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {


class /*NS_ABSTRACT_CLASS*/ PPluginModuleParent :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::plugins::PPluginInstanceParent;

    friend class mozilla::dom::PCrashReporterParent;

    friend class mozilla::plugins::PPluginIdentifierParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::PPluginIdentifierParent PPluginIdentifierParent;
    typedef mozilla::plugins::PPluginInstanceParent PPluginInstanceParent;
    typedef mozilla::plugins::PPluginScriptableObjectParent PPluginScriptableObjectParent;
    typedef mozilla::dom::PCrashReporterParent PCrashReporterParent;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PPluginModule::State State;

    virtual bool
    RecvPPluginIdentifierConstructor(
            PPluginIdentifierParent* actor,
            const nsCString& aString,
            const int32_t& aInt,
            const bool& temporary);
    virtual bool
    RecvProcessNativeEventsInRPCCall() = 0;
    virtual bool
    RecvBackUpXResources(const FileDescriptor& aXSocketFd) = 0;
    virtual bool
    AnswerNPN_UserAgent(nsCString* userAgent) = 0;
    virtual bool
    AnswerNPN_GetValue_WithBoolReturn(
            const NPNVariable& aVariable,
            NPError* aError,
            bool* aBoolVal) = 0;
    virtual bool
    AnswerProcessSomeEvents() = 0;
    virtual bool
    RecvPluginShowWindow(
            const uint32_t& aWindowId,
            const bool& aModal,
            const int32_t& aX,
            const int32_t& aY,
            const size_t& aWidth,
            const size_t& aHeight) = 0;
    virtual bool
    RecvPluginHideWindow(const uint32_t& aWindowId) = 0;
    virtual bool
    RecvSetCursor(const NSCursorInfo& cursorInfo) = 0;
    virtual bool
    RecvShowCursor(const bool& show) = 0;
    virtual bool
    RecvPushCursor(const NSCursorInfo& cursorInfo) = 0;
    virtual bool
    RecvPopCursor() = 0;
    virtual bool
    RecvGetNativeCursorsSupported(bool* supported) = 0;
    virtual bool
    RecvNPN_SetException(
            PPluginScriptableObjectParent* actor,
            const nsCString& message) = 0;
    virtual bool
    RecvNPN_ReloadPlugins(const bool& aReloadPages) = 0;
    virtual PPluginIdentifierParent*
    AllocPPluginIdentifier(
            const nsCString& aString,
            const int32_t& aInt,
            const bool& temporary) = 0;
    virtual bool
    DeallocPPluginIdentifier(PPluginIdentifierParent* actor) = 0;
    virtual PPluginInstanceParent*
    AllocPPluginInstance(
            const nsCString& aMimeType,
            const uint16_t& aMode,
            const InfallibleTArray<nsCString>& aNames,
            const InfallibleTArray<nsCString>& aValues,
            NPError* rv) = 0;
    virtual bool
    DeallocPPluginInstance(PPluginInstanceParent* actor) = 0;
    virtual PCrashReporterParent*
    AllocPCrashReporter(
            NativeThreadId* tid,
            uint32_t* processType) = 0;
    virtual bool
    DeallocPCrashReporter(PCrashReporterParent* actor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

    virtual void
    ProcessingError(Result code);
    virtual bool
    ShouldContinueFromReplyTimeout();
    virtual void
    EnteredCxxStack();
    virtual void
    ExitedCxxStack();
    virtual void
    EnteredCall();
    virtual void
    ExitedCall();

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PPluginModuleParent();

    virtual ~PPluginModuleParent();

    bool
    Open(
            Channel::Transport* aTransport,
            ProcessHandle aOtherProcess,
            MessageLoop* aThread = 0,
            AsyncChannel::Side aSide = Channel::Unknown);

    bool
    Open(
            AsyncChannel* aChannel,
            MessageLoop* aMessageLoop,
            AsyncChannel::Side aSide = Channel::Unknown);

    void
    Close();

    void
    SetReplyTimeoutMs(int32_t aTimeoutMs);

    void
    ManagedPPluginInstanceParent(InfallibleTArray<PPluginInstanceParent*>& aArr) const;
    const InfallibleTArray<PPluginInstanceParent*>&
    ManagedPPluginInstanceParent() const;

    void
    ManagedPPluginIdentifierParent(InfallibleTArray<PPluginIdentifierParent*>& aArr) const;
    const InfallibleTArray<PPluginIdentifierParent*>&
    ManagedPPluginIdentifierParent() const;

    void
    ManagedPCrashReporterParent(InfallibleTArray<PCrashReporterParent*>& aArr) const;
    const InfallibleTArray<PCrashReporterParent*>&
    ManagedPCrashReporterParent() const;

    PPluginModule::State
    state();

    PPluginIdentifierParent*
    SendPPluginIdentifierConstructor(
            const nsCString& aString,
            const int32_t& aInt,
            const bool& temporary) NS_WARN_UNUSED_RESULT;

    PPluginIdentifierParent*
    SendPPluginIdentifierConstructor(
            PPluginIdentifierParent* actor,
            const nsCString& aString,
            const int32_t& aInt,
            const bool& temporary) NS_WARN_UNUSED_RESULT;

    bool
    SendProcessNativeEventsInRPCCall() NS_WARN_UNUSED_RESULT;

    bool
    CallNP_GetEntryPoints(NPError* rv) NS_WARN_UNUSED_RESULT;

    bool
    CallNP_Initialize(
            const uint32_t& aFlags,
            NPError* rv) NS_WARN_UNUSED_RESULT;

    PPluginInstanceParent*
    CallPPluginInstanceConstructor(
            const nsCString& aMimeType,
            const uint16_t& aMode,
            const InfallibleTArray<nsCString>& aNames,
            const InfallibleTArray<nsCString>& aValues,
            NPError* rv) NS_WARN_UNUSED_RESULT;

    PPluginInstanceParent*
    CallPPluginInstanceConstructor(
            PPluginInstanceParent* actor,
            const nsCString& aMimeType,
            const uint16_t& aMode,
            const InfallibleTArray<nsCString>& aNames,
            const InfallibleTArray<nsCString>& aValues,
            NPError* rv) NS_WARN_UNUSED_RESULT;

    bool
    CallNP_Shutdown(NPError* rv) NS_WARN_UNUSED_RESULT;

    bool
    CallOptionalFunctionsSupported(
            bool* aURLRedirectNotify,
            bool* aClearSiteData,
            bool* aGetSitesWithData) NS_WARN_UNUSED_RESULT;

    bool
    CallNPP_ClearSiteData(
            const nsCString& site,
            const uint64_t& flags,
            const uint64_t& maxAge,
            NPError* rv) NS_WARN_UNUSED_RESULT;

    bool
    CallNPP_GetSitesWithData(InfallibleTArray<nsCString>* sites) NS_WARN_UNUSED_RESULT;

    bool
    SendSetAudioSessionData(
            const nsID& aID,
            const nsString& aDisplayName,
            const nsString& aIconPath) NS_WARN_UNUSED_RESULT;

    bool
    SendSetParentHangTimeout(const uint32_t& seconds) NS_WARN_UNUSED_RESULT;

    PCrashReporterParent*
    CallPCrashReporterConstructor(
            NativeThreadId* tid,
            uint32_t* processType) NS_WARN_UNUSED_RESULT;

    PCrashReporterParent*
    CallPCrashReporterConstructor(
            PCrashReporterParent* actor,
            NativeThreadId* tid,
            uint32_t* processType) NS_WARN_UNUSED_RESULT;

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnEnteredCxxStack();
    void
    OnExitedCxxStack();
    void
    OnEnteredCall();
    void
    OnExitedCall();
    bool
    IsOnCxxStack() const;
    void
    FlushPendingRPCQueue();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

    void
    ProcessNativeEventsInRPCCall();

    void
    SetOtherProcess(ProcessHandle aOtherProcess);

protected:
    base::ProcessId
    OtherSidePID() const;

    bool
    TakeMinidump(
            nsIFile** aDump,
            uint32_t* aSequence) const;

    bool
    BlockChild();
    bool
    UnblockChild();

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    void
    DeallocShmems();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const FileDescriptor& __v,
            Message* __msg);

    bool
    Read(
            FileDescriptor* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PPluginScriptableObjectParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PPluginScriptableObjectParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PPluginInstanceParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PPluginInstanceParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PCrashReporterParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PCrashReporterParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PPluginIdentifierParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PPluginIdentifierParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    Channel mChannel;
    IDMap<ChannelListener> mActorMap;
    int32_t mLastRouteId;
    ProcessHandle mOtherProcess;
    IDMap<Shmem::SharedMemory> mShmemMap;
    Shmem::id_t mLastShmemId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PPluginInstanceParent*> mManagedPPluginInstanceParent;
    // Sorted by pointer value
    InfallibleTArray<PPluginIdentifierParent*> mManagedPPluginIdentifierParent;
    // Sorted by pointer value
    InfallibleTArray<PCrashReporterParent*> mManagedPCrashReporterParent;
};


} // namespace plugins
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace plugins {
class PluginModuleParent :
    public PPluginModuleParent
{
    virtual bool
    RecvProcessNativeEventsInRPCCall();

    virtual bool
    RecvBackUpXResources(const FileDescriptor& aXSocketFd);

    virtual bool
    AnswerNPN_UserAgent(nsCString* userAgent);

    virtual bool
    AnswerNPN_GetValue_WithBoolReturn(
            const NPNVariable& aVariable,
            NPError* aError,
            bool* aBoolVal);

    virtual bool
    AnswerProcessSomeEvents();

    virtual bool
    RecvPluginShowWindow(
            const uint32_t& aWindowId,
            const bool& aModal,
            const int32_t& aX,
            const int32_t& aY,
            const size_t& aWidth,
            const size_t& aHeight);

    virtual bool
    RecvPluginHideWindow(const uint32_t& aWindowId);

    virtual bool
    RecvSetCursor(const NSCursorInfo& cursorInfo);

    virtual bool
    RecvShowCursor(const bool& show);

    virtual bool
    RecvPushCursor(const NSCursorInfo& cursorInfo);

    virtual bool
    RecvPopCursor();

    virtual bool
    RecvGetNativeCursorsSupported(bool* supported);

    virtual bool
    RecvNPN_SetException(
            PPluginScriptableObjectParent* actor,
            const nsCString& message);

    virtual bool
    RecvNPN_ReloadPlugins(const bool& aReloadPages);

    virtual PPluginIdentifierParent*
    AllocPPluginIdentifier(
            const nsCString& aString,
            const int32_t& aInt,
            const bool& temporary);

    virtual bool
    DeallocPPluginIdentifier(PPluginIdentifierParent* actor);

    virtual PPluginInstanceParent*
    AllocPPluginInstance(
            const nsCString& aMimeType,
            const uint16_t& aMode,
            const InfallibleTArray<nsCString>& aNames,
            const InfallibleTArray<nsCString>& aValues,
            NPError* rv);

    virtual bool
    DeallocPPluginInstance(PPluginInstanceParent* actor);

    virtual PCrashReporterParent*
    AllocPCrashReporter(
            NativeThreadId* tid,
            uint32_t* processType);

    virtual bool
    DeallocPCrashReporter(PCrashReporterParent* actor);

    PluginModuleParent();
    virtual ~PluginModuleParent();
};
} // namespace plugins
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace plugins {
bool
PluginModuleParent::RecvProcessNativeEventsInRPCCall()
{
    return false;
}

bool
PluginModuleParent::RecvBackUpXResources(const FileDescriptor& aXSocketFd)
{
    return false;
}

bool
PluginModuleParent::AnswerNPN_UserAgent(nsCString* userAgent)
{
    return false;
}

bool
PluginModuleParent::AnswerNPN_GetValue_WithBoolReturn(
        const NPNVariable& aVariable,
        NPError* aError,
        bool* aBoolVal)
{
    return false;
}

bool
PluginModuleParent::AnswerProcessSomeEvents()
{
    return false;
}

bool
PluginModuleParent::RecvPluginShowWindow(
        const uint32_t& aWindowId,
        const bool& aModal,
        const int32_t& aX,
        const int32_t& aY,
        const size_t& aWidth,
        const size_t& aHeight)
{
    return false;
}

bool
PluginModuleParent::RecvPluginHideWindow(const uint32_t& aWindowId)
{
    return false;
}

bool
PluginModuleParent::RecvSetCursor(const NSCursorInfo& cursorInfo)
{
    return false;
}

bool
PluginModuleParent::RecvShowCursor(const bool& show)
{
    return false;
}

bool
PluginModuleParent::RecvPushCursor(const NSCursorInfo& cursorInfo)
{
    return false;
}

bool
PluginModuleParent::RecvPopCursor()
{
    return false;
}

bool
PluginModuleParent::RecvGetNativeCursorsSupported(bool* supported)
{
    return false;
}

bool
PluginModuleParent::RecvNPN_SetException(
        PPluginScriptableObjectParent* actor,
        const nsCString& message)
{
    return false;
}

bool
PluginModuleParent::RecvNPN_ReloadPlugins(const bool& aReloadPages)
{
    return false;
}

PPluginIdentifierParent*
PluginModuleParent::AllocPPluginIdentifier(
        const nsCString& aString,
        const int32_t& aInt,
        const bool& temporary)
{
    return 0;
}

bool
PluginModuleParent::DeallocPPluginIdentifier(PPluginIdentifierParent* actor)
{
    return false;
}

PPluginInstanceParent*
PluginModuleParent::AllocPPluginInstance(
        const nsCString& aMimeType,
        const uint16_t& aMode,
        const InfallibleTArray<nsCString>& aNames,
        const InfallibleTArray<nsCString>& aValues,
        NPError* rv)
{
    return 0;
}

bool
PluginModuleParent::DeallocPPluginInstance(PPluginInstanceParent* actor)
{
    return false;
}

PCrashReporterParent*
PluginModuleParent::AllocPCrashReporter(
        NativeThreadId* tid,
        uint32_t* processType)
{
    return 0;
}

bool
PluginModuleParent::DeallocPCrashReporter(PCrashReporterParent* actor)
{
    return false;
}

PluginModuleParent::PluginModuleParent()
{
    MOZ_COUNT_CTOR(PluginModuleParent);
}

PluginModuleParent::~PluginModuleParent()
{
    MOZ_COUNT_DTOR(PluginModuleParent);
}

} // namespace plugins
} // namespace mozilla
#endif // if 0

#endif // ifndef PPluginModuleParent_h
