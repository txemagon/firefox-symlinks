//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginModule_h
#define PPluginModule_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "npapi.h"
#include "mozilla/plugins/PluginMessageUtils.h"
#include "mozilla/dom/TabMessageUtils.h"

//-----------------------------------------------------------------------------
// Code common to PPluginModuleChild and PPluginModuleParent
//
namespace mozilla {
namespace plugins {
namespace PPluginModule {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PPluginModuleStart = PPluginModuleMsgStart << 16,
    PPluginModulePreStart = (PPluginModuleMsgStart << 16) - 1,
    Msg_PPluginIdentifierConstructor__ID,
    Reply_PPluginIdentifierConstructor__ID,
    Msg_ProcessNativeEventsInRPCCall__ID,
    Msg_NP_GetEntryPoints__ID,
    Reply_NP_GetEntryPoints__ID,
    Msg_NP_Initialize__ID,
    Reply_NP_Initialize__ID,
    Msg_PPluginInstanceConstructor__ID,
    Reply_PPluginInstanceConstructor__ID,
    Msg_NP_Shutdown__ID,
    Reply_NP_Shutdown__ID,
    Msg_OptionalFunctionsSupported__ID,
    Reply_OptionalFunctionsSupported__ID,
    Msg_NPP_ClearSiteData__ID,
    Reply_NPP_ClearSiteData__ID,
    Msg_NPP_GetSitesWithData__ID,
    Reply_NPP_GetSitesWithData__ID,
    Msg_SetAudioSessionData__ID,
    Msg_SetParentHangTimeout__ID,
    Msg_PCrashReporterConstructor__ID,
    Reply_PCrashReporterConstructor__ID,
    Msg_BackUpXResources__ID,
    Msg_NPN_UserAgent__ID,
    Reply_NPN_UserAgent__ID,
    Msg_NPN_GetValue_WithBoolReturn__ID,
    Reply_NPN_GetValue_WithBoolReturn__ID,
    Msg_ProcessSomeEvents__ID,
    Reply_ProcessSomeEvents__ID,
    Msg_PluginShowWindow__ID,
    Msg_PluginHideWindow__ID,
    Msg_SetCursor__ID,
    Msg_ShowCursor__ID,
    Msg_PushCursor__ID,
    Msg_PopCursor__ID,
    Msg_GetNativeCursorsSupported__ID,
    Reply_GetNativeCursorsSupported__ID,
    Msg_NPN_SetException__ID,
    Reply_NPN_SetException__ID,
    Msg_NPN_ReloadPlugins__ID,
    PPluginModuleEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg_PPluginIdentifierConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_PPluginIdentifierConstructor__ID
    };
    Msg_PPluginIdentifierConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_PPluginIdentifierConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PPluginIdentifierConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PPluginIdentifierConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_PPluginIdentifierConstructor__ID
    };
    Reply_PPluginIdentifierConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_PPluginIdentifierConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PPluginIdentifierConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_ProcessNativeEventsInRPCCall :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_ProcessNativeEventsInRPCCall__ID
    };
    Msg_ProcessNativeEventsInRPCCall() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_ProcessNativeEventsInRPCCall")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_ProcessNativeEventsInRPCCall(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NP_GetEntryPoints :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_NP_GetEntryPoints__ID
    };
    Msg_NP_GetEntryPoints() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_NP_GetEntryPoints")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NP_GetEntryPoints(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NP_GetEntryPoints :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_NP_GetEntryPoints__ID
    };
    Reply_NP_GetEntryPoints() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_NP_GetEntryPoints")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NP_GetEntryPoints(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NP_Initialize :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_NP_Initialize__ID
    };
    Msg_NP_Initialize() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_NP_Initialize")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NP_Initialize(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NP_Initialize :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_NP_Initialize__ID
    };
    Reply_NP_Initialize() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_NP_Initialize")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NP_Initialize(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PPluginInstanceConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_PPluginInstanceConstructor__ID
    };
    Msg_PPluginInstanceConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_PPluginInstanceConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PPluginInstanceConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PPluginInstanceConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_PPluginInstanceConstructor__ID
    };
    Reply_PPluginInstanceConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_PPluginInstanceConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PPluginInstanceConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NP_Shutdown :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_NP_Shutdown__ID
    };
    Msg_NP_Shutdown() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_NP_Shutdown")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NP_Shutdown(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NP_Shutdown :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_NP_Shutdown__ID
    };
    Reply_NP_Shutdown() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_NP_Shutdown")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NP_Shutdown(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_OptionalFunctionsSupported :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_OptionalFunctionsSupported__ID
    };
    Msg_OptionalFunctionsSupported() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_OptionalFunctionsSupported")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_OptionalFunctionsSupported(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_OptionalFunctionsSupported :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_OptionalFunctionsSupported__ID
    };
    Reply_OptionalFunctionsSupported() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_OptionalFunctionsSupported")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_OptionalFunctionsSupported(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_ClearSiteData :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_NPP_ClearSiteData__ID
    };
    Msg_NPP_ClearSiteData() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_NPP_ClearSiteData")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_ClearSiteData(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_ClearSiteData :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_NPP_ClearSiteData__ID
    };
    Reply_NPP_ClearSiteData() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_NPP_ClearSiteData")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_ClearSiteData(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_GetSitesWithData :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_NPP_GetSitesWithData__ID
    };
    Msg_NPP_GetSitesWithData() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_NPP_GetSitesWithData")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_GetSitesWithData(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_GetSitesWithData :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_NPP_GetSitesWithData__ID
    };
    Reply_NPP_GetSitesWithData() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_NPP_GetSitesWithData")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_GetSitesWithData(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetAudioSessionData :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_SetAudioSessionData__ID
    };
    Msg_SetAudioSessionData() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_SetAudioSessionData")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetAudioSessionData(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetParentHangTimeout :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_SetParentHangTimeout__ID
    };
    Msg_SetParentHangTimeout() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_SetParentHangTimeout")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetParentHangTimeout(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PCrashReporterConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_PCrashReporterConstructor__ID
    };
    Msg_PCrashReporterConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_PCrashReporterConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PCrashReporterConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PCrashReporterConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_PCrashReporterConstructor__ID
    };
    Reply_PCrashReporterConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_PCrashReporterConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PCrashReporterConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_BackUpXResources :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_BackUpXResources__ID
    };
    Msg_BackUpXResources() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_BackUpXResources")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_BackUpXResources(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_UserAgent :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_NPN_UserAgent__ID
    };
    Msg_NPN_UserAgent() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_NPN_UserAgent")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_UserAgent(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_UserAgent :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_NPN_UserAgent__ID
    };
    Reply_NPN_UserAgent() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_NPN_UserAgent")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_UserAgent(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_GetValue_WithBoolReturn :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_NPN_GetValue_WithBoolReturn__ID
    };
    Msg_NPN_GetValue_WithBoolReturn() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_NPN_GetValue_WithBoolReturn")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_GetValue_WithBoolReturn(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_GetValue_WithBoolReturn :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_NPN_GetValue_WithBoolReturn__ID
    };
    Reply_NPN_GetValue_WithBoolReturn() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_NPN_GetValue_WithBoolReturn")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_GetValue_WithBoolReturn(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_ProcessSomeEvents :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_ProcessSomeEvents__ID
    };
    Msg_ProcessSomeEvents() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_ProcessSomeEvents")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_ProcessSomeEvents(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_ProcessSomeEvents :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_ProcessSomeEvents__ID
    };
    Reply_ProcessSomeEvents() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_ProcessSomeEvents")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_ProcessSomeEvents(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PluginShowWindow :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_PluginShowWindow__ID
    };
    Msg_PluginShowWindow() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_PluginShowWindow")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PluginShowWindow(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PluginHideWindow :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_PluginHideWindow__ID
    };
    Msg_PluginHideWindow() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_PluginHideWindow")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PluginHideWindow(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetCursor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_SetCursor__ID
    };
    Msg_SetCursor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_SetCursor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetCursor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_ShowCursor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_ShowCursor__ID
    };
    Msg_ShowCursor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_ShowCursor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_ShowCursor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PushCursor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_PushCursor__ID
    };
    Msg_PushCursor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_PushCursor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PushCursor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PopCursor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_PopCursor__ID
    };
    Msg_PopCursor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_PopCursor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PopCursor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetNativeCursorsSupported :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_GetNativeCursorsSupported__ID
    };
    Msg_GetNativeCursorsSupported() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_GetNativeCursorsSupported")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetNativeCursorsSupported(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetNativeCursorsSupported :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_GetNativeCursorsSupported__ID
    };
    Reply_GetNativeCursorsSupported() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_GetNativeCursorsSupported")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetNativeCursorsSupported(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_SetException :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_NPN_SetException__ID
    };
    Msg_NPN_SetException() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_NPN_SetException")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_SetException(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_SetException :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Reply_NPN_SetException__ID
    };
    Reply_NPN_SetException() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Reply_NPN_SetException")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_SetException(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_ReloadPlugins :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;

public:
    enum {
        ID = Msg_NPN_ReloadPlugins__ID
    };
    Msg_NPN_ReloadPlugins() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginModule::Msg_NPN_ReloadPlugins")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_ReloadPlugins(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PPluginModule
} // namespace plugins
} // namespace mozilla

#endif // ifndef PPluginModule_h
