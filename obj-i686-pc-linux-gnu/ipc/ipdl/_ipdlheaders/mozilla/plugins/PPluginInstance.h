//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginInstance_h
#define PPluginInstance_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/plugins/PluginMessageUtils.h"
#include "IPC/nsGUIEventIPC.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IOSurfaceDescriptor|
//
namespace mozilla {
namespace plugins {
class IOSurfaceDescriptor MOZ_FINAL
{
private:

public:
    IOSurfaceDescriptor();

    IOSurfaceDescriptor(
            const uint32_t& _surfaceId,
            const double& _contentsScaleFactor)
    {
        Init();
        Assign(_surfaceId, _contentsScaleFactor);
    }

    IOSurfaceDescriptor(const IOSurfaceDescriptor& _o)
    {
        Init();
        Assign((_o).surfaceId(), (_o).contentsScaleFactor());
    }

    ~IOSurfaceDescriptor();

    void
    operator=(const IOSurfaceDescriptor& _o)
    {
        Assign((_o).surfaceId(), (_o).contentsScaleFactor());
    }

    bool
    operator==(const IOSurfaceDescriptor& _o) const;

    uint32_t&
    surfaceId()
    {
        return surfaceId_;
    }
    const uint32_t&
    surfaceId() const
    {
        return surfaceId_;
    }

    double&
    contentsScaleFactor()
    {
        return contentsScaleFactor_;
    }
    const double&
    contentsScaleFactor() const
    {
        return contentsScaleFactor_;
    }

private:
    void
    Init();

    void
    Assign(
            const uint32_t& _surfaceId,
            const double& _contentsScaleFactor);

    uint32_t surfaceId_;
    double contentsScaleFactor_;
};
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginSurfaceParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginSurfaceChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class IOSurfaceDescriptor;
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union SurfaceDescriptor|
//
namespace mozilla {
namespace plugins {
class SurfaceDescriptor MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TShmem = 1,
        TSurfaceDescriptorX11,
        TPPluginSurfaceParent,
        TPPluginSurfaceChild,
        TIOSurfaceDescriptor,
        Tnull_t,
        T__Last = Tnull_t
    };

private:
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::PPluginSurfaceParent PPluginSurfaceParent;
    typedef mozilla::plugins::PPluginSurfaceChild PPluginSurfaceChild;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::null_t null_t;
    typedef Shmem Shmem__tdef;
    typedef SurfaceDescriptorX11 SurfaceDescriptorX11__tdef;
    typedef PPluginSurfaceParent* PPluginSurfaceParent__tdef;
    typedef PPluginSurfaceChild* PPluginSurfaceChild__tdef;
    typedef IOSurfaceDescriptor IOSurfaceDescriptor__tdef;
    typedef null_t null_t__tdef;

    union Value {
        char VShmem[sizeof(Shmem)];
        char VSurfaceDescriptorX11[sizeof(SurfaceDescriptorX11)];
        char VPPluginSurfaceParent[sizeof(PPluginSurfaceParent*)];
        char VPPluginSurfaceChild[sizeof(PPluginSurfaceChild*)];
        char VIOSurfaceDescriptor[sizeof(IOSurfaceDescriptor)];
        char Vnull_t[sizeof(null_t)];
    };

    Shmem*
    ptr_Shmem()
    {
        return reinterpret_cast<Shmem*>((&((mValue).VShmem)));
    }
    const Shmem* const
    constptr_Shmem() const
    {
        return reinterpret_cast<const Shmem* const>((&((mValue).VShmem)));
    }
    SurfaceDescriptorX11*
    ptr_SurfaceDescriptorX11()
    {
        return reinterpret_cast<SurfaceDescriptorX11*>((&((mValue).VSurfaceDescriptorX11)));
    }
    const SurfaceDescriptorX11* const
    constptr_SurfaceDescriptorX11() const
    {
        return reinterpret_cast<const SurfaceDescriptorX11* const>((&((mValue).VSurfaceDescriptorX11)));
    }
    PPluginSurfaceParent**
    ptr_PPluginSurfaceParent()
    {
        return reinterpret_cast<PPluginSurfaceParent**>((&((mValue).VPPluginSurfaceParent)));
    }
    PPluginSurfaceParent* const*
    constptr_PPluginSurfaceParent() const
    {
        return reinterpret_cast<PPluginSurfaceParent* const*>((&((mValue).VPPluginSurfaceParent)));
    }
    PPluginSurfaceChild**
    ptr_PPluginSurfaceChild()
    {
        return reinterpret_cast<PPluginSurfaceChild**>((&((mValue).VPPluginSurfaceChild)));
    }
    PPluginSurfaceChild* const*
    constptr_PPluginSurfaceChild() const
    {
        return reinterpret_cast<PPluginSurfaceChild* const*>((&((mValue).VPPluginSurfaceChild)));
    }
    IOSurfaceDescriptor*
    ptr_IOSurfaceDescriptor()
    {
        return reinterpret_cast<IOSurfaceDescriptor*>((&((mValue).VIOSurfaceDescriptor)));
    }
    const IOSurfaceDescriptor* const
    constptr_IOSurfaceDescriptor() const
    {
        return reinterpret_cast<const IOSurfaceDescriptor* const>((&((mValue).VIOSurfaceDescriptor)));
    }
    null_t*
    ptr_null_t()
    {
        return reinterpret_cast<null_t*>((&((mValue).Vnull_t)));
    }
    const null_t* const
    constptr_null_t() const
    {
        return reinterpret_cast<const null_t* const>((&((mValue).Vnull_t)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    SurfaceDescriptor() :
        mType(T__None)
    {
    }

    SurfaceDescriptor(Shmem& aOther);

    SurfaceDescriptor(const SurfaceDescriptorX11& aOther);

    SurfaceDescriptor(PPluginSurfaceParent* aOther);

    SurfaceDescriptor(PPluginSurfaceChild* aOther);

    SurfaceDescriptor(const IOSurfaceDescriptor& aOther);

    SurfaceDescriptor(const null_t& aOther);

    SurfaceDescriptor(const SurfaceDescriptor& aOther);

    ~SurfaceDescriptor();

    Type
    type() const
    {
        return mType;
    }

    SurfaceDescriptor&
    operator=(Shmem& aRhs);

    SurfaceDescriptor&
    operator=(const SurfaceDescriptorX11& aRhs);

    SurfaceDescriptor&
    operator=(PPluginSurfaceParent* aRhs);

    SurfaceDescriptor&
    operator=(PPluginSurfaceChild* aRhs);

    SurfaceDescriptor&
    operator=(const IOSurfaceDescriptor& aRhs);

    SurfaceDescriptor&
    operator=(const null_t& aRhs);

    SurfaceDescriptor&
    operator=(const SurfaceDescriptor& aRhs);

    bool
    operator==(Shmem& aRhs) const;

    bool
    operator==(const SurfaceDescriptorX11& aRhs) const;

    bool
    operator==(PPluginSurfaceParent* aRhs) const;

    bool
    operator==(PPluginSurfaceChild* aRhs) const;

    bool
    operator==(const IOSurfaceDescriptor& aRhs) const;

    bool
    operator==(const null_t& aRhs) const;

    bool
    operator==(const SurfaceDescriptor& aRhs) const;

    Shmem&
    get_Shmem()
    {
        AssertSanity(TShmem);
        return (*(ptr_Shmem()));
    }
    Shmem&
    get_Shmem() const
    {
        AssertSanity(TShmem);
        return const_cast<Shmem&>((*(constptr_Shmem())));
    }
    operator Shmem&()
    {
        return get_Shmem();
    }
    operator Shmem&() const
    {
        return get_Shmem();
    }

    SurfaceDescriptorX11&
    get_SurfaceDescriptorX11()
    {
        AssertSanity(TSurfaceDescriptorX11);
        return (*(ptr_SurfaceDescriptorX11()));
    }
    const SurfaceDescriptorX11&
    get_SurfaceDescriptorX11() const
    {
        AssertSanity(TSurfaceDescriptorX11);
        return (*(constptr_SurfaceDescriptorX11()));
    }
    operator SurfaceDescriptorX11&()
    {
        return get_SurfaceDescriptorX11();
    }
    operator const SurfaceDescriptorX11&() const
    {
        return get_SurfaceDescriptorX11();
    }

    PPluginSurfaceParent*&
    get_PPluginSurfaceParent()
    {
        AssertSanity(TPPluginSurfaceParent);
        return (*(ptr_PPluginSurfaceParent()));
    }
    PPluginSurfaceParent*
    get_PPluginSurfaceParent() const
    {
        AssertSanity(TPPluginSurfaceParent);
        return (*(constptr_PPluginSurfaceParent()));
    }
    operator PPluginSurfaceParent*&()
    {
        return get_PPluginSurfaceParent();
    }
    operator PPluginSurfaceParent*() const
    {
        return get_PPluginSurfaceParent();
    }

    PPluginSurfaceChild*&
    get_PPluginSurfaceChild()
    {
        AssertSanity(TPPluginSurfaceChild);
        return (*(ptr_PPluginSurfaceChild()));
    }
    PPluginSurfaceChild*
    get_PPluginSurfaceChild() const
    {
        AssertSanity(TPPluginSurfaceChild);
        return (*(constptr_PPluginSurfaceChild()));
    }
    operator PPluginSurfaceChild*&()
    {
        return get_PPluginSurfaceChild();
    }
    operator PPluginSurfaceChild*() const
    {
        return get_PPluginSurfaceChild();
    }

    IOSurfaceDescriptor&
    get_IOSurfaceDescriptor()
    {
        AssertSanity(TIOSurfaceDescriptor);
        return (*(ptr_IOSurfaceDescriptor()));
    }
    const IOSurfaceDescriptor&
    get_IOSurfaceDescriptor() const
    {
        AssertSanity(TIOSurfaceDescriptor);
        return (*(constptr_IOSurfaceDescriptor()));
    }
    operator IOSurfaceDescriptor&()
    {
        return get_IOSurfaceDescriptor();
    }
    operator const IOSurfaceDescriptor&() const
    {
        return get_IOSurfaceDescriptor();
    }

    null_t&
    get_null_t()
    {
        AssertSanity(Tnull_t);
        return (*(ptr_null_t()));
    }
    const null_t&
    get_null_t() const
    {
        AssertSanity(Tnull_t);
        return (*(constptr_null_t()));
    }
    operator null_t&()
    {
        return get_null_t();
    }
    operator const null_t&() const
    {
        return get_null_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace plugins
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union OptionalShmem|
//
namespace mozilla {
namespace plugins {
class OptionalShmem MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TShmem = 1,
        Tnull_t,
        T__Last = Tnull_t
    };

private:
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::null_t null_t;
    typedef Shmem Shmem__tdef;
    typedef null_t null_t__tdef;

    union Value {
        char VShmem[sizeof(Shmem)];
        char Vnull_t[sizeof(null_t)];
    };

    Shmem*
    ptr_Shmem()
    {
        return reinterpret_cast<Shmem*>((&((mValue).VShmem)));
    }
    const Shmem* const
    constptr_Shmem() const
    {
        return reinterpret_cast<const Shmem* const>((&((mValue).VShmem)));
    }
    null_t*
    ptr_null_t()
    {
        return reinterpret_cast<null_t*>((&((mValue).Vnull_t)));
    }
    const null_t* const
    constptr_null_t() const
    {
        return reinterpret_cast<const null_t* const>((&((mValue).Vnull_t)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    OptionalShmem() :
        mType(T__None)
    {
    }

    OptionalShmem(Shmem& aOther);

    OptionalShmem(const null_t& aOther);

    OptionalShmem(const OptionalShmem& aOther);

    ~OptionalShmem();

    Type
    type() const
    {
        return mType;
    }

    OptionalShmem&
    operator=(Shmem& aRhs);

    OptionalShmem&
    operator=(const null_t& aRhs);

    OptionalShmem&
    operator=(const OptionalShmem& aRhs);

    bool
    operator==(Shmem& aRhs) const;

    bool
    operator==(const null_t& aRhs) const;

    bool
    operator==(const OptionalShmem& aRhs) const;

    Shmem&
    get_Shmem()
    {
        AssertSanity(TShmem);
        return (*(ptr_Shmem()));
    }
    Shmem&
    get_Shmem() const
    {
        AssertSanity(TShmem);
        return const_cast<Shmem&>((*(constptr_Shmem())));
    }
    operator Shmem&()
    {
        return get_Shmem();
    }
    operator Shmem&() const
    {
        return get_Shmem();
    }

    null_t&
    get_null_t()
    {
        AssertSanity(Tnull_t);
        return (*(ptr_null_t()));
    }
    const null_t&
    get_null_t() const
    {
        AssertSanity(Tnull_t);
        return (*(constptr_null_t()));
    }
    operator null_t&()
    {
        return get_null_t();
    }
    operator const null_t&() const
    {
        return get_null_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace plugins
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union AsyncSurfaceDescriptor|
//
namespace mozilla {
namespace plugins {
class AsyncSurfaceDescriptor MOZ_FINAL
{
public:
    enum Type {
        T__None,
        TShmem = 1,
        TDXGISharedSurfaceHandle,
        T__Last = TDXGISharedSurfaceHandle
    };

private:
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef Shmem Shmem__tdef;
    typedef DXGISharedSurfaceHandle DXGISharedSurfaceHandle__tdef;

    union Value {
        char VShmem[sizeof(Shmem)];
        char VDXGISharedSurfaceHandle[sizeof(DXGISharedSurfaceHandle)];
    };

    Shmem*
    ptr_Shmem()
    {
        return reinterpret_cast<Shmem*>((&((mValue).VShmem)));
    }
    const Shmem* const
    constptr_Shmem() const
    {
        return reinterpret_cast<const Shmem* const>((&((mValue).VShmem)));
    }
    DXGISharedSurfaceHandle*
    ptr_DXGISharedSurfaceHandle()
    {
        return reinterpret_cast<DXGISharedSurfaceHandle*>((&((mValue).VDXGISharedSurfaceHandle)));
    }
    const DXGISharedSurfaceHandle* const
    constptr_DXGISharedSurfaceHandle() const
    {
        return reinterpret_cast<const DXGISharedSurfaceHandle* const>((&((mValue).VDXGISharedSurfaceHandle)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    AsyncSurfaceDescriptor() :
        mType(T__None)
    {
    }

    AsyncSurfaceDescriptor(Shmem& aOther);

    AsyncSurfaceDescriptor(const DXGISharedSurfaceHandle& aOther);

    AsyncSurfaceDescriptor(const AsyncSurfaceDescriptor& aOther);

    ~AsyncSurfaceDescriptor();

    Type
    type() const
    {
        return mType;
    }

    AsyncSurfaceDescriptor&
    operator=(Shmem& aRhs);

    AsyncSurfaceDescriptor&
    operator=(const DXGISharedSurfaceHandle& aRhs);

    AsyncSurfaceDescriptor&
    operator=(const AsyncSurfaceDescriptor& aRhs);

    bool
    operator==(Shmem& aRhs) const;

    bool
    operator==(const DXGISharedSurfaceHandle& aRhs) const;

    bool
    operator==(const AsyncSurfaceDescriptor& aRhs) const;

    Shmem&
    get_Shmem()
    {
        AssertSanity(TShmem);
        return (*(ptr_Shmem()));
    }
    Shmem&
    get_Shmem() const
    {
        AssertSanity(TShmem);
        return const_cast<Shmem&>((*(constptr_Shmem())));
    }
    operator Shmem&()
    {
        return get_Shmem();
    }
    operator Shmem&() const
    {
        return get_Shmem();
    }

    DXGISharedSurfaceHandle&
    get_DXGISharedSurfaceHandle()
    {
        AssertSanity(TDXGISharedSurfaceHandle);
        return (*(ptr_DXGISharedSurfaceHandle()));
    }
    const DXGISharedSurfaceHandle&
    get_DXGISharedSurfaceHandle() const
    {
        AssertSanity(TDXGISharedSurfaceHandle);
        return (*(constptr_DXGISharedSurfaceHandle()));
    }
    operator DXGISharedSurfaceHandle&()
    {
        return get_DXGISharedSurfaceHandle();
    }
    operator const DXGISharedSurfaceHandle&() const
    {
        return get_DXGISharedSurfaceHandle();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class AsyncSurfaceDescriptor;
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct NPRemoteAsyncSurface|
//
namespace mozilla {
namespace plugins {
class NPRemoteAsyncSurface MOZ_FINAL
{
private:
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;

public:
    NPRemoteAsyncSurface();

    NPRemoteAsyncSurface(
            const uint32_t& _version,
            const gfxIntSize& _size,
            const NPImageFormat& _format,
            const uint32_t& _stride,
            const AsyncSurfaceDescriptor& _data,
            const uintptr_t& _hostPtr)
    {
        Init();
        Assign(_version, _size, _format, _stride, _data, _hostPtr);
    }

    NPRemoteAsyncSurface(const NPRemoteAsyncSurface& _o)
    {
        Init();
        Assign((_o).version(), (_o).size(), (_o).format(), (_o).stride(), (_o).data(), (_o).hostPtr());
    }

    ~NPRemoteAsyncSurface();

    void
    operator=(const NPRemoteAsyncSurface& _o)
    {
        Assign((_o).version(), (_o).size(), (_o).format(), (_o).stride(), (_o).data(), (_o).hostPtr());
    }

    bool
    operator==(const NPRemoteAsyncSurface& _o) const;

    uint32_t&
    version()
    {
        return version_;
    }
    const uint32_t&
    version() const
    {
        return version_;
    }

    gfxIntSize&
    size()
    {
        return size_;
    }
    const gfxIntSize&
    size() const
    {
        return size_;
    }

    NPImageFormat&
    format()
    {
        return format_;
    }
    const NPImageFormat&
    format() const
    {
        return format_;
    }

    uint32_t&
    stride()
    {
        return stride_;
    }
    const uint32_t&
    stride() const
    {
        return stride_;
    }

    AsyncSurfaceDescriptor&
    data()
    {
        return data_;
    }
    const AsyncSurfaceDescriptor&
    data() const
    {
        return data_;
    }

    uintptr_t&
    hostPtr()
    {
        return hostPtr_;
    }
    const uintptr_t&
    hostPtr() const
    {
        return hostPtr_;
    }

private:
    void
    Init();

    void
    Assign(
            const uint32_t& _version,
            const gfxIntSize& _size,
            const NPImageFormat& _format,
            const uint32_t& _stride,
            const AsyncSurfaceDescriptor& _data,
            const uintptr_t& _hostPtr);

    uint32_t version_;
    gfxIntSize size_;
    NPImageFormat format_;
    uint32_t stride_;
    AsyncSurfaceDescriptor data_;
    uintptr_t hostPtr_;
};
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PPluginInstanceChild and PPluginInstanceParent
//
namespace mozilla {
namespace plugins {
namespace PPluginInstance {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PPluginInstanceStart = PPluginInstanceMsgStart << 16,
    PPluginInstancePreStart = (PPluginInstanceMsgStart << 16) - 1,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_NPP_SetWindow__ID,
    Reply_NPP_SetWindow__ID,
    Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams__ID,
    Reply_NPP_GetValue_NPPVpluginWantsAllNetworkStreams__ID,
    Msg_NPP_GetValue_NPPVpluginNeedsXEmbed__ID,
    Reply_NPP_GetValue_NPPVpluginNeedsXEmbed__ID,
    Msg_NPP_GetValue_NPPVpluginScriptableNPObject__ID,
    Reply_NPP_GetValue_NPPVpluginScriptableNPObject__ID,
    Msg_NPP_SetValue_NPNVprivateModeBool__ID,
    Reply_NPP_SetValue_NPNVprivateModeBool__ID,
    Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId__ID,
    Reply_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId__ID,
    Msg_NPP_HandleEvent__ID,
    Reply_NPP_HandleEvent__ID,
    Msg_NPP_HandleEvent_Shmem__ID,
    Reply_NPP_HandleEvent_Shmem__ID,
    Msg_NPP_HandleEvent_IOSurface__ID,
    Reply_NPP_HandleEvent_IOSurface__ID,
    Msg_Paint__ID,
    Reply_Paint__ID,
    Msg_WindowPosChanged__ID,
    Msg_ContentsScaleFactorChanged__ID,
    Msg_AsyncSetWindow__ID,
    Msg_UpdateBackground__ID,
    Msg_HandleTextEvent__ID,
    Reply_HandleTextEvent__ID,
    Msg_HandleKeyEvent__ID,
    Reply_HandleKeyEvent__ID,
    Msg_NPP_DidComposite__ID,
    Msg_NPP_Destroy__ID,
    Reply_NPP_Destroy__ID,
    Msg_NPN_GetValue_NPNVWindowNPObject__ID,
    Reply_NPN_GetValue_NPNVWindowNPObject__ID,
    Msg_NPN_GetValue_NPNVPluginElementNPObject__ID,
    Reply_NPN_GetValue_NPNVPluginElementNPObject__ID,
    Msg_NPN_GetValue_NPNVprivateModeBool__ID,
    Reply_NPN_GetValue_NPNVprivateModeBool__ID,
    Msg_NPN_GetValue_NPNVnetscapeWindow__ID,
    Reply_NPN_GetValue_NPNVnetscapeWindow__ID,
    Msg_NPN_GetValue_NPNVdocumentOrigin__ID,
    Reply_NPN_GetValue_NPNVdocumentOrigin__ID,
    Msg_NPN_GetValue_DrawingModelSupport__ID,
    Reply_NPN_GetValue_DrawingModelSupport__ID,
    Msg_NPN_SetValue_NPPVpluginWindow__ID,
    Reply_NPN_SetValue_NPPVpluginWindow__ID,
    Msg_NPN_SetValue_NPPVpluginTransparent__ID,
    Reply_NPN_SetValue_NPPVpluginTransparent__ID,
    Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor__ID,
    Reply_NPN_SetValue_NPPVpluginUsesDOMForCursor__ID,
    Msg_NPN_SetValue_NPPVpluginDrawingModel__ID,
    Reply_NPN_SetValue_NPPVpluginDrawingModel__ID,
    Msg_NPN_SetValue_NPPVpluginEventModel__ID,
    Reply_NPN_SetValue_NPPVpluginEventModel__ID,
    Msg_NPN_GetURL__ID,
    Reply_NPN_GetURL__ID,
    Msg_NPN_PostURL__ID,
    Reply_NPN_PostURL__ID,
    Msg_PStreamNotifyConstructor__ID,
    Reply_PStreamNotifyConstructor__ID,
    Msg_NPN_InvalidateRect__ID,
    Msg_Show__ID,
    Reply_Show__ID,
    Msg_PPluginSurfaceConstructor__ID,
    Reply_PPluginSurfaceConstructor__ID,
    Msg_NPN_PushPopupsEnabledState__ID,
    Reply_NPN_PushPopupsEnabledState__ID,
    Msg_NPN_PopPopupsEnabledState__ID,
    Reply_NPN_PopPopupsEnabledState__ID,
    Msg_NPN_GetValueForURL__ID,
    Reply_NPN_GetValueForURL__ID,
    Msg_NPN_SetValueForURL__ID,
    Reply_NPN_SetValueForURL__ID,
    Msg_NPN_GetAuthenticationInfo__ID,
    Reply_NPN_GetAuthenticationInfo__ID,
    Msg_NPN_ConvertPoint__ID,
    Reply_NPN_ConvertPoint__ID,
    Msg_RedrawPlugin__ID,
    Msg_NPN_InitAsyncSurface__ID,
    Reply_NPN_InitAsyncSurface__ID,
    Msg_NegotiatedCarbon__ID,
    Reply_NegotiatedCarbon__ID,
    Msg_ReleaseDXGISharedSurface__ID,
    Msg_PPluginScriptableObjectConstructor__ID,
    Reply_PPluginScriptableObjectConstructor__ID,
    Msg_PBrowserStreamConstructor__ID,
    Reply_PBrowserStreamConstructor__ID,
    Msg_PPluginStreamConstructor__ID,
    Reply_PPluginStreamConstructor__ID,
    Msg_PluginFocusChange__ID,
    Reply_PluginFocusChange__ID,
    Msg_SetPluginFocus__ID,
    Reply_SetPluginFocus__ID,
    Msg_UpdateWindow__ID,
    Reply_UpdateWindow__ID,
    Msg_PPluginBackgroundDestroyerConstructor__ID,
    Reply_PPluginBackgroundDestroyerConstructor__ID,
    PPluginInstanceEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_SetWindow :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPP_SetWindow__ID
    };
    Msg_NPP_SetWindow() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPP_SetWindow")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_SetWindow(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_SetWindow :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPP_SetWindow__ID
    };
    Reply_NPP_SetWindow() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPP_SetWindow")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_SetWindow(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams__ID
    };
    Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_GetValue_NPPVpluginWantsAllNetworkStreams :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPP_GetValue_NPPVpluginWantsAllNetworkStreams__ID
    };
    Reply_NPP_GetValue_NPPVpluginWantsAllNetworkStreams() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPP_GetValue_NPPVpluginWantsAllNetworkStreams")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_GetValue_NPPVpluginWantsAllNetworkStreams(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_GetValue_NPPVpluginNeedsXEmbed :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPP_GetValue_NPPVpluginNeedsXEmbed__ID
    };
    Msg_NPP_GetValue_NPPVpluginNeedsXEmbed() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPP_GetValue_NPPVpluginNeedsXEmbed")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_GetValue_NPPVpluginNeedsXEmbed(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_GetValue_NPPVpluginNeedsXEmbed :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPP_GetValue_NPPVpluginNeedsXEmbed__ID
    };
    Reply_NPP_GetValue_NPPVpluginNeedsXEmbed() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPP_GetValue_NPPVpluginNeedsXEmbed")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_GetValue_NPPVpluginNeedsXEmbed(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_GetValue_NPPVpluginScriptableNPObject :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPP_GetValue_NPPVpluginScriptableNPObject__ID
    };
    Msg_NPP_GetValue_NPPVpluginScriptableNPObject() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPP_GetValue_NPPVpluginScriptableNPObject")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_GetValue_NPPVpluginScriptableNPObject(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_GetValue_NPPVpluginScriptableNPObject :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPP_GetValue_NPPVpluginScriptableNPObject__ID
    };
    Reply_NPP_GetValue_NPPVpluginScriptableNPObject() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPP_GetValue_NPPVpluginScriptableNPObject")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_GetValue_NPPVpluginScriptableNPObject(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_SetValue_NPNVprivateModeBool :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPP_SetValue_NPNVprivateModeBool__ID
    };
    Msg_NPP_SetValue_NPNVprivateModeBool() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPP_SetValue_NPNVprivateModeBool")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_SetValue_NPNVprivateModeBool(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_SetValue_NPNVprivateModeBool :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPP_SetValue_NPNVprivateModeBool__ID
    };
    Reply_NPP_SetValue_NPNVprivateModeBool() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPP_SetValue_NPNVprivateModeBool")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_SetValue_NPNVprivateModeBool(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId__ID
    };
    Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId__ID
    };
    Reply_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_HandleEvent :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPP_HandleEvent__ID
    };
    Msg_NPP_HandleEvent() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPP_HandleEvent")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_HandleEvent(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_HandleEvent :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPP_HandleEvent__ID
    };
    Reply_NPP_HandleEvent() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPP_HandleEvent")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_HandleEvent(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_HandleEvent_Shmem :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPP_HandleEvent_Shmem__ID
    };
    Msg_NPP_HandleEvent_Shmem() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPP_HandleEvent_Shmem")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_HandleEvent_Shmem(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_HandleEvent_Shmem :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPP_HandleEvent_Shmem__ID
    };
    Reply_NPP_HandleEvent_Shmem() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPP_HandleEvent_Shmem")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_HandleEvent_Shmem(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_HandleEvent_IOSurface :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPP_HandleEvent_IOSurface__ID
    };
    Msg_NPP_HandleEvent_IOSurface() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPP_HandleEvent_IOSurface")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_HandleEvent_IOSurface(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_HandleEvent_IOSurface :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPP_HandleEvent_IOSurface__ID
    };
    Reply_NPP_HandleEvent_IOSurface() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPP_HandleEvent_IOSurface")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_HandleEvent_IOSurface(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Paint :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_Paint__ID
    };
    Msg_Paint() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_Paint")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Paint(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_Paint :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_Paint__ID
    };
    Reply_Paint() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_Paint")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_Paint(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_WindowPosChanged :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_WindowPosChanged__ID
    };
    Msg_WindowPosChanged() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_WindowPosChanged")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_WindowPosChanged(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_ContentsScaleFactorChanged :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_ContentsScaleFactorChanged__ID
    };
    Msg_ContentsScaleFactorChanged() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_ContentsScaleFactorChanged")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_ContentsScaleFactorChanged(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_AsyncSetWindow :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_AsyncSetWindow__ID
    };
    Msg_AsyncSetWindow() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_AsyncSetWindow")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_AsyncSetWindow(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_UpdateBackground :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_UpdateBackground__ID
    };
    Msg_UpdateBackground() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_UpdateBackground")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_UpdateBackground(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_HandleTextEvent :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_HandleTextEvent__ID
    };
    Msg_HandleTextEvent() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_HandleTextEvent")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_HandleTextEvent(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_HandleTextEvent :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_HandleTextEvent__ID
    };
    Reply_HandleTextEvent() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_HandleTextEvent")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_HandleTextEvent(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_HandleKeyEvent :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_HandleKeyEvent__ID
    };
    Msg_HandleKeyEvent() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_HandleKeyEvent")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_HandleKeyEvent(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_HandleKeyEvent :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_HandleKeyEvent__ID
    };
    Reply_HandleKeyEvent() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_HandleKeyEvent")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_HandleKeyEvent(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_DidComposite :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPP_DidComposite__ID
    };
    Msg_NPP_DidComposite() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPP_DidComposite")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_DidComposite(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPP_Destroy :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPP_Destroy__ID
    };
    Msg_NPP_Destroy() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPP_Destroy")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPP_Destroy(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPP_Destroy :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPP_Destroy__ID
    };
    Reply_NPP_Destroy() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPP_Destroy")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPP_Destroy(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_GetValue_NPNVWindowNPObject :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_GetValue_NPNVWindowNPObject__ID
    };
    Msg_NPN_GetValue_NPNVWindowNPObject() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_GetValue_NPNVWindowNPObject")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_GetValue_NPNVWindowNPObject(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_GetValue_NPNVWindowNPObject :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_GetValue_NPNVWindowNPObject__ID
    };
    Reply_NPN_GetValue_NPNVWindowNPObject() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_GetValue_NPNVWindowNPObject")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_GetValue_NPNVWindowNPObject(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_GetValue_NPNVPluginElementNPObject :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_GetValue_NPNVPluginElementNPObject__ID
    };
    Msg_NPN_GetValue_NPNVPluginElementNPObject() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_GetValue_NPNVPluginElementNPObject")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_GetValue_NPNVPluginElementNPObject(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_GetValue_NPNVPluginElementNPObject :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_GetValue_NPNVPluginElementNPObject__ID
    };
    Reply_NPN_GetValue_NPNVPluginElementNPObject() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_GetValue_NPNVPluginElementNPObject")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_GetValue_NPNVPluginElementNPObject(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_GetValue_NPNVprivateModeBool :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_GetValue_NPNVprivateModeBool__ID
    };
    Msg_NPN_GetValue_NPNVprivateModeBool() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_GetValue_NPNVprivateModeBool")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_GetValue_NPNVprivateModeBool(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_GetValue_NPNVprivateModeBool :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_GetValue_NPNVprivateModeBool__ID
    };
    Reply_NPN_GetValue_NPNVprivateModeBool() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_GetValue_NPNVprivateModeBool")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_GetValue_NPNVprivateModeBool(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_GetValue_NPNVnetscapeWindow :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_GetValue_NPNVnetscapeWindow__ID
    };
    Msg_NPN_GetValue_NPNVnetscapeWindow() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_GetValue_NPNVnetscapeWindow")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_GetValue_NPNVnetscapeWindow(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_GetValue_NPNVnetscapeWindow :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_GetValue_NPNVnetscapeWindow__ID
    };
    Reply_NPN_GetValue_NPNVnetscapeWindow() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_GetValue_NPNVnetscapeWindow")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_GetValue_NPNVnetscapeWindow(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_GetValue_NPNVdocumentOrigin :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_GetValue_NPNVdocumentOrigin__ID
    };
    Msg_NPN_GetValue_NPNVdocumentOrigin() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_GetValue_NPNVdocumentOrigin")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_GetValue_NPNVdocumentOrigin(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_GetValue_NPNVdocumentOrigin :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_GetValue_NPNVdocumentOrigin__ID
    };
    Reply_NPN_GetValue_NPNVdocumentOrigin() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_GetValue_NPNVdocumentOrigin")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_GetValue_NPNVdocumentOrigin(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_GetValue_DrawingModelSupport :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_GetValue_DrawingModelSupport__ID
    };
    Msg_NPN_GetValue_DrawingModelSupport() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_GetValue_DrawingModelSupport")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_GetValue_DrawingModelSupport(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_GetValue_DrawingModelSupport :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_GetValue_DrawingModelSupport__ID
    };
    Reply_NPN_GetValue_DrawingModelSupport() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_GetValue_DrawingModelSupport")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_GetValue_DrawingModelSupport(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_SetValue_NPPVpluginWindow :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_SetValue_NPPVpluginWindow__ID
    };
    Msg_NPN_SetValue_NPPVpluginWindow() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_SetValue_NPPVpluginWindow")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_SetValue_NPPVpluginWindow(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_SetValue_NPPVpluginWindow :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_SetValue_NPPVpluginWindow__ID
    };
    Reply_NPN_SetValue_NPPVpluginWindow() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_SetValue_NPPVpluginWindow")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_SetValue_NPPVpluginWindow(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_SetValue_NPPVpluginTransparent :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_SetValue_NPPVpluginTransparent__ID
    };
    Msg_NPN_SetValue_NPPVpluginTransparent() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_SetValue_NPPVpluginTransparent")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_SetValue_NPPVpluginTransparent(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_SetValue_NPPVpluginTransparent :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_SetValue_NPPVpluginTransparent__ID
    };
    Reply_NPN_SetValue_NPPVpluginTransparent() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_SetValue_NPPVpluginTransparent")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_SetValue_NPPVpluginTransparent(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor__ID
    };
    Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_SetValue_NPPVpluginUsesDOMForCursor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_SetValue_NPPVpluginUsesDOMForCursor__ID
    };
    Reply_NPN_SetValue_NPPVpluginUsesDOMForCursor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_SetValue_NPPVpluginUsesDOMForCursor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_SetValue_NPPVpluginUsesDOMForCursor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_SetValue_NPPVpluginDrawingModel :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_SetValue_NPPVpluginDrawingModel__ID
    };
    Msg_NPN_SetValue_NPPVpluginDrawingModel() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_SetValue_NPPVpluginDrawingModel")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_SetValue_NPPVpluginDrawingModel(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_SetValue_NPPVpluginDrawingModel :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_SetValue_NPPVpluginDrawingModel__ID
    };
    Reply_NPN_SetValue_NPPVpluginDrawingModel() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_SetValue_NPPVpluginDrawingModel")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_SetValue_NPPVpluginDrawingModel(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_SetValue_NPPVpluginEventModel :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_SetValue_NPPVpluginEventModel__ID
    };
    Msg_NPN_SetValue_NPPVpluginEventModel() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_SetValue_NPPVpluginEventModel")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_SetValue_NPPVpluginEventModel(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_SetValue_NPPVpluginEventModel :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_SetValue_NPPVpluginEventModel__ID
    };
    Reply_NPN_SetValue_NPPVpluginEventModel() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_SetValue_NPPVpluginEventModel")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_SetValue_NPPVpluginEventModel(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_GetURL :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_GetURL__ID
    };
    Msg_NPN_GetURL() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_GetURL")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_GetURL(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_GetURL :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_GetURL__ID
    };
    Reply_NPN_GetURL() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_GetURL")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_GetURL(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_PostURL :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_PostURL__ID
    };
    Msg_NPN_PostURL() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_PostURL")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_PostURL(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_PostURL :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_PostURL__ID
    };
    Reply_NPN_PostURL() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_PostURL")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_PostURL(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PStreamNotifyConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_PStreamNotifyConstructor__ID
    };
    Msg_PStreamNotifyConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_PStreamNotifyConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PStreamNotifyConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PStreamNotifyConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_PStreamNotifyConstructor__ID
    };
    Reply_PStreamNotifyConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_PStreamNotifyConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PStreamNotifyConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_InvalidateRect :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_InvalidateRect__ID
    };
    Msg_NPN_InvalidateRect() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_InvalidateRect")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_InvalidateRect(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Show :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_Show__ID
    };
    Msg_Show() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_Show")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Show(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_Show :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_Show__ID
    };
    Reply_Show() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_Show")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_Show(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PPluginSurfaceConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_PPluginSurfaceConstructor__ID
    };
    Msg_PPluginSurfaceConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_PPluginSurfaceConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PPluginSurfaceConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PPluginSurfaceConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_PPluginSurfaceConstructor__ID
    };
    Reply_PPluginSurfaceConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_PPluginSurfaceConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PPluginSurfaceConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_PushPopupsEnabledState :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_PushPopupsEnabledState__ID
    };
    Msg_NPN_PushPopupsEnabledState() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_PushPopupsEnabledState")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_PushPopupsEnabledState(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_PushPopupsEnabledState :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_PushPopupsEnabledState__ID
    };
    Reply_NPN_PushPopupsEnabledState() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_PushPopupsEnabledState")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_PushPopupsEnabledState(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_PopPopupsEnabledState :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_PopPopupsEnabledState__ID
    };
    Msg_NPN_PopPopupsEnabledState() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_PopPopupsEnabledState")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_PopPopupsEnabledState(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_PopPopupsEnabledState :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_PopPopupsEnabledState__ID
    };
    Reply_NPN_PopPopupsEnabledState() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_PopPopupsEnabledState")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_PopPopupsEnabledState(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_GetValueForURL :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_GetValueForURL__ID
    };
    Msg_NPN_GetValueForURL() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_GetValueForURL")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_GetValueForURL(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_GetValueForURL :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_GetValueForURL__ID
    };
    Reply_NPN_GetValueForURL() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_GetValueForURL")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_GetValueForURL(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_SetValueForURL :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_SetValueForURL__ID
    };
    Msg_NPN_SetValueForURL() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_SetValueForURL")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_SetValueForURL(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_SetValueForURL :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_SetValueForURL__ID
    };
    Reply_NPN_SetValueForURL() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_SetValueForURL")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_SetValueForURL(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_GetAuthenticationInfo :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_GetAuthenticationInfo__ID
    };
    Msg_NPN_GetAuthenticationInfo() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_GetAuthenticationInfo")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_GetAuthenticationInfo(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_GetAuthenticationInfo :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_GetAuthenticationInfo__ID
    };
    Reply_NPN_GetAuthenticationInfo() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_GetAuthenticationInfo")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_GetAuthenticationInfo(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_ConvertPoint :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_ConvertPoint__ID
    };
    Msg_NPN_ConvertPoint() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_ConvertPoint")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_ConvertPoint(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_ConvertPoint :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_ConvertPoint__ID
    };
    Reply_NPN_ConvertPoint() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_ConvertPoint")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_ConvertPoint(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_RedrawPlugin :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_RedrawPlugin__ID
    };
    Msg_RedrawPlugin() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_RedrawPlugin")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_RedrawPlugin(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_InitAsyncSurface :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NPN_InitAsyncSurface__ID
    };
    Msg_NPN_InitAsyncSurface() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NPN_InitAsyncSurface")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_InitAsyncSurface(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_InitAsyncSurface :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NPN_InitAsyncSurface__ID
    };
    Reply_NPN_InitAsyncSurface() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NPN_InitAsyncSurface")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_InitAsyncSurface(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NegotiatedCarbon :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_NegotiatedCarbon__ID
    };
    Msg_NegotiatedCarbon() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_NegotiatedCarbon")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NegotiatedCarbon(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NegotiatedCarbon :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_NegotiatedCarbon__ID
    };
    Reply_NegotiatedCarbon() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_NegotiatedCarbon")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NegotiatedCarbon(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_ReleaseDXGISharedSurface :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_ReleaseDXGISharedSurface__ID
    };
    Msg_ReleaseDXGISharedSurface() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_ReleaseDXGISharedSurface")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_ReleaseDXGISharedSurface(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PPluginScriptableObjectConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_PPluginScriptableObjectConstructor__ID
    };
    Msg_PPluginScriptableObjectConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_PPluginScriptableObjectConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PPluginScriptableObjectConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PPluginScriptableObjectConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_PPluginScriptableObjectConstructor__ID
    };
    Reply_PPluginScriptableObjectConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_PPluginScriptableObjectConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PPluginScriptableObjectConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PBrowserStreamConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_PBrowserStreamConstructor__ID
    };
    Msg_PBrowserStreamConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_PBrowserStreamConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PBrowserStreamConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PBrowserStreamConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_PBrowserStreamConstructor__ID
    };
    Reply_PBrowserStreamConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_PBrowserStreamConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PBrowserStreamConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PPluginStreamConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_PPluginStreamConstructor__ID
    };
    Msg_PPluginStreamConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_PPluginStreamConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PPluginStreamConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PPluginStreamConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_PPluginStreamConstructor__ID
    };
    Reply_PPluginStreamConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_PPluginStreamConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PPluginStreamConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PluginFocusChange :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_PluginFocusChange__ID
    };
    Msg_PluginFocusChange() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_PluginFocusChange")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PluginFocusChange(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PluginFocusChange :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_PluginFocusChange__ID
    };
    Reply_PluginFocusChange() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_PluginFocusChange")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PluginFocusChange(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetPluginFocus :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_SetPluginFocus__ID
    };
    Msg_SetPluginFocus() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_SetPluginFocus")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetPluginFocus(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_SetPluginFocus :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_SetPluginFocus__ID
    };
    Reply_SetPluginFocus() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_SetPluginFocus")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_SetPluginFocus(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_UpdateWindow :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_UpdateWindow__ID
    };
    Msg_UpdateWindow() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_UpdateWindow")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_UpdateWindow(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_UpdateWindow :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_UpdateWindow__ID
    };
    Reply_UpdateWindow() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_UpdateWindow")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_UpdateWindow(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_PPluginBackgroundDestroyerConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Msg_PPluginBackgroundDestroyerConstructor__ID
    };
    Msg_PPluginBackgroundDestroyerConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Msg_PPluginBackgroundDestroyerConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_PPluginBackgroundDestroyerConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_PPluginBackgroundDestroyerConstructor :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::plugins::AsyncSurfaceDescriptor AsyncSurfaceDescriptor;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::plugins::DXGISharedSurfaceHandle DXGISharedSurfaceHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::plugins::NPRemoteAsyncSurface NPRemoteAsyncSurface;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::gfxSurfaceType gfxSurfaceType;
    typedef mozilla::null_t null_t;

public:
    enum {
        ID = Reply_PPluginBackgroundDestroyerConstructor__ID
    };
    Reply_PPluginBackgroundDestroyerConstructor() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginInstance::Reply_PPluginBackgroundDestroyerConstructor")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_PPluginBackgroundDestroyerConstructor(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PPluginInstance
} // namespace plugins
} // namespace mozilla

#endif // ifndef PPluginInstance_h
