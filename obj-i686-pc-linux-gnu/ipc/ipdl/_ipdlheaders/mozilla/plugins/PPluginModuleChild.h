//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginModuleChild_h
#define PPluginModuleChild_h

#include "mozilla/plugins/PPluginModule.h"
namespace mozilla {
namespace plugins {
class PPluginIdentifierChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginInstanceChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginScriptableObjectChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace dom {
class PCrashReporterChild;
} // namespace dom
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace plugins {
class PPluginInstanceChild;
} // namespace plugins
} // namespace mozilla


namespace mozilla {
namespace dom {
class PCrashReporterChild;
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace plugins {
class PPluginIdentifierChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {


class /*NS_ABSTRACT_CLASS*/ PPluginModuleChild :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::plugins::PPluginInstanceChild;

    friend class mozilla::dom::PCrashReporterChild;

    friend class mozilla::plugins::PPluginIdentifierChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::PPluginIdentifierChild PPluginIdentifierChild;
    typedef mozilla::plugins::PPluginInstanceChild PPluginInstanceChild;
    typedef mozilla::plugins::PPluginScriptableObjectChild PPluginScriptableObjectChild;
    typedef mozilla::dom::PCrashReporterChild PCrashReporterChild;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PPluginModule::State State;

    virtual bool
    RecvPPluginIdentifierConstructor(
            PPluginIdentifierChild* actor,
            const nsCString& aString,
            const int32_t& aInt,
            const bool& temporary);
    virtual bool
    RecvProcessNativeEventsInRPCCall() = 0;
    virtual bool
    AnswerNP_GetEntryPoints(NPError* rv) = 0;
    virtual bool
    AnswerNP_Initialize(
            const uint32_t& aFlags,
            NPError* rv) = 0;
    virtual bool
    AnswerPPluginInstanceConstructor(
            PPluginInstanceChild* actor,
            const nsCString& aMimeType,
            const uint16_t& aMode,
            const InfallibleTArray<nsCString>& aNames,
            const InfallibleTArray<nsCString>& aValues,
            NPError* rv);
    virtual bool
    AnswerNP_Shutdown(NPError* rv) = 0;
    virtual bool
    AnswerOptionalFunctionsSupported(
            bool* aURLRedirectNotify,
            bool* aClearSiteData,
            bool* aGetSitesWithData) = 0;
    virtual bool
    AnswerNPP_ClearSiteData(
            const nsCString& site,
            const uint64_t& flags,
            const uint64_t& maxAge,
            NPError* rv) = 0;
    virtual bool
    AnswerNPP_GetSitesWithData(InfallibleTArray<nsCString>* sites) = 0;
    virtual bool
    RecvSetAudioSessionData(
            const nsID& aID,
            const nsString& aDisplayName,
            const nsString& aIconPath) = 0;
    virtual bool
    RecvSetParentHangTimeout(const uint32_t& seconds) = 0;
    virtual bool
    AnswerPCrashReporterConstructor(
            PCrashReporterChild* actor,
            NativeThreadId* tid,
            uint32_t* processType);
    virtual PPluginIdentifierChild*
    AllocPPluginIdentifier(
            const nsCString& aString,
            const int32_t& aInt,
            const bool& temporary) = 0;
    virtual bool
    DeallocPPluginIdentifier(PPluginIdentifierChild* actor) = 0;
    virtual PPluginInstanceChild*
    AllocPPluginInstance(
            const nsCString& aMimeType,
            const uint16_t& aMode,
            const InfallibleTArray<nsCString>& aNames,
            const InfallibleTArray<nsCString>& aValues,
            NPError* rv) = 0;
    virtual bool
    DeallocPPluginInstance(PPluginInstanceChild* actor) = 0;
    virtual PCrashReporterChild*
    AllocPCrashReporter(
            NativeThreadId* tid,
            uint32_t* processType) = 0;
    virtual bool
    DeallocPCrashReporter(PCrashReporterChild* actor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

    virtual void
    ProcessingError(Result code);
    virtual bool
    ShouldContinueFromReplyTimeout();
    virtual void
    EnteredCxxStack();
    virtual void
    ExitedCxxStack();
    virtual void
    EnteredCall();
    virtual void
    ExitedCall();

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PPluginModuleChild();

    virtual ~PPluginModuleChild();

    bool
    Open(
            Channel::Transport* aTransport,
            ProcessHandle aOtherProcess,
            MessageLoop* aThread = 0,
            AsyncChannel::Side aSide = Channel::Unknown);

    bool
    Open(
            AsyncChannel* aChannel,
            MessageLoop* aMessageLoop,
            AsyncChannel::Side aSide = Channel::Unknown);

    void
    Close();

    void
    SetReplyTimeoutMs(int32_t aTimeoutMs);

    void
    ManagedPPluginInstanceChild(InfallibleTArray<PPluginInstanceChild*>& aArr) const;
    const InfallibleTArray<PPluginInstanceChild*>&
    ManagedPPluginInstanceChild() const;

    void
    ManagedPPluginIdentifierChild(InfallibleTArray<PPluginIdentifierChild*>& aArr) const;
    const InfallibleTArray<PPluginIdentifierChild*>&
    ManagedPPluginIdentifierChild() const;

    void
    ManagedPCrashReporterChild(InfallibleTArray<PCrashReporterChild*>& aArr) const;
    const InfallibleTArray<PCrashReporterChild*>&
    ManagedPCrashReporterChild() const;

    PPluginModule::State
    state();

    PPluginIdentifierChild*
    SendPPluginIdentifierConstructor(
            const nsCString& aString,
            const int32_t& aInt,
            const bool& temporary);

    PPluginIdentifierChild*
    SendPPluginIdentifierConstructor(
            PPluginIdentifierChild* actor,
            const nsCString& aString,
            const int32_t& aInt,
            const bool& temporary);

    bool
    SendProcessNativeEventsInRPCCall();

    bool
    SendBackUpXResources(const FileDescriptor& aXSocketFd);

    bool
    CallNPN_UserAgent(nsCString* userAgent);

    bool
    CallNPN_GetValue_WithBoolReturn(
            const NPNVariable& aVariable,
            NPError* aError,
            bool* aBoolVal);

    bool
    CallProcessSomeEvents();

    bool
    SendPluginShowWindow(
            const uint32_t& aWindowId,
            const bool& aModal,
            const int32_t& aX,
            const int32_t& aY,
            const size_t& aWidth,
            const size_t& aHeight);

    bool
    SendPluginHideWindow(const uint32_t& aWindowId);

    bool
    SendSetCursor(const NSCursorInfo& cursorInfo);

    bool
    SendShowCursor(const bool& show);

    bool
    SendPushCursor(const NSCursorInfo& cursorInfo);

    bool
    SendPopCursor();

    bool
    SendGetNativeCursorsSupported(bool* supported);

    bool
    SendNPN_SetException(
            PPluginScriptableObjectChild* actor,
            const nsCString& message);

    bool
    SendNPN_ReloadPlugins(const bool& aReloadPages);

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnEnteredCxxStack();
    void
    OnExitedCxxStack();
    void
    OnEnteredCall();
    void
    OnExitedCall();
    bool
    IsOnCxxStack() const;
    void
    FlushPendingRPCQueue();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

    void
    ProcessNativeEventsInRPCCall();

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    void
    DeallocShmems();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const FileDescriptor& __v,
            Message* __msg);

    bool
    Read(
            FileDescriptor* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PPluginScriptableObjectChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PPluginScriptableObjectChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PPluginInstanceChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PPluginInstanceChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PCrashReporterChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PCrashReporterChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PPluginIdentifierChild* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PPluginIdentifierChild** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    Channel mChannel;
    IDMap<ChannelListener> mActorMap;
    int32_t mLastRouteId;
    ProcessHandle mOtherProcess;
    IDMap<Shmem::SharedMemory> mShmemMap;
    Shmem::id_t mLastShmemId;
    State mState;
    // Sorted by pointer value
    InfallibleTArray<PPluginInstanceChild*> mManagedPPluginInstanceChild;
    // Sorted by pointer value
    InfallibleTArray<PPluginIdentifierChild*> mManagedPPluginIdentifierChild;
    // Sorted by pointer value
    InfallibleTArray<PCrashReporterChild*> mManagedPCrashReporterChild;
};


} // namespace plugins
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace plugins {
class PluginModuleChild :
    public PPluginModuleChild
{
    virtual bool
    RecvProcessNativeEventsInRPCCall();

    virtual bool
    AnswerNP_GetEntryPoints(NPError* rv);

    virtual bool
    AnswerNP_Initialize(
            const uint32_t& aFlags,
            NPError* rv);

    virtual bool
    AnswerNP_Shutdown(NPError* rv);

    virtual bool
    AnswerOptionalFunctionsSupported(
            bool* aURLRedirectNotify,
            bool* aClearSiteData,
            bool* aGetSitesWithData);

    virtual bool
    AnswerNPP_ClearSiteData(
            const nsCString& site,
            const uint64_t& flags,
            const uint64_t& maxAge,
            NPError* rv);

    virtual bool
    AnswerNPP_GetSitesWithData(InfallibleTArray<nsCString>* sites);

    virtual bool
    RecvSetAudioSessionData(
            const nsID& aID,
            const nsString& aDisplayName,
            const nsString& aIconPath);

    virtual bool
    RecvSetParentHangTimeout(const uint32_t& seconds);

    virtual PPluginIdentifierChild*
    AllocPPluginIdentifier(
            const nsCString& aString,
            const int32_t& aInt,
            const bool& temporary);

    virtual bool
    DeallocPPluginIdentifier(PPluginIdentifierChild* actor);

    virtual PPluginInstanceChild*
    AllocPPluginInstance(
            const nsCString& aMimeType,
            const uint16_t& aMode,
            const InfallibleTArray<nsCString>& aNames,
            const InfallibleTArray<nsCString>& aValues,
            NPError* rv);

    virtual bool
    DeallocPPluginInstance(PPluginInstanceChild* actor);

    virtual PCrashReporterChild*
    AllocPCrashReporter(
            NativeThreadId* tid,
            uint32_t* processType);

    virtual bool
    DeallocPCrashReporter(PCrashReporterChild* actor);

    PluginModuleChild();
    virtual ~PluginModuleChild();
};
} // namespace plugins
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace plugins {
bool
PluginModuleChild::RecvProcessNativeEventsInRPCCall()
{
    return false;
}

bool
PluginModuleChild::AnswerNP_GetEntryPoints(NPError* rv)
{
    return false;
}

bool
PluginModuleChild::AnswerNP_Initialize(
        const uint32_t& aFlags,
        NPError* rv)
{
    return false;
}

bool
PluginModuleChild::AnswerNP_Shutdown(NPError* rv)
{
    return false;
}

bool
PluginModuleChild::AnswerOptionalFunctionsSupported(
        bool* aURLRedirectNotify,
        bool* aClearSiteData,
        bool* aGetSitesWithData)
{
    return false;
}

bool
PluginModuleChild::AnswerNPP_ClearSiteData(
        const nsCString& site,
        const uint64_t& flags,
        const uint64_t& maxAge,
        NPError* rv)
{
    return false;
}

bool
PluginModuleChild::AnswerNPP_GetSitesWithData(InfallibleTArray<nsCString>* sites)
{
    return false;
}

bool
PluginModuleChild::RecvSetAudioSessionData(
        const nsID& aID,
        const nsString& aDisplayName,
        const nsString& aIconPath)
{
    return false;
}

bool
PluginModuleChild::RecvSetParentHangTimeout(const uint32_t& seconds)
{
    return false;
}

PPluginIdentifierChild*
PluginModuleChild::AllocPPluginIdentifier(
        const nsCString& aString,
        const int32_t& aInt,
        const bool& temporary)
{
    return 0;
}

bool
PluginModuleChild::DeallocPPluginIdentifier(PPluginIdentifierChild* actor)
{
    return false;
}

PPluginInstanceChild*
PluginModuleChild::AllocPPluginInstance(
        const nsCString& aMimeType,
        const uint16_t& aMode,
        const InfallibleTArray<nsCString>& aNames,
        const InfallibleTArray<nsCString>& aValues,
        NPError* rv)
{
    return 0;
}

bool
PluginModuleChild::DeallocPPluginInstance(PPluginInstanceChild* actor)
{
    return false;
}

PCrashReporterChild*
PluginModuleChild::AllocPCrashReporter(
        NativeThreadId* tid,
        uint32_t* processType)
{
    return 0;
}

bool
PluginModuleChild::DeallocPCrashReporter(PCrashReporterChild* actor)
{
    return false;
}

PluginModuleChild::PluginModuleChild()
{
    MOZ_COUNT_CTOR(PluginModuleChild);
}

PluginModuleChild::~PluginModuleChild()
{
    MOZ_COUNT_DTOR(PluginModuleChild);
}

} // namespace plugins
} // namespace mozilla
#endif // if 0

#endif // ifndef PPluginModuleChild_h
