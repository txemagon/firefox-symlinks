//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginScriptableObjectParent_h
#define PPluginScriptableObjectParent_h

#include "mozilla/plugins/PPluginScriptableObject.h"
namespace mozilla {
namespace plugins {
class PPluginInstanceParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginIdentifierParent;
} // namespace plugins
} // namespace mozilla

#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/RPCChannel.h"


namespace mozilla {
namespace plugins {
class PPluginInstanceParent;
} // namespace plugins
} // namespace mozilla


namespace mozilla {
namespace plugins {
class PPluginModuleParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {


class /*NS_ABSTRACT_CLASS*/ PPluginScriptableObjectParent :
    protected mozilla::ipc::RPCChannel::RPCListener,
    protected mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>
{
    friend class mozilla::plugins::PPluginInstanceParent;

    friend class mozilla::plugins::PPluginModuleParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::plugins::PPluginInstanceParent PPluginInstanceParent;
    typedef mozilla::plugins::PPluginIdentifierParent PPluginIdentifierParent;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PPluginScriptableObject::State State;

    virtual bool
    Recv__delete__();
    virtual bool
    AnswerNPN_Evaluate(
            const nsCString& aScript,
            Variant* aResult,
            bool* aSuccess) = 0;
    virtual bool
    AnswerHasMethod(
            PPluginIdentifierParent* aId,
            bool* aHasMethod) = 0;
    virtual bool
    AnswerInvoke(
            PPluginIdentifierParent* aId,
            const InfallibleTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess) = 0;
    virtual bool
    AnswerInvokeDefault(
            const InfallibleTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess) = 0;
    virtual bool
    AnswerHasProperty(
            PPluginIdentifierParent* aId,
            bool* aHasProperty) = 0;
    virtual bool
    AnswerSetProperty(
            PPluginIdentifierParent* aId,
            const Variant& aValue,
            bool* aSuccess) = 0;
    virtual bool
    AnswerRemoveProperty(
            PPluginIdentifierParent* aId,
            bool* aSuccess) = 0;
    virtual bool
    AnswerEnumerate(
            InfallibleTArray<PPluginIdentifierParent*>* aProperties,
            bool* aSuccess) = 0;
    virtual bool
    AnswerConstruct(
            const InfallibleTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess) = 0;
    virtual bool
    RecvProtect() = 0;
    virtual bool
    RecvUnprotect() = 0;
    virtual bool
    AnswerGetParentProperty(
            PPluginIdentifierParent* aId,
            Variant* aResult,
            bool* aSuccess) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason why);

public:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;
    typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::AsyncChannel AsyncChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    PPluginScriptableObjectParent();

    virtual ~PPluginScriptableObjectParent();

    PPluginInstanceParent*
    Manager() const;

    PPluginScriptableObject::State
    state();

    static bool
    Send__delete__(PPluginScriptableObjectParent* actor) NS_WARN_UNUSED_RESULT;

    bool
    CallInvalidate() NS_WARN_UNUSED_RESULT;

    bool
    CallHasMethod(
            PPluginIdentifierParent* aId,
            bool* aHasMethod) NS_WARN_UNUSED_RESULT;

    bool
    CallInvoke(
            PPluginIdentifierParent* aId,
            const InfallibleTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess) NS_WARN_UNUSED_RESULT;

    bool
    CallInvokeDefault(
            const InfallibleTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess) NS_WARN_UNUSED_RESULT;

    bool
    CallHasProperty(
            PPluginIdentifierParent* aId,
            bool* aHasProperty) NS_WARN_UNUSED_RESULT;

    bool
    CallSetProperty(
            PPluginIdentifierParent* aId,
            const Variant& aValue,
            bool* aSuccess) NS_WARN_UNUSED_RESULT;

    bool
    CallRemoveProperty(
            PPluginIdentifierParent* aId,
            bool* aSuccess) NS_WARN_UNUSED_RESULT;

    bool
    CallEnumerate(
            InfallibleTArray<PPluginIdentifierParent*>* aProperties,
            bool* aSuccess) NS_WARN_UNUSED_RESULT;

    bool
    CallConstruct(
            const InfallibleTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess) NS_WARN_UNUSED_RESULT;

    bool
    SendProtect() NS_WARN_UNUSED_RESULT;

    bool
    SendUnprotect() NS_WARN_UNUSED_RESULT;

    bool
    CallGetChildProperty(
            PPluginIdentifierParent* aId,
            bool* aHasProperty,
            bool* aHasMethod,
            Variant* aResult,
            bool* aSuccess) NS_WARN_UNUSED_RESULT;

    virtual int32_t
    Register(ChannelListener* aRouted);
    virtual int32_t
    RegisterID(
            ChannelListener* aRouted,
            int32_t aId);
    virtual ChannelListener*
    Lookup(int32_t aId);
    virtual void
    Unregister(int32_t aId);
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ChannelListener* aListener);
    virtual Shmem::SharedMemory*
    CreateSharedMemory(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            bool aUnsafe,
            Shmem::id_t* aId);
    virtual bool
    AdoptSharedMemory(
            Shmem::SharedMemory* segment,
            Shmem::id_t* aId);
    virtual Shmem::SharedMemory*
    LookupSharedMemory(Shmem::id_t aId);
    virtual bool
    IsTrackingSharedMemory(Shmem::SharedMemory* segment);
    virtual bool
    DestroySharedMemory(Shmem& shmem);
    virtual ProcessHandle
    OtherProcess() const;
    virtual AsyncChannel*
    GetIPCChannel();

    virtual Result
    OnMessageReceived(const Message& __msg);

    virtual Result
    OnMessageReceived(
            const Message& __msg,
            Message*& __reply);

    virtual Result
    OnCallReceived(
            const Message& __msg,
            Message*& __reply);

    void
    OnProcessingError(Result code);

    int32_t
    GetProtocolTypeId();

    bool
    OnReplyTimeout();

    void
    OnChannelClose();

    void
    OnChannelError();

    void
    OnChannelConnected(int32_t pid);

    // Methods for managing shmem
    bool
    AllocShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AllocUnsafeShmem(
            size_t aSize,
            Shmem::SharedMemory::SharedMemoryType aType,
            Shmem* aMem);

    bool
    AdoptShmem(
            Shmem& aMem,
            Shmem* aOutMem);

    bool
    DeallocShmem(Shmem& aMem);

private:
    virtual void
    FatalError(const char* const msg) const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& __v,
            Message* __msg)
    {
        IPC::WriteParam(__msg, __v);
    }

    template<typename T>
    bool
    Read(
            T* __v,
            const Message* __msg,
            void** __iter)
    {
        return IPC::ReadParam(__msg, __iter, __v);
    }

    void
    Write(
            const InfallibleTArray<Variant>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<Variant>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PPluginScriptableObjectParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PPluginScriptableObjectParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const InfallibleTArray<PPluginIdentifierParent*>& __v,
            Message* __msg);

    bool
    Read(
            InfallibleTArray<PPluginIdentifierParent*>* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            const Variant& __v,
            Message* __msg);

    bool
    Read(
            Variant* __v,
            const Message* __msg,
            void** __iter) NS_WARN_UNUSED_RESULT;

    void
    Write(
            PPluginIdentifierParent* __v,
            Message* __msg,
            bool __nullable);

    bool
    Read(
            PPluginIdentifierParent** __v,
            const Message* __msg,
            void** __iter,
            bool __nullable) NS_WARN_UNUSED_RESULT;

    Channel* mChannel;
    mozilla::ipc::IProtocolManager<mozilla::ipc::RPCChannel::RPCListener>* mManager;
    int32_t mId;
    State mState;
};


} // namespace plugins
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace plugins {
class PluginScriptableObjectParent :
    public PPluginScriptableObjectParent
{
    virtual bool
    AnswerNPN_Evaluate(
            const nsCString& aScript,
            Variant* aResult,
            bool* aSuccess);

    virtual bool
    AnswerHasMethod(
            PPluginIdentifierParent* aId,
            bool* aHasMethod);

    virtual bool
    AnswerInvoke(
            PPluginIdentifierParent* aId,
            const InfallibleTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess);

    virtual bool
    AnswerInvokeDefault(
            const InfallibleTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess);

    virtual bool
    AnswerHasProperty(
            PPluginIdentifierParent* aId,
            bool* aHasProperty);

    virtual bool
    AnswerSetProperty(
            PPluginIdentifierParent* aId,
            const Variant& aValue,
            bool* aSuccess);

    virtual bool
    AnswerRemoveProperty(
            PPluginIdentifierParent* aId,
            bool* aSuccess);

    virtual bool
    AnswerEnumerate(
            InfallibleTArray<PPluginIdentifierParent*>* aProperties,
            bool* aSuccess);

    virtual bool
    AnswerConstruct(
            const InfallibleTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess);

    virtual bool
    RecvProtect();

    virtual bool
    RecvUnprotect();

    virtual bool
    AnswerGetParentProperty(
            PPluginIdentifierParent* aId,
            Variant* aResult,
            bool* aSuccess);

    PluginScriptableObjectParent();
    virtual ~PluginScriptableObjectParent();
};
} // namespace plugins
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace plugins {
bool
PluginScriptableObjectParent::AnswerNPN_Evaluate(
        const nsCString& aScript,
        Variant* aResult,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectParent::AnswerHasMethod(
        PPluginIdentifierParent* aId,
        bool* aHasMethod)
{
    return false;
}

bool
PluginScriptableObjectParent::AnswerInvoke(
        PPluginIdentifierParent* aId,
        const InfallibleTArray<Variant>& aArgs,
        Variant* aResult,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectParent::AnswerInvokeDefault(
        const InfallibleTArray<Variant>& aArgs,
        Variant* aResult,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectParent::AnswerHasProperty(
        PPluginIdentifierParent* aId,
        bool* aHasProperty)
{
    return false;
}

bool
PluginScriptableObjectParent::AnswerSetProperty(
        PPluginIdentifierParent* aId,
        const Variant& aValue,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectParent::AnswerRemoveProperty(
        PPluginIdentifierParent* aId,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectParent::AnswerEnumerate(
        InfallibleTArray<PPluginIdentifierParent*>* aProperties,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectParent::AnswerConstruct(
        const InfallibleTArray<Variant>& aArgs,
        Variant* aResult,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectParent::RecvProtect()
{
    return false;
}

bool
PluginScriptableObjectParent::RecvUnprotect()
{
    return false;
}

bool
PluginScriptableObjectParent::AnswerGetParentProperty(
        PPluginIdentifierParent* aId,
        Variant* aResult,
        bool* aSuccess)
{
    return false;
}

PluginScriptableObjectParent::PluginScriptableObjectParent()
{
    MOZ_COUNT_CTOR(PluginScriptableObjectParent);
}

PluginScriptableObjectParent::~PluginScriptableObjectParent()
{
    MOZ_COUNT_DTOR(PluginScriptableObjectParent);
}

} // namespace plugins
} // namespace mozilla
#endif // if 0

#endif // ifndef PPluginScriptableObjectParent_h
