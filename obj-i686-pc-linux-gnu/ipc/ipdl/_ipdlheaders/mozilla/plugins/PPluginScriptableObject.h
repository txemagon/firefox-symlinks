//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginScriptableObject_h
#define PPluginScriptableObject_h

#include "mozilla/Attributes.h"
#include "base/basictypes.h"
#include "prtime.h"
#include "nscore.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "nsAutoPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "nsIFile.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "npapi.h"
#include "npruntime.h"
#include "mozilla/plugins/PluginMessageUtils.h"

namespace mozilla {
namespace plugins {
class PPluginScriptableObjectParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginScriptableObjectChild;
} // namespace plugins
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union Variant|
//
namespace mozilla {
namespace plugins {
class Variant MOZ_FINAL
{
public:
    enum Type {
        T__None,
        Tvoid_t = 1,
        Tnull_t,
        Tbool,
        Tint,
        Tdouble,
        TnsCString,
        TPPluginScriptableObjectParent,
        TPPluginScriptableObjectChild,
        T__Last = TPPluginScriptableObjectChild
    };

private:
    typedef mozilla::void_t void_t;
    typedef mozilla::null_t null_t;
    typedef mozilla::plugins::PPluginScriptableObjectParent PPluginScriptableObjectParent;
    typedef mozilla::plugins::PPluginScriptableObjectChild PPluginScriptableObjectChild;
    typedef void_t void_t__tdef;
    typedef null_t null_t__tdef;
    typedef bool bool__tdef;
    typedef int int__tdef;
    typedef double double__tdef;
    typedef nsCString nsCString__tdef;
    typedef PPluginScriptableObjectParent* PPluginScriptableObjectParent__tdef;
    typedef PPluginScriptableObjectChild* PPluginScriptableObjectChild__tdef;

    union Value {
        char Vvoid_t[sizeof(void_t)];
        char Vnull_t[sizeof(null_t)];
        char Vbool[sizeof(bool)];
        char Vint[sizeof(int)];
        char Vdouble[sizeof(double)];
        char VnsCString[sizeof(nsCString)];
        char VPPluginScriptableObjectParent[sizeof(PPluginScriptableObjectParent*)];
        char VPPluginScriptableObjectChild[sizeof(PPluginScriptableObjectChild*)];
    };

    void_t*
    ptr_void_t()
    {
        return reinterpret_cast<void_t*>((&((mValue).Vvoid_t)));
    }
    const void_t* const
    constptr_void_t() const
    {
        return reinterpret_cast<const void_t* const>((&((mValue).Vvoid_t)));
    }
    null_t*
    ptr_null_t()
    {
        return reinterpret_cast<null_t*>((&((mValue).Vnull_t)));
    }
    const null_t* const
    constptr_null_t() const
    {
        return reinterpret_cast<const null_t* const>((&((mValue).Vnull_t)));
    }
    bool*
    ptr_bool()
    {
        return reinterpret_cast<bool*>((&((mValue).Vbool)));
    }
    const bool* const
    constptr_bool() const
    {
        return reinterpret_cast<const bool* const>((&((mValue).Vbool)));
    }
    int*
    ptr_int()
    {
        return reinterpret_cast<int*>((&((mValue).Vint)));
    }
    const int* const
    constptr_int() const
    {
        return reinterpret_cast<const int* const>((&((mValue).Vint)));
    }
    double*
    ptr_double()
    {
        return reinterpret_cast<double*>((&((mValue).Vdouble)));
    }
    const double* const
    constptr_double() const
    {
        return reinterpret_cast<const double* const>((&((mValue).Vdouble)));
    }
    nsCString*
    ptr_nsCString()
    {
        return reinterpret_cast<nsCString*>((&((mValue).VnsCString)));
    }
    const nsCString* const
    constptr_nsCString() const
    {
        return reinterpret_cast<const nsCString* const>((&((mValue).VnsCString)));
    }
    PPluginScriptableObjectParent**
    ptr_PPluginScriptableObjectParent()
    {
        return reinterpret_cast<PPluginScriptableObjectParent**>((&((mValue).VPPluginScriptableObjectParent)));
    }
    PPluginScriptableObjectParent* const*
    constptr_PPluginScriptableObjectParent() const
    {
        return reinterpret_cast<PPluginScriptableObjectParent* const*>((&((mValue).VPPluginScriptableObjectParent)));
    }
    PPluginScriptableObjectChild**
    ptr_PPluginScriptableObjectChild()
    {
        return reinterpret_cast<PPluginScriptableObjectChild**>((&((mValue).VPPluginScriptableObjectChild)));
    }
    PPluginScriptableObjectChild* const*
    constptr_PPluginScriptableObjectChild() const
    {
        return reinterpret_cast<PPluginScriptableObjectChild* const*>((&((mValue).VPPluginScriptableObjectChild)));
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        NS_ABORT_IF_FALSE((T__None) <= (mType), "invalid type tag");
        NS_ABORT_IF_FALSE((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        NS_ABORT_IF_FALSE((mType) == (aType), "unexpected type tag");
    }

public:
    Variant() :
        mType(T__None)
    {
    }

    Variant(const void_t& aOther);

    Variant(const null_t& aOther);

    Variant(const bool& aOther);

    Variant(const int& aOther);

    Variant(const double& aOther);

    Variant(const nsCString& aOther);

    Variant(PPluginScriptableObjectParent* aOther);

    Variant(PPluginScriptableObjectChild* aOther);

    Variant(const Variant& aOther);

    ~Variant();

    Type
    type() const
    {
        return mType;
    }

    Variant&
    operator=(const void_t& aRhs);

    Variant&
    operator=(const null_t& aRhs);

    Variant&
    operator=(const bool& aRhs);

    Variant&
    operator=(const int& aRhs);

    Variant&
    operator=(const double& aRhs);

    Variant&
    operator=(const nsCString& aRhs);

    Variant&
    operator=(PPluginScriptableObjectParent* aRhs);

    Variant&
    operator=(PPluginScriptableObjectChild* aRhs);

    Variant&
    operator=(const Variant& aRhs);

    bool
    operator==(const void_t& aRhs) const;

    bool
    operator==(const null_t& aRhs) const;

    bool
    operator==(const bool& aRhs) const;

    bool
    operator==(const int& aRhs) const;

    bool
    operator==(const double& aRhs) const;

    bool
    operator==(const nsCString& aRhs) const;

    bool
    operator==(PPluginScriptableObjectParent* aRhs) const;

    bool
    operator==(PPluginScriptableObjectChild* aRhs) const;

    bool
    operator==(const Variant& aRhs) const;

    void_t&
    get_void_t()
    {
        AssertSanity(Tvoid_t);
        return (*(ptr_void_t()));
    }
    const void_t&
    get_void_t() const
    {
        AssertSanity(Tvoid_t);
        return (*(constptr_void_t()));
    }
    operator void_t&()
    {
        return get_void_t();
    }
    operator const void_t&() const
    {
        return get_void_t();
    }

    null_t&
    get_null_t()
    {
        AssertSanity(Tnull_t);
        return (*(ptr_null_t()));
    }
    const null_t&
    get_null_t() const
    {
        AssertSanity(Tnull_t);
        return (*(constptr_null_t()));
    }
    operator null_t&()
    {
        return get_null_t();
    }
    operator const null_t&() const
    {
        return get_null_t();
    }

    bool&
    get_bool()
    {
        AssertSanity(Tbool);
        return (*(ptr_bool()));
    }
    const bool&
    get_bool() const
    {
        AssertSanity(Tbool);
        return (*(constptr_bool()));
    }
    operator bool&()
    {
        return get_bool();
    }
    operator const bool&() const
    {
        return get_bool();
    }

    int&
    get_int()
    {
        AssertSanity(Tint);
        return (*(ptr_int()));
    }
    const int&
    get_int() const
    {
        AssertSanity(Tint);
        return (*(constptr_int()));
    }
    operator int&()
    {
        return get_int();
    }
    operator const int&() const
    {
        return get_int();
    }

    double&
    get_double()
    {
        AssertSanity(Tdouble);
        return (*(ptr_double()));
    }
    const double&
    get_double() const
    {
        AssertSanity(Tdouble);
        return (*(constptr_double()));
    }
    operator double&()
    {
        return get_double();
    }
    operator const double&() const
    {
        return get_double();
    }

    nsCString&
    get_nsCString()
    {
        AssertSanity(TnsCString);
        return (*(ptr_nsCString()));
    }
    const nsCString&
    get_nsCString() const
    {
        AssertSanity(TnsCString);
        return (*(constptr_nsCString()));
    }
    operator nsCString&()
    {
        return get_nsCString();
    }
    operator const nsCString&() const
    {
        return get_nsCString();
    }

    PPluginScriptableObjectParent*&
    get_PPluginScriptableObjectParent()
    {
        AssertSanity(TPPluginScriptableObjectParent);
        return (*(ptr_PPluginScriptableObjectParent()));
    }
    PPluginScriptableObjectParent*
    get_PPluginScriptableObjectParent() const
    {
        AssertSanity(TPPluginScriptableObjectParent);
        return (*(constptr_PPluginScriptableObjectParent()));
    }
    operator PPluginScriptableObjectParent*&()
    {
        return get_PPluginScriptableObjectParent();
    }
    operator PPluginScriptableObjectParent*() const
    {
        return get_PPluginScriptableObjectParent();
    }

    PPluginScriptableObjectChild*&
    get_PPluginScriptableObjectChild()
    {
        AssertSanity(TPPluginScriptableObjectChild);
        return (*(ptr_PPluginScriptableObjectChild()));
    }
    PPluginScriptableObjectChild*
    get_PPluginScriptableObjectChild() const
    {
        AssertSanity(TPPluginScriptableObjectChild);
        return (*(constptr_PPluginScriptableObjectChild()));
    }
    operator PPluginScriptableObjectChild*&()
    {
        return get_PPluginScriptableObjectChild();
    }
    operator PPluginScriptableObjectChild*() const
    {
        return get_PPluginScriptableObjectChild();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PPluginScriptableObjectChild and PPluginScriptableObjectParent
//
namespace mozilla {
namespace plugins {
namespace PPluginScriptableObject {

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PPluginScriptableObjectStart = PPluginScriptableObjectMsgStart << 16,
    PPluginScriptableObjectPreStart = (PPluginScriptableObjectMsgStart << 16) - 1,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_NPN_Evaluate__ID,
    Reply_NPN_Evaluate__ID,
    Msg_Invalidate__ID,
    Reply_Invalidate__ID,
    Msg_HasMethod__ID,
    Reply_HasMethod__ID,
    Msg_Invoke__ID,
    Reply_Invoke__ID,
    Msg_InvokeDefault__ID,
    Reply_InvokeDefault__ID,
    Msg_HasProperty__ID,
    Reply_HasProperty__ID,
    Msg_SetProperty__ID,
    Reply_SetProperty__ID,
    Msg_RemoveProperty__ID,
    Reply_RemoveProperty__ID,
    Msg_Enumerate__ID,
    Reply_Enumerate__ID,
    Msg_Construct__ID,
    Reply_Construct__ID,
    Msg_Protect__ID,
    Msg_Unprotect__ID,
    Msg_GetParentProperty__ID,
    Reply_GetParentProperty__ID,
    Msg_GetChildProperty__ID,
    Reply_GetChildProperty__ID,
    PPluginScriptableObjectEnd
};

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next);

class Msg___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg___delete____ID
    };
    Msg___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply___delete__ :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply___delete____ID
    };
    Reply___delete__() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply___delete__")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply___delete__(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_NPN_Evaluate :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_NPN_Evaluate__ID
    };
    Msg_NPN_Evaluate() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_NPN_Evaluate")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_NPN_Evaluate(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_NPN_Evaluate :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_NPN_Evaluate__ID
    };
    Reply_NPN_Evaluate() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_NPN_Evaluate")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_NPN_Evaluate(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Invalidate :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_Invalidate__ID
    };
    Msg_Invalidate() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_Invalidate")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Invalidate(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_Invalidate :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_Invalidate__ID
    };
    Reply_Invalidate() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_Invalidate")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_Invalidate(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_HasMethod :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_HasMethod__ID
    };
    Msg_HasMethod() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_HasMethod")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_HasMethod(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_HasMethod :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_HasMethod__ID
    };
    Reply_HasMethod() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_HasMethod")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_HasMethod(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Invoke :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_Invoke__ID
    };
    Msg_Invoke() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_Invoke")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Invoke(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_Invoke :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_Invoke__ID
    };
    Reply_Invoke() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_Invoke")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_Invoke(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_InvokeDefault :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_InvokeDefault__ID
    };
    Msg_InvokeDefault() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_InvokeDefault")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_InvokeDefault(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_InvokeDefault :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_InvokeDefault__ID
    };
    Reply_InvokeDefault() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_InvokeDefault")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_InvokeDefault(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_HasProperty :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_HasProperty__ID
    };
    Msg_HasProperty() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_HasProperty")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_HasProperty(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_HasProperty :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_HasProperty__ID
    };
    Reply_HasProperty() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_HasProperty")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_HasProperty(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_SetProperty :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_SetProperty__ID
    };
    Msg_SetProperty() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_SetProperty")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_SetProperty(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_SetProperty :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_SetProperty__ID
    };
    Reply_SetProperty() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_SetProperty")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_SetProperty(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_RemoveProperty :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_RemoveProperty__ID
    };
    Msg_RemoveProperty() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_RemoveProperty")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_RemoveProperty(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_RemoveProperty :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_RemoveProperty__ID
    };
    Reply_RemoveProperty() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_RemoveProperty")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_RemoveProperty(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Enumerate :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_Enumerate__ID
    };
    Msg_Enumerate() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_Enumerate")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Enumerate(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_Enumerate :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_Enumerate__ID
    };
    Reply_Enumerate() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_Enumerate")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_Enumerate(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Construct :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_Construct__ID
    };
    Msg_Construct() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_Construct")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Construct(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_Construct :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_Construct__ID
    };
    Reply_Construct() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_Construct")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_Construct(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Protect :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_Protect__ID
    };
    Msg_Protect() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_Protect")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Protect(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_Unprotect :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_Unprotect__ID
    };
    Msg_Unprotect() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_Unprotect")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_Unprotect(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetParentProperty :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_GetParentProperty__ID
    };
    Msg_GetParentProperty() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_GetParentProperty")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetParentProperty(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetParentProperty :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_GetParentProperty__ID
    };
    Reply_GetParentProperty() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_GetParentProperty")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetParentProperty(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Msg_GetChildProperty :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Msg_GetChildProperty__ID
    };
    Msg_GetChildProperty() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Msg_GetChildProperty")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Msg_GetChildProperty(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};

class Reply_GetChildProperty :
    public IPC::Message
{
private:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;

public:
    enum {
        ID = Reply_GetChildProperty__ID
    };
    Reply_GetChildProperty() :
        IPC::Message(MSG_ROUTING_NONE, ID, PRIORITY_NORMAL, COMPRESSION_NONE, "PPluginScriptableObject::Reply_GetChildProperty")
    {
    }

    void
    Log(
            const std::string& __pfx,
            FILE* __outf) const
    {
        std::string __logmsg;
        StringAppendF((&(__logmsg)), "[time:%" PRId64 "][%d]", PR_Now(), base::GetCurrentProcId());
        (__logmsg).append(__pfx);
        (__logmsg).append("Reply_GetChildProperty(");

        (__logmsg).append("[TODO])\n");
        fputs((__logmsg).c_str(), __outf);
    }
};



} // namespace PPluginScriptableObject
} // namespace plugins
} // namespace mozilla

#endif // ifndef PPluginScriptableObject_h
