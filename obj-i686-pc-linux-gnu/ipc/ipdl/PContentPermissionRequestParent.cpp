//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PContentPermissionRequestParent.h"

#include "mozilla/dom/PBrowserParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::ipc::Shmem Shmem;
using mozilla::dom::PBrowserParent;

namespace mozilla {
namespace dom {


void
PContentPermissionRequestParent::ActorDestroy(ActorDestroyReason why)
{
}

PContentPermissionRequestParent::PContentPermissionRequestParent() :
    mId(0),
    mState(PContentPermissionRequest::__Dead)
{
    MOZ_COUNT_CTOR(PContentPermissionRequestParent);
}

PContentPermissionRequestParent::~PContentPermissionRequestParent()
{
    MOZ_COUNT_DTOR(PContentPermissionRequestParent);
}

PBrowserParent*
PContentPermissionRequestParent::Manager() const
{
    return static_cast<PBrowserParent*>(mManager);
}

PContentPermissionRequest::State
PContentPermissionRequestParent::state()
{
    return mState;
}

bool
PContentPermissionRequestParent::Send__delete__(
        PContentPermissionRequestParent* actor,
        const bool& allow)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PContentPermissionRequest::Msg___delete__* __msg = new PContentPermissionRequest::Msg___delete__();

    (actor)->Write(actor, __msg, false);
    (actor)->Write(allow, __msg);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PContentPermissionRequestParent] Sending ", stderr);
    }
    if ((!(PContentPermissionRequest::Transition((actor)->mState, Trigger(Trigger::Send, PContentPermissionRequest::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PContentPermissionRequestMsgStart, actor);
    return __sendok;
}

int32_t
PContentPermissionRequestParent::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PContentPermissionRequestParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PContentPermissionRequestParent::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PContentPermissionRequestParent::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PContentPermissionRequestParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    NS_RUNTIMEABORT("unreached");
    return;
}

Shmem::SharedMemory*
PContentPermissionRequestParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PContentPermissionRequestParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PContentPermissionRequestParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PContentPermissionRequestParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PContentPermissionRequestParent::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PContentPermissionRequestParent::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PContentPermissionRequestParent::GetIPCChannel()
{
    return mChannel;
}

PContentPermissionRequestParent::Result
PContentPermissionRequestParent::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PContentPermissionRequest::Msg_prompt__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PContentPermissionRequest::Msg_prompt");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PContentPermissionRequest::Msg_prompt*>((&(__msg))))->Log("[PContentPermissionRequestParent] Received ", stderr);
            }

            if ((!(PContentPermissionRequest::Transition(mState, Trigger(Trigger::Recv, PContentPermissionRequest::Msg_prompt__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recvprompt()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for prompt returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContentPermissionRequest::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PContentPermissionRequestParent::Result
PContentPermissionRequestParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PContentPermissionRequestParent::Result
PContentPermissionRequestParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PContentPermissionRequestParent::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PContentPermissionRequestParent::GetProtocolTypeId()
{
    return PContentPermissionRequestMsgStart;
}

bool
PContentPermissionRequestParent::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PContentPermissionRequestParent::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PContentPermissionRequestParent::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PContentPermissionRequestParent::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PContentPermissionRequestParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PContentPermissionRequestParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PContentPermissionRequestParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PContentPermissionRequestParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PContentPermissionRequestParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PContentPermissionRequestParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PContentPermissionRequestParent::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PContentPermissionRequestParent::DeallocSubtree()
{
}

void
PContentPermissionRequestParent::Write(
        PContentPermissionRequestParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PContentPermissionRequestParent::Read(
        PContentPermissionRequestParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PContentPermissionRequest");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PContentPermissionRequest");
        return false;
    }

    if ((PContentPermissionRequestMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PContentPermissionRequest has different type");
        return false;
    }

    (*(__v)) = static_cast<PContentPermissionRequestParent*>(listener);
    return true;
}



} // namespace dom
} // namespace mozilla
