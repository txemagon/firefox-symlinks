//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PWebSocketChild.h"

#include "mozilla/net/PNeckoChild.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/dom/PBlobChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
typedef mozilla::ipc::GenericURIParams GenericURIParams;
typedef mozilla::ipc::InputStreamParams InputStreamParams;
typedef mozilla::ipc::JARURIParams JARURIParams;
typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
typedef mozilla::ipc::OptionalInputStreamParams OptionalInputStreamParams;
typedef mozilla::ipc::OptionalURIParams OptionalURIParams;
typedef mozilla::ipc::PartialFileInputStreamParams PartialFileInputStreamParams;
typedef mozilla::ipc::RemoteInputStreamParams RemoteInputStreamParams;
typedef IPC::SerializedLoadContext SerializedLoadContext;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
typedef mozilla::ipc::StandardURLParams StandardURLParams;
typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
typedef mozilla::ipc::URIParams URIParams;
typedef mozilla::void_t void_t;
using mozilla::net::PNeckoChild;
using mozilla::dom::PBrowserChild;
using mozilla::dom::PBlobChild;

namespace mozilla {
namespace net {


bool
PWebSocketChild::Recv__delete__()
{
    return true;
}

void
PWebSocketChild::ActorDestroy(ActorDestroyReason why)
{
}

PWebSocketChild::PWebSocketChild() :
    mId(0),
    mState(PWebSocket::__Dead)
{
    MOZ_COUNT_CTOR(PWebSocketChild);
}

PWebSocketChild::~PWebSocketChild()
{
    MOZ_COUNT_DTOR(PWebSocketChild);
}

PNeckoChild*
PWebSocketChild::Manager() const
{
    return static_cast<PNeckoChild*>(mManager);
}

PWebSocket::State
PWebSocketChild::state()
{
    return mState;
}

bool
PWebSocketChild::SendAsyncOpen(
        const URIParams& aURI,
        const nsCString& aOrigin,
        const nsCString& aProtocol,
        const bool& aSecure)
{
    PWebSocket::Msg_AsyncOpen* __msg = new PWebSocket::Msg_AsyncOpen();

    Write(aURI, __msg);
    Write(aOrigin, __msg);
    Write(aProtocol, __msg);
    Write(aSecure, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PWebSocketChild] Sending ", stderr);
    }
    if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Recv, PWebSocket::Msg_AsyncOpen__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PWebSocketChild::SendClose(
        const uint16_t& code,
        const nsCString& reason)
{
    PWebSocket::Msg_Close* __msg = new PWebSocket::Msg_Close();

    Write(code, __msg);
    Write(reason, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PWebSocketChild] Sending ", stderr);
    }
    if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Recv, PWebSocket::Msg_Close__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PWebSocketChild::SendSendMsg(const nsCString& aMsg)
{
    PWebSocket::Msg_SendMsg* __msg = new PWebSocket::Msg_SendMsg();

    Write(aMsg, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PWebSocketChild] Sending ", stderr);
    }
    if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Recv, PWebSocket::Msg_SendMsg__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PWebSocketChild::SendSendBinaryMsg(const nsCString& aMsg)
{
    PWebSocket::Msg_SendBinaryMsg* __msg = new PWebSocket::Msg_SendBinaryMsg();

    Write(aMsg, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PWebSocketChild] Sending ", stderr);
    }
    if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Recv, PWebSocket::Msg_SendBinaryMsg__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PWebSocketChild::SendSendBinaryStream(
        const InputStreamParams& aStream,
        const uint32_t& aLength)
{
    PWebSocket::Msg_SendBinaryStream* __msg = new PWebSocket::Msg_SendBinaryStream();

    Write(aStream, __msg);
    Write(aLength, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PWebSocketChild] Sending ", stderr);
    }
    if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Recv, PWebSocket::Msg_SendBinaryStream__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PWebSocketChild::SendDeleteSelf()
{
    PWebSocket::Msg_DeleteSelf* __msg = new PWebSocket::Msg_DeleteSelf();


    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PWebSocketChild] Sending ", stderr);
    }
    if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Recv, PWebSocket::Msg_DeleteSelf__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

int32_t
PWebSocketChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PWebSocketChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PWebSocketChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PWebSocketChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PWebSocketChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    NS_RUNTIMEABORT("unreached");
    return;
}

Shmem::SharedMemory*
PWebSocketChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PWebSocketChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PWebSocketChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PWebSocketChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PWebSocketChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PWebSocketChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PWebSocketChild::GetIPCChannel()
{
    return mChannel;
}

PWebSocketChild::Result
PWebSocketChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PWebSocket::Msg_OnStart__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PWebSocket::Msg_OnStart");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PWebSocket::Msg_OnStart*>((&(__msg))))->Log("[PWebSocketChild] Received ", stderr);
            }

            void* __iter = 0;
            nsCString aProtocol;
            nsCString aExtensions;

            if ((!(Read((&(aProtocol)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(aExtensions)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Send, PWebSocket::Msg_OnStart__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnStart(aProtocol, aExtensions)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for OnStart returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnStop__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PWebSocket::Msg_OnStop");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PWebSocket::Msg_OnStop*>((&(__msg))))->Log("[PWebSocketChild] Received ", stderr);
            }

            void* __iter = 0;
            nsresult aStatusCode;

            if ((!(Read((&(aStatusCode)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Send, PWebSocket::Msg_OnStop__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnStop(aStatusCode)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for OnStop returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnMessageAvailable__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PWebSocket::Msg_OnMessageAvailable");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PWebSocket::Msg_OnMessageAvailable*>((&(__msg))))->Log("[PWebSocketChild] Received ", stderr);
            }

            void* __iter = 0;
            nsCString aMsg;

            if ((!(Read((&(aMsg)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Send, PWebSocket::Msg_OnMessageAvailable__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnMessageAvailable(aMsg)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for OnMessageAvailable returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnBinaryMessageAvailable__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PWebSocket::Msg_OnBinaryMessageAvailable");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PWebSocket::Msg_OnBinaryMessageAvailable*>((&(__msg))))->Log("[PWebSocketChild] Received ", stderr);
            }

            void* __iter = 0;
            nsCString aMsg;

            if ((!(Read((&(aMsg)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Send, PWebSocket::Msg_OnBinaryMessageAvailable__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnBinaryMessageAvailable(aMsg)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for OnBinaryMessageAvailable returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnAcknowledge__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PWebSocket::Msg_OnAcknowledge");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PWebSocket::Msg_OnAcknowledge*>((&(__msg))))->Log("[PWebSocketChild] Received ", stderr);
            }

            void* __iter = 0;
            uint32_t aSize;

            if ((!(Read((&(aSize)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Send, PWebSocket::Msg_OnAcknowledge__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnAcknowledge(aSize)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for OnAcknowledge returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnServerClose__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PWebSocket::Msg_OnServerClose");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PWebSocket::Msg_OnServerClose*>((&(__msg))))->Log("[PWebSocketChild] Received ", stderr);
            }

            void* __iter = 0;
            uint16_t code;
            nsCString aReason;

            if ((!(Read((&(code)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(aReason)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Send, PWebSocket::Msg_OnServerClose__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnServerClose(code, aReason)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for OnServerClose returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PWebSocket::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PWebSocket::Msg___delete__*>((&(__msg))))->Log("[PWebSocketChild] Received ", stderr);
            }

            void* __iter = 0;
            PWebSocketChild* actor;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PWebSocket::Transition(mState, Trigger(Trigger::Send, PWebSocket::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PWebSocketMsgStart, actor);


            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PWebSocketChild::Result
PWebSocketChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PWebSocketChild::Result
PWebSocketChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PWebSocketChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PWebSocketChild::GetProtocolTypeId()
{
    return PWebSocketMsgStart;
}

bool
PWebSocketChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PWebSocketChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PWebSocketChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PWebSocketChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PWebSocketChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PWebSocketChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PWebSocketChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PWebSocketChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PWebSocketChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PWebSocketChild] abort()ing as a result");
}

void
PWebSocketChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PWebSocketChild::DeallocSubtree()
{
}

void
PWebSocketChild::Write(
        const StringInputStreamParams& __v,
        Message* __msg)
{
    Write((__v).data(), __msg);
}

bool
PWebSocketChild::Read(
        StringInputStreamParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->data())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        const FileInputStreamParams& __v,
        Message* __msg)
{
    Write((__v).file(), __msg);
    Write((__v).behaviorFlags(), __msg);
    Write((__v).ioFlags(), __msg);
}

bool
PWebSocketChild::Read(
        FileInputStreamParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->file())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->behaviorFlags())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->ioFlags())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        const RemoteInputStreamParams& __v,
        Message* __msg)
{
    // skipping actor field that's meaningless on this side
    Write((__v).remoteBlobChild(), __msg, false);
}

bool
PWebSocketChild::Read(
        RemoteInputStreamParams* __v,
        const Message* __msg,
        void** __iter)
{
    // skipping actor field that's meaningless on this side
    if ((!(Read((&((__v)->remoteBlobChild())), __msg, __iter, false)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        const MultiplexInputStreamParams& __v,
        Message* __msg)
{
    Write((__v).streams(), __msg);
    Write((__v).currentStream(), __msg);
    Write((__v).status(), __msg);
    Write((__v).startedReadingCurrent(), __msg);
}

bool
PWebSocketChild::Read(
        MultiplexInputStreamParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->streams())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->currentStream())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->status())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->startedReadingCurrent())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        const StandardURLParams& __v,
        Message* __msg)
{
    Write((__v).urlType(), __msg);
    Write((__v).port(), __msg);
    Write((__v).defaultPort(), __msg);
    Write((__v).spec(), __msg);
    Write((__v).scheme(), __msg);
    Write((__v).authority(), __msg);
    Write((__v).username(), __msg);
    Write((__v).password(), __msg);
    Write((__v).host(), __msg);
    Write((__v).path(), __msg);
    Write((__v).filePath(), __msg);
    Write((__v).directory(), __msg);
    Write((__v).baseName(), __msg);
    Write((__v).extension(), __msg);
    Write((__v).query(), __msg);
    Write((__v).ref(), __msg);
    Write((__v).originCharset(), __msg);
    Write((__v).isMutable(), __msg);
    Write((__v).supportsFileURL(), __msg);
    Write((__v).hostEncoding(), __msg);
}

bool
PWebSocketChild::Read(
        StandardURLParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->urlType())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->port())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->defaultPort())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->spec())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->scheme())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->authority())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->username())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->password())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->host())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->filePath())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->directory())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->baseName())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->extension())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->query())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->ref())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->originCharset())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->isMutable())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->supportsFileURL())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->hostEncoding())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        const OptionalInputStreamParams& __v,
        Message* __msg)
{
    typedef OptionalInputStreamParams __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::Tvoid_t:
        {
            Write((__v).get_void_t(), __msg);
            return;
        }
    case __type::TInputStreamParams:
        {
            Write((__v).get_InputStreamParams(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PWebSocketChild::Read(
        OptionalInputStreamParams* __v,
        const Message* __msg,
        void** __iter)
{
    typedef OptionalInputStreamParams __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::Tvoid_t:
        {
            void_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_void_t())), __msg, __iter);
        }
    case __type::TInputStreamParams:
        {
            InputStreamParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_InputStreamParams())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PWebSocketChild::Write(
        const MIMEInputStreamParams& __v,
        Message* __msg)
{
    Write((__v).optionalStream(), __msg);
    Write((__v).headers(), __msg);
    Write((__v).contentLength(), __msg);
    Write((__v).startedReading(), __msg);
    Write((__v).addContentLength(), __msg);
}

bool
PWebSocketChild::Read(
        MIMEInputStreamParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->optionalStream())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->headers())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->contentLength())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->startedReading())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->addContentLength())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        const JARURIParams& __v,
        Message* __msg)
{
    Write((__v).jarFile(), __msg);
    Write((__v).jarEntry(), __msg);
    Write((__v).charset(), __msg);
}

bool
PWebSocketChild::Read(
        JARURIParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->jarFile())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->jarEntry())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->charset())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        const InputStreamParams& __v,
        Message* __msg)
{
    typedef InputStreamParams __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TStringInputStreamParams:
        {
            Write((__v).get_StringInputStreamParams(), __msg);
            return;
        }
    case __type::TFileInputStreamParams:
        {
            Write((__v).get_FileInputStreamParams(), __msg);
            return;
        }
    case __type::TPartialFileInputStreamParams:
        {
            Write((__v).get_PartialFileInputStreamParams(), __msg);
            return;
        }
    case __type::TBufferedInputStreamParams:
        {
            Write((__v).get_BufferedInputStreamParams(), __msg);
            return;
        }
    case __type::TMIMEInputStreamParams:
        {
            Write((__v).get_MIMEInputStreamParams(), __msg);
            return;
        }
    case __type::TMultiplexInputStreamParams:
        {
            Write((__v).get_MultiplexInputStreamParams(), __msg);
            return;
        }
    case __type::TRemoteInputStreamParams:
        {
            Write((__v).get_RemoteInputStreamParams(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PWebSocketChild::Read(
        InputStreamParams* __v,
        const Message* __msg,
        void** __iter)
{
    typedef InputStreamParams __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TStringInputStreamParams:
        {
            StringInputStreamParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_StringInputStreamParams())), __msg, __iter);
        }
    case __type::TFileInputStreamParams:
        {
            FileInputStreamParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_FileInputStreamParams())), __msg, __iter);
        }
    case __type::TPartialFileInputStreamParams:
        {
            PartialFileInputStreamParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_PartialFileInputStreamParams())), __msg, __iter);
        }
    case __type::TBufferedInputStreamParams:
        {
            BufferedInputStreamParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_BufferedInputStreamParams())), __msg, __iter);
        }
    case __type::TMIMEInputStreamParams:
        {
            MIMEInputStreamParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_MIMEInputStreamParams())), __msg, __iter);
        }
    case __type::TMultiplexInputStreamParams:
        {
            MultiplexInputStreamParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_MultiplexInputStreamParams())), __msg, __iter);
        }
    case __type::TRemoteInputStreamParams:
        {
            RemoteInputStreamParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_RemoteInputStreamParams())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PWebSocketChild::Write(
        const BufferedInputStreamParams& __v,
        Message* __msg)
{
    Write((__v).optionalStream(), __msg);
    Write((__v).bufferSize(), __msg);
}

bool
PWebSocketChild::Read(
        BufferedInputStreamParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->optionalStream())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->bufferSize())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        const GenericURIParams& __v,
        Message* __msg)
{
    Write((__v).spec(), __msg);
    Write((__v).charset(), __msg);
}

bool
PWebSocketChild::Read(
        GenericURIParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->spec())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->charset())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        const StandardURLSegment& __v,
        Message* __msg)
{
    Write((__v).position(), __msg);
    Write((__v).length(), __msg);
}

bool
PWebSocketChild::Read(
        StandardURLSegment* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->position())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->length())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        const InfallibleTArray<InputStreamParams>& __v,
        Message* __msg)
{
    uint32_t length = (__v).Length();
    Write(length, __msg);

    for (uint32_t i = 0; (i) < (length); (++(i))) {
        Write(__v[i], __msg);
    }
}

bool
PWebSocketChild::Read(
        InfallibleTArray<InputStreamParams>* __v,
        const Message* __msg,
        void** __iter)
{
    InfallibleTArray<InputStreamParams>& a = (*(__v));
    uint32_t length;
    if ((!(Read((&(length)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    (__v)->SetLength(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(a[i])), __msg, __iter)))) {
            mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
            return false;
        }
    }
    return true;
}

void
PWebSocketChild::Write(
        const URIParams& __v,
        Message* __msg)
{
    typedef URIParams __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TSimpleURIParams:
        {
            Write((__v).get_SimpleURIParams(), __msg);
            return;
        }
    case __type::TStandardURLParams:
        {
            Write((__v).get_StandardURLParams(), __msg);
            return;
        }
    case __type::TJARURIParams:
        {
            Write((__v).get_JARURIParams(), __msg);
            return;
        }
    case __type::TGenericURIParams:
        {
            Write((__v).get_GenericURIParams(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PWebSocketChild::Read(
        URIParams* __v,
        const Message* __msg,
        void** __iter)
{
    typedef URIParams __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TSimpleURIParams:
        {
            SimpleURIParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SimpleURIParams())), __msg, __iter);
        }
    case __type::TStandardURLParams:
        {
            StandardURLParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_StandardURLParams())), __msg, __iter);
        }
    case __type::TJARURIParams:
        {
            JARURIParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_JARURIParams())), __msg, __iter);
        }
    case __type::TGenericURIParams:
        {
            GenericURIParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GenericURIParams())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PWebSocketChild::Write(
        PBlobChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PWebSocketChild::Read(
        PBlobChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PWebSocket");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PBlob");
        return false;
    }

    if ((PBlobMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PBlob has different type");
        return false;
    }

    (*(__v)) = static_cast<PBlobChild*>(listener);
    return true;
}

void
PWebSocketChild::Write(
        const PartialFileInputStreamParams& __v,
        Message* __msg)
{
    Write((__v).fileStreamParams(), __msg);
    Write((__v).begin(), __msg);
    Write((__v).length(), __msg);
}

bool
PWebSocketChild::Read(
        PartialFileInputStreamParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->fileStreamParams())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->begin())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->length())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        PWebSocketChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PWebSocketChild::Read(
        PWebSocketChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PWebSocket");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PWebSocket");
        return false;
    }

    if ((PWebSocketMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PWebSocket has different type");
        return false;
    }

    (*(__v)) = static_cast<PWebSocketChild*>(listener);
    return true;
}

void
PWebSocketChild::Write(
        const SimpleURIParams& __v,
        Message* __msg)
{
    Write((__v).scheme(), __msg);
    Write((__v).path(), __msg);
    Write((__v).ref(), __msg);
    Write((__v).isMutable(), __msg);
}

bool
PWebSocketChild::Read(
        SimpleURIParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->scheme())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->ref())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->isMutable())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PWebSocketChild::Write(
        const FileDescriptor& __v,
        Message* __msg)
{
    FileDescriptor::PickleType pfd = (__v).ShareTo(FileDescriptor::IPDLPrivate(), OtherProcess());
    IPC::WriteParam(__msg, pfd);
}

bool
PWebSocketChild::Read(
        FileDescriptor* __v,
        const Message* __msg,
        void** __iter)
{
    FileDescriptor::PickleType pfd;
    if ((!(IPC::ReadParam(__msg, __iter, (&(pfd)))))) {
        return false;
    }

    FileDescriptor fd = FileDescriptor(FileDescriptor::IPDLPrivate(), pfd);
    if ((!((fd).IsValid()))) {
        return false;
    }

    (*(__v)) = fd;
    return true;
}



} // namespace net
} // namespace mozilla
