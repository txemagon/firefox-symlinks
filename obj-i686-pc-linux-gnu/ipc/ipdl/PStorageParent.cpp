//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PStorageParent.h"

#include "mozilla/dom/PContentParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::dom::ItemData ItemData;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::dom::StorageItem StorageItem;
typedef mozilla::null_t null_t;
using mozilla::dom::PContentParent;

namespace mozilla {
namespace dom {


bool
PStorageParent::Recv__delete__()
{
    return true;
}

void
PStorageParent::ActorDestroy(ActorDestroyReason why)
{
}

PStorageParent::PStorageParent() :
    mId(0),
    mState(PStorage::__Dead)
{
    MOZ_COUNT_CTOR(PStorageParent);
}

PStorageParent::~PStorageParent()
{
    MOZ_COUNT_DTOR(PStorageParent);
}

PContentParent*
PStorageParent::Manager() const
{
    return static_cast<PContentParent*>(mManager);
}

PStorage::State
PStorageParent::state()
{
    return mState;
}

int32_t
PStorageParent::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PStorageParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PStorageParent::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PStorageParent::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PStorageParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    NS_RUNTIMEABORT("unreached");
    return;
}

Shmem::SharedMemory*
PStorageParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PStorageParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PStorageParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PStorageParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PStorageParent::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PStorageParent::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PStorageParent::GetIPCChannel()
{
    return mChannel;
}

PStorageParent::Result
PStorageParent::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PStorage::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg___delete__*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            PStorageParent* actor;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PStorageMsgStart, actor);


            return MsgProcessed;
        }
    case PStorage::Msg_Init__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_Init");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_Init*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            bool useDB;
            bool sessionOnly;
            bool isPrivate;
            nsCString scopeDBKey;
            nsCString quotaDBKey;
            uint32_t storageType;

            if ((!(Read((&(useDB)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(sessionOnly)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(isPrivate)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(scopeDBKey)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(quotaDBKey)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(storageType)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_Init__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvInit(useDB, sessionOnly, isPrivate, scopeDBKey, quotaDBKey, storageType)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Init returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PStorage::Msg_UpdatePrivateState__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_UpdatePrivateState");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_UpdatePrivateState*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            bool enabled;

            if ((!(Read((&(enabled)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_UpdatePrivateState__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvUpdatePrivateState(enabled)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for UpdatePrivateState returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PStorageParent::Result
PStorageParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    switch ((__msg).type()) {
    case PStorage::Msg_GetKeys__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_GetKeys");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_GetKeys*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            bool callerSecure;

            if ((!(Read((&(callerSecure)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_GetKeys__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            InfallibleTArray<nsString> keys;
            int32_t __id = mId;
            if ((!(RecvGetKeys(callerSecure, (&(keys)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for GetKeys returned error code");
                return MsgProcessingError;
            }

            __reply = new PStorage::Reply_GetKeys();

            Write(keys, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Reply_GetKeys*>(__reply))->Log("[PStorageParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PStorage::Msg_GetLength__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_GetLength");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_GetLength*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            bool callerSecure;
            bool sessionOnly;

            if ((!(Read((&(callerSecure)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(sessionOnly)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_GetLength__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            uint32_t length;
            nsresult rv;
            int32_t __id = mId;
            if ((!(RecvGetLength(callerSecure, sessionOnly, (&(length)), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for GetLength returned error code");
                return MsgProcessingError;
            }

            __reply = new PStorage::Reply_GetLength();

            Write(length, __reply);
            Write(rv, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Reply_GetLength*>(__reply))->Log("[PStorageParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PStorage::Msg_GetKey__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_GetKey");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_GetKey*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            bool callerSecure;
            bool sessionOnly;
            uint32_t index;

            if ((!(Read((&(callerSecure)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(sessionOnly)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(index)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_GetKey__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            nsString key;
            nsresult rv;
            int32_t __id = mId;
            if ((!(RecvGetKey(callerSecure, sessionOnly, index, (&(key)), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for GetKey returned error code");
                return MsgProcessingError;
            }

            __reply = new PStorage::Reply_GetKey();

            Write(key, __reply);
            Write(rv, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Reply_GetKey*>(__reply))->Log("[PStorageParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PStorage::Msg_GetValue__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_GetValue");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_GetValue*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            bool callerSecure;
            bool sessionOnly;
            nsString key;

            if ((!(Read((&(callerSecure)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(sessionOnly)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(key)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_GetValue__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            StorageItem item;
            nsresult rv;
            int32_t __id = mId;
            if ((!(RecvGetValue(callerSecure, sessionOnly, key, (&(item)), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for GetValue returned error code");
                return MsgProcessingError;
            }

            __reply = new PStorage::Reply_GetValue();

            Write(item, __reply);
            Write(rv, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Reply_GetValue*>(__reply))->Log("[PStorageParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PStorage::Msg_SetValue__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_SetValue");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_SetValue*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            bool callerSecure;
            bool sessionOnly;
            nsString key;
            nsString data;

            if ((!(Read((&(callerSecure)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(sessionOnly)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(key)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(data)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_SetValue__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            nsString oldValue;
            nsresult rv;
            int32_t __id = mId;
            if ((!(RecvSetValue(callerSecure, sessionOnly, key, data, (&(oldValue)), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for SetValue returned error code");
                return MsgProcessingError;
            }

            __reply = new PStorage::Reply_SetValue();

            Write(oldValue, __reply);
            Write(rv, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Reply_SetValue*>(__reply))->Log("[PStorageParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PStorage::Msg_RemoveValue__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_RemoveValue");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_RemoveValue*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            bool callerSecure;
            bool sessionOnly;
            nsString key;

            if ((!(Read((&(callerSecure)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(sessionOnly)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(key)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_RemoveValue__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            nsString oldValue;
            nsresult rv;
            int32_t __id = mId;
            if ((!(RecvRemoveValue(callerSecure, sessionOnly, key, (&(oldValue)), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for RemoveValue returned error code");
                return MsgProcessingError;
            }

            __reply = new PStorage::Reply_RemoveValue();

            Write(oldValue, __reply);
            Write(rv, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Reply_RemoveValue*>(__reply))->Log("[PStorageParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PStorage::Msg_Clear__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_Clear");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_Clear*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            bool callerSecure;
            bool sessionOnly;

            if ((!(Read((&(callerSecure)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(sessionOnly)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_Clear__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            int32_t oldCount;
            nsresult rv;
            int32_t __id = mId;
            if ((!(RecvClear(callerSecure, sessionOnly, (&(oldCount)), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Clear returned error code");
                return MsgProcessingError;
            }

            __reply = new PStorage::Reply_Clear();

            Write(oldCount, __reply);
            Write(rv, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Reply_Clear*>(__reply))->Log("[PStorageParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PStorage::Msg_GetDBValue__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_GetDBValue");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_GetDBValue*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            nsString key;

            if ((!(Read((&(key)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_GetDBValue__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            nsString value;
            bool secure;
            nsresult rv;
            int32_t __id = mId;
            if ((!(RecvGetDBValue(key, (&(value)), (&(secure)), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for GetDBValue returned error code");
                return MsgProcessingError;
            }

            __reply = new PStorage::Reply_GetDBValue();

            Write(value, __reply);
            Write(secure, __reply);
            Write(rv, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Reply_GetDBValue*>(__reply))->Log("[PStorageParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PStorage::Msg_SetDBValue__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_SetDBValue");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_SetDBValue*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            nsString key;
            nsString value;
            bool secure;

            if ((!(Read((&(key)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(value)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(secure)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_SetDBValue__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            nsresult rv;
            int32_t __id = mId;
            if ((!(RecvSetDBValue(key, value, secure, (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for SetDBValue returned error code");
                return MsgProcessingError;
            }

            __reply = new PStorage::Reply_SetDBValue();

            Write(rv, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Reply_SetDBValue*>(__reply))->Log("[PStorageParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PStorage::Msg_SetSecure__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PStorage::Msg_SetSecure");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Msg_SetSecure*>((&(__msg))))->Log("[PStorageParent] Received ", stderr);
            }

            void* __iter = 0;
            nsString key;
            bool secure;

            if ((!(Read((&(key)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(secure)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_SetSecure__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            nsresult rv;
            int32_t __id = mId;
            if ((!(RecvSetSecure(key, secure, (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for SetSecure returned error code");
                return MsgProcessingError;
            }

            __reply = new PStorage::Reply_SetSecure();

            Write(rv, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PStorage::Reply_SetSecure*>(__reply))->Log("[PStorageParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PStorageParent::Result
PStorageParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PStorageParent::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PStorageParent::GetProtocolTypeId()
{
    return PStorageMsgStart;
}

bool
PStorageParent::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PStorageParent::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PStorageParent::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PStorageParent::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PStorageParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PStorageParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PStorageParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PStorageParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PStorageParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PStorageParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PStorageParent::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PStorageParent::DeallocSubtree()
{
}

void
PStorageParent::Write(
        const ItemData& __v,
        Message* __msg)
{
    Write((__v).value(), __msg);
    Write((__v).secure(), __msg);
}

bool
PStorageParent::Read(
        ItemData* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->value())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->secure())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PStorageParent::Write(
        PStorageParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PStorageParent::Read(
        PStorageParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PStorage");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PStorage");
        return false;
    }

    if ((PStorageMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PStorage has different type");
        return false;
    }

    (*(__v)) = static_cast<PStorageParent*>(listener);
    return true;
}

void
PStorageParent::Write(
        const StorageItem& __v,
        Message* __msg)
{
    typedef StorageItem __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::Tnull_t:
        {
            Write((__v).get_null_t(), __msg);
            return;
        }
    case __type::TItemData:
        {
            Write((__v).get_ItemData(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PStorageParent::Read(
        StorageItem* __v,
        const Message* __msg,
        void** __iter)
{
    typedef StorageItem __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::Tnull_t:
        {
            null_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_null_t())), __msg, __iter);
        }
    case __type::TItemData:
        {
            ItemData tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ItemData())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}



} // namespace dom
} // namespace mozilla
