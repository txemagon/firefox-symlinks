//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/jsipc/PContextWrapperParent.h"

#include "mozilla/ipc/PTestShellParent.h"
#include "mozilla/jsipc/PObjectWrapperParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::ipc::Shmem Shmem;
using mozilla::ipc::PTestShellParent;
using mozilla::jsipc::PObjectWrapperParent;

namespace mozilla {
namespace jsipc {


bool
PContextWrapperParent::Recv__delete__()
{
    return true;
}

bool
PContextWrapperParent::RecvPObjectWrapperConstructor(
        PObjectWrapperParent* actor,
        const bool& makeGlobal)
{
    return true;
}

void
PContextWrapperParent::ActorDestroy(ActorDestroyReason why)
{
}

PContextWrapperParent::PContextWrapperParent() :
    mId(0),
    mState(PContextWrapper::__Dead)
{
    MOZ_COUNT_CTOR(PContextWrapperParent);
}

PContextWrapperParent::~PContextWrapperParent()
{
    MOZ_COUNT_DTOR(PContextWrapperParent);
}

PTestShellParent*
PContextWrapperParent::Manager() const
{
    return static_cast<PTestShellParent*>(mManager);
}

void
PContextWrapperParent::ManagedPObjectWrapperParent(InfallibleTArray<PObjectWrapperParent*>& aArr) const
{
    aArr = mManagedPObjectWrapperParent;
}

const InfallibleTArray<PObjectWrapperParent*>&
PContextWrapperParent::ManagedPObjectWrapperParent() const
{
    return mManagedPObjectWrapperParent;
}

PContextWrapper::State
PContextWrapperParent::state()
{
    return mState;
}

int32_t
PContextWrapperParent::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PContextWrapperParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PContextWrapperParent::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PContextWrapperParent::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PContextWrapperParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PObjectWrapperMsgStart:
        {
            PObjectWrapperParent* actor = static_cast<PObjectWrapperParent*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPObjectWrapperParent).NoIndex) != ((mManagedPObjectWrapperParent).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPObjectWrapperParent).RemoveElementSorted(actor);
            DeallocPObjectWrapper(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PContextWrapperParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PContextWrapperParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PContextWrapperParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PContextWrapperParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PContextWrapperParent::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PContextWrapperParent::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PContextWrapperParent::GetIPCChannel()
{
    return mChannel;
}

PContextWrapperParent::Result
PContextWrapperParent::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PContextWrapper::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PContextWrapper::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PContextWrapper::Msg___delete__*>((&(__msg))))->Log("[PContextWrapperParent] Received ", stderr);
            }

            void* __iter = 0;
            PContextWrapperParent* actor;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PContextWrapper::Transition(mState, Trigger(Trigger::Recv, PContextWrapper::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PContextWrapperMsgStart, actor);


            return MsgProcessed;
        }
    case PContextWrapper::Msg_PObjectWrapperConstructor__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PContextWrapper::Msg_PObjectWrapperConstructor");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PContextWrapper::Msg_PObjectWrapperConstructor*>((&(__msg))))->Log("[PContextWrapperParent] Received ", stderr);
            }

            void* __iter = 0;
            ActorHandle __handle;
            PObjectWrapperParent* actor;
            bool makeGlobal;

            if ((!(Read((&(__handle)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(makeGlobal)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PContextWrapper::Transition(mState, Trigger(Trigger::Recv, PContextWrapper::Msg_PObjectWrapperConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            actor = AllocPObjectWrapper(makeGlobal);
            if ((!(actor))) {
                return MsgValueError;
            }
            (actor)->mId = RegisterID(actor, (__handle).mId);
            (actor)->mManager = this;
            (actor)->mChannel = mChannel;
            (mManagedPObjectWrapperParent).InsertElementSorted(actor);
            (actor)->mState = mozilla::jsipc::PObjectWrapper::__Start;

            if ((!(RecvPObjectWrapperConstructor(actor, makeGlobal)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PObjectWrapper returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PContextWrapperParent::Result
PContextWrapperParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PContextWrapperParent::Result
PContextWrapperParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PContextWrapperParent::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PContextWrapperParent::GetProtocolTypeId()
{
    return PContextWrapperMsgStart;
}

bool
PContextWrapperParent::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PContextWrapperParent::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PContextWrapperParent::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PContextWrapperParent::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PContextWrapperParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PContextWrapperParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PContextWrapperParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PContextWrapperParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PContextWrapperParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PContextWrapperParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PContextWrapperParent::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PObjectWrapper kids
        InfallibleTArray<PObjectWrapperParent*> kids(mManagedPObjectWrapperParent);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PContextWrapperParent::DeallocSubtree()
{
    {
        // Recursively deleting PObjectWrapper kids
        InfallibleTArray<PObjectWrapperParent*>& kids = mManagedPObjectWrapperParent;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPObjectWrapper(kids[i]);
        }
        (mManagedPObjectWrapperParent).Clear();
    }
}

void
PContextWrapperParent::Write(
        PObjectWrapperParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PContextWrapperParent::Read(
        PObjectWrapperParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PContextWrapper");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PObjectWrapper");
        return false;
    }

    if ((PObjectWrapperMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PObjectWrapper has different type");
        return false;
    }

    (*(__v)) = static_cast<PObjectWrapperParent*>(listener);
    return true;
}

void
PContextWrapperParent::Write(
        PContextWrapperParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PContextWrapperParent::Read(
        PContextWrapperParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PContextWrapper");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PContextWrapper");
        return false;
    }

    if ((PContextWrapperMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PContextWrapper has different type");
        return false;
    }

    (*(__v)) = static_cast<PContextWrapperParent*>(listener);
    return true;
}



} // namespace jsipc
} // namespace mozilla
