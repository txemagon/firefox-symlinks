//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PIndexedDBObjectStoreChild.h"

#include "mozilla/dom/PBlobChild.h"
#include "mozilla/dom/indexedDB/PIndexedDBCursorChild.h"
#include "mozilla/dom/indexedDB/PIndexedDBIndexChild.h"
#include "mozilla/dom/indexedDB/PIndexedDBRequestChild.h"
#include "mozilla/dom/indexedDB/PIndexedDBTransactionChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::dom::indexedDB::ipc::AddParams AddParams;
typedef mozilla::dom::indexedDB::ipc::AddPutParams AddPutParams;
typedef mozilla::dom::indexedDB::ipc::ClearParams ClearParams;
typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::CountParams CountParams;
typedef mozilla::dom::indexedDB::ipc::CreateIndexParams CreateIndexParams;
typedef mozilla::dom::indexedDB::ipc::DeleteParams DeleteParams;
typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetAllParams GetAllParams;
typedef mozilla::dom::indexedDB::ipc::GetIndexParams GetIndexParams;
typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::GetParams GetParams;
typedef mozilla::dom::indexedDB::ipc::IndexConstructorParams IndexConstructorParams;
typedef mozilla::dom::indexedDB::IndexInfo IndexInfo;
typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
typedef mozilla::dom::indexedDB::Key Key;
typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::KeyRange KeyRange;
typedef mozilla::dom::indexedDB::ipc::ObjectStoreCursorConstructorParams ObjectStoreCursorConstructorParams;
typedef mozilla::dom::indexedDB::ipc::ObjectStoreRequestParams ObjectStoreRequestParams;
typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OpenCursorParams OpenCursorParams;
typedef mozilla::dom::indexedDB::ipc::FIXME_Bug_521898_objectstore::OptionalKeyRange OptionalKeyRange;
typedef mozilla::dom::indexedDB::ipc::PutParams PutParams;
typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::void_t void_t;
using mozilla::dom::PBlobChild;
using mozilla::dom::indexedDB::PIndexedDBCursorChild;
using mozilla::dom::indexedDB::PIndexedDBIndexChild;
using mozilla::dom::indexedDB::PIndexedDBRequestChild;
using mozilla::dom::indexedDB::PIndexedDBTransactionChild;

namespace mozilla {
namespace dom {
namespace indexedDB {


bool
PIndexedDBObjectStoreChild::RecvPIndexedDBCursorConstructor(
        PIndexedDBCursorChild* actor,
        const ObjectStoreCursorConstructorParams& params)
{
    return true;
}

void
PIndexedDBObjectStoreChild::ActorDestroy(ActorDestroyReason why)
{
}

PIndexedDBObjectStoreChild::PIndexedDBObjectStoreChild() :
    mId(0),
    mState(PIndexedDBObjectStore::__Dead)
{
    MOZ_COUNT_CTOR(PIndexedDBObjectStoreChild);
}

PIndexedDBObjectStoreChild::~PIndexedDBObjectStoreChild()
{
    MOZ_COUNT_DTOR(PIndexedDBObjectStoreChild);
}

PIndexedDBTransactionChild*
PIndexedDBObjectStoreChild::Manager() const
{
    return static_cast<PIndexedDBTransactionChild*>(mManager);
}

void
PIndexedDBObjectStoreChild::ManagedPIndexedDBCursorChild(InfallibleTArray<PIndexedDBCursorChild*>& aArr) const
{
    aArr = mManagedPIndexedDBCursorChild;
}

const InfallibleTArray<PIndexedDBCursorChild*>&
PIndexedDBObjectStoreChild::ManagedPIndexedDBCursorChild() const
{
    return mManagedPIndexedDBCursorChild;
}

void
PIndexedDBObjectStoreChild::ManagedPIndexedDBIndexChild(InfallibleTArray<PIndexedDBIndexChild*>& aArr) const
{
    aArr = mManagedPIndexedDBIndexChild;
}

const InfallibleTArray<PIndexedDBIndexChild*>&
PIndexedDBObjectStoreChild::ManagedPIndexedDBIndexChild() const
{
    return mManagedPIndexedDBIndexChild;
}

void
PIndexedDBObjectStoreChild::ManagedPIndexedDBRequestChild(InfallibleTArray<PIndexedDBRequestChild*>& aArr) const
{
    aArr = mManagedPIndexedDBRequestChild;
}

const InfallibleTArray<PIndexedDBRequestChild*>&
PIndexedDBObjectStoreChild::ManagedPIndexedDBRequestChild() const
{
    return mManagedPIndexedDBRequestChild;
}

PIndexedDBObjectStore::State
PIndexedDBObjectStoreChild::state()
{
    return mState;
}

bool
PIndexedDBObjectStoreChild::Send__delete__(PIndexedDBObjectStoreChild* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PIndexedDBObjectStore::Msg___delete__* __msg = new PIndexedDBObjectStore::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PIndexedDBObjectStoreChild] Sending ", stderr);
    }
    if ((!(PIndexedDBObjectStore::Transition((actor)->mState, Trigger(Trigger::Recv, PIndexedDBObjectStore::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PIndexedDBObjectStoreMsgStart, actor);
    return __sendok;
}

PIndexedDBIndexChild*
PIndexedDBObjectStoreChild::SendPIndexedDBIndexConstructor(const IndexConstructorParams& params)
{
    return SendPIndexedDBIndexConstructor(AllocPIndexedDBIndex(params), params);
}

PIndexedDBIndexChild*
PIndexedDBObjectStoreChild::SendPIndexedDBIndexConstructor(
        PIndexedDBIndexChild* actor,
        const IndexConstructorParams& params)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPIndexedDBIndexChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::dom::indexedDB::PIndexedDBIndex::__Start;

    PIndexedDBObjectStore::Msg_PIndexedDBIndexConstructor* __msg = new PIndexedDBObjectStore::Msg_PIndexedDBIndexConstructor();

    Write(actor, __msg, false);
    Write(params, __msg);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PIndexedDBObjectStoreChild] Sending ", stderr);
    }
    if ((!(PIndexedDBObjectStore::Transition(mState, Trigger(Trigger::Recv, PIndexedDBObjectStore::Msg_PIndexedDBIndexConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PIndexedDBIndexMsgStart, actor);
        return 0;
    }
    return actor;
}

PIndexedDBRequestChild*
PIndexedDBObjectStoreChild::SendPIndexedDBRequestConstructor(const ObjectStoreRequestParams& params)
{
    return SendPIndexedDBRequestConstructor(AllocPIndexedDBRequest(params), params);
}

PIndexedDBRequestChild*
PIndexedDBObjectStoreChild::SendPIndexedDBRequestConstructor(
        PIndexedDBRequestChild* actor,
        const ObjectStoreRequestParams& params)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPIndexedDBRequestChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::dom::indexedDB::PIndexedDBRequest::__Start;

    PIndexedDBObjectStore::Msg_PIndexedDBRequestConstructor* __msg = new PIndexedDBObjectStore::Msg_PIndexedDBRequestConstructor();

    Write(actor, __msg, false);
    Write(params, __msg);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PIndexedDBObjectStoreChild] Sending ", stderr);
    }
    if ((!(PIndexedDBObjectStore::Transition(mState, Trigger(Trigger::Recv, PIndexedDBObjectStore::Msg_PIndexedDBRequestConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PIndexedDBRequestMsgStart, actor);
        return 0;
    }
    return actor;
}

bool
PIndexedDBObjectStoreChild::SendDeleteIndex(const nsString& name)
{
    PIndexedDBObjectStore::Msg_DeleteIndex* __msg = new PIndexedDBObjectStore::Msg_DeleteIndex();

    Write(name, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PIndexedDBObjectStoreChild] Sending ", stderr);
    }
    if ((!(PIndexedDBObjectStore::Transition(mState, Trigger(Trigger::Recv, PIndexedDBObjectStore::Msg_DeleteIndex__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

int32_t
PIndexedDBObjectStoreChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PIndexedDBObjectStoreChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PIndexedDBObjectStoreChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PIndexedDBObjectStoreChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PIndexedDBObjectStoreChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PIndexedDBCursorMsgStart:
        {
            PIndexedDBCursorChild* actor = static_cast<PIndexedDBCursorChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPIndexedDBCursorChild).NoIndex) != ((mManagedPIndexedDBCursorChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPIndexedDBCursorChild).RemoveElementSorted(actor);
            DeallocPIndexedDBCursor(actor);
            return;
        }
    case PIndexedDBIndexMsgStart:
        {
            PIndexedDBIndexChild* actor = static_cast<PIndexedDBIndexChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPIndexedDBIndexChild).NoIndex) != ((mManagedPIndexedDBIndexChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPIndexedDBIndexChild).RemoveElementSorted(actor);
            DeallocPIndexedDBIndex(actor);
            return;
        }
    case PIndexedDBRequestMsgStart:
        {
            PIndexedDBRequestChild* actor = static_cast<PIndexedDBRequestChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPIndexedDBRequestChild).NoIndex) != ((mManagedPIndexedDBRequestChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPIndexedDBRequestChild).RemoveElementSorted(actor);
            DeallocPIndexedDBRequest(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PIndexedDBObjectStoreChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PIndexedDBObjectStoreChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PIndexedDBObjectStoreChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PIndexedDBObjectStoreChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PIndexedDBObjectStoreChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PIndexedDBObjectStoreChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PIndexedDBObjectStoreChild::GetIPCChannel()
{
    return mChannel;
}

PIndexedDBObjectStoreChild::Result
PIndexedDBObjectStoreChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PIndexedDBObjectStore::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PIndexedDBObjectStore::Reply_PIndexedDBIndexConstructor__ID:
        {
            return MsgProcessed;
        }
    case PIndexedDBObjectStore::Reply_PIndexedDBRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    case PIndexedDBObjectStore::Msg_PIndexedDBCursorConstructor__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PIndexedDBObjectStore::Msg_PIndexedDBCursorConstructor");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PIndexedDBObjectStore::Msg_PIndexedDBCursorConstructor*>((&(__msg))))->Log("[PIndexedDBObjectStoreChild] Received ", stderr);
            }

            void* __iter = 0;
            ActorHandle __handle;
            PIndexedDBCursorChild* actor;
            ObjectStoreCursorConstructorParams params;

            if ((!(Read((&(__handle)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(params)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PIndexedDBObjectStore::Transition(mState, Trigger(Trigger::Send, PIndexedDBObjectStore::Msg_PIndexedDBCursorConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            actor = AllocPIndexedDBCursor(params);
            if ((!(actor))) {
                return MsgValueError;
            }
            (actor)->mId = RegisterID(actor, (__handle).mId);
            (actor)->mManager = this;
            (actor)->mChannel = mChannel;
            (mManagedPIndexedDBCursorChild).InsertElementSorted(actor);
            (actor)->mState = mozilla::dom::indexedDB::PIndexedDBCursor::__Start;

            if ((!(RecvPIndexedDBCursorConstructor(actor, params)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PIndexedDBCursor returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PIndexedDBObjectStoreChild::Result
PIndexedDBObjectStoreChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PIndexedDBObjectStoreChild::Result
PIndexedDBObjectStoreChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PIndexedDBObjectStoreChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PIndexedDBObjectStoreChild::GetProtocolTypeId()
{
    return PIndexedDBObjectStoreMsgStart;
}

bool
PIndexedDBObjectStoreChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PIndexedDBObjectStoreChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PIndexedDBObjectStoreChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PIndexedDBObjectStoreChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PIndexedDBObjectStoreChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PIndexedDBObjectStoreChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PIndexedDBObjectStoreChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PIndexedDBObjectStoreChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PIndexedDBObjectStoreChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PIndexedDBObjectStoreChild] abort()ing as a result");
}

void
PIndexedDBObjectStoreChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PIndexedDBCursor kids
        InfallibleTArray<PIndexedDBCursorChild*> kids(mManagedPIndexedDBCursorChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PIndexedDBIndex kids
        InfallibleTArray<PIndexedDBIndexChild*> kids(mManagedPIndexedDBIndexChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PIndexedDBRequest kids
        InfallibleTArray<PIndexedDBRequestChild*> kids(mManagedPIndexedDBRequestChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PIndexedDBObjectStoreChild::DeallocSubtree()
{
    {
        // Recursively deleting PIndexedDBCursor kids
        InfallibleTArray<PIndexedDBCursorChild*>& kids = mManagedPIndexedDBCursorChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPIndexedDBCursor(kids[i]);
        }
        (mManagedPIndexedDBCursorChild).Clear();
    }
    {
        // Recursively deleting PIndexedDBIndex kids
        InfallibleTArray<PIndexedDBIndexChild*>& kids = mManagedPIndexedDBIndexChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPIndexedDBIndex(kids[i]);
        }
        (mManagedPIndexedDBIndexChild).Clear();
    }
    {
        // Recursively deleting PIndexedDBRequest kids
        InfallibleTArray<PIndexedDBRequestChild*>& kids = mManagedPIndexedDBRequestChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPIndexedDBRequest(kids[i]);
        }
        (mManagedPIndexedDBRequestChild).Clear();
    }
}

void
PIndexedDBObjectStoreChild::Write(
        const ObjectStoreCursorConstructorParams& __v,
        Message* __msg)
{
    // skipping actor field that's meaningless on this side
    Write((__v).requestChild(), __msg, false);
    Write((__v).direction(), __msg);
    Write((__v).key(), __msg);
    Write((__v).cloneInfo(), __msg);
    // skipping actor field that's meaningless on this side
    Write((__v).blobsChild(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        ObjectStoreCursorConstructorParams* __v,
        const Message* __msg,
        void** __iter)
{
    // skipping actor field that's meaningless on this side
    if ((!(Read((&((__v)->requestChild())), __msg, __iter, false)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->direction())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->key())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->cloneInfo())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    // skipping actor field that's meaningless on this side
    if ((!(Read((&((__v)->blobsChild())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const OpenCursorParams& __v,
        Message* __msg)
{
    Write((__v).optionalKeyRange(), __msg);
    Write((__v).direction(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        OpenCursorParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->optionalKeyRange())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->direction())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const IndexConstructorParams& __v,
        Message* __msg)
{
    typedef IndexConstructorParams __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TCreateIndexParams:
        {
            Write((__v).get_CreateIndexParams(), __msg);
            return;
        }
    case __type::TGetIndexParams:
        {
            Write((__v).get_GetIndexParams(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PIndexedDBObjectStoreChild::Read(
        IndexConstructorParams* __v,
        const Message* __msg,
        void** __iter)
{
    typedef IndexConstructorParams __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TCreateIndexParams:
        {
            CreateIndexParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_CreateIndexParams())), __msg, __iter);
        }
    case __type::TGetIndexParams:
        {
            GetIndexParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GetIndexParams())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PIndexedDBObjectStoreChild::Write(
        const AddParams& __v,
        Message* __msg)
{
    Write((__v).commonParams(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        AddParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->commonParams())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const PutParams& __v,
        Message* __msg)
{
    Write((__v).commonParams(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        PutParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->commonParams())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const KeyRange& __v,
        Message* __msg)
{
    Write((__v).lower(), __msg);
    Write((__v).upper(), __msg);
    Write((__v).lowerOpen(), __msg);
    Write((__v).upperOpen(), __msg);
    Write((__v).isOnly(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        KeyRange* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->lower())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->upper())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->lowerOpen())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->upperOpen())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->isOnly())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        PBlobChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        PBlobChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDBObjectStore");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PBlob");
        return false;
    }

    if ((PBlobMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PBlob has different type");
        return false;
    }

    (*(__v)) = static_cast<PBlobChild*>(listener);
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const GetAllParams& __v,
        Message* __msg)
{
    Write((__v).optionalKeyRange(), __msg);
    Write((__v).limit(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        GetAllParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->optionalKeyRange())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->limit())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        PIndexedDBCursorChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        PIndexedDBCursorChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDBObjectStore");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PIndexedDBCursor");
        return false;
    }

    if ((PIndexedDBCursorMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PIndexedDBCursor has different type");
        return false;
    }

    (*(__v)) = static_cast<PIndexedDBCursorChild*>(listener);
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const DeleteParams& __v,
        Message* __msg)
{
    Write((__v).keyRange(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        DeleteParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->keyRange())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const OptionalKeyRange& __v,
        Message* __msg)
{
    typedef OptionalKeyRange __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TKeyRange:
        {
            Write((__v).get_KeyRange(), __msg);
            return;
        }
    case __type::Tvoid_t:
        {
            Write((__v).get_void_t(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PIndexedDBObjectStoreChild::Read(
        OptionalKeyRange* __v,
        const Message* __msg,
        void** __iter)
{
    typedef OptionalKeyRange __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TKeyRange:
        {
            KeyRange tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_KeyRange())), __msg, __iter);
        }
    case __type::Tvoid_t:
        {
            void_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_void_t())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PIndexedDBObjectStoreChild::Write(
        const GetIndexParams& __v,
        Message* __msg)
{
    Write((__v).name(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        GetIndexParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->name())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const InfallibleTArray<PBlobChild*>& __v,
        Message* __msg)
{
    uint32_t length = (__v).Length();
    Write(length, __msg);

    for (uint32_t i = 0; (i) < (length); (++(i))) {
        Write(__v[i], __msg, false);
    }
}

bool
PIndexedDBObjectStoreChild::Read(
        InfallibleTArray<PBlobChild*>* __v,
        const Message* __msg,
        void** __iter)
{
    InfallibleTArray<PBlobChild*>& a = (*(__v));
    uint32_t length;
    if ((!(Read((&(length)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    (__v)->SetLength(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(a[i])), __msg, __iter, false)))) {
            mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
            return false;
        }
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const ObjectStoreRequestParams& __v,
        Message* __msg)
{
    typedef ObjectStoreRequestParams __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TGetParams:
        {
            Write((__v).get_GetParams(), __msg);
            return;
        }
    case __type::TGetAllParams:
        {
            Write((__v).get_GetAllParams(), __msg);
            return;
        }
    case __type::TAddParams:
        {
            Write((__v).get_AddParams(), __msg);
            return;
        }
    case __type::TPutParams:
        {
            Write((__v).get_PutParams(), __msg);
            return;
        }
    case __type::TDeleteParams:
        {
            Write((__v).get_DeleteParams(), __msg);
            return;
        }
    case __type::TClearParams:
        {
            Write((__v).get_ClearParams(), __msg);
            return;
        }
    case __type::TCountParams:
        {
            Write((__v).get_CountParams(), __msg);
            return;
        }
    case __type::TOpenCursorParams:
        {
            Write((__v).get_OpenCursorParams(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PIndexedDBObjectStoreChild::Read(
        ObjectStoreRequestParams* __v,
        const Message* __msg,
        void** __iter)
{
    typedef ObjectStoreRequestParams __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TGetParams:
        {
            GetParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GetParams())), __msg, __iter);
        }
    case __type::TGetAllParams:
        {
            GetAllParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GetAllParams())), __msg, __iter);
        }
    case __type::TAddParams:
        {
            AddParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_AddParams())), __msg, __iter);
        }
    case __type::TPutParams:
        {
            PutParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_PutParams())), __msg, __iter);
        }
    case __type::TDeleteParams:
        {
            DeleteParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_DeleteParams())), __msg, __iter);
        }
    case __type::TClearParams:
        {
            ClearParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ClearParams())), __msg, __iter);
        }
    case __type::TCountParams:
        {
            CountParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_CountParams())), __msg, __iter);
        }
    case __type::TOpenCursorParams:
        {
            OpenCursorParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_OpenCursorParams())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PIndexedDBObjectStoreChild::Write(
        PIndexedDBRequestChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        PIndexedDBRequestChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDBObjectStore");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PIndexedDBRequest");
        return false;
    }

    if ((PIndexedDBRequestMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PIndexedDBRequest has different type");
        return false;
    }

    (*(__v)) = static_cast<PIndexedDBRequestChild*>(listener);
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        PIndexedDBIndexChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        PIndexedDBIndexChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDBObjectStore");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PIndexedDBIndex");
        return false;
    }

    if ((PIndexedDBIndexMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PIndexedDBIndex has different type");
        return false;
    }

    (*(__v)) = static_cast<PIndexedDBIndexChild*>(listener);
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const CreateIndexParams& __v,
        Message* __msg)
{
    Write((__v).info(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        CreateIndexParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->info())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const AddPutParams& __v,
        Message* __msg)
{
    Write((__v).cloneInfo(), __msg);
    Write((__v).key(), __msg);
    Write((__v).indexUpdateInfos(), __msg);
    // skipping actor field that's meaningless on this side
    Write((__v).blobsChild(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        AddPutParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->cloneInfo())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->key())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->indexUpdateInfos())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    // skipping actor field that's meaningless on this side
    if ((!(Read((&((__v)->blobsChild())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const CountParams& __v,
        Message* __msg)
{
    Write((__v).optionalKeyRange(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        CountParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->optionalKeyRange())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const GetParams& __v,
        Message* __msg)
{
    Write((__v).keyRange(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        GetParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->keyRange())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        PIndexedDBObjectStoreChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        PIndexedDBObjectStoreChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDBObjectStore");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PIndexedDBObjectStore");
        return false;
    }

    if ((PIndexedDBObjectStoreMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PIndexedDBObjectStore has different type");
        return false;
    }

    (*(__v)) = static_cast<PIndexedDBObjectStoreChild*>(listener);
    return true;
}

void
PIndexedDBObjectStoreChild::Write(
        const ClearParams& __v,
        Message* __msg)
{
    Write((__v).FIXME_Bug_753159(), __msg);
}

bool
PIndexedDBObjectStoreChild::Read(
        ClearParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->FIXME_Bug_753159())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}



} // namespace indexedDB
} // namespace dom
} // namespace mozilla
