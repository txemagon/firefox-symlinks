//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PStorageChild.h"

#include "mozilla/dom/PContentChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::dom::ItemData ItemData;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::dom::StorageItem StorageItem;
typedef mozilla::null_t null_t;
using mozilla::dom::PContentChild;

namespace mozilla {
namespace dom {


void
PStorageChild::ActorDestroy(ActorDestroyReason why)
{
}

PStorageChild::PStorageChild() :
    mId(0),
    mState(PStorage::__Dead)
{
    MOZ_COUNT_CTOR(PStorageChild);
}

PStorageChild::~PStorageChild()
{
    MOZ_COUNT_DTOR(PStorageChild);
}

PContentChild*
PStorageChild::Manager() const
{
    return static_cast<PContentChild*>(mManager);
}

PStorage::State
PStorageChild::state()
{
    return mState;
}

bool
PStorageChild::Send__delete__(PStorageChild* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PStorage::Msg___delete__* __msg = new PStorage::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition((actor)->mState, Trigger(Trigger::Recv, PStorage::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PStorageMsgStart, actor);
    return __sendok;
}

bool
PStorageChild::SendInit(
        const bool& useDB,
        const bool& sessionOnly,
        const bool& isPrivate,
        const nsCString& scopeDBKey,
        const nsCString& quotaDBKey,
        const uint32_t& storageType)
{
    PStorage::Msg_Init* __msg = new PStorage::Msg_Init();

    Write(useDB, __msg);
    Write(sessionOnly, __msg);
    Write(isPrivate, __msg);
    Write(scopeDBKey, __msg);
    Write(quotaDBKey, __msg);
    Write(storageType, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_Init__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PStorageChild::SendGetKeys(
        const bool& callerSecure,
        InfallibleTArray<nsString>* keys)
{
    PStorage::Msg_GetKeys* __msg = new PStorage::Msg_GetKeys();

    Write(callerSecure, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_GetKeys__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PStorage::Reply_GetKeys*>((&(__reply))))->Log("[PStorageChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(keys, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PStorageChild::SendGetLength(
        const bool& callerSecure,
        const bool& sessionOnly,
        uint32_t* length,
        nsresult* rv)
{
    PStorage::Msg_GetLength* __msg = new PStorage::Msg_GetLength();

    Write(callerSecure, __msg);
    Write(sessionOnly, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_GetLength__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PStorage::Reply_GetLength*>((&(__reply))))->Log("[PStorageChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(length, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(rv, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PStorageChild::SendGetKey(
        const bool& callerSecure,
        const bool& sessionOnly,
        const uint32_t& index,
        nsString* key,
        nsresult* rv)
{
    PStorage::Msg_GetKey* __msg = new PStorage::Msg_GetKey();

    Write(callerSecure, __msg);
    Write(sessionOnly, __msg);
    Write(index, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_GetKey__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PStorage::Reply_GetKey*>((&(__reply))))->Log("[PStorageChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(key, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(rv, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PStorageChild::SendGetValue(
        const bool& callerSecure,
        const bool& sessionOnly,
        const nsString& key,
        StorageItem* item,
        nsresult* rv)
{
    PStorage::Msg_GetValue* __msg = new PStorage::Msg_GetValue();

    Write(callerSecure, __msg);
    Write(sessionOnly, __msg);
    Write(key, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_GetValue__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PStorage::Reply_GetValue*>((&(__reply))))->Log("[PStorageChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(item, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(rv, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PStorageChild::SendSetValue(
        const bool& callerSecure,
        const bool& sessionOnly,
        const nsString& key,
        const nsString& data,
        nsString* oldValue,
        nsresult* rv)
{
    PStorage::Msg_SetValue* __msg = new PStorage::Msg_SetValue();

    Write(callerSecure, __msg);
    Write(sessionOnly, __msg);
    Write(key, __msg);
    Write(data, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_SetValue__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PStorage::Reply_SetValue*>((&(__reply))))->Log("[PStorageChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(oldValue, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(rv, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PStorageChild::SendRemoveValue(
        const bool& callerSecure,
        const bool& sessionOnly,
        const nsString& key,
        nsString* oldValue,
        nsresult* rv)
{
    PStorage::Msg_RemoveValue* __msg = new PStorage::Msg_RemoveValue();

    Write(callerSecure, __msg);
    Write(sessionOnly, __msg);
    Write(key, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_RemoveValue__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PStorage::Reply_RemoveValue*>((&(__reply))))->Log("[PStorageChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(oldValue, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(rv, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PStorageChild::SendClear(
        const bool& callerSecure,
        const bool& sessionOnly,
        int32_t* oldCount,
        nsresult* rv)
{
    PStorage::Msg_Clear* __msg = new PStorage::Msg_Clear();

    Write(callerSecure, __msg);
    Write(sessionOnly, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_Clear__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PStorage::Reply_Clear*>((&(__reply))))->Log("[PStorageChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(oldCount, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(rv, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PStorageChild::SendGetDBValue(
        const nsString& key,
        nsString* value,
        bool* secure,
        nsresult* rv)
{
    PStorage::Msg_GetDBValue* __msg = new PStorage::Msg_GetDBValue();

    Write(key, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_GetDBValue__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PStorage::Reply_GetDBValue*>((&(__reply))))->Log("[PStorageChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(value, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(secure, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read(rv, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PStorageChild::SendSetDBValue(
        const nsString& key,
        const nsString& value,
        const bool& secure,
        nsresult* rv)
{
    PStorage::Msg_SetDBValue* __msg = new PStorage::Msg_SetDBValue();

    Write(key, __msg);
    Write(value, __msg);
    Write(secure, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_SetDBValue__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PStorage::Reply_SetDBValue*>((&(__reply))))->Log("[PStorageChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(rv, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PStorageChild::SendSetSecure(
        const nsString& key,
        const bool& secure,
        nsresult* rv)
{
    PStorage::Msg_SetSecure* __msg = new PStorage::Msg_SetSecure();

    Write(key, __msg);
    Write(secure, __msg);

    (__msg)->set_routing_id(mId);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_SetSecure__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PStorage::Reply_SetSecure*>((&(__reply))))->Log("[PStorageChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(rv, (&(__reply)), (&(__iter)))))) {
        FatalError("error deserializing (better message TODO)");
        return false;
    }
    (__reply).EndRead(__iter);

    return true;
}

bool
PStorageChild::SendUpdatePrivateState(const bool& enabled)
{
    PStorage::Msg_UpdatePrivateState* __msg = new PStorage::Msg_UpdatePrivateState();

    Write(enabled, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PStorageChild] Sending ", stderr);
    }
    if ((!(PStorage::Transition(mState, Trigger(Trigger::Recv, PStorage::Msg_UpdatePrivateState__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

int32_t
PStorageChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PStorageChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PStorageChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PStorageChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PStorageChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    NS_RUNTIMEABORT("unreached");
    return;
}

Shmem::SharedMemory*
PStorageChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PStorageChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PStorageChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PStorageChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PStorageChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PStorageChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PStorageChild::GetIPCChannel()
{
    return mChannel;
}

PStorageChild::Result
PStorageChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PStorage::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PStorageChild::Result
PStorageChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PStorageChild::Result
PStorageChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PStorageChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PStorageChild::GetProtocolTypeId()
{
    return PStorageMsgStart;
}

bool
PStorageChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PStorageChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PStorageChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PStorageChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PStorageChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PStorageChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PStorageChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PStorageChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PStorageChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PStorageChild] abort()ing as a result");
}

void
PStorageChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PStorageChild::DeallocSubtree()
{
}

void
PStorageChild::Write(
        const ItemData& __v,
        Message* __msg)
{
    Write((__v).value(), __msg);
    Write((__v).secure(), __msg);
}

bool
PStorageChild::Read(
        ItemData* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->value())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->secure())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PStorageChild::Write(
        PStorageChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PStorageChild::Read(
        PStorageChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PStorage");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PStorage");
        return false;
    }

    if ((PStorageMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PStorage has different type");
        return false;
    }

    (*(__v)) = static_cast<PStorageChild*>(listener);
    return true;
}

void
PStorageChild::Write(
        const StorageItem& __v,
        Message* __msg)
{
    typedef StorageItem __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::Tnull_t:
        {
            Write((__v).get_null_t(), __msg);
            return;
        }
    case __type::TItemData:
        {
            Write((__v).get_ItemData(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PStorageChild::Read(
        StorageItem* __v,
        const Message* __msg,
        void** __iter)
{
    typedef StorageItem __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::Tnull_t:
        {
            null_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_null_t())), __msg, __iter);
        }
    case __type::TItemData:
        {
            ItemData tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ItemData())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}



} // namespace dom
} // namespace mozilla
