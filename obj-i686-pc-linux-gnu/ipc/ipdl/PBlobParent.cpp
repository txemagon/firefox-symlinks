//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBlobParent.h"

#include "mozilla/dom/PBlobStreamParent.h"
#include "mozilla/dom/PContentParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::dom::ClonedMessageData ClonedMessageData;
typedef mozilla::dom::FileBlobConstructorParams FileBlobConstructorParams;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::dom::NormalBlobConstructorParams NormalBlobConstructorParams;
typedef mozilla::dom::ResolveMysteryParams ResolveMysteryParams;
typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
typedef mozilla::ipc::Shmem Shmem;
using mozilla::dom::PBlobStreamParent;
using mozilla::dom::PContentParent;

namespace mozilla {
namespace dom {


bool
PBlobParent::Recv__delete__()
{
    return true;
}

bool
PBlobParent::RecvPBlobStreamConstructor(PBlobStreamParent* actor)
{
    return true;
}

void
PBlobParent::ActorDestroy(ActorDestroyReason why)
{
}

PBlobParent::PBlobParent() :
    mId(0),
    mState(PBlob::__Dead)
{
    MOZ_COUNT_CTOR(PBlobParent);
}

PBlobParent::~PBlobParent()
{
    MOZ_COUNT_DTOR(PBlobParent);
}

PContentParent*
PBlobParent::Manager() const
{
    return static_cast<PContentParent*>(mManager);
}

void
PBlobParent::ManagedPBlobStreamParent(InfallibleTArray<PBlobStreamParent*>& aArr) const
{
    aArr = mManagedPBlobStreamParent;
}

const InfallibleTArray<PBlobStreamParent*>&
PBlobParent::ManagedPBlobStreamParent() const
{
    return mManagedPBlobStreamParent;
}

PBlob::State
PBlobParent::state()
{
    return mState;
}

bool
PBlobParent::Send__delete__(PBlobParent* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PBlob::Msg___delete__* __msg = new PBlob::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PBlobParent] Sending ", stderr);
    }
    if ((!(PBlob::Transition((actor)->mState, Trigger(Trigger::Send, PBlob::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PBlobMsgStart, actor);
    return __sendok;
}

PBlobStreamParent*
PBlobParent::SendPBlobStreamConstructor()
{
    return SendPBlobStreamConstructor(AllocPBlobStream());
}

PBlobStreamParent*
PBlobParent::SendPBlobStreamConstructor(PBlobStreamParent* actor)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPBlobStreamParent).InsertElementSorted(actor);
    (actor)->mState = mozilla::dom::PBlobStream::__Start;

    PBlob::Msg_PBlobStreamConstructor* __msg = new PBlob::Msg_PBlobStreamConstructor();

    Write(actor, __msg, false);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PBlobParent] Sending ", stderr);
    }
    if ((!(PBlob::Transition(mState, Trigger(Trigger::Send, PBlob::Msg_PBlobStreamConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PBlobStreamMsgStart, actor);
        return 0;
    }
    return actor;
}

bool
PBlobParent::SendResolveMystery(const ResolveMysteryParams& params)
{
    PBlob::Msg_ResolveMystery* __msg = new PBlob::Msg_ResolveMystery();

    Write(params, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PBlobParent] Sending ", stderr);
    }
    if ((!(PBlob::Transition(mState, Trigger(Trigger::Send, PBlob::Msg_ResolveMystery__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

int32_t
PBlobParent::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PBlobParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PBlobParent::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PBlobParent::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PBlobParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PBlobStreamMsgStart:
        {
            PBlobStreamParent* actor = static_cast<PBlobStreamParent*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPBlobStreamParent).NoIndex) != ((mManagedPBlobStreamParent).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPBlobStreamParent).RemoveElementSorted(actor);
            DeallocPBlobStream(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PBlobParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PBlobParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PBlobParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PBlobParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PBlobParent::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PBlobParent::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PBlobParent::GetIPCChannel()
{
    return mChannel;
}

PBlobParent::Result
PBlobParent::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PBlob::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PBlob::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PBlob::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PBlob::Msg___delete__*>((&(__msg))))->Log("[PBlobParent] Received ", stderr);
            }

            void* __iter = 0;
            PBlobParent* actor;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PBlob::Transition(mState, Trigger(Trigger::Recv, PBlob::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PBlobMsgStart, actor);


            return MsgProcessed;
        }
    case PBlob::Reply_PBlobStreamConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBlob::Msg_PBlobStreamConstructor__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PBlob::Msg_PBlobStreamConstructor");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PBlob::Msg_PBlobStreamConstructor*>((&(__msg))))->Log("[PBlobParent] Received ", stderr);
            }

            void* __iter = 0;
            ActorHandle __handle;
            PBlobStreamParent* actor;

            if ((!(Read((&(__handle)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PBlob::Transition(mState, Trigger(Trigger::Recv, PBlob::Msg_PBlobStreamConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            actor = AllocPBlobStream();
            if ((!(actor))) {
                return MsgValueError;
            }
            (actor)->mId = RegisterID(actor, (__handle).mId);
            (actor)->mManager = this;
            (actor)->mChannel = mChannel;
            (mManagedPBlobStreamParent).InsertElementSorted(actor);
            (actor)->mState = mozilla::dom::PBlobStream::__Start;

            if ((!(RecvPBlobStreamConstructor(actor)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PBlobStream returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBlob::Msg_ResolveMystery__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PBlob::Msg_ResolveMystery");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PBlob::Msg_ResolveMystery*>((&(__msg))))->Log("[PBlobParent] Received ", stderr);
            }

            void* __iter = 0;
            ResolveMysteryParams params;

            if ((!(Read((&(params)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PBlob::Transition(mState, Trigger(Trigger::Recv, PBlob::Msg_ResolveMystery__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvResolveMystery(params)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for ResolveMystery returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PBlobParent::Result
PBlobParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PBlobParent::Result
PBlobParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PBlobParent::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PBlobParent::GetProtocolTypeId()
{
    return PBlobMsgStart;
}

bool
PBlobParent::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PBlobParent::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PBlobParent::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PBlobParent::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PBlobParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PBlobParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PBlobParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PBlobParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PBlobParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PBlobParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PBlobParent::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PBlobStream kids
        InfallibleTArray<PBlobStreamParent*> kids(mManagedPBlobStreamParent);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PBlobParent::DeallocSubtree()
{
    {
        // Recursively deleting PBlobStream kids
        InfallibleTArray<PBlobStreamParent*>& kids = mManagedPBlobStreamParent;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPBlobStream(kids[i]);
        }
        (mManagedPBlobStreamParent).Clear();
    }
}

void
PBlobParent::Write(
        PBlobStreamParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PBlobParent::Read(
        PBlobStreamParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PBlob");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PBlobStream");
        return false;
    }

    if ((PBlobStreamMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PBlobStream has different type");
        return false;
    }

    (*(__v)) = static_cast<PBlobStreamParent*>(listener);
    return true;
}

void
PBlobParent::Write(
        const FileBlobConstructorParams& __v,
        Message* __msg)
{
    Write((__v).name(), __msg);
    Write((__v).contentType(), __msg);
    Write((__v).length(), __msg);
    Write((__v).modDate(), __msg);
}

bool
PBlobParent::Read(
        FileBlobConstructorParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->name())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->contentType())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->length())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->modDate())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBlobParent::Write(
        PBlobParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PBlobParent::Read(
        PBlobParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PBlob");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PBlob");
        return false;
    }

    if ((PBlobMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PBlob has different type");
        return false;
    }

    (*(__v)) = static_cast<PBlobParent*>(listener);
    return true;
}

void
PBlobParent::Write(
        const NormalBlobConstructorParams& __v,
        Message* __msg)
{
    Write((__v).contentType(), __msg);
    Write((__v).length(), __msg);
}

bool
PBlobParent::Read(
        NormalBlobConstructorParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->contentType())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->length())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PBlobParent::Write(
        const ResolveMysteryParams& __v,
        Message* __msg)
{
    typedef ResolveMysteryParams __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TNormalBlobConstructorParams:
        {
            Write((__v).get_NormalBlobConstructorParams(), __msg);
            return;
        }
    case __type::TFileBlobConstructorParams:
        {
            Write((__v).get_FileBlobConstructorParams(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PBlobParent::Read(
        ResolveMysteryParams* __v,
        const Message* __msg,
        void** __iter)
{
    typedef ResolveMysteryParams __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TNormalBlobConstructorParams:
        {
            NormalBlobConstructorParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_NormalBlobConstructorParams())), __msg, __iter);
        }
    case __type::TFileBlobConstructorParams:
        {
            FileBlobConstructorParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_FileBlobConstructorParams())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}



} // namespace dom
} // namespace mozilla
