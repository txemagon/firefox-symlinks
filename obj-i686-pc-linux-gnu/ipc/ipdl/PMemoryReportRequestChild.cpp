//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PMemoryReportRequestChild.h"

#include "mozilla/dom/PContentChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::dom::MemoryReport MemoryReport;
typedef mozilla::ipc::Shmem Shmem;
using mozilla::dom::PContentChild;

namespace mozilla {
namespace dom {


void
PMemoryReportRequestChild::ActorDestroy(ActorDestroyReason why)
{
}

PMemoryReportRequestChild::PMemoryReportRequestChild() :
    mId(0),
    mState(PMemoryReportRequest::__Dead)
{
    MOZ_COUNT_CTOR(PMemoryReportRequestChild);
}

PMemoryReportRequestChild::~PMemoryReportRequestChild()
{
    MOZ_COUNT_DTOR(PMemoryReportRequestChild);
}

PContentChild*
PMemoryReportRequestChild::Manager() const
{
    return static_cast<PContentChild*>(mManager);
}

PMemoryReportRequest::State
PMemoryReportRequestChild::state()
{
    return mState;
}

bool
PMemoryReportRequestChild::Send__delete__(
        PMemoryReportRequestChild* actor,
        const InfallibleTArray<MemoryReport>& report)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PMemoryReportRequest::Msg___delete__* __msg = new PMemoryReportRequest::Msg___delete__();

    (actor)->Write(actor, __msg, false);
    (actor)->Write(report, __msg);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PMemoryReportRequestChild] Sending ", stderr);
    }
    if ((!(PMemoryReportRequest::Transition((actor)->mState, Trigger(Trigger::Recv, PMemoryReportRequest::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PMemoryReportRequestMsgStart, actor);
    return __sendok;
}

int32_t
PMemoryReportRequestChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PMemoryReportRequestChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PMemoryReportRequestChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PMemoryReportRequestChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PMemoryReportRequestChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    NS_RUNTIMEABORT("unreached");
    return;
}

Shmem::SharedMemory*
PMemoryReportRequestChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PMemoryReportRequestChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PMemoryReportRequestChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PMemoryReportRequestChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PMemoryReportRequestChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PMemoryReportRequestChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PMemoryReportRequestChild::GetIPCChannel()
{
    return mChannel;
}

PMemoryReportRequestChild::Result
PMemoryReportRequestChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PMemoryReportRequest::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PMemoryReportRequestChild::Result
PMemoryReportRequestChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PMemoryReportRequestChild::Result
PMemoryReportRequestChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PMemoryReportRequestChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PMemoryReportRequestChild::GetProtocolTypeId()
{
    return PMemoryReportRequestMsgStart;
}

bool
PMemoryReportRequestChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PMemoryReportRequestChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PMemoryReportRequestChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PMemoryReportRequestChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PMemoryReportRequestChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PMemoryReportRequestChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PMemoryReportRequestChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PMemoryReportRequestChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PMemoryReportRequestChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PMemoryReportRequestChild] abort()ing as a result");
}

void
PMemoryReportRequestChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PMemoryReportRequestChild::DeallocSubtree()
{
}

void
PMemoryReportRequestChild::Write(
        const InfallibleTArray<MemoryReport>& __v,
        Message* __msg)
{
    uint32_t length = (__v).Length();
    Write(length, __msg);

    for (uint32_t i = 0; (i) < (length); (++(i))) {
        Write(__v[i], __msg);
    }
}

bool
PMemoryReportRequestChild::Read(
        InfallibleTArray<MemoryReport>* __v,
        const Message* __msg,
        void** __iter)
{
    InfallibleTArray<MemoryReport>& a = (*(__v));
    uint32_t length;
    if ((!(Read((&(length)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    (__v)->SetLength(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(a[i])), __msg, __iter)))) {
            mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
            return false;
        }
    }
    return true;
}

void
PMemoryReportRequestChild::Write(
        PMemoryReportRequestChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PMemoryReportRequestChild::Read(
        PMemoryReportRequestChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PMemoryReportRequest");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PMemoryReportRequest");
        return false;
    }

    if ((PMemoryReportRequestMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PMemoryReportRequest has different type");
        return false;
    }

    (*(__v)) = static_cast<PMemoryReportRequestChild*>(listener);
    return true;
}

void
PMemoryReportRequestChild::Write(
        const MemoryReport& __v,
        Message* __msg)
{
    Write((__v).process(), __msg);
    Write((__v).path(), __msg);
    Write((__v).kind(), __msg);
    Write((__v).units(), __msg);
    Write((__v).amount(), __msg);
    Write((__v).desc(), __msg);
}

bool
PMemoryReportRequestChild::Read(
        MemoryReport* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->process())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->path())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->kind())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->units())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->amount())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->desc())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}



} // namespace dom
} // namespace mozilla
