//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PIndexedDBCursorParent.h"

#include "mozilla/dom/indexedDB/PIndexedDBIndexParent.h"
#include "mozilla/dom/indexedDB/PIndexedDBObjectStoreParent.h"
#include "mozilla/dom/indexedDB/PIndexedDBRequestParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::dom::indexedDB::ipc::ContinueParams ContinueParams;
typedef mozilla::dom::indexedDB::ipc::CursorRequestParams CursorRequestParams;
typedef mozilla::dom::indexedDB::IDBCursor::Direction Direction;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::dom::indexedDB::Key Key;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::void_t void_t;
using mozilla::dom::indexedDB::PIndexedDBIndexParent;
using mozilla::dom::indexedDB::PIndexedDBObjectStoreParent;
using mozilla::dom::indexedDB::PIndexedDBRequestParent;

namespace mozilla {
namespace dom {
namespace indexedDB {


bool
PIndexedDBCursorParent::Recv__delete__()
{
    return true;
}

bool
PIndexedDBCursorParent::RecvPIndexedDBRequestConstructor(
        PIndexedDBRequestParent* actor,
        const CursorRequestParams& params)
{
    return true;
}

void
PIndexedDBCursorParent::ActorDestroy(ActorDestroyReason why)
{
}

PIndexedDBCursorParent::PIndexedDBCursorParent() :
    mId(0),
    mState(PIndexedDBCursor::__Dead)
{
    MOZ_COUNT_CTOR(PIndexedDBCursorParent);
}

PIndexedDBCursorParent::~PIndexedDBCursorParent()
{
    MOZ_COUNT_DTOR(PIndexedDBCursorParent);
}

void
PIndexedDBCursorParent::ManagedPIndexedDBRequestParent(InfallibleTArray<PIndexedDBRequestParent*>& aArr) const
{
    aArr = mManagedPIndexedDBRequestParent;
}

const InfallibleTArray<PIndexedDBRequestParent*>&
PIndexedDBCursorParent::ManagedPIndexedDBRequestParent() const
{
    return mManagedPIndexedDBRequestParent;
}

PIndexedDBCursor::State
PIndexedDBCursorParent::state()
{
    return mState;
}

int32_t
PIndexedDBCursorParent::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PIndexedDBCursorParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PIndexedDBCursorParent::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PIndexedDBCursorParent::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PIndexedDBCursorParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PIndexedDBRequestMsgStart:
        {
            PIndexedDBRequestParent* actor = static_cast<PIndexedDBRequestParent*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPIndexedDBRequestParent).NoIndex) != ((mManagedPIndexedDBRequestParent).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPIndexedDBRequestParent).RemoveElementSorted(actor);
            DeallocPIndexedDBRequest(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PIndexedDBCursorParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PIndexedDBCursorParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PIndexedDBCursorParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PIndexedDBCursorParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PIndexedDBCursorParent::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PIndexedDBCursorParent::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PIndexedDBCursorParent::GetIPCChannel()
{
    return mChannel;
}

PIndexedDBCursorParent::Result
PIndexedDBCursorParent::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PIndexedDBCursor::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PIndexedDBCursor::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PIndexedDBCursor::Msg___delete__*>((&(__msg))))->Log("[PIndexedDBCursorParent] Received ", stderr);
            }

            void* __iter = 0;
            PIndexedDBCursorParent* actor;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PIndexedDBCursor::Transition(mState, Trigger(Trigger::Recv, PIndexedDBCursor::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PIndexedDBCursorMsgStart, actor);


            return MsgProcessed;
        }
    case PIndexedDBCursor::Msg_PIndexedDBRequestConstructor__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PIndexedDBCursor::Msg_PIndexedDBRequestConstructor");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PIndexedDBCursor::Msg_PIndexedDBRequestConstructor*>((&(__msg))))->Log("[PIndexedDBCursorParent] Received ", stderr);
            }

            void* __iter = 0;
            ActorHandle __handle;
            PIndexedDBRequestParent* actor;
            CursorRequestParams params;

            if ((!(Read((&(__handle)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(params)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PIndexedDBCursor::Transition(mState, Trigger(Trigger::Recv, PIndexedDBCursor::Msg_PIndexedDBRequestConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            actor = AllocPIndexedDBRequest(params);
            if ((!(actor))) {
                return MsgValueError;
            }
            (actor)->mId = RegisterID(actor, (__handle).mId);
            (actor)->mManager = this;
            (actor)->mChannel = mChannel;
            (mManagedPIndexedDBRequestParent).InsertElementSorted(actor);
            (actor)->mState = mozilla::dom::indexedDB::PIndexedDBRequest::__Start;

            if ((!(RecvPIndexedDBRequestConstructor(actor, params)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PIndexedDBRequest returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PIndexedDBCursorParent::Result
PIndexedDBCursorParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PIndexedDBCursorParent::Result
PIndexedDBCursorParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PIndexedDBCursorParent::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PIndexedDBCursorParent::GetProtocolTypeId()
{
    return PIndexedDBCursorMsgStart;
}

bool
PIndexedDBCursorParent::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PIndexedDBCursorParent::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PIndexedDBCursorParent::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PIndexedDBCursorParent::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PIndexedDBCursorParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PIndexedDBCursorParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PIndexedDBCursorParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PIndexedDBCursorParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PIndexedDBCursorParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PIndexedDBCursorParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PIndexedDBCursorParent::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PIndexedDBRequest kids
        InfallibleTArray<PIndexedDBRequestParent*> kids(mManagedPIndexedDBRequestParent);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PIndexedDBCursorParent::DeallocSubtree()
{
    {
        // Recursively deleting PIndexedDBRequest kids
        InfallibleTArray<PIndexedDBRequestParent*>& kids = mManagedPIndexedDBRequestParent;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPIndexedDBRequest(kids[i]);
        }
        (mManagedPIndexedDBRequestParent).Clear();
    }
}

void
PIndexedDBCursorParent::Write(
        PIndexedDBCursorParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBCursorParent::Read(
        PIndexedDBCursorParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDBCursor");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PIndexedDBCursor");
        return false;
    }

    if ((PIndexedDBCursorMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PIndexedDBCursor has different type");
        return false;
    }

    (*(__v)) = static_cast<PIndexedDBCursorParent*>(listener);
    return true;
}

void
PIndexedDBCursorParent::Write(
        const ContinueParams& __v,
        Message* __msg)
{
    Write((__v).key(), __msg);
    Write((__v).count(), __msg);
}

bool
PIndexedDBCursorParent::Read(
        ContinueParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->key())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->count())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBCursorParent::Write(
        PIndexedDBRequestParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBCursorParent::Read(
        PIndexedDBRequestParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDBCursor");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PIndexedDBRequest");
        return false;
    }

    if ((PIndexedDBRequestMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PIndexedDBRequest has different type");
        return false;
    }

    (*(__v)) = static_cast<PIndexedDBRequestParent*>(listener);
    return true;
}

void
PIndexedDBCursorParent::Write(
        const CursorRequestParams& __v,
        Message* __msg)
{
    typedef CursorRequestParams __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TContinueParams:
        {
            Write((__v).get_ContinueParams(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PIndexedDBCursorParent::Read(
        CursorRequestParams* __v,
        const Message* __msg,
        void** __iter)
{
    typedef CursorRequestParams __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TContinueParams:
        {
            ContinueParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_ContinueParams())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}



} // namespace indexedDB
} // namespace dom
} // namespace mozilla
