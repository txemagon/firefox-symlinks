//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PCrashReporter.h"

namespace mozilla {
namespace dom {
namespace PCrashReporter {

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next)
{
    switch (from) {
    case __Null:
    case __Error:
        if ((Msg___delete____ID) == ((trigger).mMsg)) {
            (*(next)) = __Dead;
            return true;
        }
        return (__Null) == (from);
    case __Dead:
        NS_RUNTIMEABORT("__delete__()d actor");
        return false;
    case __Dying:
        NS_RUNTIMEABORT("__delete__()d (and unexpectedly dying) actor");
        return false;
    default:
        NS_RUNTIMEABORT("corrupted actor state");
        return false;
    }
    (*(next)) = __Error;
    return false;
}

} // namespace PCrashReporter
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct Mapping|
//
namespace mozilla {
namespace dom {
Mapping::Mapping()
{
    Init();
}

Mapping::~Mapping()
{
}

bool
Mapping::operator==(const Mapping& _o) const
{
    if ((!((library_name()) == ((_o).library_name())))) {
        return false;
    }
    if ((!((file_id()) == ((_o).file_id())))) {
        return false;
    }
    if ((!((start_address()) == ((_o).start_address())))) {
        return false;
    }
    if ((!((mapping_length()) == ((_o).mapping_length())))) {
        return false;
    }
    if ((!((file_offset()) == ((_o).file_offset())))) {
        return false;
    }
    return true;
}

void
Mapping::Init()
{
}

void
Mapping::Assign(
        const nsCString& _library_name,
        const nsCString& _file_id,
        const uintptr_t& _start_address,
        const size_t& _mapping_length,
        const size_t& _file_offset)
{
    library_name_ = _library_name;
    file_id_ = _file_id;
    start_address_ = _start_address;
    mapping_length_ = _mapping_length;
    file_offset_ = _file_offset;
}

} // namespace dom
} // namespace mozilla
