//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/bluetooth/PBluetooth.h"

namespace mozilla {
namespace dom {
namespace bluetooth {
namespace PBluetooth {

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next)
{
    switch (from) {
    case __Null:
    case __Error:
        if ((Msg___delete____ID) == ((trigger).mMsg)) {
            (*(next)) = __Dead;
            return true;
        }
        return (__Null) == (from);
    case __Dead:
        NS_RUNTIMEABORT("__delete__()d actor");
        return false;
    case __Dying:
        NS_RUNTIMEABORT("__delete__()d (and unexpectedly dying) actor");
        return false;
    default:
        NS_RUNTIMEABORT("corrupted actor state");
        return false;
    }
    (*(next)) = __Error;
    return false;
}

} // namespace PBluetooth
} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DefaultAdapterPathRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
DefaultAdapterPathRequest::~DefaultAdapterPathRequest()
{
}

bool
DefaultAdapterPathRequest::operator==(const DefaultAdapterPathRequest& _o) const
{
    return true;
}

void
DefaultAdapterPathRequest::Init()
{
}

void
DefaultAdapterPathRequest::Assign()
{
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SetPropertyRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
SetPropertyRequest::SetPropertyRequest()
{
    Init();
}

SetPropertyRequest::~SetPropertyRequest()
{
}

bool
SetPropertyRequest::operator==(const SetPropertyRequest& _o) const
{
    if ((!((type()) == ((_o).type())))) {
        return false;
    }
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    if ((!((value()) == ((_o).value())))) {
        return false;
    }
    return true;
}

void
SetPropertyRequest::Init()
{
}

void
SetPropertyRequest::Assign(
        const BluetoothObjectType& _type,
        const nsString& _path,
        const BluetoothNamedValue& _value)
{
    type_ = _type;
    path_ = _path;
    value_ = _value;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct GetPropertyRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
GetPropertyRequest::GetPropertyRequest()
{
    Init();
}

GetPropertyRequest::~GetPropertyRequest()
{
}

bool
GetPropertyRequest::operator==(const GetPropertyRequest& _o) const
{
    if ((!((type()) == ((_o).type())))) {
        return false;
    }
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    return true;
}

void
GetPropertyRequest::Init()
{
}

void
GetPropertyRequest::Assign(
        const BluetoothObjectType& _type,
        const nsString& _path)
{
    type_ = _type;
    path_ = _path;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StartDiscoveryRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
StartDiscoveryRequest::StartDiscoveryRequest()
{
    Init();
}

StartDiscoveryRequest::~StartDiscoveryRequest()
{
}

bool
StartDiscoveryRequest::operator==(const StartDiscoveryRequest& _o) const
{
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    return true;
}

void
StartDiscoveryRequest::Init()
{
}

void
StartDiscoveryRequest::Assign(const nsString& _path)
{
    path_ = _path;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StopDiscoveryRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
StopDiscoveryRequest::StopDiscoveryRequest()
{
    Init();
}

StopDiscoveryRequest::~StopDiscoveryRequest()
{
}

bool
StopDiscoveryRequest::operator==(const StopDiscoveryRequest& _o) const
{
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    return true;
}

void
StopDiscoveryRequest::Init()
{
}

void
StopDiscoveryRequest::Assign(const nsString& _path)
{
    path_ = _path;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PairRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
PairRequest::PairRequest()
{
    Init();
}

PairRequest::~PairRequest()
{
}

bool
PairRequest::operator==(const PairRequest& _o) const
{
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    if ((!((address()) == ((_o).address())))) {
        return false;
    }
    if ((!((timeoutMS()) == ((_o).timeoutMS())))) {
        return false;
    }
    return true;
}

void
PairRequest::Init()
{
}

void
PairRequest::Assign(
        const nsString& _path,
        const nsString& _address,
        const uint32_t& _timeoutMS)
{
    path_ = _path;
    address_ = _address;
    timeoutMS_ = _timeoutMS;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct UnpairRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
UnpairRequest::UnpairRequest()
{
    Init();
}

UnpairRequest::~UnpairRequest()
{
}

bool
UnpairRequest::operator==(const UnpairRequest& _o) const
{
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    if ((!((address()) == ((_o).address())))) {
        return false;
    }
    return true;
}

void
UnpairRequest::Init()
{
}

void
UnpairRequest::Assign(
        const nsString& _path,
        const nsString& _address)
{
    path_ = _path;
    address_ = _address;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SetPinCodeRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
SetPinCodeRequest::SetPinCodeRequest()
{
    Init();
}

SetPinCodeRequest::~SetPinCodeRequest()
{
}

bool
SetPinCodeRequest::operator==(const SetPinCodeRequest& _o) const
{
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    if ((!((pincode()) == ((_o).pincode())))) {
        return false;
    }
    return true;
}

void
SetPinCodeRequest::Init()
{
}

void
SetPinCodeRequest::Assign(
        const nsString& _path,
        const nsString& _pincode)
{
    path_ = _path;
    pincode_ = _pincode;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SetPasskeyRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
SetPasskeyRequest::SetPasskeyRequest()
{
    Init();
}

SetPasskeyRequest::~SetPasskeyRequest()
{
}

bool
SetPasskeyRequest::operator==(const SetPasskeyRequest& _o) const
{
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    if ((!((passkey()) == ((_o).passkey())))) {
        return false;
    }
    return true;
}

void
SetPasskeyRequest::Init()
{
}

void
SetPasskeyRequest::Assign(
        const nsString& _path,
        const uint32_t& _passkey)
{
    path_ = _path;
    passkey_ = _passkey;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ConfirmPairingConfirmationRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
ConfirmPairingConfirmationRequest::ConfirmPairingConfirmationRequest()
{
    Init();
}

ConfirmPairingConfirmationRequest::~ConfirmPairingConfirmationRequest()
{
}

bool
ConfirmPairingConfirmationRequest::operator==(const ConfirmPairingConfirmationRequest& _o) const
{
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    return true;
}

void
ConfirmPairingConfirmationRequest::Init()
{
}

void
ConfirmPairingConfirmationRequest::Assign(const nsString& _path)
{
    path_ = _path;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DenyPairingConfirmationRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
DenyPairingConfirmationRequest::DenyPairingConfirmationRequest()
{
    Init();
}

DenyPairingConfirmationRequest::~DenyPairingConfirmationRequest()
{
}

bool
DenyPairingConfirmationRequest::operator==(const DenyPairingConfirmationRequest& _o) const
{
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    return true;
}

void
DenyPairingConfirmationRequest::Init()
{
}

void
DenyPairingConfirmationRequest::Assign(const nsString& _path)
{
    path_ = _path;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ConfirmAuthorizationRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
ConfirmAuthorizationRequest::ConfirmAuthorizationRequest()
{
    Init();
}

ConfirmAuthorizationRequest::~ConfirmAuthorizationRequest()
{
}

bool
ConfirmAuthorizationRequest::operator==(const ConfirmAuthorizationRequest& _o) const
{
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    return true;
}

void
ConfirmAuthorizationRequest::Init()
{
}

void
ConfirmAuthorizationRequest::Assign(const nsString& _path)
{
    path_ = _path;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DenyAuthorizationRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
DenyAuthorizationRequest::DenyAuthorizationRequest()
{
    Init();
}

DenyAuthorizationRequest::~DenyAuthorizationRequest()
{
}

bool
DenyAuthorizationRequest::operator==(const DenyAuthorizationRequest& _o) const
{
    if ((!((path()) == ((_o).path())))) {
        return false;
    }
    return true;
}

void
DenyAuthorizationRequest::Init()
{
}

void
DenyAuthorizationRequest::Assign(const nsString& _path)
{
    path_ = _path;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DevicePropertiesRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
DevicePropertiesRequest::DevicePropertiesRequest()
{
    Init();
}

DevicePropertiesRequest::~DevicePropertiesRequest()
{
}

bool
DevicePropertiesRequest::operator==(const DevicePropertiesRequest& _o) const
{
    if ((!((addresses()) == ((_o).addresses())))) {
        return false;
    }
    return true;
}

void
DevicePropertiesRequest::Init()
{
}

void
DevicePropertiesRequest::Assign(const InfallibleTArray<nsString>& _addresses)
{
    addresses_ = _addresses;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ConnectRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
ConnectRequest::ConnectRequest()
{
    Init();
}

ConnectRequest::~ConnectRequest()
{
}

bool
ConnectRequest::operator==(const ConnectRequest& _o) const
{
    if ((!((address()) == ((_o).address())))) {
        return false;
    }
    if ((!((adapterPath()) == ((_o).adapterPath())))) {
        return false;
    }
    if ((!((profileId()) == ((_o).profileId())))) {
        return false;
    }
    return true;
}

void
ConnectRequest::Init()
{
}

void
ConnectRequest::Assign(
        const nsString& _address,
        const nsString& _adapterPath,
        const uint16_t& _profileId)
{
    address_ = _address;
    adapterPath_ = _adapterPath;
    profileId_ = _profileId;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DisconnectRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
DisconnectRequest::DisconnectRequest()
{
    Init();
}

DisconnectRequest::~DisconnectRequest()
{
}

bool
DisconnectRequest::operator==(const DisconnectRequest& _o) const
{
    if ((!((profileId()) == ((_o).profileId())))) {
        return false;
    }
    return true;
}

void
DisconnectRequest::Init()
{
}

void
DisconnectRequest::Assign(const uint16_t& _profileId)
{
    profileId_ = _profileId;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SendFileRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
SendFileRequest::SendFileRequest()
{
    Init();
}

SendFileRequest::~SendFileRequest()
{
}

bool
SendFileRequest::operator==(const SendFileRequest& _o) const
{
    if ((!((devicePath()) == ((_o).devicePath())))) {
        return false;
    }
    if ((!((blobParent()) == ((_o).blobParent())))) {
        return false;
    }
    if ((!((blobChild()) == ((_o).blobChild())))) {
        return false;
    }
    return true;
}

void
SendFileRequest::Init()
{
    blobParent_ = 0;
    blobChild_ = 0;
}

void
SendFileRequest::Assign(
        const nsString& _devicePath,
        PBlobParent* _blobParent,
        PBlobChild* _blobChild)
{
    devicePath_ = _devicePath;
    blobParent_ = _blobParent;
    blobChild_ = _blobChild;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StopSendingFileRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
StopSendingFileRequest::StopSendingFileRequest()
{
    Init();
}

StopSendingFileRequest::~StopSendingFileRequest()
{
}

bool
StopSendingFileRequest::operator==(const StopSendingFileRequest& _o) const
{
    if ((!((devicePath()) == ((_o).devicePath())))) {
        return false;
    }
    return true;
}

void
StopSendingFileRequest::Init()
{
}

void
StopSendingFileRequest::Assign(const nsString& _devicePath)
{
    devicePath_ = _devicePath;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ConfirmReceivingFileRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
ConfirmReceivingFileRequest::ConfirmReceivingFileRequest()
{
    Init();
}

ConfirmReceivingFileRequest::~ConfirmReceivingFileRequest()
{
}

bool
ConfirmReceivingFileRequest::operator==(const ConfirmReceivingFileRequest& _o) const
{
    if ((!((devicePath()) == ((_o).devicePath())))) {
        return false;
    }
    return true;
}

void
ConfirmReceivingFileRequest::Init()
{
}

void
ConfirmReceivingFileRequest::Assign(const nsString& _devicePath)
{
    devicePath_ = _devicePath;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DenyReceivingFileRequest|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
DenyReceivingFileRequest::DenyReceivingFileRequest()
{
    Init();
}

DenyReceivingFileRequest::~DenyReceivingFileRequest()
{
}

bool
DenyReceivingFileRequest::operator==(const DenyReceivingFileRequest& _o) const
{
    if ((!((devicePath()) == ((_o).devicePath())))) {
        return false;
    }
    return true;
}

void
DenyReceivingFileRequest::Init()
{
}

void
DenyReceivingFileRequest::Assign(const nsString& _devicePath)
{
    devicePath_ = _devicePath;
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union Request|
//
namespace mozilla {
namespace dom {
namespace bluetooth {
bool
Request::MaybeDestroy(Type aNewType)
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TDefaultAdapterPathRequest:
        {
            (ptr_DefaultAdapterPathRequest())->~DefaultAdapterPathRequest__tdef();
            break;
        }
    case TSetPropertyRequest:
        {
            (ptr_SetPropertyRequest())->~SetPropertyRequest__tdef();
            break;
        }
    case TGetPropertyRequest:
        {
            (ptr_GetPropertyRequest())->~GetPropertyRequest__tdef();
            break;
        }
    case TStartDiscoveryRequest:
        {
            (ptr_StartDiscoveryRequest())->~StartDiscoveryRequest__tdef();
            break;
        }
    case TStopDiscoveryRequest:
        {
            (ptr_StopDiscoveryRequest())->~StopDiscoveryRequest__tdef();
            break;
        }
    case TPairRequest:
        {
            (ptr_PairRequest())->~PairRequest__tdef();
            break;
        }
    case TUnpairRequest:
        {
            (ptr_UnpairRequest())->~UnpairRequest__tdef();
            break;
        }
    case TSetPinCodeRequest:
        {
            (ptr_SetPinCodeRequest())->~SetPinCodeRequest__tdef();
            break;
        }
    case TSetPasskeyRequest:
        {
            (ptr_SetPasskeyRequest())->~SetPasskeyRequest__tdef();
            break;
        }
    case TConfirmPairingConfirmationRequest:
        {
            (ptr_ConfirmPairingConfirmationRequest())->~ConfirmPairingConfirmationRequest__tdef();
            break;
        }
    case TDenyPairingConfirmationRequest:
        {
            (ptr_DenyPairingConfirmationRequest())->~DenyPairingConfirmationRequest__tdef();
            break;
        }
    case TConfirmAuthorizationRequest:
        {
            (ptr_ConfirmAuthorizationRequest())->~ConfirmAuthorizationRequest__tdef();
            break;
        }
    case TDenyAuthorizationRequest:
        {
            (ptr_DenyAuthorizationRequest())->~DenyAuthorizationRequest__tdef();
            break;
        }
    case TDevicePropertiesRequest:
        {
            (ptr_DevicePropertiesRequest())->~DevicePropertiesRequest__tdef();
            break;
        }
    case TConnectRequest:
        {
            (ptr_ConnectRequest())->~ConnectRequest__tdef();
            break;
        }
    case TDisconnectRequest:
        {
            (ptr_DisconnectRequest())->~DisconnectRequest__tdef();
            break;
        }
    case TSendFileRequest:
        {
            (ptr_SendFileRequest())->~SendFileRequest__tdef();
            break;
        }
    case TStopSendingFileRequest:
        {
            (ptr_StopSendingFileRequest())->~StopSendingFileRequest__tdef();
            break;
        }
    case TConfirmReceivingFileRequest:
        {
            (ptr_ConfirmReceivingFileRequest())->~ConfirmReceivingFileRequest__tdef();
            break;
        }
    case TDenyReceivingFileRequest:
        {
            (ptr_DenyReceivingFileRequest())->~DenyReceivingFileRequest__tdef();
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("not reached");
            break;
        }
    }
    return true;
}

Request::Request(const DefaultAdapterPathRequest& aOther)
{
    new (ptr_DefaultAdapterPathRequest()) DefaultAdapterPathRequest(aOther);
    mType = TDefaultAdapterPathRequest;
}

Request::Request(const SetPropertyRequest& aOther)
{
    new (ptr_SetPropertyRequest()) SetPropertyRequest(aOther);
    mType = TSetPropertyRequest;
}

Request::Request(const GetPropertyRequest& aOther)
{
    new (ptr_GetPropertyRequest()) GetPropertyRequest(aOther);
    mType = TGetPropertyRequest;
}

Request::Request(const StartDiscoveryRequest& aOther)
{
    new (ptr_StartDiscoveryRequest()) StartDiscoveryRequest(aOther);
    mType = TStartDiscoveryRequest;
}

Request::Request(const StopDiscoveryRequest& aOther)
{
    new (ptr_StopDiscoveryRequest()) StopDiscoveryRequest(aOther);
    mType = TStopDiscoveryRequest;
}

Request::Request(const PairRequest& aOther)
{
    new (ptr_PairRequest()) PairRequest(aOther);
    mType = TPairRequest;
}

Request::Request(const UnpairRequest& aOther)
{
    new (ptr_UnpairRequest()) UnpairRequest(aOther);
    mType = TUnpairRequest;
}

Request::Request(const SetPinCodeRequest& aOther)
{
    new (ptr_SetPinCodeRequest()) SetPinCodeRequest(aOther);
    mType = TSetPinCodeRequest;
}

Request::Request(const SetPasskeyRequest& aOther)
{
    new (ptr_SetPasskeyRequest()) SetPasskeyRequest(aOther);
    mType = TSetPasskeyRequest;
}

Request::Request(const ConfirmPairingConfirmationRequest& aOther)
{
    new (ptr_ConfirmPairingConfirmationRequest()) ConfirmPairingConfirmationRequest(aOther);
    mType = TConfirmPairingConfirmationRequest;
}

Request::Request(const DenyPairingConfirmationRequest& aOther)
{
    new (ptr_DenyPairingConfirmationRequest()) DenyPairingConfirmationRequest(aOther);
    mType = TDenyPairingConfirmationRequest;
}

Request::Request(const ConfirmAuthorizationRequest& aOther)
{
    new (ptr_ConfirmAuthorizationRequest()) ConfirmAuthorizationRequest(aOther);
    mType = TConfirmAuthorizationRequest;
}

Request::Request(const DenyAuthorizationRequest& aOther)
{
    new (ptr_DenyAuthorizationRequest()) DenyAuthorizationRequest(aOther);
    mType = TDenyAuthorizationRequest;
}

Request::Request(const DevicePropertiesRequest& aOther)
{
    new (ptr_DevicePropertiesRequest()) DevicePropertiesRequest(aOther);
    mType = TDevicePropertiesRequest;
}

Request::Request(const ConnectRequest& aOther)
{
    new (ptr_ConnectRequest()) ConnectRequest(aOther);
    mType = TConnectRequest;
}

Request::Request(const DisconnectRequest& aOther)
{
    new (ptr_DisconnectRequest()) DisconnectRequest(aOther);
    mType = TDisconnectRequest;
}

Request::Request(const SendFileRequest& aOther)
{
    new (ptr_SendFileRequest()) SendFileRequest(aOther);
    mType = TSendFileRequest;
}

Request::Request(const StopSendingFileRequest& aOther)
{
    new (ptr_StopSendingFileRequest()) StopSendingFileRequest(aOther);
    mType = TStopSendingFileRequest;
}

Request::Request(const ConfirmReceivingFileRequest& aOther)
{
    new (ptr_ConfirmReceivingFileRequest()) ConfirmReceivingFileRequest(aOther);
    mType = TConfirmReceivingFileRequest;
}

Request::Request(const DenyReceivingFileRequest& aOther)
{
    new (ptr_DenyReceivingFileRequest()) DenyReceivingFileRequest(aOther);
    mType = TDenyReceivingFileRequest;
}

Request::Request(const Request& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TDefaultAdapterPathRequest:
        {
            new (ptr_DefaultAdapterPathRequest()) DefaultAdapterPathRequest((aOther).get_DefaultAdapterPathRequest());
            break;
        }
    case TSetPropertyRequest:
        {
            new (ptr_SetPropertyRequest()) SetPropertyRequest((aOther).get_SetPropertyRequest());
            break;
        }
    case TGetPropertyRequest:
        {
            new (ptr_GetPropertyRequest()) GetPropertyRequest((aOther).get_GetPropertyRequest());
            break;
        }
    case TStartDiscoveryRequest:
        {
            new (ptr_StartDiscoveryRequest()) StartDiscoveryRequest((aOther).get_StartDiscoveryRequest());
            break;
        }
    case TStopDiscoveryRequest:
        {
            new (ptr_StopDiscoveryRequest()) StopDiscoveryRequest((aOther).get_StopDiscoveryRequest());
            break;
        }
    case TPairRequest:
        {
            new (ptr_PairRequest()) PairRequest((aOther).get_PairRequest());
            break;
        }
    case TUnpairRequest:
        {
            new (ptr_UnpairRequest()) UnpairRequest((aOther).get_UnpairRequest());
            break;
        }
    case TSetPinCodeRequest:
        {
            new (ptr_SetPinCodeRequest()) SetPinCodeRequest((aOther).get_SetPinCodeRequest());
            break;
        }
    case TSetPasskeyRequest:
        {
            new (ptr_SetPasskeyRequest()) SetPasskeyRequest((aOther).get_SetPasskeyRequest());
            break;
        }
    case TConfirmPairingConfirmationRequest:
        {
            new (ptr_ConfirmPairingConfirmationRequest()) ConfirmPairingConfirmationRequest((aOther).get_ConfirmPairingConfirmationRequest());
            break;
        }
    case TDenyPairingConfirmationRequest:
        {
            new (ptr_DenyPairingConfirmationRequest()) DenyPairingConfirmationRequest((aOther).get_DenyPairingConfirmationRequest());
            break;
        }
    case TConfirmAuthorizationRequest:
        {
            new (ptr_ConfirmAuthorizationRequest()) ConfirmAuthorizationRequest((aOther).get_ConfirmAuthorizationRequest());
            break;
        }
    case TDenyAuthorizationRequest:
        {
            new (ptr_DenyAuthorizationRequest()) DenyAuthorizationRequest((aOther).get_DenyAuthorizationRequest());
            break;
        }
    case TDevicePropertiesRequest:
        {
            new (ptr_DevicePropertiesRequest()) DevicePropertiesRequest((aOther).get_DevicePropertiesRequest());
            break;
        }
    case TConnectRequest:
        {
            new (ptr_ConnectRequest()) ConnectRequest((aOther).get_ConnectRequest());
            break;
        }
    case TDisconnectRequest:
        {
            new (ptr_DisconnectRequest()) DisconnectRequest((aOther).get_DisconnectRequest());
            break;
        }
    case TSendFileRequest:
        {
            new (ptr_SendFileRequest()) SendFileRequest((aOther).get_SendFileRequest());
            break;
        }
    case TStopSendingFileRequest:
        {
            new (ptr_StopSendingFileRequest()) StopSendingFileRequest((aOther).get_StopSendingFileRequest());
            break;
        }
    case TConfirmReceivingFileRequest:
        {
            new (ptr_ConfirmReceivingFileRequest()) ConfirmReceivingFileRequest((aOther).get_ConfirmReceivingFileRequest());
            break;
        }
    case TDenyReceivingFileRequest:
        {
            new (ptr_DenyReceivingFileRequest()) DenyReceivingFileRequest((aOther).get_DenyReceivingFileRequest());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

Request::~Request()
{
    MaybeDestroy(T__None);
}

Request&
Request::operator=(const DefaultAdapterPathRequest& aRhs)
{
    if (MaybeDestroy(TDefaultAdapterPathRequest)) {
        new (ptr_DefaultAdapterPathRequest()) DefaultAdapterPathRequest;
    }
    (*(ptr_DefaultAdapterPathRequest())) = aRhs;
    mType = TDefaultAdapterPathRequest;
    return (*(this));
}

Request&
Request::operator=(const SetPropertyRequest& aRhs)
{
    if (MaybeDestroy(TSetPropertyRequest)) {
        new (ptr_SetPropertyRequest()) SetPropertyRequest;
    }
    (*(ptr_SetPropertyRequest())) = aRhs;
    mType = TSetPropertyRequest;
    return (*(this));
}

Request&
Request::operator=(const GetPropertyRequest& aRhs)
{
    if (MaybeDestroy(TGetPropertyRequest)) {
        new (ptr_GetPropertyRequest()) GetPropertyRequest;
    }
    (*(ptr_GetPropertyRequest())) = aRhs;
    mType = TGetPropertyRequest;
    return (*(this));
}

Request&
Request::operator=(const StartDiscoveryRequest& aRhs)
{
    if (MaybeDestroy(TStartDiscoveryRequest)) {
        new (ptr_StartDiscoveryRequest()) StartDiscoveryRequest;
    }
    (*(ptr_StartDiscoveryRequest())) = aRhs;
    mType = TStartDiscoveryRequest;
    return (*(this));
}

Request&
Request::operator=(const StopDiscoveryRequest& aRhs)
{
    if (MaybeDestroy(TStopDiscoveryRequest)) {
        new (ptr_StopDiscoveryRequest()) StopDiscoveryRequest;
    }
    (*(ptr_StopDiscoveryRequest())) = aRhs;
    mType = TStopDiscoveryRequest;
    return (*(this));
}

Request&
Request::operator=(const PairRequest& aRhs)
{
    if (MaybeDestroy(TPairRequest)) {
        new (ptr_PairRequest()) PairRequest;
    }
    (*(ptr_PairRequest())) = aRhs;
    mType = TPairRequest;
    return (*(this));
}

Request&
Request::operator=(const UnpairRequest& aRhs)
{
    if (MaybeDestroy(TUnpairRequest)) {
        new (ptr_UnpairRequest()) UnpairRequest;
    }
    (*(ptr_UnpairRequest())) = aRhs;
    mType = TUnpairRequest;
    return (*(this));
}

Request&
Request::operator=(const SetPinCodeRequest& aRhs)
{
    if (MaybeDestroy(TSetPinCodeRequest)) {
        new (ptr_SetPinCodeRequest()) SetPinCodeRequest;
    }
    (*(ptr_SetPinCodeRequest())) = aRhs;
    mType = TSetPinCodeRequest;
    return (*(this));
}

Request&
Request::operator=(const SetPasskeyRequest& aRhs)
{
    if (MaybeDestroy(TSetPasskeyRequest)) {
        new (ptr_SetPasskeyRequest()) SetPasskeyRequest;
    }
    (*(ptr_SetPasskeyRequest())) = aRhs;
    mType = TSetPasskeyRequest;
    return (*(this));
}

Request&
Request::operator=(const ConfirmPairingConfirmationRequest& aRhs)
{
    if (MaybeDestroy(TConfirmPairingConfirmationRequest)) {
        new (ptr_ConfirmPairingConfirmationRequest()) ConfirmPairingConfirmationRequest;
    }
    (*(ptr_ConfirmPairingConfirmationRequest())) = aRhs;
    mType = TConfirmPairingConfirmationRequest;
    return (*(this));
}

Request&
Request::operator=(const DenyPairingConfirmationRequest& aRhs)
{
    if (MaybeDestroy(TDenyPairingConfirmationRequest)) {
        new (ptr_DenyPairingConfirmationRequest()) DenyPairingConfirmationRequest;
    }
    (*(ptr_DenyPairingConfirmationRequest())) = aRhs;
    mType = TDenyPairingConfirmationRequest;
    return (*(this));
}

Request&
Request::operator=(const ConfirmAuthorizationRequest& aRhs)
{
    if (MaybeDestroy(TConfirmAuthorizationRequest)) {
        new (ptr_ConfirmAuthorizationRequest()) ConfirmAuthorizationRequest;
    }
    (*(ptr_ConfirmAuthorizationRequest())) = aRhs;
    mType = TConfirmAuthorizationRequest;
    return (*(this));
}

Request&
Request::operator=(const DenyAuthorizationRequest& aRhs)
{
    if (MaybeDestroy(TDenyAuthorizationRequest)) {
        new (ptr_DenyAuthorizationRequest()) DenyAuthorizationRequest;
    }
    (*(ptr_DenyAuthorizationRequest())) = aRhs;
    mType = TDenyAuthorizationRequest;
    return (*(this));
}

Request&
Request::operator=(const DevicePropertiesRequest& aRhs)
{
    if (MaybeDestroy(TDevicePropertiesRequest)) {
        new (ptr_DevicePropertiesRequest()) DevicePropertiesRequest;
    }
    (*(ptr_DevicePropertiesRequest())) = aRhs;
    mType = TDevicePropertiesRequest;
    return (*(this));
}

Request&
Request::operator=(const ConnectRequest& aRhs)
{
    if (MaybeDestroy(TConnectRequest)) {
        new (ptr_ConnectRequest()) ConnectRequest;
    }
    (*(ptr_ConnectRequest())) = aRhs;
    mType = TConnectRequest;
    return (*(this));
}

Request&
Request::operator=(const DisconnectRequest& aRhs)
{
    if (MaybeDestroy(TDisconnectRequest)) {
        new (ptr_DisconnectRequest()) DisconnectRequest;
    }
    (*(ptr_DisconnectRequest())) = aRhs;
    mType = TDisconnectRequest;
    return (*(this));
}

Request&
Request::operator=(const SendFileRequest& aRhs)
{
    if (MaybeDestroy(TSendFileRequest)) {
        new (ptr_SendFileRequest()) SendFileRequest;
    }
    (*(ptr_SendFileRequest())) = aRhs;
    mType = TSendFileRequest;
    return (*(this));
}

Request&
Request::operator=(const StopSendingFileRequest& aRhs)
{
    if (MaybeDestroy(TStopSendingFileRequest)) {
        new (ptr_StopSendingFileRequest()) StopSendingFileRequest;
    }
    (*(ptr_StopSendingFileRequest())) = aRhs;
    mType = TStopSendingFileRequest;
    return (*(this));
}

Request&
Request::operator=(const ConfirmReceivingFileRequest& aRhs)
{
    if (MaybeDestroy(TConfirmReceivingFileRequest)) {
        new (ptr_ConfirmReceivingFileRequest()) ConfirmReceivingFileRequest;
    }
    (*(ptr_ConfirmReceivingFileRequest())) = aRhs;
    mType = TConfirmReceivingFileRequest;
    return (*(this));
}

Request&
Request::operator=(const DenyReceivingFileRequest& aRhs)
{
    if (MaybeDestroy(TDenyReceivingFileRequest)) {
        new (ptr_DenyReceivingFileRequest()) DenyReceivingFileRequest;
    }
    (*(ptr_DenyReceivingFileRequest())) = aRhs;
    mType = TDenyReceivingFileRequest;
    return (*(this));
}

Request&
Request::operator=(const Request& aRhs)
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TDefaultAdapterPathRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_DefaultAdapterPathRequest()) DefaultAdapterPathRequest;
            }
            (*(ptr_DefaultAdapterPathRequest())) = (aRhs).get_DefaultAdapterPathRequest();
            break;
        }
    case TSetPropertyRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_SetPropertyRequest()) SetPropertyRequest;
            }
            (*(ptr_SetPropertyRequest())) = (aRhs).get_SetPropertyRequest();
            break;
        }
    case TGetPropertyRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_GetPropertyRequest()) GetPropertyRequest;
            }
            (*(ptr_GetPropertyRequest())) = (aRhs).get_GetPropertyRequest();
            break;
        }
    case TStartDiscoveryRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_StartDiscoveryRequest()) StartDiscoveryRequest;
            }
            (*(ptr_StartDiscoveryRequest())) = (aRhs).get_StartDiscoveryRequest();
            break;
        }
    case TStopDiscoveryRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_StopDiscoveryRequest()) StopDiscoveryRequest;
            }
            (*(ptr_StopDiscoveryRequest())) = (aRhs).get_StopDiscoveryRequest();
            break;
        }
    case TPairRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_PairRequest()) PairRequest;
            }
            (*(ptr_PairRequest())) = (aRhs).get_PairRequest();
            break;
        }
    case TUnpairRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_UnpairRequest()) UnpairRequest;
            }
            (*(ptr_UnpairRequest())) = (aRhs).get_UnpairRequest();
            break;
        }
    case TSetPinCodeRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_SetPinCodeRequest()) SetPinCodeRequest;
            }
            (*(ptr_SetPinCodeRequest())) = (aRhs).get_SetPinCodeRequest();
            break;
        }
    case TSetPasskeyRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_SetPasskeyRequest()) SetPasskeyRequest;
            }
            (*(ptr_SetPasskeyRequest())) = (aRhs).get_SetPasskeyRequest();
            break;
        }
    case TConfirmPairingConfirmationRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_ConfirmPairingConfirmationRequest()) ConfirmPairingConfirmationRequest;
            }
            (*(ptr_ConfirmPairingConfirmationRequest())) = (aRhs).get_ConfirmPairingConfirmationRequest();
            break;
        }
    case TDenyPairingConfirmationRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_DenyPairingConfirmationRequest()) DenyPairingConfirmationRequest;
            }
            (*(ptr_DenyPairingConfirmationRequest())) = (aRhs).get_DenyPairingConfirmationRequest();
            break;
        }
    case TConfirmAuthorizationRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_ConfirmAuthorizationRequest()) ConfirmAuthorizationRequest;
            }
            (*(ptr_ConfirmAuthorizationRequest())) = (aRhs).get_ConfirmAuthorizationRequest();
            break;
        }
    case TDenyAuthorizationRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_DenyAuthorizationRequest()) DenyAuthorizationRequest;
            }
            (*(ptr_DenyAuthorizationRequest())) = (aRhs).get_DenyAuthorizationRequest();
            break;
        }
    case TDevicePropertiesRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_DevicePropertiesRequest()) DevicePropertiesRequest;
            }
            (*(ptr_DevicePropertiesRequest())) = (aRhs).get_DevicePropertiesRequest();
            break;
        }
    case TConnectRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_ConnectRequest()) ConnectRequest;
            }
            (*(ptr_ConnectRequest())) = (aRhs).get_ConnectRequest();
            break;
        }
    case TDisconnectRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_DisconnectRequest()) DisconnectRequest;
            }
            (*(ptr_DisconnectRequest())) = (aRhs).get_DisconnectRequest();
            break;
        }
    case TSendFileRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_SendFileRequest()) SendFileRequest;
            }
            (*(ptr_SendFileRequest())) = (aRhs).get_SendFileRequest();
            break;
        }
    case TStopSendingFileRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_StopSendingFileRequest()) StopSendingFileRequest;
            }
            (*(ptr_StopSendingFileRequest())) = (aRhs).get_StopSendingFileRequest();
            break;
        }
    case TConfirmReceivingFileRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_ConfirmReceivingFileRequest()) ConfirmReceivingFileRequest;
            }
            (*(ptr_ConfirmReceivingFileRequest())) = (aRhs).get_ConfirmReceivingFileRequest();
            break;
        }
    case TDenyReceivingFileRequest:
        {
            if (MaybeDestroy(t)) {
                new (ptr_DenyReceivingFileRequest()) DenyReceivingFileRequest;
            }
            (*(ptr_DenyReceivingFileRequest())) = (aRhs).get_DenyReceivingFileRequest();
            break;
        }
    case T__None:
        {
            MaybeDestroy(t);
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

bool
Request::operator==(const DefaultAdapterPathRequest& aRhs) const
{
    return (get_DefaultAdapterPathRequest()) == (aRhs);
}

bool
Request::operator==(const SetPropertyRequest& aRhs) const
{
    return (get_SetPropertyRequest()) == (aRhs);
}

bool
Request::operator==(const GetPropertyRequest& aRhs) const
{
    return (get_GetPropertyRequest()) == (aRhs);
}

bool
Request::operator==(const StartDiscoveryRequest& aRhs) const
{
    return (get_StartDiscoveryRequest()) == (aRhs);
}

bool
Request::operator==(const StopDiscoveryRequest& aRhs) const
{
    return (get_StopDiscoveryRequest()) == (aRhs);
}

bool
Request::operator==(const PairRequest& aRhs) const
{
    return (get_PairRequest()) == (aRhs);
}

bool
Request::operator==(const UnpairRequest& aRhs) const
{
    return (get_UnpairRequest()) == (aRhs);
}

bool
Request::operator==(const SetPinCodeRequest& aRhs) const
{
    return (get_SetPinCodeRequest()) == (aRhs);
}

bool
Request::operator==(const SetPasskeyRequest& aRhs) const
{
    return (get_SetPasskeyRequest()) == (aRhs);
}

bool
Request::operator==(const ConfirmPairingConfirmationRequest& aRhs) const
{
    return (get_ConfirmPairingConfirmationRequest()) == (aRhs);
}

bool
Request::operator==(const DenyPairingConfirmationRequest& aRhs) const
{
    return (get_DenyPairingConfirmationRequest()) == (aRhs);
}

bool
Request::operator==(const ConfirmAuthorizationRequest& aRhs) const
{
    return (get_ConfirmAuthorizationRequest()) == (aRhs);
}

bool
Request::operator==(const DenyAuthorizationRequest& aRhs) const
{
    return (get_DenyAuthorizationRequest()) == (aRhs);
}

bool
Request::operator==(const DevicePropertiesRequest& aRhs) const
{
    return (get_DevicePropertiesRequest()) == (aRhs);
}

bool
Request::operator==(const ConnectRequest& aRhs) const
{
    return (get_ConnectRequest()) == (aRhs);
}

bool
Request::operator==(const DisconnectRequest& aRhs) const
{
    return (get_DisconnectRequest()) == (aRhs);
}

bool
Request::operator==(const SendFileRequest& aRhs) const
{
    return (get_SendFileRequest()) == (aRhs);
}

bool
Request::operator==(const StopSendingFileRequest& aRhs) const
{
    return (get_StopSendingFileRequest()) == (aRhs);
}

bool
Request::operator==(const ConfirmReceivingFileRequest& aRhs) const
{
    return (get_ConfirmReceivingFileRequest()) == (aRhs);
}

bool
Request::operator==(const DenyReceivingFileRequest& aRhs) const
{
    return (get_DenyReceivingFileRequest()) == (aRhs);
}

bool
Request::operator==(const Request& aRhs) const
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case TDefaultAdapterPathRequest:
        {
            return (get_DefaultAdapterPathRequest()) == ((aRhs).get_DefaultAdapterPathRequest());
        }
    case TSetPropertyRequest:
        {
            return (get_SetPropertyRequest()) == ((aRhs).get_SetPropertyRequest());
        }
    case TGetPropertyRequest:
        {
            return (get_GetPropertyRequest()) == ((aRhs).get_GetPropertyRequest());
        }
    case TStartDiscoveryRequest:
        {
            return (get_StartDiscoveryRequest()) == ((aRhs).get_StartDiscoveryRequest());
        }
    case TStopDiscoveryRequest:
        {
            return (get_StopDiscoveryRequest()) == ((aRhs).get_StopDiscoveryRequest());
        }
    case TPairRequest:
        {
            return (get_PairRequest()) == ((aRhs).get_PairRequest());
        }
    case TUnpairRequest:
        {
            return (get_UnpairRequest()) == ((aRhs).get_UnpairRequest());
        }
    case TSetPinCodeRequest:
        {
            return (get_SetPinCodeRequest()) == ((aRhs).get_SetPinCodeRequest());
        }
    case TSetPasskeyRequest:
        {
            return (get_SetPasskeyRequest()) == ((aRhs).get_SetPasskeyRequest());
        }
    case TConfirmPairingConfirmationRequest:
        {
            return (get_ConfirmPairingConfirmationRequest()) == ((aRhs).get_ConfirmPairingConfirmationRequest());
        }
    case TDenyPairingConfirmationRequest:
        {
            return (get_DenyPairingConfirmationRequest()) == ((aRhs).get_DenyPairingConfirmationRequest());
        }
    case TConfirmAuthorizationRequest:
        {
            return (get_ConfirmAuthorizationRequest()) == ((aRhs).get_ConfirmAuthorizationRequest());
        }
    case TDenyAuthorizationRequest:
        {
            return (get_DenyAuthorizationRequest()) == ((aRhs).get_DenyAuthorizationRequest());
        }
    case TDevicePropertiesRequest:
        {
            return (get_DevicePropertiesRequest()) == ((aRhs).get_DevicePropertiesRequest());
        }
    case TConnectRequest:
        {
            return (get_ConnectRequest()) == ((aRhs).get_ConnectRequest());
        }
    case TDisconnectRequest:
        {
            return (get_DisconnectRequest()) == ((aRhs).get_DisconnectRequest());
        }
    case TSendFileRequest:
        {
            return (get_SendFileRequest()) == ((aRhs).get_SendFileRequest());
        }
    case TStopSendingFileRequest:
        {
            return (get_StopSendingFileRequest()) == ((aRhs).get_StopSendingFileRequest());
        }
    case TConfirmReceivingFileRequest:
        {
            return (get_ConfirmReceivingFileRequest()) == ((aRhs).get_ConfirmReceivingFileRequest());
        }
    case TDenyReceivingFileRequest:
        {
            return (get_DenyReceivingFileRequest()) == ((aRhs).get_DenyReceivingFileRequest());
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return false;
        }
    }
}

} // namespace bluetooth
} // namespace dom
} // namespace mozilla
