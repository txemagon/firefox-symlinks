//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBlob.h"

namespace mozilla {
namespace dom {
namespace PBlob {

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next)
{
    switch (from) {
    case __Null:
    case __Error:
        if ((Msg___delete____ID) == ((trigger).mMsg)) {
            (*(next)) = __Dead;
            return true;
        }
        return (__Null) == (from);
    case __Dead:
        NS_RUNTIMEABORT("__delete__()d actor");
        return false;
    case __Dying:
        NS_RUNTIMEABORT("__delete__()d (and unexpectedly dying) actor");
        return false;
    default:
        NS_RUNTIMEABORT("corrupted actor state");
        return false;
    }
    (*(next)) = __Error;
    return false;
}

} // namespace PBlob
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union ResolveMysteryParams|
//
namespace mozilla {
namespace dom {
bool
ResolveMysteryParams::MaybeDestroy(Type aNewType)
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TNormalBlobConstructorParams:
        {
            (ptr_NormalBlobConstructorParams())->~NormalBlobConstructorParams__tdef();
            break;
        }
    case TFileBlobConstructorParams:
        {
            (ptr_FileBlobConstructorParams())->~FileBlobConstructorParams__tdef();
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("not reached");
            break;
        }
    }
    return true;
}

ResolveMysteryParams::ResolveMysteryParams(const NormalBlobConstructorParams& aOther)
{
    new (ptr_NormalBlobConstructorParams()) NormalBlobConstructorParams(aOther);
    mType = TNormalBlobConstructorParams;
}

ResolveMysteryParams::ResolveMysteryParams(const FileBlobConstructorParams& aOther)
{
    new (ptr_FileBlobConstructorParams()) FileBlobConstructorParams(aOther);
    mType = TFileBlobConstructorParams;
}

ResolveMysteryParams::ResolveMysteryParams(const ResolveMysteryParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TNormalBlobConstructorParams:
        {
            new (ptr_NormalBlobConstructorParams()) NormalBlobConstructorParams((aOther).get_NormalBlobConstructorParams());
            break;
        }
    case TFileBlobConstructorParams:
        {
            new (ptr_FileBlobConstructorParams()) FileBlobConstructorParams((aOther).get_FileBlobConstructorParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

ResolveMysteryParams::~ResolveMysteryParams()
{
    MaybeDestroy(T__None);
}

ResolveMysteryParams&
ResolveMysteryParams::operator=(const NormalBlobConstructorParams& aRhs)
{
    if (MaybeDestroy(TNormalBlobConstructorParams)) {
        new (ptr_NormalBlobConstructorParams()) NormalBlobConstructorParams;
    }
    (*(ptr_NormalBlobConstructorParams())) = aRhs;
    mType = TNormalBlobConstructorParams;
    return (*(this));
}

ResolveMysteryParams&
ResolveMysteryParams::operator=(const FileBlobConstructorParams& aRhs)
{
    if (MaybeDestroy(TFileBlobConstructorParams)) {
        new (ptr_FileBlobConstructorParams()) FileBlobConstructorParams;
    }
    (*(ptr_FileBlobConstructorParams())) = aRhs;
    mType = TFileBlobConstructorParams;
    return (*(this));
}

ResolveMysteryParams&
ResolveMysteryParams::operator=(const ResolveMysteryParams& aRhs)
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TNormalBlobConstructorParams:
        {
            if (MaybeDestroy(t)) {
                new (ptr_NormalBlobConstructorParams()) NormalBlobConstructorParams;
            }
            (*(ptr_NormalBlobConstructorParams())) = (aRhs).get_NormalBlobConstructorParams();
            break;
        }
    case TFileBlobConstructorParams:
        {
            if (MaybeDestroy(t)) {
                new (ptr_FileBlobConstructorParams()) FileBlobConstructorParams;
            }
            (*(ptr_FileBlobConstructorParams())) = (aRhs).get_FileBlobConstructorParams();
            break;
        }
    case T__None:
        {
            MaybeDestroy(t);
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

bool
ResolveMysteryParams::operator==(const NormalBlobConstructorParams& aRhs) const
{
    return (get_NormalBlobConstructorParams()) == (aRhs);
}

bool
ResolveMysteryParams::operator==(const FileBlobConstructorParams& aRhs) const
{
    return (get_FileBlobConstructorParams()) == (aRhs);
}

bool
ResolveMysteryParams::operator==(const ResolveMysteryParams& aRhs) const
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case TNormalBlobConstructorParams:
        {
            return (get_NormalBlobConstructorParams()) == ((aRhs).get_NormalBlobConstructorParams());
        }
    case TFileBlobConstructorParams:
        {
            return (get_FileBlobConstructorParams()) == ((aRhs).get_FileBlobConstructorParams());
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return false;
        }
    }
}

} // namespace dom
} // namespace mozilla
