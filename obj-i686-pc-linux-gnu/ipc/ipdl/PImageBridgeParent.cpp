//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PImageBridgeParent.h"
#ifdef MOZ_CRASHREPORTER
#  include "nsXULAppAPI.h"
#endif 

#include "mozilla/layers/PGrallocBufferParent.h"
#include "mozilla/layers/PImageContainerParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::layers::FrameMetrics FrameMetrics;
typedef mozilla::GraphicsFilterType GraphicsFilterType;
typedef mozilla::layers::MagicGrallocBufferHandle MagicGrallocBufferHandle;
typedef mozilla::layers::MaybeMagicGrallocBufferHandle MaybeMagicGrallocBufferHandle;
typedef mozilla::layers::RGBImage RGBImage;
typedef mozilla::layers::SharedImage SharedImage;
typedef mozilla::layers::SharedImageID SharedImageID;
typedef mozilla::layers::SharedTextureDescriptor SharedTextureDescriptor;
typedef mozilla::gl::SharedTextureHandle SharedTextureHandle;
typedef mozilla::gl::GLContext::SharedTextureShareType SharedTextureShareType;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::layers::SurfaceDescriptor SurfaceDescriptor;
typedef mozilla::layers::SurfaceDescriptorD3D10 SurfaceDescriptorD3D10;
typedef mozilla::layers::SurfaceDescriptorGralloc SurfaceDescriptorGralloc;
typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
typedef mozilla::WindowsHandle WindowsHandle;
typedef mozilla::layers::YCbCrImage YCbCrImage;
typedef mozilla::layers::YUVImage YUVImage;
typedef mozilla::gfxContentType gfxContentType;
typedef mozilla::null_t null_t;
using mozilla::layers::PGrallocBufferParent;
using mozilla::layers::PImageContainerParent;

namespace mozilla {
namespace layers {


bool
PImageBridgeParent::RecvPGrallocBufferConstructor(
        PGrallocBufferParent* actor,
        const gfxIntSize& size,
        const uint32_t& format,
        const uint32_t& usage,
        MaybeMagicGrallocBufferHandle* handle)
{
    return true;
}

bool
PImageBridgeParent::RecvPImageContainerConstructor(
        PImageContainerParent* actor,
        uint64_t* id)
{
    return true;
}

void
PImageBridgeParent::ActorDestroy(ActorDestroyReason why)
{
}

void
PImageBridgeParent::ProcessingError(Result code)
{
}

bool
PImageBridgeParent::ShouldContinueFromReplyTimeout()
{
    return true;
}

void
PImageBridgeParent::EnteredCxxStack()
{
}

void
PImageBridgeParent::ExitedCxxStack()
{
}

void
PImageBridgeParent::EnteredCall()
{
}

void
PImageBridgeParent::ExitedCall()
{
}

PImageBridgeParent::PImageBridgeParent() :
    mChannel(ALLOW_THIS_IN_INITIALIZER_LIST(this)),
    mLastRouteId(1),
    mLastShmemId(1),
    mState(PImageBridge::__Start)
{
    MOZ_COUNT_CTOR(PImageBridgeParent);
}

PImageBridgeParent::~PImageBridgeParent()
{
    MOZ_COUNT_DTOR(PImageBridgeParent);
}

bool
PImageBridgeParent::Open(
        Channel::Transport* aTransport,
        ProcessHandle aOtherProcess,
        MessageLoop* aThread,
        AsyncChannel::Side aSide)
{
    mOtherProcess = aOtherProcess;
    return (mChannel).Open(aTransport, aThread, aSide);
}

bool
PImageBridgeParent::Open(
        AsyncChannel* aChannel,
        MessageLoop* aMessageLoop,
        AsyncChannel::Side aSide)
{
    mOtherProcess = 0;
    return (mChannel).Open(aChannel, aMessageLoop, aSide);
}

void
PImageBridgeParent::Close()
{
    (mChannel).Close();
}

void
PImageBridgeParent::SetReplyTimeoutMs(int32_t aTimeoutMs)
{
    (mChannel).SetReplyTimeoutMs(aTimeoutMs);
}

void
PImageBridgeParent::ManagedPImageContainerParent(InfallibleTArray<PImageContainerParent*>& aArr) const
{
    aArr = mManagedPImageContainerParent;
}

const InfallibleTArray<PImageContainerParent*>&
PImageBridgeParent::ManagedPImageContainerParent() const
{
    return mManagedPImageContainerParent;
}

void
PImageBridgeParent::ManagedPGrallocBufferParent(InfallibleTArray<PGrallocBufferParent*>& aArr) const
{
    aArr = mManagedPGrallocBufferParent;
}

const InfallibleTArray<PGrallocBufferParent*>&
PImageBridgeParent::ManagedPGrallocBufferParent() const
{
    return mManagedPGrallocBufferParent;
}

PImageBridge::State
PImageBridgeParent::state()
{
    return mState;
}

int32_t
PImageBridgeParent::Register(ChannelListener* aRouted)
{
    int32_t tmp = (++(mLastRouteId));
    (mActorMap).AddWithID(aRouted, tmp);
    return tmp;
}

int32_t
PImageBridgeParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    (mActorMap).AddWithID(aRouted, aId);
    return aId;
}

ChannelListener*
PImageBridgeParent::Lookup(int32_t aId)
{
    return (mActorMap).Lookup(aId);
}

void
PImageBridgeParent::Unregister(int32_t aId)
{
    return (mActorMap).Remove(aId);
}

void
PImageBridgeParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PImageContainerMsgStart:
        {
            PImageContainerParent* actor = static_cast<PImageContainerParent*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPImageContainerParent).NoIndex) != ((mManagedPImageContainerParent).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPImageContainerParent).RemoveElementSorted(actor);
            DeallocPImageContainer(actor);
            return;
        }
    case PGrallocBufferMsgStart:
        {
            PGrallocBufferParent* actor = static_cast<PGrallocBufferParent*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPGrallocBufferParent).NoIndex) != ((mManagedPGrallocBufferParent).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPGrallocBufferParent).RemoveElementSorted(actor);
            DeallocPGrallocBuffer(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PImageBridgeParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    nsAutoPtr<Shmem::SharedMemory> segment(Shmem::Alloc(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), aSize, aType, aUnsafe));
    if ((!(segment))) {
        return 0;
    }
    Shmem shmem(
            Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(),
            (segment).get(),
            (++(mLastShmemId)));
    Message* descriptor = (shmem).ShareTo(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), OtherProcess(), MSG_ROUTING_CONTROL);
    if ((!(descriptor))) {
        return 0;
    }
    if ((!((mChannel).Send(descriptor)))) {
    }
    (*(aId)) = (shmem).Id(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    (mShmemMap).AddWithID(segment, (*(aId)));
    return (segment).forget();
}

bool
PImageBridgeParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    Shmem shmem(
            Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(),
            segment,
            (++(mLastShmemId)));
    Message* descriptor = (shmem).ShareTo(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), OtherProcess(), MSG_ROUTING_CONTROL);
    if ((!(descriptor))) {
        return false;
    }
    if ((!((mChannel).Send(descriptor)))) {
    }
    (*(aId)) = (shmem).Id(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    (mShmemMap).AddWithID(segment, (*(aId)));
    (segment)->AddRef();
    return true;
}

Shmem::SharedMemory*
PImageBridgeParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mShmemMap).Lookup(aId);
}

bool
PImageBridgeParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mShmemMap).HasData(segment);
}

bool
PImageBridgeParent::DestroySharedMemory(Shmem& shmem)
{
    Shmem::id_t aId = (shmem).Id(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    Shmem::SharedMemory* segment = LookupSharedMemory(aId);
    if ((!(segment))) {
        return false;
    }
    Message* descriptor = (shmem).UnshareFrom(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), OtherProcess(), MSG_ROUTING_CONTROL);

    (mShmemMap).Remove(aId);
    Shmem::Dealloc(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), segment);

    return (descriptor) && ((mChannel).Send(descriptor));
}

ProcessHandle
PImageBridgeParent::OtherProcess() const
{
    return mOtherProcess;
}

AsyncChannel*
PImageBridgeParent::GetIPCChannel()
{
    return (&(mChannel));
}

PImageBridgeParent::Result
PImageBridgeParent::OnMessageReceived(const Message& __msg)
{
    int32_t __route = (__msg).routing_id();
    if ((MSG_ROUTING_CONTROL) != (__route)) {
        ChannelListener* __routed = Lookup(__route);
        if ((!(__routed))) {
            return MsgRouteError;
        }
        return (__routed)->OnMessageReceived(__msg);
    }

    switch ((__msg).type()) {
    default:
        {
            return MsgNotKnown;
        }
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            Shmem::id_t id;
            nsAutoPtr<Shmem::SharedMemory> rawmem(Shmem::OpenExisting(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), __msg, (&(id)), true));
            if ((!(rawmem))) {
                return MsgPayloadError;
            }
            (mShmemMap).AddWithID((rawmem).forget(), id);

            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            Shmem::id_t id;
            void* iter = 0;
            if ((!(IPC::ReadParam((&(__msg)), (&(iter)), (&(id)))))) {
                return MsgPayloadError;
            }
            (__msg).EndRead(iter);

            Shmem::SharedMemory* rawmem = LookupSharedMemory(id);
            if ((!(rawmem))) {
                return MsgValueError;
            }
            (mShmemMap).Remove(id);
            Shmem::Dealloc(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem);
            return MsgProcessed;
        }
    }
}

PImageBridgeParent::Result
PImageBridgeParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    int32_t __route = (__msg).routing_id();
    if ((MSG_ROUTING_CONTROL) != (__route)) {
        ChannelListener* __routed = Lookup(__route);
        if ((!(__routed))) {
            return MsgRouteError;
        }
        return (__routed)->OnMessageReceived(__msg, __reply);
    }

    switch ((__msg).type()) {
    case PImageBridge::Msg_PGrallocBufferConstructor__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PImageBridge::Msg_PGrallocBufferConstructor");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageBridge::Msg_PGrallocBufferConstructor*>((&(__msg))))->Log("[PImageBridgeParent] Received ", stderr);
            }

            void* __iter = 0;
            ActorHandle __handle;
            PGrallocBufferParent* actor;
            gfxIntSize size;
            uint32_t format;
            uint32_t usage;

            if ((!(Read((&(__handle)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(size)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(format)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(usage)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PImageBridge::Transition(mState, Trigger(Trigger::Recv, PImageBridge::Msg_PGrallocBufferConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            MaybeMagicGrallocBufferHandle handle;
            actor = AllocPGrallocBuffer(size, format, usage, (&(handle)));
            if ((!(actor))) {
                return MsgValueError;
            }
            (actor)->mId = RegisterID(actor, (__handle).mId);
            (actor)->mManager = this;
            (actor)->mChannel = (&(mChannel));
            (mManagedPGrallocBufferParent).InsertElementSorted(actor);
            (actor)->mState = mozilla::layers::PGrallocBuffer::__Start;

            int32_t __id = MSG_ROUTING_CONTROL;
            if ((!(RecvPGrallocBufferConstructor(actor, size, format, usage, (&(handle)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PGrallocBuffer returned error code");
                return MsgProcessingError;
            }
            __reply = new PImageBridge::Reply_PGrallocBufferConstructor();

            Write(handle, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageBridge::Reply_PGrallocBufferConstructor*>(__reply))->Log("[PImageBridgeParent] Sending reply ", stderr);
            }

            return MsgProcessed;
        }
    case PImageBridge::Msg_Stop__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PImageBridge::Msg_Stop");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageBridge::Msg_Stop*>((&(__msg))))->Log("[PImageBridgeParent] Received ", stderr);
            }

            if ((!(PImageBridge::Transition(mState, Trigger(Trigger::Recv, PImageBridge::Msg_Stop__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            int32_t __id = MSG_ROUTING_CONTROL;
            if ((!(RecvStop()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Stop returned error code");
                return MsgProcessingError;
            }

            __reply = new PImageBridge::Reply_Stop();

            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageBridge::Reply_Stop*>(__reply))->Log("[PImageBridgeParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PImageBridge::Msg_PImageContainerConstructor__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PImageBridge::Msg_PImageContainerConstructor");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageBridge::Msg_PImageContainerConstructor*>((&(__msg))))->Log("[PImageBridgeParent] Received ", stderr);
            }

            void* __iter = 0;
            ActorHandle __handle;
            PImageContainerParent* actor;

            if ((!(Read((&(__handle)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PImageBridge::Transition(mState, Trigger(Trigger::Recv, PImageBridge::Msg_PImageContainerConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            uint64_t id;
            actor = AllocPImageContainer((&(id)));
            if ((!(actor))) {
                return MsgValueError;
            }
            (actor)->mId = RegisterID(actor, (__handle).mId);
            (actor)->mManager = this;
            (actor)->mChannel = (&(mChannel));
            (mManagedPImageContainerParent).InsertElementSorted(actor);
            (actor)->mState = mozilla::layers::PImageContainer::__Start;

            int32_t __id = MSG_ROUTING_CONTROL;
            if ((!(RecvPImageContainerConstructor(actor, (&(id)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PImageContainer returned error code");
                return MsgProcessingError;
            }
            __reply = new PImageBridge::Reply_PImageContainerConstructor();

            Write(id, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageBridge::Reply_PImageContainerConstructor*>(__reply))->Log("[PImageBridgeParent] Sending reply ", stderr);
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PImageBridgeParent::Result
PImageBridgeParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    int32_t __route = (__msg).routing_id();
    if ((MSG_ROUTING_CONTROL) != (__route)) {
        ChannelListener* __routed = Lookup(__route);
        if ((!(__routed))) {
            return MsgRouteError;
        }
        return (__routed)->OnCallReceived(__msg, __reply);
    }

    return MsgNotKnown;
}

void
PImageBridgeParent::OnProcessingError(Result code)
{
    return ProcessingError(code);
}

int32_t
PImageBridgeParent::GetProtocolTypeId()
{
    return PImageBridgeMsgStart;
}

bool
PImageBridgeParent::OnReplyTimeout()
{
    return ShouldContinueFromReplyTimeout();
}

void
PImageBridgeParent::OnEnteredCxxStack()
{
    return EnteredCxxStack();
}

void
PImageBridgeParent::OnExitedCxxStack()
{
    return ExitedCxxStack();
}

void
PImageBridgeParent::OnEnteredCall()
{
    return EnteredCall();
}

void
PImageBridgeParent::OnExitedCall()
{
    return ExitedCall();
}

bool
PImageBridgeParent::IsOnCxxStack() const
{
    return (mChannel).IsOnCxxStack();
}

void
PImageBridgeParent::FlushPendingRPCQueue()
{
    ((this)->mChannel).FlushPendingRPCQueue();
}

void
PImageBridgeParent::OnChannelClose()
{
    DestroySubtree(NormalShutdown);
    DeallocSubtree();
    DeallocShmems();
}

void
PImageBridgeParent::OnChannelError()
{
    DestroySubtree(AbnormalShutdown);
    DeallocSubtree();
    DeallocShmems();
}

void
PImageBridgeParent::OnChannelConnected(int32_t pid)
{
}

bool
PImageBridgeParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PImageBridgeParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PImageBridgeParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PImageBridgeParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PImageBridgeParent::ProcessNativeEventsInRPCCall()
{
#ifdef OS_WIN
    (mChannel).ProcessNativeEventsInRPCCall();
#else 
    NS_RUNTIMEABORT("This method is Windows-only");
#endif 
}

void
PImageBridgeParent::SetOtherProcess(ProcessHandle aOtherProcess)
{
    mOtherProcess = aOtherProcess;
}

base::ProcessId
PImageBridgeParent::OtherSidePID() const
{
    return base::GetProcId(mOtherProcess);
}

bool
PImageBridgeParent::TakeMinidump(
        nsIFile** aDump,
        uint32_t* aSequence) const
{
#ifdef MOZ_CRASHREPORTER
    return XRE_TakeMinidumpForChild(OtherSidePID(), aDump, aSequence);
#else 
    return false;
#endif 
}

bool
PImageBridgeParent::BlockChild()
{
    return (mChannel).BlockChild();
}

bool
PImageBridgeParent::UnblockChild()
{
    return (mChannel).UnblockChild();
}

void
PImageBridgeParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PImageBridgeParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PImageBridgeParent::DestroySubtree(ActorDestroyReason why)
{
    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PImageContainer kids
        InfallibleTArray<PImageContainerParent*> kids(mManagedPImageContainerParent);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PGrallocBuffer kids
        InfallibleTArray<PGrallocBufferParent*> kids(mManagedPGrallocBufferParent);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PImageBridgeParent::DeallocSubtree()
{
    {
        // Recursively deleting PImageContainer kids
        InfallibleTArray<PImageContainerParent*>& kids = mManagedPImageContainerParent;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPImageContainer(kids[i]);
        }
        (mManagedPImageContainerParent).Clear();
    }
    {
        // Recursively deleting PGrallocBuffer kids
        InfallibleTArray<PGrallocBufferParent*>& kids = mManagedPGrallocBufferParent;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPGrallocBuffer(kids[i]);
        }
        (mManagedPGrallocBufferParent).Clear();
    }
}

void
PImageBridgeParent::DeallocShmems()
{
    for (IDMap<SharedMemory>::const_iterator cit = (mShmemMap).begin(); (cit) != ((mShmemMap).end()); (++(cit))) {
        Shmem::Dealloc(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (cit)->second);
    }
    (mShmemMap).Clear();
}

void
PImageBridgeParent::Write(
        const MaybeMagicGrallocBufferHandle& __v,
        Message* __msg)
{
    typedef MaybeMagicGrallocBufferHandle __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TMagicGrallocBufferHandle:
        {
            Write((__v).get_MagicGrallocBufferHandle(), __msg);
            return;
        }
    case __type::Tnull_t:
        {
            Write((__v).get_null_t(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PImageBridgeParent::Read(
        MaybeMagicGrallocBufferHandle* __v,
        const Message* __msg,
        void** __iter)
{
    typedef MaybeMagicGrallocBufferHandle __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TMagicGrallocBufferHandle:
        {
            MagicGrallocBufferHandle tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_MagicGrallocBufferHandle())), __msg, __iter);
        }
    case __type::Tnull_t:
        {
            null_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_null_t())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PImageBridgeParent::Write(
        PGrallocBufferParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PImageBridgeParent::Read(
        PGrallocBufferParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PImageBridge");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PGrallocBuffer");
        return false;
    }

    if ((PGrallocBufferMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PGrallocBuffer has different type");
        return false;
    }

    (*(__v)) = static_cast<PGrallocBufferParent*>(listener);
    return true;
}

void
PImageBridgeParent::Write(
        PImageContainerParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PImageBridgeParent::Read(
        PImageContainerParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PImageBridge");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PImageContainer");
        return false;
    }

    if ((PImageContainerMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PImageContainer has different type");
        return false;
    }

    (*(__v)) = static_cast<PImageContainerParent*>(listener);
    return true;
}



} // namespace layers
} // namespace mozilla
