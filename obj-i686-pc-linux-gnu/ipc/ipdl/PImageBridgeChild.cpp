//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PImageBridgeChild.h"
#ifdef MOZ_CRASHREPORTER
#  include "nsXULAppAPI.h"
#endif 

#include "mozilla/layers/PGrallocBufferChild.h"
#include "mozilla/layers/PImageContainerChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::layers::FrameMetrics FrameMetrics;
typedef mozilla::GraphicsFilterType GraphicsFilterType;
typedef mozilla::layers::MagicGrallocBufferHandle MagicGrallocBufferHandle;
typedef mozilla::layers::MaybeMagicGrallocBufferHandle MaybeMagicGrallocBufferHandle;
typedef mozilla::layers::RGBImage RGBImage;
typedef mozilla::layers::SharedImage SharedImage;
typedef mozilla::layers::SharedImageID SharedImageID;
typedef mozilla::layers::SharedTextureDescriptor SharedTextureDescriptor;
typedef mozilla::gl::SharedTextureHandle SharedTextureHandle;
typedef mozilla::gl::GLContext::SharedTextureShareType SharedTextureShareType;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::layers::SurfaceDescriptor SurfaceDescriptor;
typedef mozilla::layers::SurfaceDescriptorD3D10 SurfaceDescriptorD3D10;
typedef mozilla::layers::SurfaceDescriptorGralloc SurfaceDescriptorGralloc;
typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
typedef mozilla::WindowsHandle WindowsHandle;
typedef mozilla::layers::YCbCrImage YCbCrImage;
typedef mozilla::layers::YUVImage YUVImage;
typedef mozilla::gfxContentType gfxContentType;
typedef mozilla::null_t null_t;
using mozilla::layers::PGrallocBufferChild;
using mozilla::layers::PImageContainerChild;

namespace mozilla {
namespace layers {


void
PImageBridgeChild::ActorDestroy(ActorDestroyReason why)
{
}

void
PImageBridgeChild::ProcessingError(Result code)
{
}

bool
PImageBridgeChild::ShouldContinueFromReplyTimeout()
{
    return true;
}

void
PImageBridgeChild::EnteredCxxStack()
{
}

void
PImageBridgeChild::ExitedCxxStack()
{
}

void
PImageBridgeChild::EnteredCall()
{
}

void
PImageBridgeChild::ExitedCall()
{
}

PImageBridgeChild::PImageBridgeChild() :
    mChannel(ALLOW_THIS_IN_INITIALIZER_LIST(this)),
    mLastRouteId(0),
    mLastShmemId(0),
    mState(PImageBridge::__Start)
{
    MOZ_COUNT_CTOR(PImageBridgeChild);
}

PImageBridgeChild::~PImageBridgeChild()
{
    MOZ_COUNT_DTOR(PImageBridgeChild);
}

bool
PImageBridgeChild::Open(
        Channel::Transport* aTransport,
        ProcessHandle aOtherProcess,
        MessageLoop* aThread,
        AsyncChannel::Side aSide)
{
    mOtherProcess = aOtherProcess;
    return (mChannel).Open(aTransport, aThread, aSide);
}

bool
PImageBridgeChild::Open(
        AsyncChannel* aChannel,
        MessageLoop* aMessageLoop,
        AsyncChannel::Side aSide)
{
    mOtherProcess = 0;
    return (mChannel).Open(aChannel, aMessageLoop, aSide);
}

void
PImageBridgeChild::Close()
{
    (mChannel).Close();
}

void
PImageBridgeChild::SetReplyTimeoutMs(int32_t aTimeoutMs)
{
    (mChannel).SetReplyTimeoutMs(aTimeoutMs);
}

void
PImageBridgeChild::ManagedPImageContainerChild(InfallibleTArray<PImageContainerChild*>& aArr) const
{
    aArr = mManagedPImageContainerChild;
}

const InfallibleTArray<PImageContainerChild*>&
PImageBridgeChild::ManagedPImageContainerChild() const
{
    return mManagedPImageContainerChild;
}

void
PImageBridgeChild::ManagedPGrallocBufferChild(InfallibleTArray<PGrallocBufferChild*>& aArr) const
{
    aArr = mManagedPGrallocBufferChild;
}

const InfallibleTArray<PGrallocBufferChild*>&
PImageBridgeChild::ManagedPGrallocBufferChild() const
{
    return mManagedPGrallocBufferChild;
}

PImageBridge::State
PImageBridgeChild::state()
{
    return mState;
}

PGrallocBufferChild*
PImageBridgeChild::SendPGrallocBufferConstructor(
        const gfxIntSize& size,
        const uint32_t& format,
        const uint32_t& usage,
        MaybeMagicGrallocBufferHandle* handle)
{
    return SendPGrallocBufferConstructor(AllocPGrallocBuffer(size, format, usage, handle), size, format, usage, handle);
}

PGrallocBufferChild*
PImageBridgeChild::SendPGrallocBufferConstructor(
        PGrallocBufferChild* actor,
        const gfxIntSize& size,
        const uint32_t& format,
        const uint32_t& usage,
        MaybeMagicGrallocBufferHandle* handle)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = (&(mChannel));
    (mManagedPGrallocBufferChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::layers::PGrallocBuffer::__Start;

    PImageBridge::Msg_PGrallocBufferConstructor* __msg = new PImageBridge::Msg_PGrallocBufferConstructor();

    Write(actor, __msg, false);
    Write(size, __msg);
    Write(format, __msg);
    Write(usage, __msg);

    (__msg)->set_routing_id(MSG_ROUTING_CONTROL);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PImageBridgeChild] Sending ", stderr);
    }
    if ((!(PImageBridge::Transition(mState, Trigger(Trigger::Recv, PImageBridge::Msg_PGrallocBufferConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel).Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PGrallocBufferMsgStart, actor);
        return 0;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PImageBridge::Reply_PGrallocBufferConstructor*>((&(__reply))))->Log("[PImageBridgeChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(handle, (&(__reply)), (&(__iter)))))) {
        if (true) {
            (actor)->DestroySubtree(FailedConstructor);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PGrallocBufferMsgStart, actor);
            return 0;
        }
    }
    (__reply).EndRead(__iter);
    return actor;
}

bool
PImageBridgeChild::SendStop()
{
    PImageBridge::Msg_Stop* __msg = new PImageBridge::Msg_Stop();


    (__msg)->set_routing_id(MSG_ROUTING_CONTROL);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PImageBridgeChild] Sending ", stderr);
    }
    if ((!(PImageBridge::Transition(mState, Trigger(Trigger::Recv, PImageBridge::Msg_Stop__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel).Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PImageBridge::Reply_Stop*>((&(__reply))))->Log("[PImageBridgeChild] Received reply ", stderr);
    }

    return true;
}

PImageContainerChild*
PImageBridgeChild::SendPImageContainerConstructor(uint64_t* id)
{
    return SendPImageContainerConstructor(AllocPImageContainer(id), id);
}

PImageContainerChild*
PImageBridgeChild::SendPImageContainerConstructor(
        PImageContainerChild* actor,
        uint64_t* id)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = (&(mChannel));
    (mManagedPImageContainerChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::layers::PImageContainer::__Start;

    PImageBridge::Msg_PImageContainerConstructor* __msg = new PImageBridge::Msg_PImageContainerConstructor();

    Write(actor, __msg, false);

    (__msg)->set_routing_id(MSG_ROUTING_CONTROL);
    (__msg)->set_sync();


    Message __reply;

    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PImageBridgeChild] Sending ", stderr);
    }
    if ((!(PImageBridge::Transition(mState, Trigger(Trigger::Recv, PImageBridge::Msg_PImageContainerConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel).Send(__msg, (&(__reply)));
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PImageContainerMsgStart, actor);
        return 0;
    }

    if (mozilla::ipc::LoggingEnabled()) {
        (static_cast<const PImageBridge::Reply_PImageContainerConstructor*>((&(__reply))))->Log("[PImageBridgeChild] Received reply ", stderr);
    }

    void* __iter = 0;
    if ((!(Read(id, (&(__reply)), (&(__iter)))))) {
        if (true) {
            (actor)->DestroySubtree(FailedConstructor);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PImageContainerMsgStart, actor);
            return 0;
        }
    }
    (__reply).EndRead(__iter);
    return actor;
}

int32_t
PImageBridgeChild::Register(ChannelListener* aRouted)
{
    int32_t tmp = (--(mLastRouteId));
    (mActorMap).AddWithID(aRouted, tmp);
    return tmp;
}

int32_t
PImageBridgeChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    (mActorMap).AddWithID(aRouted, aId);
    return aId;
}

ChannelListener*
PImageBridgeChild::Lookup(int32_t aId)
{
    return (mActorMap).Lookup(aId);
}

void
PImageBridgeChild::Unregister(int32_t aId)
{
    return (mActorMap).Remove(aId);
}

void
PImageBridgeChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PImageContainerMsgStart:
        {
            PImageContainerChild* actor = static_cast<PImageContainerChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPImageContainerChild).NoIndex) != ((mManagedPImageContainerChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPImageContainerChild).RemoveElementSorted(actor);
            DeallocPImageContainer(actor);
            return;
        }
    case PGrallocBufferMsgStart:
        {
            PGrallocBufferChild* actor = static_cast<PGrallocBufferChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPGrallocBufferChild).NoIndex) != ((mManagedPGrallocBufferChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPGrallocBufferChild).RemoveElementSorted(actor);
            DeallocPGrallocBuffer(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PImageBridgeChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    nsAutoPtr<Shmem::SharedMemory> segment(Shmem::Alloc(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), aSize, aType, aUnsafe));
    if ((!(segment))) {
        return 0;
    }
    Shmem shmem(
            Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(),
            (segment).get(),
            (--(mLastShmemId)));
    Message* descriptor = (shmem).ShareTo(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), OtherProcess(), MSG_ROUTING_CONTROL);
    if ((!(descriptor))) {
        return 0;
    }
    if ((!((mChannel).Send(descriptor)))) {
    }
    (*(aId)) = (shmem).Id(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    (mShmemMap).AddWithID(segment, (*(aId)));
    return (segment).forget();
}

bool
PImageBridgeChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    Shmem shmem(
            Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(),
            segment,
            (--(mLastShmemId)));
    Message* descriptor = (shmem).ShareTo(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), OtherProcess(), MSG_ROUTING_CONTROL);
    if ((!(descriptor))) {
        return false;
    }
    if ((!((mChannel).Send(descriptor)))) {
    }
    (*(aId)) = (shmem).Id(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    (mShmemMap).AddWithID(segment, (*(aId)));
    (segment)->AddRef();
    return true;
}

Shmem::SharedMemory*
PImageBridgeChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mShmemMap).Lookup(aId);
}

bool
PImageBridgeChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mShmemMap).HasData(segment);
}

bool
PImageBridgeChild::DestroySharedMemory(Shmem& shmem)
{
    Shmem::id_t aId = (shmem).Id(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    Shmem::SharedMemory* segment = LookupSharedMemory(aId);
    if ((!(segment))) {
        return false;
    }
    Message* descriptor = (shmem).UnshareFrom(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), OtherProcess(), MSG_ROUTING_CONTROL);

    (mShmemMap).Remove(aId);
    Shmem::Dealloc(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), segment);

    return (descriptor) && ((mChannel).Send(descriptor));
}

ProcessHandle
PImageBridgeChild::OtherProcess() const
{
    return mOtherProcess;
}

AsyncChannel*
PImageBridgeChild::GetIPCChannel()
{
    return (&(mChannel));
}

PImageBridgeChild::Result
PImageBridgeChild::OnMessageReceived(const Message& __msg)
{
    int32_t __route = (__msg).routing_id();
    if ((MSG_ROUTING_CONTROL) != (__route)) {
        ChannelListener* __routed = Lookup(__route);
        if ((!(__routed))) {
            return MsgRouteError;
        }
        return (__routed)->OnMessageReceived(__msg);
    }

    switch ((__msg).type()) {
    default:
        {
            return MsgNotKnown;
        }
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            Shmem::id_t id;
            nsAutoPtr<Shmem::SharedMemory> rawmem(Shmem::OpenExisting(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), __msg, (&(id)), true));
            if ((!(rawmem))) {
                return MsgPayloadError;
            }
            (mShmemMap).AddWithID((rawmem).forget(), id);

            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            Shmem::id_t id;
            void* iter = 0;
            if ((!(IPC::ReadParam((&(__msg)), (&(iter)), (&(id)))))) {
                return MsgPayloadError;
            }
            (__msg).EndRead(iter);

            Shmem::SharedMemory* rawmem = LookupSharedMemory(id);
            if ((!(rawmem))) {
                return MsgValueError;
            }
            (mShmemMap).Remove(id);
            Shmem::Dealloc(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem);
            return MsgProcessed;
        }
    }
}

PImageBridgeChild::Result
PImageBridgeChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    int32_t __route = (__msg).routing_id();
    if ((MSG_ROUTING_CONTROL) != (__route)) {
        ChannelListener* __routed = Lookup(__route);
        if ((!(__routed))) {
            return MsgRouteError;
        }
        return (__routed)->OnMessageReceived(__msg, __reply);
    }

    return MsgNotKnown;
}

PImageBridgeChild::Result
PImageBridgeChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    int32_t __route = (__msg).routing_id();
    if ((MSG_ROUTING_CONTROL) != (__route)) {
        ChannelListener* __routed = Lookup(__route);
        if ((!(__routed))) {
            return MsgRouteError;
        }
        return (__routed)->OnCallReceived(__msg, __reply);
    }

    return MsgNotKnown;
}

void
PImageBridgeChild::OnProcessingError(Result code)
{
    return ProcessingError(code);
}

int32_t
PImageBridgeChild::GetProtocolTypeId()
{
    return PImageBridgeMsgStart;
}

bool
PImageBridgeChild::OnReplyTimeout()
{
    return ShouldContinueFromReplyTimeout();
}

void
PImageBridgeChild::OnEnteredCxxStack()
{
    return EnteredCxxStack();
}

void
PImageBridgeChild::OnExitedCxxStack()
{
    return ExitedCxxStack();
}

void
PImageBridgeChild::OnEnteredCall()
{
    return EnteredCall();
}

void
PImageBridgeChild::OnExitedCall()
{
    return ExitedCall();
}

bool
PImageBridgeChild::IsOnCxxStack() const
{
    return (mChannel).IsOnCxxStack();
}

void
PImageBridgeChild::FlushPendingRPCQueue()
{
    ((this)->mChannel).FlushPendingRPCQueue();
}

void
PImageBridgeChild::OnChannelClose()
{
    DestroySubtree(NormalShutdown);
    DeallocSubtree();
    DeallocShmems();
}

void
PImageBridgeChild::OnChannelError()
{
    DestroySubtree(AbnormalShutdown);
    DeallocSubtree();
    DeallocShmems();
}

void
PImageBridgeChild::OnChannelConnected(int32_t pid)
{
}

bool
PImageBridgeChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PImageBridgeChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PImageBridgeChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PImageBridgeChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PImageBridgeChild::ProcessNativeEventsInRPCCall()
{
#ifdef OS_WIN
    (mChannel).ProcessNativeEventsInRPCCall();
#else 
    NS_RUNTIMEABORT("This method is Windows-only");
#endif 
}

void
PImageBridgeChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PImageBridgeChild] abort()ing as a result");
}

void
PImageBridgeChild::DestroySubtree(ActorDestroyReason why)
{
    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PImageContainer kids
        InfallibleTArray<PImageContainerChild*> kids(mManagedPImageContainerChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }
    {
        // Recursively shutting down PGrallocBuffer kids
        InfallibleTArray<PGrallocBufferChild*> kids(mManagedPGrallocBufferChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PImageBridgeChild::DeallocSubtree()
{
    {
        // Recursively deleting PImageContainer kids
        InfallibleTArray<PImageContainerChild*>& kids = mManagedPImageContainerChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPImageContainer(kids[i]);
        }
        (mManagedPImageContainerChild).Clear();
    }
    {
        // Recursively deleting PGrallocBuffer kids
        InfallibleTArray<PGrallocBufferChild*>& kids = mManagedPGrallocBufferChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPGrallocBuffer(kids[i]);
        }
        (mManagedPGrallocBufferChild).Clear();
    }
}

void
PImageBridgeChild::DeallocShmems()
{
    for (IDMap<SharedMemory>::const_iterator cit = (mShmemMap).begin(); (cit) != ((mShmemMap).end()); (++(cit))) {
        Shmem::Dealloc(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (cit)->second);
    }
    (mShmemMap).Clear();
}

void
PImageBridgeChild::Write(
        const MaybeMagicGrallocBufferHandle& __v,
        Message* __msg)
{
    typedef MaybeMagicGrallocBufferHandle __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TMagicGrallocBufferHandle:
        {
            Write((__v).get_MagicGrallocBufferHandle(), __msg);
            return;
        }
    case __type::Tnull_t:
        {
            Write((__v).get_null_t(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PImageBridgeChild::Read(
        MaybeMagicGrallocBufferHandle* __v,
        const Message* __msg,
        void** __iter)
{
    typedef MaybeMagicGrallocBufferHandle __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TMagicGrallocBufferHandle:
        {
            MagicGrallocBufferHandle tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_MagicGrallocBufferHandle())), __msg, __iter);
        }
    case __type::Tnull_t:
        {
            null_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_null_t())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PImageBridgeChild::Write(
        PGrallocBufferChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PImageBridgeChild::Read(
        PGrallocBufferChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PImageBridge");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PGrallocBuffer");
        return false;
    }

    if ((PGrallocBufferMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PGrallocBuffer has different type");
        return false;
    }

    (*(__v)) = static_cast<PGrallocBufferChild*>(listener);
    return true;
}

void
PImageBridgeChild::Write(
        PImageContainerChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PImageBridgeChild::Read(
        PImageContainerChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PImageBridge");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PImageContainer");
        return false;
    }

    if ((PImageContainerMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PImageContainer has different type");
        return false;
    }

    (*(__v)) = static_cast<PImageContainerChild*>(listener);
    return true;
}



} // namespace layers
} // namespace mozilla
