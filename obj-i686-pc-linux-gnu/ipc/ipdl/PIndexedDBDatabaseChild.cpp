//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PIndexedDBDatabaseChild.h"

#include "mozilla/dom/indexedDB/PIndexedDBChild.h"
#include "mozilla/dom/indexedDB/PIndexedDBTransactionChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::dom::indexedDB::DatabaseInfoGuts DatabaseInfoGuts;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::dom::indexedDB::IDBTransaction::Mode Mode;
typedef mozilla::dom::indexedDB::ipc::NormalTransactionParams NormalTransactionParams;
typedef mozilla::dom::indexedDB::ObjectStoreInfoGuts ObjectStoreInfoGuts;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::dom::indexedDB::ipc::TransactionParams TransactionParams;
typedef mozilla::dom::indexedDB::ipc::VersionChangeTransactionParams VersionChangeTransactionParams;
using mozilla::dom::indexedDB::PIndexedDBChild;
using mozilla::dom::indexedDB::PIndexedDBTransactionChild;

namespace mozilla {
namespace dom {
namespace indexedDB {


bool
PIndexedDBDatabaseChild::RecvPIndexedDBTransactionConstructor(
        PIndexedDBTransactionChild* actor,
        const TransactionParams& params)
{
    return true;
}

void
PIndexedDBDatabaseChild::ActorDestroy(ActorDestroyReason why)
{
}

PIndexedDBDatabaseChild::PIndexedDBDatabaseChild() :
    mId(0),
    mState(PIndexedDBDatabase::__Dead)
{
    MOZ_COUNT_CTOR(PIndexedDBDatabaseChild);
}

PIndexedDBDatabaseChild::~PIndexedDBDatabaseChild()
{
    MOZ_COUNT_DTOR(PIndexedDBDatabaseChild);
}

PIndexedDBChild*
PIndexedDBDatabaseChild::Manager() const
{
    return static_cast<PIndexedDBChild*>(mManager);
}

void
PIndexedDBDatabaseChild::ManagedPIndexedDBTransactionChild(InfallibleTArray<PIndexedDBTransactionChild*>& aArr) const
{
    aArr = mManagedPIndexedDBTransactionChild;
}

const InfallibleTArray<PIndexedDBTransactionChild*>&
PIndexedDBDatabaseChild::ManagedPIndexedDBTransactionChild() const
{
    return mManagedPIndexedDBTransactionChild;
}

PIndexedDBDatabase::State
PIndexedDBDatabaseChild::state()
{
    return mState;
}

bool
PIndexedDBDatabaseChild::Send__delete__(PIndexedDBDatabaseChild* actor)
{
    if ((!(actor))) {
        return false;
    }

    if ((!(actor))) {
        return false;
    }

    PIndexedDBDatabase::Msg___delete__* __msg = new PIndexedDBDatabase::Msg___delete__();

    (actor)->Write(actor, __msg, false);

    (__msg)->set_routing_id((actor)->mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PIndexedDBDatabaseChild] Sending ", stderr);
    }
    if ((!(PIndexedDBDatabase::Transition((actor)->mState, Trigger(Trigger::Recv, PIndexedDBDatabase::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = ((actor)->mChannel)->Send(__msg);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->mManager)->RemoveManagee(PIndexedDBDatabaseMsgStart, actor);
    return __sendok;
}

bool
PIndexedDBDatabaseChild::SendClose(const bool& unlinked)
{
    PIndexedDBDatabase::Msg_Close* __msg = new PIndexedDBDatabase::Msg_Close();

    Write(unlinked, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PIndexedDBDatabaseChild] Sending ", stderr);
    }
    if ((!(PIndexedDBDatabase::Transition(mState, Trigger(Trigger::Recv, PIndexedDBDatabase::Msg_Close__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

PIndexedDBTransactionChild*
PIndexedDBDatabaseChild::SendPIndexedDBTransactionConstructor(const TransactionParams& params)
{
    return SendPIndexedDBTransactionConstructor(AllocPIndexedDBTransaction(params), params);
}

PIndexedDBTransactionChild*
PIndexedDBDatabaseChild::SendPIndexedDBTransactionConstructor(
        PIndexedDBTransactionChild* actor,
        const TransactionParams& params)
{
    if ((!(actor))) {
        return 0;
    }
    (actor)->mId = Register(actor);
    (actor)->mManager = this;
    (actor)->mChannel = mChannel;
    (mManagedPIndexedDBTransactionChild).InsertElementSorted(actor);
    (actor)->mState = mozilla::dom::indexedDB::PIndexedDBTransaction::__Start;

    PIndexedDBDatabase::Msg_PIndexedDBTransactionConstructor* __msg = new PIndexedDBDatabase::Msg_PIndexedDBTransactionConstructor();

    Write(actor, __msg, false);
    Write(params, __msg);

    (__msg)->set_routing_id(mId);


    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PIndexedDBDatabaseChild] Sending ", stderr);
    }
    if ((!(PIndexedDBDatabase::Transition(mState, Trigger(Trigger::Recv, PIndexedDBDatabase::Msg_PIndexedDBTransactionConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    if ((!(__sendok))) {
        (actor)->DestroySubtree(FailedConstructor);
        (actor)->DeallocSubtree();
        ((actor)->mManager)->RemoveManagee(PIndexedDBTransactionMsgStart, actor);
        return 0;
    }
    return actor;
}

int32_t
PIndexedDBDatabaseChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PIndexedDBDatabaseChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PIndexedDBDatabaseChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PIndexedDBDatabaseChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PIndexedDBDatabaseChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PIndexedDBTransactionMsgStart:
        {
            PIndexedDBTransactionChild* actor = static_cast<PIndexedDBTransactionChild*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPIndexedDBTransactionChild).NoIndex) != ((mManagedPIndexedDBTransactionChild).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPIndexedDBTransactionChild).RemoveElementSorted(actor);
            DeallocPIndexedDBTransaction(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PIndexedDBDatabaseChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PIndexedDBDatabaseChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PIndexedDBDatabaseChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PIndexedDBDatabaseChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PIndexedDBDatabaseChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PIndexedDBDatabaseChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PIndexedDBDatabaseChild::GetIPCChannel()
{
    return mChannel;
}

PIndexedDBDatabaseChild::Result
PIndexedDBDatabaseChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PIndexedDBDatabase::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PIndexedDBDatabase::Msg_Success__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PIndexedDBDatabase::Msg_Success");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PIndexedDBDatabase::Msg_Success*>((&(__msg))))->Log("[PIndexedDBDatabaseChild] Received ", stderr);
            }

            void* __iter = 0;
            DatabaseInfoGuts dbInfo;
            InfallibleTArray<ObjectStoreInfoGuts> osInfo;

            if ((!(Read((&(dbInfo)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(osInfo)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PIndexedDBDatabase::Transition(mState, Trigger(Trigger::Send, PIndexedDBDatabase::Msg_Success__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvSuccess(dbInfo, osInfo)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Success returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIndexedDBDatabase::Msg_Error__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PIndexedDBDatabase::Msg_Error");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PIndexedDBDatabase::Msg_Error*>((&(__msg))))->Log("[PIndexedDBDatabaseChild] Received ", stderr);
            }

            void* __iter = 0;
            nsresult rv;

            if ((!(Read((&(rv)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PIndexedDBDatabase::Transition(mState, Trigger(Trigger::Send, PIndexedDBDatabase::Msg_Error__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvError(rv)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Error returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIndexedDBDatabase::Msg_Blocked__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PIndexedDBDatabase::Msg_Blocked");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PIndexedDBDatabase::Msg_Blocked*>((&(__msg))))->Log("[PIndexedDBDatabaseChild] Received ", stderr);
            }

            void* __iter = 0;
            uint64_t oldVersion;

            if ((!(Read((&(oldVersion)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PIndexedDBDatabase::Transition(mState, Trigger(Trigger::Send, PIndexedDBDatabase::Msg_Blocked__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvBlocked(oldVersion)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Blocked returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIndexedDBDatabase::Msg_VersionChange__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PIndexedDBDatabase::Msg_VersionChange");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PIndexedDBDatabase::Msg_VersionChange*>((&(__msg))))->Log("[PIndexedDBDatabaseChild] Received ", stderr);
            }

            void* __iter = 0;
            uint64_t oldVersion;
            uint64_t newVersion;

            if ((!(Read((&(oldVersion)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(newVersion)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PIndexedDBDatabase::Transition(mState, Trigger(Trigger::Send, PIndexedDBDatabase::Msg_VersionChange__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvVersionChange(oldVersion, newVersion)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for VersionChange returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIndexedDBDatabase::Msg_Invalidate__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PIndexedDBDatabase::Msg_Invalidate");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PIndexedDBDatabase::Msg_Invalidate*>((&(__msg))))->Log("[PIndexedDBDatabaseChild] Received ", stderr);
            }

            if ((!(PIndexedDBDatabase::Transition(mState, Trigger(Trigger::Send, PIndexedDBDatabase::Msg_Invalidate__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvInvalidate()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Invalidate returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIndexedDBDatabase::Reply_PIndexedDBTransactionConstructor__ID:
        {
            return MsgProcessed;
        }
    case PIndexedDBDatabase::Msg_PIndexedDBTransactionConstructor__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PIndexedDBDatabase::Msg_PIndexedDBTransactionConstructor");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PIndexedDBDatabase::Msg_PIndexedDBTransactionConstructor*>((&(__msg))))->Log("[PIndexedDBDatabaseChild] Received ", stderr);
            }

            void* __iter = 0;
            ActorHandle __handle;
            PIndexedDBTransactionChild* actor;
            TransactionParams params;

            if ((!(Read((&(__handle)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(params)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PIndexedDBDatabase::Transition(mState, Trigger(Trigger::Send, PIndexedDBDatabase::Msg_PIndexedDBTransactionConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            actor = AllocPIndexedDBTransaction(params);
            if ((!(actor))) {
                return MsgValueError;
            }
            (actor)->mId = RegisterID(actor, (__handle).mId);
            (actor)->mManager = this;
            (actor)->mChannel = mChannel;
            (mManagedPIndexedDBTransactionChild).InsertElementSorted(actor);
            (actor)->mState = mozilla::dom::indexedDB::PIndexedDBTransaction::__Start;

            if ((!(RecvPIndexedDBTransactionConstructor(actor, params)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PIndexedDBTransaction returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PIndexedDBDatabaseChild::Result
PIndexedDBDatabaseChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PIndexedDBDatabaseChild::Result
PIndexedDBDatabaseChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PIndexedDBDatabaseChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PIndexedDBDatabaseChild::GetProtocolTypeId()
{
    return PIndexedDBDatabaseMsgStart;
}

bool
PIndexedDBDatabaseChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PIndexedDBDatabaseChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PIndexedDBDatabaseChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PIndexedDBDatabaseChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PIndexedDBDatabaseChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PIndexedDBDatabaseChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PIndexedDBDatabaseChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PIndexedDBDatabaseChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PIndexedDBDatabaseChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PIndexedDBDatabaseChild] abort()ing as a result");
}

void
PIndexedDBDatabaseChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PIndexedDBTransaction kids
        InfallibleTArray<PIndexedDBTransactionChild*> kids(mManagedPIndexedDBTransactionChild);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PIndexedDBDatabaseChild::DeallocSubtree()
{
    {
        // Recursively deleting PIndexedDBTransaction kids
        InfallibleTArray<PIndexedDBTransactionChild*>& kids = mManagedPIndexedDBTransactionChild;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPIndexedDBTransaction(kids[i]);
        }
        (mManagedPIndexedDBTransactionChild).Clear();
    }
}

void
PIndexedDBDatabaseChild::Write(
        PIndexedDBDatabaseChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBDatabaseChild::Read(
        PIndexedDBDatabaseChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDBDatabase");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PIndexedDBDatabase");
        return false;
    }

    if ((PIndexedDBDatabaseMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PIndexedDBDatabase has different type");
        return false;
    }

    (*(__v)) = static_cast<PIndexedDBDatabaseChild*>(listener);
    return true;
}

void
PIndexedDBDatabaseChild::Write(
        PIndexedDBTransactionChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PIndexedDBDatabaseChild::Read(
        PIndexedDBTransactionChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PIndexedDBDatabase");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PIndexedDBTransaction");
        return false;
    }

    if ((PIndexedDBTransactionMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PIndexedDBTransaction has different type");
        return false;
    }

    (*(__v)) = static_cast<PIndexedDBTransactionChild*>(listener);
    return true;
}

void
PIndexedDBDatabaseChild::Write(
        const NormalTransactionParams& __v,
        Message* __msg)
{
    Write((__v).names(), __msg);
    Write((__v).mode(), __msg);
}

bool
PIndexedDBDatabaseChild::Read(
        NormalTransactionParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->names())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->mode())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PIndexedDBDatabaseChild::Write(
        const TransactionParams& __v,
        Message* __msg)
{
    typedef TransactionParams __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TNormalTransactionParams:
        {
            Write((__v).get_NormalTransactionParams(), __msg);
            return;
        }
    case __type::TVersionChangeTransactionParams:
        {
            Write((__v).get_VersionChangeTransactionParams(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PIndexedDBDatabaseChild::Read(
        TransactionParams* __v,
        const Message* __msg,
        void** __iter)
{
    typedef TransactionParams __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TNormalTransactionParams:
        {
            NormalTransactionParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_NormalTransactionParams())), __msg, __iter);
        }
    case __type::TVersionChangeTransactionParams:
        {
            VersionChangeTransactionParams tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_VersionChangeTransactionParams())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PIndexedDBDatabaseChild::Write(
        const VersionChangeTransactionParams& __v,
        Message* __msg)
{
    Write((__v).dbInfo(), __msg);
    Write((__v).osInfo(), __msg);
    Write((__v).oldVersion(), __msg);
}

bool
PIndexedDBDatabaseChild::Read(
        VersionChangeTransactionParams* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->dbInfo())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->osInfo())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->oldVersion())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}



} // namespace indexedDB
} // namespace dom
} // namespace mozilla
