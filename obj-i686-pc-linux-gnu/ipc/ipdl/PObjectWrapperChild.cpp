//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/jsipc/PObjectWrapperChild.h"

#include "mozilla/jsipc/PContextWrapperChild.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::jsipc::JSVariant JSVariant;
typedef mozilla::jsipc::OperationStatus OperationStatus;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::void_t void_t;
using mozilla::jsipc::PContextWrapperChild;

namespace mozilla {
namespace jsipc {


bool
PObjectWrapperChild::Recv__delete__()
{
    return true;
}

void
PObjectWrapperChild::ActorDestroy(ActorDestroyReason why)
{
}

PObjectWrapperChild::PObjectWrapperChild() :
    mId(0),
    mState(PObjectWrapper::__Dead)
{
    MOZ_COUNT_CTOR(PObjectWrapperChild);
}

PObjectWrapperChild::~PObjectWrapperChild()
{
    MOZ_COUNT_DTOR(PObjectWrapperChild);
}

PContextWrapperChild*
PObjectWrapperChild::Manager() const
{
    return static_cast<PContextWrapperChild*>(mManager);
}

PObjectWrapper::State
PObjectWrapperChild::state()
{
    return mState;
}

int32_t
PObjectWrapperChild::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PObjectWrapperChild::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PObjectWrapperChild::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PObjectWrapperChild::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PObjectWrapperChild::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    NS_RUNTIMEABORT("unreached");
    return;
}

Shmem::SharedMemory*
PObjectWrapperChild::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PObjectWrapperChild::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PObjectWrapperChild::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PObjectWrapperChild::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PObjectWrapperChild::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PObjectWrapperChild::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PObjectWrapperChild::GetIPCChannel()
{
    return mChannel;
}

PObjectWrapperChild::Result
PObjectWrapperChild::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PObjectWrapper::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg___delete__*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            PObjectWrapperChild* actor;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PObjectWrapperMsgStart, actor);


            return MsgProcessed;
        }
    case PObjectWrapper::Msg_NewEnumerateDestroy__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_NewEnumerateDestroy");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_NewEnumerateDestroy*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            JSVariant in_state;

            if ((!(Read((&(in_state)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_NewEnumerateDestroy__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvNewEnumerateDestroy(in_state)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NewEnumerateDestroy returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PObjectWrapperChild::Result
PObjectWrapperChild::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

PObjectWrapperChild::Result
PObjectWrapperChild::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    switch ((__msg).type()) {
    case PObjectWrapper::Msg_AddProperty__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_AddProperty");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_AddProperty*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            nsString id;

            if ((!(Read((&(id)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_AddProperty__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            OperationStatus status;
            int32_t __id = mId;
            if ((!(AnswerAddProperty(id, (&(status)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for AddProperty returned error code");
                return MsgProcessingError;
            }

            __reply = new PObjectWrapper::Reply_AddProperty();

            Write(status, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Reply_AddProperty*>(__reply))->Log("[PObjectWrapperChild] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PObjectWrapper::Msg_GetProperty__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_GetProperty");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_GetProperty*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            nsString id;

            if ((!(Read((&(id)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_GetProperty__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            OperationStatus status;
            JSVariant vp;
            int32_t __id = mId;
            if ((!(AnswerGetProperty(id, (&(status)), (&(vp)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for GetProperty returned error code");
                return MsgProcessingError;
            }

            __reply = new PObjectWrapper::Reply_GetProperty();

            Write(status, __reply);
            Write(vp, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Reply_GetProperty*>(__reply))->Log("[PObjectWrapperChild] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PObjectWrapper::Msg_SetProperty__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_SetProperty");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_SetProperty*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            nsString id;
            JSVariant v;

            if ((!(Read((&(id)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(v)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_SetProperty__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            OperationStatus status;
            JSVariant vp;
            int32_t __id = mId;
            if ((!(AnswerSetProperty(id, v, (&(status)), (&(vp)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for SetProperty returned error code");
                return MsgProcessingError;
            }

            __reply = new PObjectWrapper::Reply_SetProperty();

            Write(status, __reply);
            Write(vp, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Reply_SetProperty*>(__reply))->Log("[PObjectWrapperChild] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PObjectWrapper::Msg_DelProperty__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_DelProperty");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_DelProperty*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            nsString id;

            if ((!(Read((&(id)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_DelProperty__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            OperationStatus status;
            JSVariant vp;
            int32_t __id = mId;
            if ((!(AnswerDelProperty(id, (&(status)), (&(vp)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for DelProperty returned error code");
                return MsgProcessingError;
            }

            __reply = new PObjectWrapper::Reply_DelProperty();

            Write(status, __reply);
            Write(vp, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Reply_DelProperty*>(__reply))->Log("[PObjectWrapperChild] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PObjectWrapper::Msg_NewEnumerateInit__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_NewEnumerateInit");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_NewEnumerateInit*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_NewEnumerateInit__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            OperationStatus status;
            JSVariant statep;
            int idp;
            int32_t __id = mId;
            if ((!(AnswerNewEnumerateInit((&(status)), (&(statep)), (&(idp)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NewEnumerateInit returned error code");
                return MsgProcessingError;
            }

            __reply = new PObjectWrapper::Reply_NewEnumerateInit();

            Write(status, __reply);
            Write(statep, __reply);
            Write(idp, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Reply_NewEnumerateInit*>(__reply))->Log("[PObjectWrapperChild] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PObjectWrapper::Msg_NewEnumerateNext__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_NewEnumerateNext");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_NewEnumerateNext*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            JSVariant in_state;

            if ((!(Read((&(in_state)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_NewEnumerateNext__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            OperationStatus status;
            JSVariant statep;
            nsString idp;
            int32_t __id = mId;
            if ((!(AnswerNewEnumerateNext(in_state, (&(status)), (&(statep)), (&(idp)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NewEnumerateNext returned error code");
                return MsgProcessingError;
            }

            __reply = new PObjectWrapper::Reply_NewEnumerateNext();

            Write(status, __reply);
            Write(statep, __reply);
            Write(idp, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Reply_NewEnumerateNext*>(__reply))->Log("[PObjectWrapperChild] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PObjectWrapper::Msg_NewResolve__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_NewResolve");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_NewResolve*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            nsString id;
            int flags;

            if ((!(Read((&(id)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(flags)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_NewResolve__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            OperationStatus status;
            PObjectWrapperChild* obj2;
            int32_t __id = mId;
            if ((!(AnswerNewResolve(id, flags, (&(status)), (&(obj2)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for NewResolve returned error code");
                return MsgProcessingError;
            }

            __reply = new PObjectWrapper::Reply_NewResolve();

            Write(status, __reply);
            Write(obj2, __reply, true);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Reply_NewResolve*>(__reply))->Log("[PObjectWrapperChild] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PObjectWrapper::Msg_Convert__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_Convert");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_Convert*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            JSType type;

            if ((!(Read((&(type)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_Convert__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            OperationStatus status;
            JSVariant vp;
            int32_t __id = mId;
            if ((!(AnswerConvert(type, (&(status)), (&(vp)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Convert returned error code");
                return MsgProcessingError;
            }

            __reply = new PObjectWrapper::Reply_Convert();

            Write(status, __reply);
            Write(vp, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Reply_Convert*>(__reply))->Log("[PObjectWrapperChild] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PObjectWrapper::Msg_Call__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_Call");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_Call*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            PObjectWrapperChild* receiver;
            InfallibleTArray<JSVariant> argv;

            if ((!(Read((&(receiver)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(argv)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_Call__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            OperationStatus status;
            JSVariant rval;
            int32_t __id = mId;
            if ((!(AnswerCall(receiver, argv, (&(status)), (&(rval)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Call returned error code");
                return MsgProcessingError;
            }

            __reply = new PObjectWrapper::Reply_Call();

            Write(status, __reply);
            Write(rval, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Reply_Call*>(__reply))->Log("[PObjectWrapperChild] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PObjectWrapper::Msg_Construct__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_Construct");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_Construct*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            InfallibleTArray<JSVariant> argv;

            if ((!(Read((&(argv)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_Construct__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            OperationStatus status;
            PObjectWrapperChild* rval;
            int32_t __id = mId;
            if ((!(AnswerConstruct(argv, (&(status)), (&(rval)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Construct returned error code");
                return MsgProcessingError;
            }

            __reply = new PObjectWrapper::Reply_Construct();

            Write(status, __reply);
            Write(rval, __reply, true);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Reply_Construct*>(__reply))->Log("[PObjectWrapperChild] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PObjectWrapper::Msg_HasInstance__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PObjectWrapper::Msg_HasInstance");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Msg_HasInstance*>((&(__msg))))->Log("[PObjectWrapperChild] Received ", stderr);
            }

            void* __iter = 0;
            JSVariant v;

            if ((!(Read((&(v)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PObjectWrapper::Transition(mState, Trigger(Trigger::Send, PObjectWrapper::Msg_HasInstance__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            OperationStatus status;
            JSBool bp;
            int32_t __id = mId;
            if ((!(AnswerHasInstance(v, (&(status)), (&(bp)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for HasInstance returned error code");
                return MsgProcessingError;
            }

            __reply = new PObjectWrapper::Reply_HasInstance();

            Write(status, __reply);
            Write(bp, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_rpc();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PObjectWrapper::Reply_HasInstance*>(__reply))->Log("[PObjectWrapperChild] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

void
PObjectWrapperChild::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PObjectWrapperChild::GetProtocolTypeId()
{
    return PObjectWrapperMsgStart;
}

bool
PObjectWrapperChild::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PObjectWrapperChild::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PObjectWrapperChild::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PObjectWrapperChild::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PObjectWrapperChild::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PObjectWrapperChild::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PObjectWrapperChild::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PObjectWrapperChild::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PObjectWrapperChild::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_RUNTIMEABORT("[PObjectWrapperChild] abort()ing as a result");
}

void
PObjectWrapperChild::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PObjectWrapperChild::DeallocSubtree()
{
}

void
PObjectWrapperChild::Write(
        PObjectWrapperChild* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PObjectWrapperChild::Read(
        PObjectWrapperChild** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PObjectWrapper");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PObjectWrapper");
        return false;
    }

    if ((PObjectWrapperMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PObjectWrapper has different type");
        return false;
    }

    (*(__v)) = static_cast<PObjectWrapperChild*>(listener);
    return true;
}

void
PObjectWrapperChild::Write(
        const InfallibleTArray<JSVariant>& __v,
        Message* __msg)
{
    uint32_t length = (__v).Length();
    Write(length, __msg);

    for (uint32_t i = 0; (i) < (length); (++(i))) {
        Write(__v[i], __msg);
    }
}

bool
PObjectWrapperChild::Read(
        InfallibleTArray<JSVariant>* __v,
        const Message* __msg,
        void** __iter)
{
    InfallibleTArray<JSVariant>& a = (*(__v));
    uint32_t length;
    if ((!(Read((&(length)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    (__v)->SetLength(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(a[i])), __msg, __iter)))) {
            mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
            return false;
        }
    }
    return true;
}

void
PObjectWrapperChild::Write(
        const OperationStatus& __v,
        Message* __msg)
{
    typedef OperationStatus __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TJSBool:
        {
            Write((__v).get_JSBool(), __msg);
            return;
        }
    case __type::TJSVariant:
        {
            Write((__v).get_JSVariant(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PObjectWrapperChild::Read(
        OperationStatus* __v,
        const Message* __msg,
        void** __iter)
{
    typedef OperationStatus __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TJSBool:
        {
            JSBool tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_JSBool())), __msg, __iter);
        }
    case __type::TJSVariant:
        {
            JSVariant tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_JSVariant())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PObjectWrapperChild::Write(
        const JSVariant& __v,
        Message* __msg)
{
    typedef JSVariant __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::Tvoid_t:
        {
            Write((__v).get_void_t(), __msg);
            return;
        }
    case __type::TPObjectWrapperParent:
        {
            NS_RUNTIMEABORT("wrong side!");
            return;
        }
    case __type::TPObjectWrapperChild:
        {
            Write((__v).get_PObjectWrapperChild(), __msg, true);
            return;
        }
    case __type::TnsString:
        {
            Write((__v).get_nsString(), __msg);
            return;
        }
    case __type::Tint:
        {
            Write((__v).get_int(), __msg);
            return;
        }
    case __type::Tdouble:
        {
            Write((__v).get_double(), __msg);
            return;
        }
    case __type::Tbool:
        {
            Write((__v).get_bool(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PObjectWrapperChild::Read(
        JSVariant* __v,
        const Message* __msg,
        void** __iter)
{
    typedef JSVariant __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::Tvoid_t:
        {
            void_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_void_t())), __msg, __iter);
        }
    case __type::TPObjectWrapperParent:
        {
            PObjectWrapperChild* tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_PObjectWrapperChild())), __msg, __iter, true);
        }
    case __type::TPObjectWrapperChild:
        {
            return false;
        }
    case __type::TnsString:
        {
            nsString tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_nsString())), __msg, __iter);
        }
    case __type::Tint:
        {
            int tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_int())), __msg, __iter);
        }
    case __type::Tdouble:
        {
            double tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_double())), __msg, __iter);
        }
    case __type::Tbool:
        {
            bool tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_bool())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}



} // namespace jsipc
} // namespace mozilla
