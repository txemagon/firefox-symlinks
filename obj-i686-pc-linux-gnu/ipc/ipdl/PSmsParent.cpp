//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/sms/PSmsParent.h"

#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/sms/PSmsRequestParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::dom::sms::CreateMessageListRequest CreateMessageListRequest;
typedef mozilla::dom::sms::DeleteMessageRequest DeleteMessageRequest;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::dom::sms::GetMessageRequest GetMessageRequest;
typedef mozilla::dom::sms::GetNextMessageInListRequest GetNextMessageInListRequest;
typedef mozilla::dom::sms::GetThreadListRequest GetThreadListRequest;
typedef mozilla::dom::sms::IPCSmsRequest IPCSmsRequest;
typedef mozilla::dom::sms::MarkMessageReadRequest MarkMessageReadRequest;
typedef mozilla::dom::sms::SendMessageRequest SendMessageRequest;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::dom::sms::SmsFilterData SmsFilterData;
typedef mozilla::dom::sms::SmsMessageData SmsMessageData;
typedef mozilla::dom::sms::SmsSegmentInfoData SmsSegmentInfoData;
using mozilla::dom::PContentParent;
using mozilla::dom::sms::PSmsRequestParent;

namespace mozilla {
namespace dom {
namespace sms {


bool
PSmsParent::Recv__delete__()
{
    return true;
}

bool
PSmsParent::RecvPSmsRequestConstructor(
        PSmsRequestParent* actor,
        const IPCSmsRequest& request)
{
    return true;
}

void
PSmsParent::ActorDestroy(ActorDestroyReason why)
{
}

PSmsParent::PSmsParent() :
    mId(0),
    mState(PSms::__Dead)
{
    MOZ_COUNT_CTOR(PSmsParent);
}

PSmsParent::~PSmsParent()
{
    MOZ_COUNT_DTOR(PSmsParent);
}

PContentParent*
PSmsParent::Manager() const
{
    return static_cast<PContentParent*>(mManager);
}

void
PSmsParent::ManagedPSmsRequestParent(InfallibleTArray<PSmsRequestParent*>& aArr) const
{
    aArr = mManagedPSmsRequestParent;
}

const InfallibleTArray<PSmsRequestParent*>&
PSmsParent::ManagedPSmsRequestParent() const
{
    return mManagedPSmsRequestParent;
}

PSms::State
PSmsParent::state()
{
    return mState;
}

bool
PSmsParent::SendNotifyReceivedMessage(const SmsMessageData& aMessageData)
{
    PSms::Msg_NotifyReceivedMessage* __msg = new PSms::Msg_NotifyReceivedMessage();

    Write(aMessageData, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PSmsParent] Sending ", stderr);
    }
    if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifyReceivedMessage__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PSmsParent::SendNotifySendingMessage(const SmsMessageData& aMessageData)
{
    PSms::Msg_NotifySendingMessage* __msg = new PSms::Msg_NotifySendingMessage();

    Write(aMessageData, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PSmsParent] Sending ", stderr);
    }
    if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifySendingMessage__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PSmsParent::SendNotifySentMessage(const SmsMessageData& aMessageData)
{
    PSms::Msg_NotifySentMessage* __msg = new PSms::Msg_NotifySentMessage();

    Write(aMessageData, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PSmsParent] Sending ", stderr);
    }
    if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifySentMessage__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PSmsParent::SendNotifyFailedMessage(const SmsMessageData& aMessageData)
{
    PSms::Msg_NotifyFailedMessage* __msg = new PSms::Msg_NotifyFailedMessage();

    Write(aMessageData, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PSmsParent] Sending ", stderr);
    }
    if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifyFailedMessage__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PSmsParent::SendNotifyDeliverySuccessMessage(const SmsMessageData& aMessageData)
{
    PSms::Msg_NotifyDeliverySuccessMessage* __msg = new PSms::Msg_NotifyDeliverySuccessMessage();

    Write(aMessageData, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PSmsParent] Sending ", stderr);
    }
    if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifyDeliverySuccessMessage__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

bool
PSmsParent::SendNotifyDeliveryErrorMessage(const SmsMessageData& aMessageData)
{
    PSms::Msg_NotifyDeliveryErrorMessage* __msg = new PSms::Msg_NotifyDeliveryErrorMessage();

    Write(aMessageData, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PSmsParent] Sending ", stderr);
    }
    if ((!(PSms::Transition(mState, Trigger(Trigger::Send, PSms::Msg_NotifyDeliveryErrorMessage__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

int32_t
PSmsParent::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PSmsParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PSmsParent::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PSmsParent::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PSmsParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PSmsRequestMsgStart:
        {
            PSmsRequestParent* actor = static_cast<PSmsRequestParent*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPSmsRequestParent).NoIndex) != ((mManagedPSmsRequestParent).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPSmsRequestParent).RemoveElementSorted(actor);
            DeallocPSmsRequest(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PSmsParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PSmsParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PSmsParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PSmsParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PSmsParent::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PSmsParent::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PSmsParent::GetIPCChannel()
{
    return mChannel;
}

PSmsParent::Result
PSmsParent::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PSms::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSms::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Msg___delete__*>((&(__msg))))->Log("[PSmsParent] Received ", stderr);
            }

            void* __iter = 0;
            PSmsParent* actor;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PSms::Transition(mState, Trigger(Trigger::Recv, PSms::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PSmsMsgStart, actor);


            return MsgProcessed;
        }
    case PSms::Msg_PSmsRequestConstructor__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSms::Msg_PSmsRequestConstructor");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Msg_PSmsRequestConstructor*>((&(__msg))))->Log("[PSmsParent] Received ", stderr);
            }

            void* __iter = 0;
            ActorHandle __handle;
            PSmsRequestParent* actor;
            IPCSmsRequest request;

            if ((!(Read((&(__handle)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(request)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PSms::Transition(mState, Trigger(Trigger::Recv, PSms::Msg_PSmsRequestConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            actor = AllocPSmsRequest(request);
            if ((!(actor))) {
                return MsgValueError;
            }
            (actor)->mId = RegisterID(actor, (__handle).mId);
            (actor)->mManager = this;
            (actor)->mChannel = mChannel;
            (mManagedPSmsRequestParent).InsertElementSorted(actor);
            (actor)->mState = mozilla::dom::sms::PSmsRequest::__Start;

            if ((!(RecvPSmsRequestConstructor(actor, request)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PSmsRequest returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSms::Msg_ClearMessageList__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSms::Msg_ClearMessageList");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Msg_ClearMessageList*>((&(__msg))))->Log("[PSmsParent] Received ", stderr);
            }

            void* __iter = 0;
            int32_t aListId;

            if ((!(Read((&(aListId)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PSms::Transition(mState, Trigger(Trigger::Recv, PSms::Msg_ClearMessageList__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvClearMessageList(aListId)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for ClearMessageList returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PSmsParent::Result
PSmsParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    switch ((__msg).type()) {
    case PSms::Msg_HasSupport__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSms::Msg_HasSupport");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Msg_HasSupport*>((&(__msg))))->Log("[PSmsParent] Received ", stderr);
            }

            if ((!(PSms::Transition(mState, Trigger(Trigger::Recv, PSms::Msg_HasSupport__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            bool aHasSupport;
            int32_t __id = mId;
            if ((!(RecvHasSupport((&(aHasSupport)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for HasSupport returned error code");
                return MsgProcessingError;
            }

            __reply = new PSms::Reply_HasSupport();

            Write(aHasSupport, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Reply_HasSupport*>(__reply))->Log("[PSmsParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PSms::Msg_GetSegmentInfoForText__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PSms::Msg_GetSegmentInfoForText");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Msg_GetSegmentInfoForText*>((&(__msg))))->Log("[PSmsParent] Received ", stderr);
            }

            void* __iter = 0;
            nsString aText;

            if ((!(Read((&(aText)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PSms::Transition(mState, Trigger(Trigger::Recv, PSms::Msg_GetSegmentInfoForText__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            SmsSegmentInfoData aResult;
            int32_t __id = mId;
            if ((!(RecvGetSegmentInfoForText(aText, (&(aResult)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for GetSegmentInfoForText returned error code");
                return MsgProcessingError;
            }

            __reply = new PSms::Reply_GetSegmentInfoForText();

            Write(aResult, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PSms::Reply_GetSegmentInfoForText*>(__reply))->Log("[PSmsParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PSmsParent::Result
PSmsParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PSmsParent::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PSmsParent::GetProtocolTypeId()
{
    return PSmsMsgStart;
}

bool
PSmsParent::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PSmsParent::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PSmsParent::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PSmsParent::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PSmsParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PSmsParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PSmsParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PSmsParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PSmsParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PSmsParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PSmsParent::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PSmsRequest kids
        InfallibleTArray<PSmsRequestParent*> kids(mManagedPSmsRequestParent);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PSmsParent::DeallocSubtree()
{
    {
        // Recursively deleting PSmsRequest kids
        InfallibleTArray<PSmsRequestParent*>& kids = mManagedPSmsRequestParent;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPSmsRequest(kids[i]);
        }
        (mManagedPSmsRequestParent).Clear();
    }
}

void
PSmsParent::Write(
        const SendMessageRequest& __v,
        Message* __msg)
{
    Write((__v).number(), __msg);
    Write((__v).message(), __msg);
}

bool
PSmsParent::Read(
        SendMessageRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->number())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->message())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsParent::Write(
        const DeleteMessageRequest& __v,
        Message* __msg)
{
    Write((__v).messageId(), __msg);
}

bool
PSmsParent::Read(
        DeleteMessageRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->messageId())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsParent::Write(
        const SmsSegmentInfoData& __v,
        Message* __msg)
{
    Write((__v).segments(), __msg);
    Write((__v).charsPerSegment(), __msg);
    Write((__v).charsAvailableInLastSegment(), __msg);
}

bool
PSmsParent::Read(
        SmsSegmentInfoData* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->segments())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->charsPerSegment())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->charsAvailableInLastSegment())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsParent::Write(
        const MarkMessageReadRequest& __v,
        Message* __msg)
{
    Write((__v).messageId(), __msg);
    Write((__v).value(), __msg);
}

bool
PSmsParent::Read(
        MarkMessageReadRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->messageId())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->value())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsParent::Write(
        PSmsRequestParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PSmsParent::Read(
        PSmsRequestParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PSms");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PSmsRequest");
        return false;
    }

    if ((PSmsRequestMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PSmsRequest has different type");
        return false;
    }

    (*(__v)) = static_cast<PSmsRequestParent*>(listener);
    return true;
}

void
PSmsParent::Write(
        const GetNextMessageInListRequest& __v,
        Message* __msg)
{
    Write((__v).aListId(), __msg);
}

bool
PSmsParent::Read(
        GetNextMessageInListRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->aListId())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsParent::Write(
        const CreateMessageListRequest& __v,
        Message* __msg)
{
    Write((__v).filter(), __msg);
    Write((__v).reverse(), __msg);
}

bool
PSmsParent::Read(
        CreateMessageListRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->filter())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->reverse())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsParent::Write(
        const IPCSmsRequest& __v,
        Message* __msg)
{
    typedef IPCSmsRequest __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TSendMessageRequest:
        {
            Write((__v).get_SendMessageRequest(), __msg);
            return;
        }
    case __type::TGetMessageRequest:
        {
            Write((__v).get_GetMessageRequest(), __msg);
            return;
        }
    case __type::TDeleteMessageRequest:
        {
            Write((__v).get_DeleteMessageRequest(), __msg);
            return;
        }
    case __type::TCreateMessageListRequest:
        {
            Write((__v).get_CreateMessageListRequest(), __msg);
            return;
        }
    case __type::TGetNextMessageInListRequest:
        {
            Write((__v).get_GetNextMessageInListRequest(), __msg);
            return;
        }
    case __type::TMarkMessageReadRequest:
        {
            Write((__v).get_MarkMessageReadRequest(), __msg);
            return;
        }
    case __type::TGetThreadListRequest:
        {
            Write((__v).get_GetThreadListRequest(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PSmsParent::Read(
        IPCSmsRequest* __v,
        const Message* __msg,
        void** __iter)
{
    typedef IPCSmsRequest __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TSendMessageRequest:
        {
            SendMessageRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SendMessageRequest())), __msg, __iter);
        }
    case __type::TGetMessageRequest:
        {
            GetMessageRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GetMessageRequest())), __msg, __iter);
        }
    case __type::TDeleteMessageRequest:
        {
            DeleteMessageRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_DeleteMessageRequest())), __msg, __iter);
        }
    case __type::TCreateMessageListRequest:
        {
            CreateMessageListRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_CreateMessageListRequest())), __msg, __iter);
        }
    case __type::TGetNextMessageInListRequest:
        {
            GetNextMessageInListRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GetNextMessageInListRequest())), __msg, __iter);
        }
    case __type::TMarkMessageReadRequest:
        {
            MarkMessageReadRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_MarkMessageReadRequest())), __msg, __iter);
        }
    case __type::TGetThreadListRequest:
        {
            GetThreadListRequest tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_GetThreadListRequest())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PSmsParent::Write(
        const GetThreadListRequest& __v,
        Message* __msg)
{
}

bool
PSmsParent::Read(
        GetThreadListRequest* __v,
        const Message* __msg,
        void** __iter)
{
    return true;
}

void
PSmsParent::Write(
        const SmsFilterData& __v,
        Message* __msg)
{
    Write((__v).startDate(), __msg);
    Write((__v).endDate(), __msg);
    Write((__v).numbers(), __msg);
    Write((__v).delivery(), __msg);
    Write((__v).read(), __msg);
}

bool
PSmsParent::Read(
        SmsFilterData* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->startDate())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->endDate())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->numbers())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->delivery())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->read())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsParent::Write(
        const SmsMessageData& __v,
        Message* __msg)
{
    Write((__v).id(), __msg);
    Write((__v).delivery(), __msg);
    Write((__v).deliveryStatus(), __msg);
    Write((__v).sender(), __msg);
    Write((__v).receiver(), __msg);
    Write((__v).body(), __msg);
    Write((__v).messageClass(), __msg);
    Write((__v).timestamp(), __msg);
    Write((__v).read(), __msg);
}

bool
PSmsParent::Read(
        SmsMessageData* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->id())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->delivery())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->deliveryStatus())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->sender())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->receiver())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->body())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->messageClass())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->timestamp())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->read())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsParent::Write(
        const GetMessageRequest& __v,
        Message* __msg)
{
    Write((__v).messageId(), __msg);
}

bool
PSmsParent::Read(
        GetMessageRequest* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->messageId())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PSmsParent::Write(
        PSmsParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PSmsParent::Read(
        PSmsParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PSms");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PSms");
        return false;
    }

    if ((PSmsMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PSms has different type");
        return false;
    }

    (*(__v)) = static_cast<PSmsParent*>(listener);
    return true;
}



} // namespace sms
} // namespace dom
} // namespace mozilla
