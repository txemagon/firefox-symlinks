//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PImageContainerParent.h"

#include "mozilla/layers/PGrallocBufferParent.h"
#include "mozilla/layers/PImageBridgeParent.h"

typedef IPC::Message Message;
typedef mozilla::ipc::RPCChannel Channel;
typedef mozilla::ipc::RPCChannel::RPCListener ChannelListener;
typedef base::ProcessHandle ProcessHandle;
typedef mozilla::ipc::AsyncChannel AsyncChannel;
typedef mozilla::ipc::SharedMemory SharedMemory;
typedef mozilla::ipc::Trigger Trigger;
typedef mozilla::ipc::ActorHandle ActorHandle;
typedef mozilla::ipc::FileDescriptor FileDescriptor;
typedef mozilla::layers::FrameMetrics FrameMetrics;
typedef mozilla::GraphicsFilterType GraphicsFilterType;
typedef mozilla::layers::MagicGrallocBufferHandle MagicGrallocBufferHandle;
typedef mozilla::layers::MaybeMagicGrallocBufferHandle MaybeMagicGrallocBufferHandle;
typedef mozilla::layers::RGBImage RGBImage;
typedef mozilla::layers::SharedImage SharedImage;
typedef mozilla::layers::SharedImageID SharedImageID;
typedef mozilla::layers::SharedTextureDescriptor SharedTextureDescriptor;
typedef mozilla::gl::SharedTextureHandle SharedTextureHandle;
typedef mozilla::gl::GLContext::SharedTextureShareType SharedTextureShareType;
typedef mozilla::ipc::Shmem Shmem;
typedef mozilla::layers::SurfaceDescriptor SurfaceDescriptor;
typedef mozilla::layers::SurfaceDescriptorD3D10 SurfaceDescriptorD3D10;
typedef mozilla::layers::SurfaceDescriptorGralloc SurfaceDescriptorGralloc;
typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
typedef mozilla::WindowsHandle WindowsHandle;
typedef mozilla::layers::YCbCrImage YCbCrImage;
typedef mozilla::layers::YUVImage YUVImage;
typedef mozilla::gfxContentType gfxContentType;
typedef mozilla::null_t null_t;
using mozilla::layers::PGrallocBufferParent;
using mozilla::layers::PImageBridgeParent;

namespace mozilla {
namespace layers {


bool
PImageContainerParent::RecvPGrallocBufferConstructor(
        PGrallocBufferParent* actor,
        const gfxIntSize& size,
        const gfxContentType& content,
        MaybeMagicGrallocBufferHandle* handle)
{
    return true;
}

bool
PImageContainerParent::Recv__delete__()
{
    return true;
}

void
PImageContainerParent::ActorDestroy(ActorDestroyReason why)
{
}

PImageContainerParent::PImageContainerParent() :
    mId(0),
    mState(PImageContainer::__Dead)
{
    MOZ_COUNT_CTOR(PImageContainerParent);
}

PImageContainerParent::~PImageContainerParent()
{
    MOZ_COUNT_DTOR(PImageContainerParent);
}

PImageBridgeParent*
PImageContainerParent::Manager() const
{
    return static_cast<PImageBridgeParent*>(mManager);
}

void
PImageContainerParent::ManagedPGrallocBufferParent(InfallibleTArray<PGrallocBufferParent*>& aArr) const
{
    aArr = mManagedPGrallocBufferParent;
}

const InfallibleTArray<PGrallocBufferParent*>&
PImageContainerParent::ManagedPGrallocBufferParent() const
{
    return mManagedPGrallocBufferParent;
}

PImageContainer::State
PImageContainerParent::state()
{
    return mState;
}

bool
PImageContainerParent::SendReturnImage(const SharedImage& image)
{
    PImageContainer::Msg_ReturnImage* __msg = new PImageContainer::Msg_ReturnImage();

    Write(image, __msg);

    (__msg)->set_routing_id(mId);



    if (mozilla::ipc::LoggingEnabled()) {
        (__msg)->Log("[PImageContainerParent] Sending ", stderr);
    }
    if ((!(PImageContainer::Transition(mState, Trigger(Trigger::Send, PImageContainer::Msg_ReturnImage__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool __sendok = (mChannel)->Send(__msg);
    return __sendok;
}

int32_t
PImageContainerParent::Register(ChannelListener* aRouted)
{
    return (mManager)->Register(aRouted);
}

int32_t
PImageContainerParent::RegisterID(
        ChannelListener* aRouted,
        int32_t aId)
{
    return (mManager)->RegisterID(aRouted, aId);
}

ChannelListener*
PImageContainerParent::Lookup(int32_t aId)
{
    return (mManager)->Lookup(aId);
}

void
PImageContainerParent::Unregister(int32_t aId)
{
    return (mManager)->Unregister(aId);
}

void
PImageContainerParent::RemoveManagee(
        int32_t aProtocolId,
        ChannelListener* aListener)
{
    switch (aProtocolId) {
    case PGrallocBufferMsgStart:
        {
            PGrallocBufferParent* actor = static_cast<PGrallocBufferParent*>(aListener);
            NS_ABORT_IF_FALSE(((mManagedPGrallocBufferParent).NoIndex) != ((mManagedPGrallocBufferParent).BinaryIndexOf(actor)), "actor not managed by this!");

            (mManagedPGrallocBufferParent).RemoveElementSorted(actor);
            DeallocPGrallocBuffer(actor);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
}

Shmem::SharedMemory*
PImageContainerParent::CreateSharedMemory(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        bool aUnsafe,
        Shmem::id_t* aId)
{
    return (mManager)->CreateSharedMemory(aSize, aType, aUnsafe, aId);
}

bool
PImageContainerParent::AdoptSharedMemory(
        Shmem::SharedMemory* segment,
        Shmem::id_t* aId)
{
    return (mManager)->AdoptSharedMemory(segment, aId);
}

Shmem::SharedMemory*
PImageContainerParent::LookupSharedMemory(Shmem::id_t aId)
{
    return (mManager)->LookupSharedMemory(aId);
}

bool
PImageContainerParent::IsTrackingSharedMemory(Shmem::SharedMemory* segment)
{
    return (mManager)->IsTrackingSharedMemory(segment);
}

bool
PImageContainerParent::DestroySharedMemory(Shmem& shmem)
{
    return (mManager)->DestroySharedMemory(shmem);
}

ProcessHandle
PImageContainerParent::OtherProcess() const
{
    return (mManager)->OtherProcess();
}

AsyncChannel*
PImageContainerParent::GetIPCChannel()
{
    return mChannel;
}

PImageContainerParent::Result
PImageContainerParent::OnMessageReceived(const Message& __msg)
{
    switch ((__msg).type()) {
    case PImageContainer::Msg_PublishImage__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PImageContainer::Msg_PublishImage");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageContainer::Msg_PublishImage*>((&(__msg))))->Log("[PImageContainerParent] Received ", stderr);
            }

            void* __iter = 0;
            SharedImage image;

            if ((!(Read((&(image)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PImageContainer::Transition(mState, Trigger(Trigger::Recv, PImageContainer::Msg_PublishImage__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvPublishImage(image)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PublishImage returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PImageContainer::Msg_Flush__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PImageContainer::Msg_Flush");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageContainer::Msg_Flush*>((&(__msg))))->Log("[PImageContainerParent] Received ", stderr);
            }

            if ((!(PImageContainer::Transition(mState, Trigger(Trigger::Recv, PImageContainer::Msg_Flush__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvFlush()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Flush returned error code");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PImageContainerParent::Result
PImageContainerParent::OnMessageReceived(
        const Message& __msg,
        Message*& __reply)
{
    switch ((__msg).type()) {
    case PImageContainer::Msg_PGrallocBufferConstructor__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PImageContainer::Msg_PGrallocBufferConstructor");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageContainer::Msg_PGrallocBufferConstructor*>((&(__msg))))->Log("[PImageContainerParent] Received ", stderr);
            }

            void* __iter = 0;
            ActorHandle __handle;
            PGrallocBufferParent* actor;
            gfxIntSize size;
            gfxContentType content;

            if ((!(Read((&(__handle)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(size)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            if ((!(Read((&(content)), (&(__msg)), (&(__iter)))))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PImageContainer::Transition(mState, Trigger(Trigger::Recv, PImageContainer::Msg_PGrallocBufferConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            MaybeMagicGrallocBufferHandle handle;
            actor = AllocPGrallocBuffer(size, content, (&(handle)));
            if ((!(actor))) {
                return MsgValueError;
            }
            (actor)->mId = RegisterID(actor, (__handle).mId);
            (actor)->mManager = this;
            (actor)->mChannel = mChannel;
            (mManagedPGrallocBufferParent).InsertElementSorted(actor);
            (actor)->mState = mozilla::layers::PGrallocBuffer::__Start;

            int32_t __id = mId;
            if ((!(RecvPGrallocBufferConstructor(actor, size, content, (&(handle)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for PGrallocBuffer returned error code");
                return MsgProcessingError;
            }
            __reply = new PImageContainer::Reply_PGrallocBufferConstructor();

            Write(handle, __reply);
            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageContainer::Reply_PGrallocBufferConstructor*>(__reply))->Log("[PImageContainerParent] Sending reply ", stderr);
            }

            return MsgProcessed;
        }
    case PImageContainer::Msg_Stop__ID:
        {
            (const_cast<Message&>(__msg)).set_name("PImageContainer::Msg_Stop");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageContainer::Msg_Stop*>((&(__msg))))->Log("[PImageContainerParent] Received ", stderr);
            }

            if ((!(PImageContainer::Transition(mState, Trigger(Trigger::Recv, PImageContainer::Msg_Stop__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            int32_t __id = mId;
            if ((!(RecvStop()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for Stop returned error code");
                return MsgProcessingError;
            }

            __reply = new PImageContainer::Reply_Stop();

            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageContainer::Reply_Stop*>(__reply))->Log("[PImageContainerParent] Sending reply ", stderr);
            }
            return MsgProcessed;
        }
    case PImageContainer::Msg___delete____ID:
        {
            (const_cast<Message&>(__msg)).set_name("PImageContainer::Msg___delete__");
            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageContainer::Msg___delete__*>((&(__msg))))->Log("[PImageContainerParent] Received ", stderr);
            }

            void* __iter = 0;
            PImageContainerParent* actor;

            if ((!(Read((&(actor)), (&(__msg)), (&(__iter)), false)))) {
                FatalError("error deserializing (better message TODO)");
                return MsgValueError;
            }
            (__msg).EndRead(__iter);
            if ((!(PImageContainer::Transition(mState, Trigger(Trigger::Recv, PImageContainer::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler for __delete__ returned error code");
                return MsgProcessingError;
            }

            int32_t __id = mId;
            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->mManager)->RemoveManagee(PImageContainerMsgStart, actor);

            __reply = new PImageContainer::Reply___delete__();

            (__reply)->set_routing_id(__id);
            (__reply)->set_sync();
            (__reply)->set_reply();

            if (mozilla::ipc::LoggingEnabled()) {
                (static_cast<const PImageContainer::Reply___delete__*>(__reply))->Log("[PImageContainerParent] Sending reply ", stderr);
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

PImageContainerParent::Result
PImageContainerParent::OnCallReceived(
        const Message& __msg,
        Message*& __reply)
{
    return MsgNotKnown;
}

void
PImageContainerParent::OnProcessingError(Result code)
{
    NS_RUNTIMEABORT("`OnProcessingError' called on non-toplevel actor");
}

int32_t
PImageContainerParent::GetProtocolTypeId()
{
    return PImageContainerMsgStart;
}

bool
PImageContainerParent::OnReplyTimeout()
{
    NS_RUNTIMEABORT("`OnReplyTimeout' called on non-toplevel actor");
    return false;
}

void
PImageContainerParent::OnChannelClose()
{
    NS_RUNTIMEABORT("`OnClose' called on non-toplevel actor");
}

void
PImageContainerParent::OnChannelError()
{
    NS_RUNTIMEABORT("`OnError' called on non-toplevel actor");
}

void
PImageContainerParent::OnChannelConnected(int32_t pid)
{
    NS_RUNTIMEABORT("'OnConnected' called on non-toplevel actor");
}

bool
PImageContainerParent::AllocShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, false, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PImageContainerParent::AllocUnsafeShmem(
        size_t aSize,
        Shmem::SharedMemory::SharedMemoryType aType,
        Shmem* aMem)
{
    Shmem::id_t aId;
    nsAutoPtr<Shmem::SharedMemory> rawmem(CreateSharedMemory(aSize, aType, true, (&(aId))));
    if ((!(rawmem))) {
        return false;
    }

    (*(aMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), (rawmem).forget(), aId);
    return true;
}

bool
PImageContainerParent::AdoptShmem(
        Shmem& aMem,
        Shmem* aOutMem)
{
    Shmem::SharedMemory* rawmem = (aMem).Segment(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    if (((!(rawmem))) || (IsTrackingSharedMemory(rawmem))) {
        NS_RUNTIMEABORT("bad Shmem");
    }

    Shmem::id_t aId;
    if ((!(AdoptSharedMemory(rawmem, (&(aId)))))) {
        return false;
    }

    (*(aOutMem)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, aId);
    return true;
}

bool
PImageContainerParent::DeallocShmem(Shmem& aMem)
{
    bool ok = DestroySharedMemory(aMem);
    (aMem).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    return ok;
}

void
PImageContainerParent::FatalError(const char* const msg) const
{
    // Virtual method to prevent inlining.
    // This give us better error reporting.
    // See bug 589371

    NS_ERROR("IPDL error:");
    NS_ERROR(msg);
    mozilla::ipc::ProtocolErrorBreakpoint(msg);

    NS_ERROR("[PImageContainerParent] killing child side as a result");

    if ((!(base::KillProcess(OtherProcess(), base::PROCESS_END_KILLED_BY_USER, false)))) {
        NS_ERROR("  may have failed to kill child!");
    }
}

void
PImageContainerParent::DestroySubtree(ActorDestroyReason why)
{
    // Unregister from our manager.
    Unregister(mId);
    mId = 1;

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PGrallocBuffer kids
        InfallibleTArray<PGrallocBufferParent*> kids(mManagedPGrallocBufferParent);
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DestroySubtree(subtreewhy);
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

void
PImageContainerParent::DeallocSubtree()
{
    {
        // Recursively deleting PGrallocBuffer kids
        InfallibleTArray<PGrallocBufferParent*>& kids = mManagedPGrallocBufferParent;
        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            (kids[i])->DeallocSubtree();
        }

        for (uint32_t i = 0; (i) < ((kids).Length()); (++(i))) {
            DeallocPGrallocBuffer(kids[i]);
        }
        (mManagedPGrallocBufferParent).Clear();
    }
}

void
PImageContainerParent::Write(
        const SurfaceDescriptor& __v,
        Message* __msg)
{
    typedef SurfaceDescriptor __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TShmem:
        {
            Write((__v).get_Shmem(), __msg);
            return;
        }
    case __type::TSurfaceDescriptorD3D10:
        {
            Write((__v).get_SurfaceDescriptorD3D10(), __msg);
            return;
        }
    case __type::TSurfaceDescriptorGralloc:
        {
            Write((__v).get_SurfaceDescriptorGralloc(), __msg);
            return;
        }
    case __type::TSurfaceDescriptorX11:
        {
            Write((__v).get_SurfaceDescriptorX11(), __msg);
            return;
        }
    case __type::TSharedTextureDescriptor:
        {
            Write((__v).get_SharedTextureDescriptor(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PImageContainerParent::Read(
        SurfaceDescriptor* __v,
        const Message* __msg,
        void** __iter)
{
    typedef SurfaceDescriptor __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TShmem:
        {
            Shmem tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_Shmem())), __msg, __iter);
        }
    case __type::TSurfaceDescriptorD3D10:
        {
            SurfaceDescriptorD3D10 tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SurfaceDescriptorD3D10())), __msg, __iter);
        }
    case __type::TSurfaceDescriptorGralloc:
        {
            SurfaceDescriptorGralloc tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SurfaceDescriptorGralloc())), __msg, __iter);
        }
    case __type::TSurfaceDescriptorX11:
        {
            SurfaceDescriptorX11 tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SurfaceDescriptorX11())), __msg, __iter);
        }
    case __type::TSharedTextureDescriptor:
        {
            SharedTextureDescriptor tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SharedTextureDescriptor())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PImageContainerParent::Write(
        const MaybeMagicGrallocBufferHandle& __v,
        Message* __msg)
{
    typedef MaybeMagicGrallocBufferHandle __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TMagicGrallocBufferHandle:
        {
            Write((__v).get_MagicGrallocBufferHandle(), __msg);
            return;
        }
    case __type::Tnull_t:
        {
            Write((__v).get_null_t(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PImageContainerParent::Read(
        MaybeMagicGrallocBufferHandle* __v,
        const Message* __msg,
        void** __iter)
{
    typedef MaybeMagicGrallocBufferHandle __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TMagicGrallocBufferHandle:
        {
            MagicGrallocBufferHandle tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_MagicGrallocBufferHandle())), __msg, __iter);
        }
    case __type::Tnull_t:
        {
            null_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_null_t())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PImageContainerParent::Write(
        Shmem& __v,
        Message* __msg)
{
    IPC::WriteParam(__msg, __v);
    (__v).RevokeRights(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    (__v).forget(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
}

bool
PImageContainerParent::Read(
        Shmem* __v,
        const Message* __msg,
        void** __iter)
{
    Shmem tmp;
    if ((!(IPC::ReadParam(__msg, __iter, (&(tmp)))))) {
        return false;
    }

    Shmem::id_t shmemid = (tmp).Id(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead());
    Shmem::SharedMemory* rawmem = LookupSharedMemory(shmemid);
    if (rawmem) {
        (*(__v)) = Shmem(Shmem::IHadBetterBeIPDLCodeCallingThis_OtherwiseIAmADoodyhead(), rawmem, shmemid);
        return true;
    }
    return false;
}

void
PImageContainerParent::Write(
        PImageContainerParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PImageContainerParent::Read(
        PImageContainerParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PImageContainer");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PImageContainer");
        return false;
    }

    if ((PImageContainerMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PImageContainer has different type");
        return false;
    }

    (*(__v)) = static_cast<PImageContainerParent*>(listener);
    return true;
}

void
PImageContainerParent::Write(
        const SharedImageID& __v,
        Message* __msg)
{
    Write((__v).id(), __msg);
}

bool
PImageContainerParent::Read(
        SharedImageID* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->id())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PImageContainerParent::Write(
        const SharedImage& __v,
        Message* __msg)
{
    typedef SharedImage __type;
    Write(int((__v).type()), __msg);

    switch ((__v).type()) {
    case __type::TSurfaceDescriptor:
        {
            Write((__v).get_SurfaceDescriptor(), __msg);
            return;
        }
    case __type::TRGBImage:
        {
            Write((__v).get_RGBImage(), __msg);
            return;
        }
    case __type::TYCbCrImage:
        {
            Write((__v).get_YCbCrImage(), __msg);
            return;
        }
    case __type::TYUVImage:
        {
            Write((__v).get_YUVImage(), __msg);
            return;
        }
    case __type::TSharedImageID:
        {
            Write((__v).get_SharedImageID(), __msg);
            return;
        }
    case __type::Tnull_t:
        {
            Write((__v).get_null_t(), __msg);
            return;
        }
    default:
        {
            NS_RUNTIMEABORT("unknown union type");
            return;
        }
    }
}

bool
PImageContainerParent::Read(
        SharedImage* __v,
        const Message* __msg,
        void** __iter)
{
    typedef SharedImage __type;
    int type;
    if ((!(Read((&(type)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }

    switch (type) {
    case __type::TSurfaceDescriptor:
        {
            SurfaceDescriptor tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SurfaceDescriptor())), __msg, __iter);
        }
    case __type::TRGBImage:
        {
            RGBImage tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_RGBImage())), __msg, __iter);
        }
    case __type::TYCbCrImage:
        {
            YCbCrImage tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_YCbCrImage())), __msg, __iter);
        }
    case __type::TYUVImage:
        {
            YUVImage tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_YUVImage())), __msg, __iter);
        }
    case __type::TSharedImageID:
        {
            SharedImageID tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_SharedImageID())), __msg, __iter);
        }
    case __type::Tnull_t:
        {
            null_t tmp;
            (*(__v)) = tmp;
            return Read((&((__v)->get_null_t())), __msg, __iter);
        }
    default:
        {
            mozilla::ipc::ProtocolErrorBreakpoint("unknown union type");
            return false;
        }
    }
}

void
PImageContainerParent::Write(
        const SharedTextureDescriptor& __v,
        Message* __msg)
{
    Write((__v).shareType(), __msg);
    Write((__v).handle(), __msg);
    Write((__v).size(), __msg);
    Write((__v).inverted(), __msg);
}

bool
PImageContainerParent::Read(
        SharedTextureDescriptor* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->shareType())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->handle())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->size())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->inverted())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PImageContainerParent::Write(
        const YCbCrImage& __v,
        Message* __msg)
{
    Write((__v).data(), __msg);
    Write((__v).offset(), __msg);
    Write((__v).picture(), __msg);
}

bool
PImageContainerParent::Read(
        YCbCrImage* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->data())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->offset())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->picture())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PImageContainerParent::Write(
        const RGBImage& __v,
        Message* __msg)
{
    Write((__v).data(), __msg);
    Write((__v).picture(), __msg);
    Write((__v).rgbFormat(), __msg);
}

bool
PImageContainerParent::Read(
        RGBImage* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->data())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->picture())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->rgbFormat())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PImageContainerParent::Write(
        const SurfaceDescriptorD3D10& __v,
        Message* __msg)
{
    Write((__v).handle(), __msg);
}

bool
PImageContainerParent::Read(
        SurfaceDescriptorD3D10* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->handle())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PImageContainerParent::Write(
        const SurfaceDescriptorGralloc& __v,
        Message* __msg)
{
    Write((__v).bufferParent(), __msg, false);
    // skipping actor field that's meaningless on this side
    Write((__v).external(), __msg);
}

bool
PImageContainerParent::Read(
        SurfaceDescriptorGralloc* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->bufferParent())), __msg, __iter, false)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    // skipping actor field that's meaningless on this side
    if ((!(Read((&((__v)->external())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PImageContainerParent::Write(
        const YUVImage& __v,
        Message* __msg)
{
    Write((__v).Ydata(), __msg);
    Write((__v).Udata(), __msg);
    Write((__v).Vdata(), __msg);
    Write((__v).picture(), __msg);
}

bool
PImageContainerParent::Read(
        YUVImage* __v,
        const Message* __msg,
        void** __iter)
{
    if ((!(Read((&((__v)->Ydata())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->Udata())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->Vdata())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if ((!(Read((&((__v)->picture())), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    return true;
}

void
PImageContainerParent::Write(
        PGrallocBufferParent* __v,
        Message* __msg,
        bool __nullable)
{
    int32_t id;
    if ((!(__v))) {
        if ((!(__nullable))) {
            NS_RUNTIMEABORT("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (__v)->mId;
        if ((1) == (id)) {
            NS_RUNTIMEABORT("actor has been |delete|d");
        }
    }

    Write(id, __msg);
}

bool
PImageContainerParent::Read(
        PGrallocBufferParent** __v,
        const Message* __msg,
        void** __iter,
        bool __nullable)
{
    int32_t id;
    if ((!(Read((&(id)), __msg, __iter)))) {
        mozilla::ipc::ProtocolErrorBreakpoint("error deserializing (better message TODO)");
        return false;
    }
    if (((1) == (id)) || (((0) == (id)) && ((!(__nullable))))) {
        mozilla::ipc::ProtocolErrorBreakpoint("bad ID for PImageContainer");
        return false;
    }

    if ((0) == (id)) {
        (*(__v)) = 0;
        return true;
    }

    ChannelListener* listener = Lookup(id);
    if ((!(listener))) {
        mozilla::ipc::ProtocolErrorBreakpoint("could not look up PGrallocBuffer");
        return false;
    }

    if ((PGrallocBufferMsgStart) != ((listener)->GetProtocolTypeId())) {
        mozilla::ipc::ProtocolErrorBreakpoint("actor that should be of type PGrallocBuffer has different type");
        return false;
    }

    (*(__v)) = static_cast<PGrallocBufferParent*>(listener);
    return true;
}



} // namespace layers
} // namespace mozilla
