//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PIndexedDBCursor.h"

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PIndexedDBCursor {

bool
Transition(
        State from,
        mozilla::ipc::Trigger trigger,
        State* next)
{
    switch (from) {
    case __Null:
    case __Error:
        if ((Msg___delete____ID) == ((trigger).mMsg)) {
            (*(next)) = __Dead;
            return true;
        }
        return (__Null) == (from);
    case __Dead:
        NS_RUNTIMEABORT("__delete__()d actor");
        return false;
    case __Dying:
        NS_RUNTIMEABORT("__delete__()d (and unexpectedly dying) actor");
        return false;
    default:
        NS_RUNTIMEABORT("corrupted actor state");
        return false;
    }
    (*(next)) = __Error;
    return false;
}

} // namespace PIndexedDBCursor
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ContinueParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
ContinueParams::ContinueParams()
{
    Init();
}

ContinueParams::~ContinueParams()
{
}

bool
ContinueParams::operator==(const ContinueParams& _o) const
{
    if ((!((key()) == ((_o).key())))) {
        return false;
    }
    if ((!((count()) == ((_o).count())))) {
        return false;
    }
    return true;
}

void
ContinueParams::Init()
{
}

void
ContinueParams::Assign(
        const Key& _key,
        const uint32_t& _count)
{
    key_ = _key;
    count_ = _count;
}

} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union CursorRequestParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace ipc {
bool
CursorRequestParams::MaybeDestroy(Type aNewType)
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TContinueParams:
        {
            (ptr_ContinueParams())->~ContinueParams__tdef();
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("not reached");
            break;
        }
    }
    return true;
}

CursorRequestParams::CursorRequestParams(const ContinueParams& aOther)
{
    new (ptr_ContinueParams()) ContinueParams(aOther);
    mType = TContinueParams;
}

CursorRequestParams::CursorRequestParams(const CursorRequestParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TContinueParams:
        {
            new (ptr_ContinueParams()) ContinueParams((aOther).get_ContinueParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

CursorRequestParams::~CursorRequestParams()
{
    MaybeDestroy(T__None);
}

CursorRequestParams&
CursorRequestParams::operator=(const ContinueParams& aRhs)
{
    if (MaybeDestroy(TContinueParams)) {
        new (ptr_ContinueParams()) ContinueParams;
    }
    (*(ptr_ContinueParams())) = aRhs;
    mType = TContinueParams;
    return (*(this));
}

CursorRequestParams&
CursorRequestParams::operator=(const CursorRequestParams& aRhs)
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TContinueParams:
        {
            if (MaybeDestroy(t)) {
                new (ptr_ContinueParams()) ContinueParams;
            }
            (*(ptr_ContinueParams())) = (aRhs).get_ContinueParams();
            break;
        }
    case T__None:
        {
            MaybeDestroy(t);
            break;
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

bool
CursorRequestParams::operator==(const ContinueParams& aRhs) const
{
    return (get_ContinueParams()) == (aRhs);
}

bool
CursorRequestParams::operator==(const CursorRequestParams& aRhs) const
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case TContinueParams:
        {
            return (get_ContinueParams()) == ((aRhs).get_ContinueParams());
        }
    default:
        {
            NS_RUNTIMEABORT("unreached");
            return false;
        }
    }
}

} // namespace ipc
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
