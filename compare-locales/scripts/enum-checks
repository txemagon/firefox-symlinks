#! /usr/bin/python
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is l10n test automation.
#
# The Initial Developer of the Original Code is
# Mozilla Foundation
# Portions created by the Initial Developer are Copyright (C) 2011
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#	Axel Hecht <l10n@mozilla.com>
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****


from optparse import OptionParser
import os.path
import codecs

from Mozilla.Paths import EnumerateApp, EnumerateSourceTreeApp
from Mozilla.Checks import getChecks
from Mozilla.Parser import getParser, Entity
from Mozilla import version

usage = 'usage: %prog [options] l10n.ini'
parser = OptionParser(usage = usage, version = "%%prog %s" % version)
parser.add_option('--source-tree',
                  dest='source_tree',
                  help='''Use independent source repos like on hg.m.o''')

(options, inis) = parser.parse_args()
if len(inis) < 1:
  parser.error('At least one l10n.ini required')

emptyEnt = Entity('', lambda v: v,
                  (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0))

covered = set()
for inipath in inis:
  if options.source_tree:
    app = EnumerateSourceTreeApp(inipath, options.source_tree, '.', [])
  else:
    app = EnumerateApp(inipath, '.', [])
  for module, reference, locales in app:
    if module in covered:
      continue
    covered.add(module)
    print module
    for ref_file in reference:
      #print ref_file.module
      checks = getChecks(ref_file)
      if not checks:
        continue
      try:
        p = getParser(ref_file.file)
      except UserWarning:
        # no comparison, XXX report?
        continue
      try:
        p.readContents(ref_file.getContents())
      except Exception, e:
        print 'ERROR', ref_file, str(e)
        continue
      for refent in p:
        for tp, pos, msg, cat in checks(refent, emptyEnt):
          print codecs.utf_8_encode('%s\t%s\t%s\t%s\t%s\t%s' % (cat, tp, ref_file.module, ref_file.file, refent.key, refent.val))[0]
